
reciever.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b64  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd0  08004cd0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd8  08004cd8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000014  08004cf4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004cf4  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f299  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d1  00000000  00000000  0002f2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  000314a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00032078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be4f  00000000  00000000  00032b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8ba  00000000  00000000  0004e9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2da1  00000000  00000000  0005d289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011002a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ac  00000000  00000000  0011007c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004c08 	.word	0x08004c08

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08004c08 	.word	0x08004c08

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <CS_Select>:
#define NRF24_CSN_PORT GPIOC
#define NRF24_CSN_PIN NRF_CSN_Pin


void CS_Select (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <CS_Select+0x18>)
 8000632:	2200      	movs	r2, #0
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0018      	movs	r0, r3
 8000638:	f001 f8d8 	bl	80017ec <HAL_GPIO_WritePin>
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	50000800 	.word	0x50000800

08000648 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <CS_UnSelect+0x18>)
 800064e:	2201      	movs	r2, #1
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	0018      	movs	r0, r3
 8000654:	f001 f8ca 	bl	80017ec <HAL_GPIO_WritePin>
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	50000800 	.word	0x50000800

08000664 <CE_Enable>:


void CE_Enable (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	0099      	lsls	r1, r3, #2
 800066c:	23a0      	movs	r3, #160	; 0xa0
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	2201      	movs	r2, #1
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f8ba 	bl	80017ec <HAL_GPIO_WritePin>
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <CE_Disable>:

void CE_Disable (void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	0099      	lsls	r1, r3, #2
 8000686:	23a0      	movs	r3, #160	; 0xa0
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	2200      	movs	r2, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f001 f8ad 	bl	80017ec <HAL_GPIO_WritePin>
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <nrf24_WriteReg>:


// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)

{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	0002      	movs	r2, r0
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	1dbb      	adds	r3, r7, #6
 80006a6:	1c0a      	adds	r2, r1, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2220      	movs	r2, #32
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	240c      	movs	r4, #12
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	701a      	strb	r2, [r3, #0]
	buf[1] = Data;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	1dba      	adds	r2, r7, #6
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	705a      	strb	r2, [r3, #1]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006c2:	f7ff ffb3 	bl	800062c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80006c6:	23fa      	movs	r3, #250	; 0xfa
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	1939      	adds	r1, r7, r4
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <nrf24_WriteReg+0x48>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	f002 f8f4 	bl	80028bc <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006d4:	f7ff ffb8 	bl	8000648 <CS_UnSelect>
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b005      	add	sp, #20
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	20000030 	.word	0x20000030

080006e4 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	210f      	movs	r1, #15
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	1c02      	adds	r2, r0, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2220      	movs	r2, #32
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	2414      	movs	r4, #20
 8000702:	193b      	adds	r3, r7, r4
 8000704:	701a      	strb	r2, [r3, #0]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000706:	f7ff ff91 	bl	800062c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800070a:	1939      	adds	r1, r7, r4
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <nrf24_WriteRegMulti+0x50>)
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	f002 f8d3 	bl	80028bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b29a      	uxth	r2, r3
 800071a:	23fa      	movs	r3, #250	; 0xfa
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	68b9      	ldr	r1, [r7, #8]
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <nrf24_WriteRegMulti+0x50>)
 8000722:	f002 f8cb 	bl	80028bc <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000726:	f7ff ff8f 	bl	8000648 <CS_UnSelect>
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b007      	add	sp, #28
 8000730:	bd90      	pop	{r4, r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	20000030 	.word	0x20000030

08000738 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	0002      	movs	r2, r0
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	701a      	strb	r2, [r3, #0]
	uint8_t data=0;
 8000744:	240f      	movs	r4, #15
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800074c:	f7ff ff6e 	bl	800062c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000750:	1df9      	adds	r1, r7, #7
 8000752:	4809      	ldr	r0, [pc, #36]	; (8000778 <nrf24_ReadReg+0x40>)
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2201      	movs	r2, #1
 8000758:	f002 f8b0 	bl	80028bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800075c:	1939      	adds	r1, r7, r4
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <nrf24_ReadReg+0x40>)
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	2201      	movs	r2, #1
 8000764:	f002 fa02 	bl	8002b6c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000768:	f7ff ff6e 	bl	8000648 <CS_UnSelect>

	return data;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	781b      	ldrb	r3, [r3, #0]
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b005      	add	sp, #20
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	20000030 	.word	0x20000030

0800077c <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	0002      	movs	r2, r0
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	701a      	strb	r2, [r3, #0]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000788:	f7ff ff50 	bl	800062c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800078c:	1df9      	adds	r1, r7, #7
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <nrfsendCmd+0x28>)
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	2201      	movs	r2, #1
 8000794:	f002 f892 	bl	80028bc <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000798:	f7ff ff56 	bl	8000648 <CS_UnSelect>
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b002      	add	sp, #8
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000030 	.word	0x20000030

080007a8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	0002      	movs	r2, r0
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	701a      	strb	r2, [r3, #0]
	if (REG == STATUS)
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	d104      	bne.n	80007c6 <nrf24_reset+0x1e>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80007bc:	2100      	movs	r1, #0
 80007be:	2007      	movs	r0, #7
 80007c0:	f7ff ff6a 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80007c4:	e08b      	b.n	80008de <nrf24_reset+0x136>
	else if (REG == FIFO_STATUS)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b17      	cmp	r3, #23
 80007cc:	d104      	bne.n	80007d8 <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80007ce:	2111      	movs	r1, #17
 80007d0:	2017      	movs	r0, #23
 80007d2:	f7ff ff61 	bl	8000698 <nrf24_WriteReg>
}
 80007d6:	e082      	b.n	80008de <nrf24_reset+0x136>
	nrf24_WriteReg(CONFIG, 0x08);
 80007d8:	2108      	movs	r1, #8
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff5c 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80007e0:	213f      	movs	r1, #63	; 0x3f
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff ff58 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80007e8:	2103      	movs	r1, #3
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff ff54 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80007f0:	2103      	movs	r1, #3
 80007f2:	2003      	movs	r0, #3
 80007f4:	f7ff ff50 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80007f8:	2103      	movs	r1, #3
 80007fa:	2004      	movs	r0, #4
 80007fc:	f7ff ff4c 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000800:	2102      	movs	r1, #2
 8000802:	2005      	movs	r0, #5
 8000804:	f7ff ff48 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000808:	210e      	movs	r1, #14
 800080a:	2006      	movs	r0, #6
 800080c:	f7ff ff44 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000810:	2100      	movs	r1, #0
 8000812:	2007      	movs	r0, #7
 8000814:	f7ff ff40 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000818:	2100      	movs	r1, #0
 800081a:	2008      	movs	r0, #8
 800081c:	f7ff ff3c 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000820:	2100      	movs	r1, #0
 8000822:	2009      	movs	r0, #9
 8000824:	f7ff ff38 	bl	8000698 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000828:	2018      	movs	r0, #24
 800082a:	183b      	adds	r3, r7, r0
 800082c:	4a2e      	ldr	r2, [pc, #184]	; (80008e8 <nrf24_reset+0x140>)
 800082e:	6811      	ldr	r1, [r2, #0]
 8000830:	6019      	str	r1, [r3, #0]
 8000832:	7912      	ldrb	r2, [r2, #4]
 8000834:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000836:	183b      	adds	r3, r7, r0
 8000838:	2205      	movs	r2, #5
 800083a:	0019      	movs	r1, r3
 800083c:	200a      	movs	r0, #10
 800083e:	f7ff ff51 	bl	80006e4 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000842:	2010      	movs	r0, #16
 8000844:	183b      	adds	r3, r7, r0
 8000846:	4a29      	ldr	r2, [pc, #164]	; (80008ec <nrf24_reset+0x144>)
 8000848:	6811      	ldr	r1, [r2, #0]
 800084a:	6019      	str	r1, [r3, #0]
 800084c:	7912      	ldrb	r2, [r2, #4]
 800084e:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000850:	183b      	adds	r3, r7, r0
 8000852:	2205      	movs	r2, #5
 8000854:	0019      	movs	r1, r3
 8000856:	200b      	movs	r0, #11
 8000858:	f7ff ff44 	bl	80006e4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800085c:	21c3      	movs	r1, #195	; 0xc3
 800085e:	200c      	movs	r0, #12
 8000860:	f7ff ff1a 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000864:	21c4      	movs	r1, #196	; 0xc4
 8000866:	200d      	movs	r0, #13
 8000868:	f7ff ff16 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800086c:	21c5      	movs	r1, #197	; 0xc5
 800086e:	200e      	movs	r0, #14
 8000870:	f7ff ff12 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000874:	21c6      	movs	r1, #198	; 0xc6
 8000876:	200f      	movs	r0, #15
 8000878:	f7ff ff0e 	bl	8000698 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800087c:	2008      	movs	r0, #8
 800087e:	183b      	adds	r3, r7, r0
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <nrf24_reset+0x140>)
 8000882:	6811      	ldr	r1, [r2, #0]
 8000884:	6019      	str	r1, [r3, #0]
 8000886:	7912      	ldrb	r2, [r2, #4]
 8000888:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800088a:	183b      	adds	r3, r7, r0
 800088c:	2205      	movs	r2, #5
 800088e:	0019      	movs	r1, r3
 8000890:	2010      	movs	r0, #16
 8000892:	f7ff ff27 	bl	80006e4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000896:	2100      	movs	r1, #0
 8000898:	2011      	movs	r0, #17
 800089a:	f7ff fefd 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800089e:	2100      	movs	r1, #0
 80008a0:	2012      	movs	r0, #18
 80008a2:	f7ff fef9 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80008a6:	2100      	movs	r1, #0
 80008a8:	2013      	movs	r0, #19
 80008aa:	f7ff fef5 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2014      	movs	r0, #20
 80008b2:	f7ff fef1 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2015      	movs	r0, #21
 80008ba:	f7ff feed 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	2016      	movs	r0, #22
 80008c2:	f7ff fee9 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80008c6:	2111      	movs	r1, #17
 80008c8:	2017      	movs	r0, #23
 80008ca:	f7ff fee5 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	201c      	movs	r0, #28
 80008d2:	f7ff fee1 	bl	8000698 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	201d      	movs	r0, #29
 80008da:	f7ff fedd 	bl	8000698 <nrf24_WriteReg>
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b008      	add	sp, #32
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	08004c20 	.word	0x08004c20
 80008ec:	08004c28 	.word	0x08004c28

080008f0 <NRF24_Init>:




void NRF24_Init (void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80008f4:	f7ff fec3 	bl	800067e <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff ff55 	bl	80007a8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fec9 	bl	8000698 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000906:	2100      	movs	r1, #0
 8000908:	2001      	movs	r0, #1
 800090a:	f7ff fec5 	bl	8000698 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800090e:	2100      	movs	r1, #0
 8000910:	2002      	movs	r0, #2
 8000912:	f7ff fec1 	bl	8000698 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000916:	2103      	movs	r1, #3
 8000918:	2003      	movs	r0, #3
 800091a:	f7ff febd 	bl	8000698 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800091e:	2100      	movs	r1, #0
 8000920:	2004      	movs	r0, #4
 8000922:	f7ff feb9 	bl	8000698 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000926:	2100      	movs	r1, #0
 8000928:	2005      	movs	r0, #5
 800092a:	f7ff feb5 	bl	8000698 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800092e:	210e      	movs	r1, #14
 8000930:	2006      	movs	r0, #6
 8000932:	f7ff feb1 	bl	8000698 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000936:	f7ff fe95 	bl	8000664 <CE_Enable>

}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000940:	b5b0      	push	{r4, r5, r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	000a      	movs	r2, r1
 800094a:	1cfb      	adds	r3, r7, #3
 800094c:	701a      	strb	r2, [r3, #0]
	// disable the chip before configuring the device
	CE_Disable();
 800094e:	f7ff fe96 	bl	800067e <CE_Disable>

	nrf24_reset (STATUS);
 8000952:	2007      	movs	r0, #7
 8000954:	f7ff ff28 	bl	80007a8 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000958:	1cfb      	adds	r3, r7, #3
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	0019      	movs	r1, r3
 800095e:	2005      	movs	r0, #5
 8000960:	f7ff fe9a 	bl	8000698 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8000964:	250f      	movs	r5, #15
 8000966:	197c      	adds	r4, r7, r5
 8000968:	2002      	movs	r0, #2
 800096a:	f7ff fee5 	bl	8000738 <nrf24_ReadReg>
 800096e:	0003      	movs	r3, r0
 8000970:	7023      	strb	r3, [r4, #0]
	en_rxaddr = en_rxaddr | (1<<2);
 8000972:	0028      	movs	r0, r5
 8000974:	183b      	adds	r3, r7, r0
 8000976:	183a      	adds	r2, r7, r0
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	2104      	movs	r1, #4
 800097c:	430a      	orrs	r2, r1
 800097e:	701a      	strb	r2, [r3, #0]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000980:	183b      	adds	r3, r7, r0
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	0019      	movs	r1, r3
 8000986:	2002      	movs	r0, #2
 8000988:	f7ff fe86 	bl	8000698 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2205      	movs	r2, #5
 8000990:	0019      	movs	r1, r3
 8000992:	200b      	movs	r0, #11
 8000994:	f7ff fea6 	bl	80006e4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000998:	21ee      	movs	r1, #238	; 0xee
 800099a:	200c      	movs	r0, #12
 800099c:	f7ff fe7c 	bl	8000698 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80009a0:	2120      	movs	r1, #32
 80009a2:	2013      	movs	r0, #19
 80009a4:	f7ff fe78 	bl	8000698 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80009a8:	250e      	movs	r5, #14
 80009aa:	197c      	adds	r4, r7, r5
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff fec3 	bl	8000738 <nrf24_ReadReg>
 80009b2:	0003      	movs	r3, r0
 80009b4:	7023      	strb	r3, [r4, #0]
	config = config | (1<<1) | (1<<0);
 80009b6:	0028      	movs	r0, r5
 80009b8:	183b      	adds	r3, r7, r0
 80009ba:	183a      	adds	r2, r7, r0
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	2103      	movs	r1, #3
 80009c0:	430a      	orrs	r2, r1
 80009c2:	701a      	strb	r2, [r3, #0]
	nrf24_WriteReg (CONFIG, config);
 80009c4:	183b      	adds	r3, r7, r0
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	0019      	movs	r1, r3
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fe64 	bl	8000698 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80009d0:	f7ff fe48 	bl	8000664 <CE_Enable>
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b004      	add	sp, #16
 80009da:	bdb0      	pop	{r4, r5, r7, pc}

080009dc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80009e4:	250f      	movs	r5, #15
 80009e6:	197c      	adds	r4, r7, r5
 80009e8:	2007      	movs	r0, #7
 80009ea:	f7ff fea5 	bl	8000738 <nrf24_ReadReg>
 80009ee:	0003      	movs	r3, r0
 80009f0:	7023      	strb	r3, [r4, #0]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80009f2:	0029      	movs	r1, r5
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2240      	movs	r2, #64	; 0x40
 80009fa:	4013      	ands	r3, r2
 80009fc:	d00b      	beq.n	8000a16 <isDataAvailable+0x3a>
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	4013      	ands	r3, r2
 8000a08:	d005      	beq.n	8000a16 <isDataAvailable+0x3a>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	2007      	movs	r0, #7
 8000a0e:	f7ff fe43 	bl	8000698 <nrf24_WriteReg>

		return 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <isDataAvailable+0x3c>
	}

	return 0;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b004      	add	sp, #16
 8000a1e:	bdb0      	pop	{r4, r5, r7, pc}

08000a20 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000a28:	240f      	movs	r4, #15
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]

	// select the device
	CS_Select();
 8000a30:	f7ff fdfc 	bl	800062c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2261      	movs	r2, #97	; 0x61
 8000a38:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000a3a:	1939      	adds	r1, r7, r4
 8000a3c:	480e      	ldr	r0, [pc, #56]	; (8000a78 <NRF24_Receive+0x58>)
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	2201      	movs	r2, #1
 8000a42:	f001 ff3b 	bl	80028bc <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000a46:	23fa      	movs	r3, #250	; 0xfa
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	480a      	ldr	r0, [pc, #40]	; (8000a78 <NRF24_Receive+0x58>)
 8000a4e:	2220      	movs	r2, #32
 8000a50:	f002 f88c 	bl	8002b6c <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000a54:	f7ff fdf8 	bl	8000648 <CS_UnSelect>

	HAL_Delay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 fb7b 	bl	8001154 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	22e2      	movs	r2, #226	; 0xe2
 8000a62:	701a      	strb	r2, [r3, #0]
	nrfsendCmd(cmdtosend);
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fe87 	bl	800077c <nrfsendCmd>
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b005      	add	sp, #20
 8000a74:	bd90      	pop	{r4, r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	20000030 	.word	0x20000030

08000a7c <serialWrite>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void serialWrite(char data[]){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) data, strlen(data), 10);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fb3c 	bl	8000104 <strlen>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <serialWrite+0x34>)
 8000a94:	230a      	movs	r3, #10
 8000a96:	f002 fdb1 	bl	80035fc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)"\n",1,10);
 8000a9a:	4906      	ldr	r1, [pc, #24]	; (8000ab4 <serialWrite+0x38>)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <serialWrite+0x34>)
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f002 fdab 	bl	80035fc <HAL_UART_Transmit>
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000094 	.word	0x20000094
 8000ab4:	08004c30 	.word	0x08004c30

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abc:	f000 fac4 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac0:	f000 f82e 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac4:	f000 f900 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ac8:	f000 f8b0 	bl	8000c2c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000acc:	f000 f870 	bl	8000bb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 8000ad0:	f7ff ff0e 	bl	80008f0 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <main+0x58>)
 8000ad6:	210a      	movs	r1, #10
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff31 	bl	8000940 <NRF24_RxMode>

  serialWrite("Start");
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <main+0x5c>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff ffcb 	bl	8000a7c <serialWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (isDataAvailable(1) == 1)
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff ff78 	bl	80009dc <isDataAvailable>
 8000aec:	0003      	movs	r3, r0
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d107      	bne.n	8000b02 <main+0x4a>
	 	  {
	 		  NRF24_Receive(RxData);
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <main+0x60>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff ff93 	bl	8000a20 <NRF24_Receive>
	 		  serialWrite("Data");
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <main+0x64>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff ffbd 	bl	8000a7c <serialWrite>
	 		  //serialWrite((char *)RxData);
	 	  }
	  HAL_Delay(500);
 8000b02:	23fa      	movs	r3, #250	; 0xfa
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fb24 	bl	8001154 <HAL_Delay>
	  if (isDataAvailable(1) == 1)
 8000b0c:	e7eb      	b.n	8000ae6 <main+0x2e>
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	20000000 	.word	0x20000000
 8000b14:	08004c34 	.word	0x08004c34
 8000b18:	20000124 	.word	0x20000124
 8000b1c:	08004c3c 	.word	0x08004c3c

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b095      	sub	sp, #84	; 0x54
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	2414      	movs	r4, #20
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	233c      	movs	r3, #60	; 0x3c
 8000b2e:	001a      	movs	r2, r3
 8000b30:	2100      	movs	r1, #0
 8000b32:	f004 f861 	bl	8004bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f004 f85a 	bl	8004bf8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fe6d 	bl	8001828 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2202      	movs	r2, #2
 8000b52:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	0052      	lsls	r2, r2, #1
 8000b5a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2240      	movs	r2, #64	; 0x40
 8000b66:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fea5 	bl	80018c0 <HAL_RCC_OscConfig>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b7a:	f000 f927 	bl	8000dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2100      	movs	r1, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 f9f0 	bl	8001f80 <HAL_RCC_ClockConfig>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ba4:	f000 f912 	bl	8000dcc <Error_Handler>
  }
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b015      	add	sp, #84	; 0x54
 8000bae:	bd90      	pop	{r4, r7, pc}

08000bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <MX_SPI1_Init+0x78>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bbc:	2282      	movs	r2, #130	; 0x82
 8000bbe:	0052      	lsls	r2, r2, #1
 8000bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bca:	22e0      	movs	r2, #224	; 0xe0
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000be6:	2208      	movs	r2, #8
 8000be8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bfe:	2207      	movs	r2, #7
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fd9b 	bl	800274c <HAL_SPI_Init>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 f8d7 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000030 	.word	0x20000030
 8000c28:	40013000 	.word	0x40013000

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c32:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <MX_USART2_UART_Init+0x98>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c38:	22e1      	movs	r2, #225	; 0xe1
 8000c3a:	0252      	lsls	r2, r2, #9
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f002 fc6a 	bl	8003550 <HAL_UART_Init>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c80:	f000 f8a4 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c86:	2100      	movs	r1, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f003 feb1 	bl	80049f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c92:	f000 f89b 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f003 fee8 	bl	8004a70 <HAL_UARTEx_SetRxFifoThreshold>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca4:	f000 f892 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <MX_USART2_UART_Init+0x94>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f003 fe66 	bl	800497c <HAL_UARTEx_DisableFifoMode>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb4:	f000 f88a 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000094 	.word	0x20000094
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	240c      	movs	r4, #12
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	2314      	movs	r3, #20
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f003 ff8d 	bl	8004bf8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b39      	ldr	r3, [pc, #228]	; (8000dc4 <MX_GPIO_Init+0xfc>)
 8000ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce2:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <MX_GPIO_Init+0xfc>)
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cea:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <MX_GPIO_Init+0xfc>)
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	2204      	movs	r2, #4
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf6:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <MX_GPIO_Init+0xfc>)
 8000cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cfa:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <MX_GPIO_Init+0xfc>)
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
 8000d02:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <MX_GPIO_Init+0xfc>)
 8000d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d06:	2220      	movs	r2, #32
 8000d08:	4013      	ands	r3, r2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <MX_GPIO_Init+0xfc>)
 8000d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <MX_GPIO_Init+0xfc>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <MX_GPIO_Init+0xfc>)
 8000d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4013      	ands	r3, r2
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000d26:	2388      	movs	r3, #136	; 0x88
 8000d28:	0099      	lsls	r1, r3, #2
 8000d2a:	23a0      	movs	r3, #160	; 0xa0
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	2200      	movs	r2, #0
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 fd5b 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <MX_GPIO_Init+0x100>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 fd55 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2220      	movs	r2, #32
 8000d46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	2202      	movs	r2, #2
 8000d58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	193a      	adds	r2, r7, r4
 8000d5c:	23a0      	movs	r3, #160	; 0xa0
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	0011      	movs	r1, r2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 fbd6 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000d68:	0021      	movs	r1, r4
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	000c      	movs	r4, r1
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2201      	movs	r2, #1
 8000d78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000d86:	193a      	adds	r2, r7, r4
 8000d88:	23a0      	movs	r3, #160	; 0xa0
 8000d8a:	05db      	lsls	r3, r3, #23
 8000d8c:	0011      	movs	r1, r2
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 fbc0 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000d94:	0021      	movs	r1, r4
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2201      	movs	r2, #1
 8000da0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <MX_GPIO_Init+0x100>)
 8000db2:	0019      	movs	r1, r3
 8000db4:	0010      	movs	r0, r2
 8000db6:	f000 fbad 	bl	8001514 <HAL_GPIO_Init>

}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b009      	add	sp, #36	; 0x24
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	50000800 	.word	0x50000800

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  serialWrite("err");
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <Error_Handler+0x1c>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fe50 	bl	8000a7c <serialWrite>
	  HAL_Delay(1000);
 8000ddc:	23fa      	movs	r3, #250	; 0xfa
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 f9b7 	bl	8001154 <HAL_Delay>
	  serialWrite("err");
 8000de6:	e7f5      	b.n	8000dd4 <Error_Handler+0x8>
 8000de8:	08004c44 	.word	0x08004c44

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	2201      	movs	r2, #1
 8000e04:	4013      	ands	r3, r2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	0549      	lsls	r1, r1, #21
 8000e14:	430a      	orrs	r2, r1
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	4013      	ands	r3, r2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000e26:	23c0      	movs	r3, #192	; 0xc0
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 f9b6 	bl	800119c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b08b      	sub	sp, #44	; 0x2c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	2414      	movs	r4, #20
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f003 fed2 	bl	8004bf8 <memset>
  if(hspi->Instance==SPI1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <HAL_SPI_MspInit+0x8c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d130      	bne.n	8000ec0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0149      	lsls	r1, r1, #5
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	015b      	lsls	r3, r3, #5
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	430a      	orrs	r2, r1
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000e92:	0021      	movs	r1, r4
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	22c2      	movs	r2, #194	; 0xc2
 8000e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	187a      	adds	r2, r7, r1
 8000eb4:	23a0      	movs	r3, #160	; 0xa0
 8000eb6:	05db      	lsls	r3, r3, #23
 8000eb8:	0011      	movs	r1, r2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fb2a 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b00b      	add	sp, #44	; 0x2c
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b09d      	sub	sp, #116	; 0x74
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	235c      	movs	r3, #92	; 0x5c
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f003 fe88 	bl	8004bf8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	2410      	movs	r4, #16
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	0018      	movs	r0, r3
 8000eee:	234c      	movs	r3, #76	; 0x4c
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f003 fe80 	bl	8004bf8 <memset>
  if(huart->Instance==USART2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <HAL_UART_MspInit+0xc8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d146      	bne.n	8000f90 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2202      	movs	r2, #2
 8000f06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 f9df 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f1a:	f7ff ff57 	bl	8000dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_UART_MspInit+0xcc>)
 8000f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_UART_MspInit+0xcc>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0289      	lsls	r1, r1, #10
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_UART_MspInit+0xcc>)
 8000f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	029b      	lsls	r3, r3, #10
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_UART_MspInit+0xcc>)
 8000f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_UART_MspInit+0xcc>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	430a      	orrs	r2, r1
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_UART_MspInit+0xcc>)
 8000f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f52:	215c      	movs	r1, #92	; 0x5c
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2201      	movs	r2, #1
 8000f70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	187a      	adds	r2, r7, r1
 8000f74:	23a0      	movs	r3, #160	; 0xa0
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 faca 	bl	8001514 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	201c      	movs	r0, #28
 8000f86:	f000 f9cb 	bl	8001320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000f8a:	201c      	movs	r0, #28
 8000f8c:	f000 f9dd 	bl	800134a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b01d      	add	sp, #116	; 0x74
 8000f96:	bd90      	pop	{r4, r7, pc}
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f8aa 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <USART2_LPUART2_IRQHandler+0x14>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f002 fbbc 	bl	8003754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	20000094 	.word	0x20000094

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ff6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff8:	f7ff fff6 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LoopForever+0xe>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <LoopForever+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001022:	f003 fdc5 	bl	8004bb0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001026:	f7ff fd47 	bl	8000ab8 <main>

0800102a <LoopForever>:

LoopForever:
  b LoopForever
 800102a:	e7fe      	b.n	800102a <LoopForever>
  ldr   r0, =_estack
 800102c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001038:	08004ce0 	.word	0x08004ce0
  ldr r2, =_sbss
 800103c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001040:	20000148 	.word	0x20000148

08001044 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_COMP_IRQHandler>
	...

08001048 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_Init+0x3c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Init+0x3c>)
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	0049      	lsls	r1, r1, #1
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f810 	bl	8001088 <HAL_InitTick>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d003      	beq.n	8001074 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e001      	b.n	8001078 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff feba 	bl	8000dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001078:	1dfb      	adds	r3, r7, #7
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	230f      	movs	r3, #15
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_InitTick+0x88>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d02b      	beq.n	80010f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_InitTick+0x8c>)
 80010a2:	681c      	ldr	r4, [r3, #0]
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_InitTick+0x88>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	0019      	movs	r1, r3
 80010aa:	23fa      	movs	r3, #250	; 0xfa
 80010ac:	0098      	lsls	r0, r3, #2
 80010ae:	f7ff f831 	bl	8000114 <__udivsi3>
 80010b2:	0003      	movs	r3, r0
 80010b4:	0019      	movs	r1, r3
 80010b6:	0020      	movs	r0, r4
 80010b8:	f7ff f82c 	bl	8000114 <__udivsi3>
 80010bc:	0003      	movs	r3, r0
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 f953 	bl	800136a <HAL_SYSTICK_Config>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d112      	bne.n	80010ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d80a      	bhi.n	80010e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	2301      	movs	r3, #1
 80010d2:	425b      	negs	r3, r3
 80010d4:	2200      	movs	r2, #0
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 f922 	bl	8001320 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_InitTick+0x90>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e00d      	b.n	8001100 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010e4:	230f      	movs	r3, #15
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e008      	b.n	8001100 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ee:	230f      	movs	r3, #15
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e003      	b.n	8001100 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b005      	add	sp, #20
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	20000010 	.word	0x20000010
 8001114:	20000008 	.word	0x20000008
 8001118:	2000000c 	.word	0x2000000c

0800111c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x1c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	001a      	movs	r2, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x20>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	18d2      	adds	r2, r2, r3
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_IncTick+0x20>)
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	20000010 	.word	0x20000010
 800113c:	20000144 	.word	0x20000144

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <HAL_GetTick+0x10>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	20000144 	.word	0x20000144

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff fff0 	bl	8001140 <HAL_GetTick>
 8001160:	0003      	movs	r3, r0
 8001162:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	001a      	movs	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	189b      	adds	r3, r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	f7ff ffe0 	bl	8001140 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b004      	add	sp, #16
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000010 	.word	0x20000010

0800119c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	0019      	movs	r1, r3
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	40010000 	.word	0x40010000
 80011c4:	fffff9ff 	.word	0xfffff9ff

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	0002      	movs	r2, r0
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b7f      	cmp	r3, #127	; 0x7f
 80011da:	d809      	bhi.n	80011f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	231f      	movs	r3, #31
 80011e4:	401a      	ands	r2, r3
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_EnableIRQ+0x30>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	4091      	lsls	r1, r2
 80011ec:	000a      	movs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b7f      	cmp	r3, #127	; 0x7f
 8001210:	d828      	bhi.n	8001264 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001212:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <__NVIC_SetPriority+0xd4>)
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b25b      	sxtb	r3, r3
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	33c0      	adds	r3, #192	; 0xc0
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	589b      	ldr	r3, [r3, r2]
 8001222:	1dfa      	adds	r2, r7, #7
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	0011      	movs	r1, r2
 8001228:	2203      	movs	r2, #3
 800122a:	400a      	ands	r2, r1
 800122c:	00d2      	lsls	r2, r2, #3
 800122e:	21ff      	movs	r1, #255	; 0xff
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	43d2      	mvns	r2, r2
 8001236:	401a      	ands	r2, r3
 8001238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	22ff      	movs	r2, #255	; 0xff
 8001240:	401a      	ands	r2, r3
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	2303      	movs	r3, #3
 800124a:	4003      	ands	r3, r0
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001250:	481f      	ldr	r0, [pc, #124]	; (80012d0 <__NVIC_SetPriority+0xd4>)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b25b      	sxtb	r3, r3
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	430a      	orrs	r2, r1
 800125c:	33c0      	adds	r3, #192	; 0xc0
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001262:	e031      	b.n	80012c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <__NVIC_SetPriority+0xd8>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0019      	movs	r1, r3
 800126c:	230f      	movs	r3, #15
 800126e:	400b      	ands	r3, r1
 8001270:	3b08      	subs	r3, #8
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3306      	adds	r3, #6
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	3304      	adds	r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	1dfa      	adds	r2, r7, #7
 8001280:	7812      	ldrb	r2, [r2, #0]
 8001282:	0011      	movs	r1, r2
 8001284:	2203      	movs	r2, #3
 8001286:	400a      	ands	r2, r1
 8001288:	00d2      	lsls	r2, r2, #3
 800128a:	21ff      	movs	r1, #255	; 0xff
 800128c:	4091      	lsls	r1, r2
 800128e:	000a      	movs	r2, r1
 8001290:	43d2      	mvns	r2, r2
 8001292:	401a      	ands	r2, r3
 8001294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	401a      	ands	r2, r3
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	0018      	movs	r0, r3
 80012a4:	2303      	movs	r3, #3
 80012a6:	4003      	ands	r3, r0
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <__NVIC_SetPriority+0xd8>)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	001c      	movs	r4, r3
 80012b4:	230f      	movs	r3, #15
 80012b6:	4023      	ands	r3, r4
 80012b8:	3b08      	subs	r3, #8
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	430a      	orrs	r2, r1
 80012be:	3306      	adds	r3, #6
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	18c3      	adds	r3, r0, r3
 80012c4:	3304      	adds	r3, #4
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b003      	add	sp, #12
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	045b      	lsls	r3, r3, #17
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d301      	bcc.n	80012f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ec:	2301      	movs	r3, #1
 80012ee:	e010      	b.n	8001312 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <SysTick_Config+0x44>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	3a01      	subs	r2, #1
 80012f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f8:	2301      	movs	r3, #1
 80012fa:	425b      	negs	r3, r3
 80012fc:	2103      	movs	r1, #3
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff ff7c 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x44>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x44>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	210f      	movs	r1, #15
 800132c:	187b      	adds	r3, r7, r1
 800132e:	1c02      	adds	r2, r0, #0
 8001330:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	187b      	adds	r3, r7, r1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b25b      	sxtb	r3, r3
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	0002      	movs	r2, r0
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff ff33 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ffaf 	bl	80012d8 <SysTick_Config>
 800137a:	0003      	movs	r3, r0
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e04f      	b.n	8001436 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2225      	movs	r2, #37	; 0x25
 800139a:	5c9b      	ldrb	r3, [r3, r2]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d008      	beq.n	80013b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2204      	movs	r2, #4
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2224      	movs	r2, #36	; 0x24
 80013ac:	2100      	movs	r1, #0
 80013ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e040      	b.n	8001436 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	210e      	movs	r1, #14
 80013c0:	438a      	bics	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	491c      	ldr	r1, [pc, #112]	; (8001440 <HAL_DMA_Abort+0xbc>)
 80013d0:	400a      	ands	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2101      	movs	r1, #1
 80013e0:	438a      	bics	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	221c      	movs	r2, #28
 80013ea:	401a      	ands	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	2101      	movs	r1, #1
 80013f2:	4091      	lsls	r1, r2
 80013f4:	000a      	movs	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001400:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00c      	beq.n	8001424 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001414:	490a      	ldr	r1, [pc, #40]	; (8001440 <HAL_DMA_Abort+0xbc>)
 8001416:	400a      	ands	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001422:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2225      	movs	r2, #37	; 0x25
 8001428:	2101      	movs	r1, #1
 800142a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	fffffeff 	.word	0xfffffeff

08001444 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800144c:	210f      	movs	r1, #15
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2225      	movs	r2, #37	; 0x25
 8001458:	5c9b      	ldrb	r3, [r3, r2]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d006      	beq.n	800146e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2204      	movs	r2, #4
 8001464:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e048      	b.n	8001500 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	210e      	movs	r1, #14
 800147a:	438a      	bics	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	438a      	bics	r2, r1
 800148c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001498:	491d      	ldr	r1, [pc, #116]	; (8001510 <HAL_DMA_Abort_IT+0xcc>)
 800149a:	400a      	ands	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	221c      	movs	r2, #28
 80014a4:	401a      	ands	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	2101      	movs	r1, #1
 80014ac:	4091      	lsls	r1, r2
 80014ae:	000a      	movs	r2, r1
 80014b0:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00c      	beq.n	80014de <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ce:	4910      	ldr	r1, [pc, #64]	; (8001510 <HAL_DMA_Abort_IT+0xcc>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2225      	movs	r2, #37	; 0x25
 80014e2:	2101      	movs	r1, #1
 80014e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2224      	movs	r2, #36	; 0x24
 80014ea:	2100      	movs	r1, #0
 80014ec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d004      	beq.n	8001500 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	0010      	movs	r0, r2
 80014fe:	4798      	blx	r3
    }
  }
  return status;
 8001500:	230f      	movs	r3, #15
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	781b      	ldrb	r3, [r3, #0]
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	fffffeff 	.word	0xfffffeff

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001522:	e14d      	b.n	80017c0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2101      	movs	r1, #1
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4091      	lsls	r1, r2
 800152e:	000a      	movs	r2, r1
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d100      	bne.n	800153c <HAL_GPIO_Init+0x28>
 800153a:	e13e      	b.n	80017ba <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2203      	movs	r2, #3
 8001542:	4013      	ands	r3, r2
 8001544:	2b01      	cmp	r3, #1
 8001546:	d005      	beq.n	8001554 <HAL_GPIO_Init+0x40>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2203      	movs	r2, #3
 800154e:	4013      	ands	r3, r2
 8001550:	2b02      	cmp	r3, #2
 8001552:	d130      	bne.n	80015b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	409a      	lsls	r2, r3
 8001562:	0013      	movs	r3, r2
 8001564:	43da      	mvns	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	409a      	lsls	r2, r3
 8001576:	0013      	movs	r3, r2
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800158a:	2201      	movs	r2, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	43da      	mvns	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	2201      	movs	r2, #1
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2203      	movs	r2, #3
 80015bc:	4013      	ands	r3, r2
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d017      	beq.n	80015f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	43da      	mvns	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2203      	movs	r2, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d123      	bne.n	8001646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	58d3      	ldr	r3, [r2, r3]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2207      	movs	r2, #7
 8001610:	4013      	ands	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2107      	movs	r1, #7
 800162a:	400b      	ands	r3, r1
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	401a      	ands	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	23c0      	movs	r3, #192	; 0xc0
 8001680:	029b      	lsls	r3, r3, #10
 8001682:	4013      	ands	r3, r2
 8001684:	d100      	bne.n	8001688 <HAL_GPIO_Init+0x174>
 8001686:	e098      	b.n	80017ba <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001688:	4a53      	ldr	r2, [pc, #332]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3318      	adds	r3, #24
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	589b      	ldr	r3, [r3, r2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2203      	movs	r2, #3
 800169a:	4013      	ands	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	220f      	movs	r2, #15
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	43da      	mvns	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	23a0      	movs	r3, #160	; 0xa0
 80016b0:	05db      	lsls	r3, r3, #23
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x1d6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a48      	ldr	r2, [pc, #288]	; (80017dc <HAL_GPIO_Init+0x2c8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x1d2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <HAL_GPIO_Init+0x2cc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x1ce>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a46      	ldr	r2, [pc, #280]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x1ca>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a45      	ldr	r2, [pc, #276]	; (80017e8 <HAL_GPIO_Init+0x2d4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x1c6>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x1d8>
 80016da:	2305      	movs	r3, #5
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x1d8>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x1d8>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x1d8>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x1d8>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	2103      	movs	r1, #3
 80016f0:	400a      	ands	r2, r1
 80016f2:	00d2      	lsls	r2, r2, #3
 80016f4:	4093      	lsls	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016fc:	4936      	ldr	r1, [pc, #216]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3318      	adds	r3, #24
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170a:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	035b      	lsls	r3, r3, #13
 8001722:	4013      	ands	r3, r2
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43da      	mvns	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	039b      	lsls	r3, r3, #14
 800174c:	4013      	ands	r3, r2
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800175e:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 8001760:	2384      	movs	r3, #132	; 0x84
 8001762:	58d3      	ldr	r3, [r2, r3]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	43da      	mvns	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	029b      	lsls	r3, r3, #10
 8001778:	4013      	ands	r3, r2
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001784:	4914      	ldr	r1, [pc, #80]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 8001786:	2284      	movs	r2, #132	; 0x84
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	58d3      	ldr	r3, [r2, r3]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	025b      	lsls	r3, r3, #9
 80017a6:	4013      	ands	r3, r2
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b2:	4909      	ldr	r1, [pc, #36]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	40da      	lsrs	r2, r3
 80017c8:	1e13      	subs	r3, r2, #0
 80017ca:	d000      	beq.n	80017ce <HAL_GPIO_Init+0x2ba>
 80017cc:	e6aa      	b.n	8001524 <HAL_GPIO_Init+0x10>
  }
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b006      	add	sp, #24
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021800 	.word	0x40021800
 80017dc:	50000400 	.word	0x50000400
 80017e0:	50000800 	.word	0x50000800
 80017e4:	50000c00 	.word	0x50000c00
 80017e8:	50001000 	.word	0x50001000

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	0008      	movs	r0, r1
 80017f6:	0011      	movs	r1, r2
 80017f8:	1cbb      	adds	r3, r7, #2
 80017fa:	1c02      	adds	r2, r0, #0
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	1c7b      	adds	r3, r7, #1
 8001800:	1c0a      	adds	r2, r1, #0
 8001802:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001804:	1c7b      	adds	r3, r7, #1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180c:	1cbb      	adds	r3, r7, #2
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001816:	1cbb      	adds	r3, r7, #2
 8001818:	881a      	ldrh	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001836:	4013      	ands	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d11f      	bne.n	800188c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	0013      	movs	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	189b      	adds	r3, r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4912      	ldr	r1, [pc, #72]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800185a:	0018      	movs	r0, r3
 800185c:	f7fe fc5a 	bl	8000114 <__udivsi3>
 8001860:	0003      	movs	r3, r0
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001866:	e008      	b.n	800187a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3b01      	subs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e001      	b.n	800187a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e009      	b.n	800188e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	401a      	ands	r2, r3
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	429a      	cmp	r2, r3
 800188a:	d0ed      	beq.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	40007000 	.word	0x40007000
 800189c:	fffff9ff 	.word	0xfffff9ff
 80018a0:	20000008 	.word	0x20000008
 80018a4:	000f4240 	.word	0x000f4240

080018a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	23e0      	movs	r3, #224	; 0xe0
 80018b2:	01db      	lsls	r3, r3, #7
 80018b4:	4013      	ands	r3, r2
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f000 fb50 	bl	8001f74 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_RCC_OscConfig+0x20>
 80018de:	e07c      	b.n	80019da <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e0:	4bc3      	ldr	r3, [pc, #780]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2238      	movs	r2, #56	; 0x38
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ea:	4bc1      	ldr	r3, [pc, #772]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2203      	movs	r2, #3
 80018f0:	4013      	ands	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d102      	bne.n	8001900 <HAL_RCC_OscConfig+0x40>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d002      	beq.n	8001906 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b08      	cmp	r3, #8
 8001904:	d10b      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001906:	4bba      	ldr	r3, [pc, #744]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	029b      	lsls	r3, r3, #10
 800190e:	4013      	ands	r3, r2
 8001910:	d062      	beq.n	80019d8 <HAL_RCC_OscConfig+0x118>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d15e      	bne.n	80019d8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e32a      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	429a      	cmp	r2, r3
 8001928:	d107      	bne.n	800193a <HAL_RCC_OscConfig+0x7a>
 800192a:	4bb1      	ldr	r3, [pc, #708]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4bb0      	ldr	r3, [pc, #704]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0249      	lsls	r1, r1, #9
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e020      	b.n	800197c <HAL_RCC_OscConfig+0xbc>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	23a0      	movs	r3, #160	; 0xa0
 8001940:	02db      	lsls	r3, r3, #11
 8001942:	429a      	cmp	r2, r3
 8001944:	d10e      	bne.n	8001964 <HAL_RCC_OscConfig+0xa4>
 8001946:	4baa      	ldr	r3, [pc, #680]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4ba9      	ldr	r3, [pc, #676]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	02c9      	lsls	r1, r1, #11
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	4ba6      	ldr	r3, [pc, #664]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4ba5      	ldr	r3, [pc, #660]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	0249      	lsls	r1, r1, #9
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xbc>
 8001964:	4ba2      	ldr	r3, [pc, #648]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4ba1      	ldr	r3, [pc, #644]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 800196a:	49a2      	ldr	r1, [pc, #648]	; (8001bf4 <HAL_RCC_OscConfig+0x334>)
 800196c:	400a      	ands	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	4b9f      	ldr	r3, [pc, #636]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001976:	49a0      	ldr	r1, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001978:	400a      	ands	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d014      	beq.n	80019ae <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fbdc 	bl	8001140 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198e:	f7ff fbd7 	bl	8001140 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	; 0x64
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e2e9      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a0:	4b93      	ldr	r3, [pc, #588]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	029b      	lsls	r3, r3, #10
 80019a8:	4013      	ands	r3, r2
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0xce>
 80019ac:	e015      	b.n	80019da <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff fbc7 	bl	8001140 <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fbc2 	bl	8001140 <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e2d4      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ca:	4b89      	ldr	r3, [pc, #548]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	029b      	lsls	r3, r3, #10
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0xf8>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d100      	bne.n	80019e6 <HAL_RCC_OscConfig+0x126>
 80019e4:	e099      	b.n	8001b1a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e6:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2238      	movs	r2, #56	; 0x38
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f0:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2203      	movs	r2, #3
 80019f6:	4013      	ands	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_OscConfig+0x146>
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d135      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a0c:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_OscConfig+0x164>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e2a7      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a74      	ldr	r2, [pc, #464]	; (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	021a      	lsls	r2, r3, #8
 8001a34:	4b6e      	ldr	r3, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d112      	bne.n	8001a66 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a40:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6e      	ldr	r2, [pc, #440]	; (8001c00 <HAL_RCC_OscConfig+0x340>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a54:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0adb      	lsrs	r3, r3, #11
 8001a5a:	2207      	movs	r2, #7
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	4a69      	ldr	r2, [pc, #420]	; (8001c04 <HAL_RCC_OscConfig+0x344>)
 8001a60:	40da      	lsrs	r2, r3
 8001a62:	4b69      	ldr	r3, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x348>)
 8001a64:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a66:	4b69      	ldr	r3, [pc, #420]	; (8001c0c <HAL_RCC_OscConfig+0x34c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff fb0c 	bl	8001088 <HAL_InitTick>
 8001a70:	1e03      	subs	r3, r0, #0
 8001a72:	d051      	beq.n	8001b18 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e27d      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d030      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a80:	4b5b      	ldr	r3, [pc, #364]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a5e      	ldr	r2, [pc, #376]	; (8001c00 <HAL_RCC_OscConfig+0x340>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	4b58      	ldr	r3, [pc, #352]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b55      	ldr	r3, [pc, #340]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	0049      	lsls	r1, r1, #1
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fb4d 	bl	8001140 <HAL_GetTick>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aac:	f7ff fb48 	bl	8001140 <HAL_GetTick>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e25a      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abe:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4a4b      	ldr	r2, [pc, #300]	; (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	021a      	lsls	r2, r3, #8
 8001ada:	4b45      	ldr	r3, [pc, #276]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	e01b      	b.n	8001b1a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001ae8:	4949      	ldr	r1, [pc, #292]	; (8001c10 <HAL_RCC_OscConfig+0x350>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb27 	bl	8001140 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fb22 	bl	8001140 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e234      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b0a:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x238>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b18:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2208      	movs	r2, #8
 8001b20:	4013      	ands	r3, r2
 8001b22:	d047      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2238      	movs	r2, #56	; 0x38
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b18      	cmp	r3, #24
 8001b2e:	d10a      	bne.n	8001b46 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d03c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2f4>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d138      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e216      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d019      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b54:	2101      	movs	r1, #1
 8001b56:	430a      	orrs	r2, r1
 8001b58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5a:	f7ff faf1 	bl	8001140 <HAL_GetTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff faec 	bl	8001140 <HAL_GetTick>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1fe      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d0f1      	beq.n	8001b64 <HAL_RCC_OscConfig+0x2a4>
 8001b80:	e018      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fad7 	bl	8001140 <HAL_GetTick>
 8001b92:	0003      	movs	r3, r0
 8001b94:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7ff fad2 	bl	8001140 <HAL_GetTick>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e1e4      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	2202      	movs	r2, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d1f1      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d100      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x300>
 8001bbe:	e0c7      	b.n	8001d50 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc0:	231f      	movs	r3, #31
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2238      	movs	r2, #56	; 0x38
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d11f      	bne.n	8001c14 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d100      	bne.n	8001be0 <HAL_RCC_OscConfig+0x320>
 8001bde:	e0b7      	b.n	8001d50 <HAL_RCC_OscConfig+0x490>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d000      	beq.n	8001bea <HAL_RCC_OscConfig+0x32a>
 8001be8:	e0b2      	b.n	8001d50 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1c2      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	fffeffff 	.word	0xfffeffff
 8001bf8:	fffbffff 	.word	0xfffbffff
 8001bfc:	ffff80ff 	.word	0xffff80ff
 8001c00:	ffffc7ff 	.word	0xffffc7ff
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c14:	4bb5      	ldr	r3, [pc, #724]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	055b      	lsls	r3, r3, #21
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_OscConfig+0x364>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x366>
 8001c24:	2300      	movs	r3, #0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d011      	beq.n	8001c4e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4bb0      	ldr	r3, [pc, #704]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c2e:	4baf      	ldr	r3, [pc, #700]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0549      	lsls	r1, r1, #21
 8001c34:	430a      	orrs	r2, r1
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c38:	4bac      	ldr	r3, [pc, #688]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c46:	231f      	movs	r3, #31
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4e:	4ba8      	ldr	r3, [pc, #672]	; (8001ef0 <HAL_RCC_OscConfig+0x630>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4013      	ands	r3, r2
 8001c58:	d11a      	bne.n	8001c90 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c5a:	4ba5      	ldr	r3, [pc, #660]	; (8001ef0 <HAL_RCC_OscConfig+0x630>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4ba4      	ldr	r3, [pc, #656]	; (8001ef0 <HAL_RCC_OscConfig+0x630>)
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	0049      	lsls	r1, r1, #1
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fa6a 	bl	8001140 <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7ff fa65 	bl	8001140 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e177      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c84:	4b9a      	ldr	r3, [pc, #616]	; (8001ef0 <HAL_RCC_OscConfig+0x630>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3e6>
 8001c98:	4b94      	ldr	r3, [pc, #592]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001c9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c9c:	4b93      	ldr	r3, [pc, #588]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ca4:	e01c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x420>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x408>
 8001cae:	4b8f      	ldr	r3, [pc, #572]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001cb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb2:	4b8e      	ldr	r3, [pc, #568]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cba:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001cbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cbe:	4b8b      	ldr	r3, [pc, #556]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x420>
 8001cc8:	4b88      	ldr	r3, [pc, #544]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001cca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ccc:	4b87      	ldr	r3, [pc, #540]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001cce:	2101      	movs	r1, #1
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cd4:	4b85      	ldr	r3, [pc, #532]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cd8:	4b84      	ldr	r3, [pc, #528]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001cda:	2104      	movs	r1, #4
 8001cdc:	438a      	bics	r2, r1
 8001cde:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d014      	beq.n	8001d12 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fa2a 	bl	8001140 <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf0:	e009      	b.n	8001d06 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7ff fa25 	bl	8001140 <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4a7d      	ldr	r2, [pc, #500]	; (8001ef4 <HAL_RCC_OscConfig+0x634>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e136      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d06:	4b79      	ldr	r3, [pc, #484]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x432>
 8001d10:	e013      	b.n	8001d3a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff fa15 	bl	8001140 <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fa10 	bl	8001140 <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a73      	ldr	r2, [pc, #460]	; (8001ef4 <HAL_RCC_OscConfig+0x634>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e121      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d30:	4b6e      	ldr	r3, [pc, #440]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d3a:	231f      	movs	r3, #31
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b69      	ldr	r3, [pc, #420]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d48:	4b68      	ldr	r3, [pc, #416]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001d4a:	496b      	ldr	r1, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0x638>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2220      	movs	r2, #32
 8001d56:	4013      	ands	r3, r2
 8001d58:	d039      	beq.n	8001dce <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01b      	beq.n	8001d9a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d62:	4b62      	ldr	r3, [pc, #392]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b61      	ldr	r3, [pc, #388]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	03c9      	lsls	r1, r1, #15
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff f9e6 	bl	8001140 <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d7a:	f7ff f9e1 	bl	8001140 <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0f3      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d8c:	4b57      	ldr	r3, [pc, #348]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	4013      	ands	r3, r2
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x4ba>
 8001d98:	e019      	b.n	8001dce <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d9a:	4b54      	ldr	r3, [pc, #336]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001da0:	4956      	ldr	r1, [pc, #344]	; (8001efc <HAL_RCC_OscConfig+0x63c>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da6:	f7ff f9cb 	bl	8001140 <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db0:	f7ff f9c6 	bl	8001140 <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0d8      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dc2:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d100      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x518>
 8001dd6:	e0cc      	b.n	8001f72 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd8:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2238      	movs	r2, #56	; 0x38
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d100      	bne.n	8001de6 <HAL_RCC_OscConfig+0x526>
 8001de4:	e07b      	b.n	8001ede <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d156      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001df4:	4942      	ldr	r1, [pc, #264]	; (8001f00 <HAL_RCC_OscConfig+0x640>)
 8001df6:	400a      	ands	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f9a1 	bl	8001140 <HAL_GetTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff f99c 	bl	8001140 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0ae      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e16:	4b35      	ldr	r3, [pc, #212]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	049b      	lsls	r3, r3, #18
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <HAL_RCC_OscConfig+0x644>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	0449      	lsls	r1, r1, #17
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0549      	lsls	r1, r1, #21
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7ff f965 	bl	8001140 <HAL_GetTick>
 8001e76:	0003      	movs	r3, r0
 8001e78:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f960 	bl	8001140 <HAL_GetTick>
 8001e80:	0002      	movs	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e072      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	049b      	lsls	r3, r3, #18
 8001e96:	4013      	ands	r3, r2
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x5bc>
 8001e9a:	e06a      	b.n	8001f72 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001ea2:	4917      	ldr	r1, [pc, #92]	; (8001f00 <HAL_RCC_OscConfig+0x640>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f94a 	bl	8001140 <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7ff f945 	bl	8001140 <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e057      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	049b      	lsls	r3, r3, #18
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_OscConfig+0x62c>)
 8001ed6:	490c      	ldr	r1, [pc, #48]	; (8001f08 <HAL_RCC_OscConfig+0x648>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	e049      	b.n	8001f72 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e044      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	00001388 	.word	0x00001388
 8001ef8:	efffffff 	.word	0xefffffff
 8001efc:	ffbfffff 	.word	0xffbfffff
 8001f00:	feffffff 	.word	0xfeffffff
 8001f04:	11c1808c 	.word	0x11c1808c
 8001f08:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x6bc>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2203      	movs	r2, #3
 8001f16:	401a      	ands	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d126      	bne.n	8001f6e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2270      	movs	r2, #112	; 0x70
 8001f24:	401a      	ands	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d11f      	bne.n	8001f6e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	23fe      	movs	r3, #254	; 0xfe
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	401a      	ands	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d116      	bne.n	8001f6e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	23f8      	movs	r3, #248	; 0xf8
 8001f44:	039b      	lsls	r3, r3, #14
 8001f46:	401a      	ands	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d10e      	bne.n	8001f6e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	23e0      	movs	r3, #224	; 0xe0
 8001f54:	051b      	lsls	r3, r3, #20
 8001f56:	401a      	ands	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	0f5b      	lsrs	r3, r3, #29
 8001f64:	075a      	lsls	r2, r3, #29
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b008      	add	sp, #32
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0e9      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2207      	movs	r2, #7
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d91e      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b73      	ldr	r3, [pc, #460]	; (8002170 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	4393      	bics	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	4b70      	ldr	r3, [pc, #448]	; (8002170 <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff f8c4 	bl	8001140 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fbc:	e009      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbe:	f7ff f8bf 	bl	8001140 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	4a6a      	ldr	r2, [pc, #424]	; (8002174 <HAL_RCC_ClockConfig+0x1f4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e0ca      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fd2:	4b67      	ldr	r3, [pc, #412]	; (8002170 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	4013      	ands	r3, r2
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1ee      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d015      	beq.n	8002016 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d006      	beq.n	8002002 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ff4:	4b60      	ldr	r3, [pc, #384]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffa:	21e0      	movs	r1, #224	; 0xe0
 8001ffc:	01c9      	lsls	r1, r1, #7
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	4a5d      	ldr	r2, [pc, #372]	; (800217c <HAL_RCC_ClockConfig+0x1fc>)
 8002008:	4013      	ands	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2201      	movs	r2, #1
 800201c:	4013      	ands	r3, r2
 800201e:	d057      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d107      	bne.n	8002038 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	4013      	ands	r3, r2
 8002032:	d12b      	bne.n	800208c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e097      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002040:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	049b      	lsls	r3, r3, #18
 8002048:	4013      	ands	r3, r2
 800204a:	d11f      	bne.n	800208c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e08b      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002058:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4013      	ands	r3, r2
 8002062:	d113      	bne.n	800208c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e07f      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d106      	bne.n	800207e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002070:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d108      	bne.n	800208c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e074      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2202      	movs	r2, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e06d      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800208c:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2207      	movs	r2, #7
 8002092:	4393      	bics	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 800209c:	430a      	orrs	r2, r1
 800209e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a0:	f7ff f84e 	bl	8001140 <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a8:	e009      	b.n	80020be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020aa:	f7ff f849 	bl	8001140 <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	4a2f      	ldr	r2, [pc, #188]	; (8002174 <HAL_RCC_ClockConfig+0x1f4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e054      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2238      	movs	r2, #56	; 0x38
 80020c4:	401a      	ands	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1ec      	bne.n	80020aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2207      	movs	r2, #7
 80020d6:	4013      	ands	r3, r2
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d21e      	bcs.n	800211c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2207      	movs	r2, #7
 80020e4:	4393      	bics	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020f0:	f7ff f826 	bl	8001140 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020f8:	e009      	b.n	800210e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7ff f821 	bl	8001140 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_RCC_ClockConfig+0x1f4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e02c      	b.n	8002168 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2207      	movs	r2, #7
 8002114:	4013      	ands	r3, r2
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d1ee      	bne.n	80020fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2204      	movs	r2, #4
 8002122:	4013      	ands	r3, r2
 8002124:	d009      	beq.n	800213a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4a15      	ldr	r2, [pc, #84]	; (8002180 <HAL_RCC_ClockConfig+0x200>)
 800212c:	4013      	ands	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8002136:	430a      	orrs	r2, r1
 8002138:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800213a:	f000 f829 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800213e:	0001      	movs	r1, r0
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_RCC_ClockConfig+0x1f8>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	220f      	movs	r2, #15
 8002148:	401a      	ands	r2, r3
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_RCC_ClockConfig+0x204>)
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	58d3      	ldr	r3, [r2, r3]
 8002150:	221f      	movs	r2, #31
 8002152:	4013      	ands	r3, r2
 8002154:	000a      	movs	r2, r1
 8002156:	40da      	lsrs	r2, r3
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_ClockConfig+0x208>)
 800215a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x20c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0018      	movs	r0, r3
 8002162:	f7fe ff91 	bl	8001088 <HAL_InitTick>
 8002166:	0003      	movs	r3, r0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b004      	add	sp, #16
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40022000 	.word	0x40022000
 8002174:	00001388 	.word	0x00001388
 8002178:	40021000 	.word	0x40021000
 800217c:	fffff0ff 	.word	0xfffff0ff
 8002180:	ffff8fff 	.word	0xffff8fff
 8002184:	08004c48 	.word	0x08004c48
 8002188:	20000008 	.word	0x20000008
 800218c:	2000000c 	.word	0x2000000c

08002190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002196:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2238      	movs	r2, #56	; 0x38
 800219c:	4013      	ands	r3, r2
 800219e:	d10f      	bne.n	80021c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021a0:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0adb      	lsrs	r3, r3, #11
 80021a6:	2207      	movs	r2, #7
 80021a8:	4013      	ands	r3, r2
 80021aa:	2201      	movs	r2, #1
 80021ac:	409a      	lsls	r2, r3
 80021ae:	0013      	movs	r3, r2
 80021b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80021b2:	6839      	ldr	r1, [r7, #0]
 80021b4:	4835      	ldr	r0, [pc, #212]	; (800228c <HAL_RCC_GetSysClockFreq+0xfc>)
 80021b6:	f7fd ffad 	bl	8000114 <__udivsi3>
 80021ba:	0003      	movs	r3, r0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	e05d      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c0:	4b31      	ldr	r3, [pc, #196]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2238      	movs	r2, #56	; 0x38
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_GetSysClockFreq+0x100>)
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	e054      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2238      	movs	r2, #56	; 0x38
 80021d8:	4013      	ands	r3, r2
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d138      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2203      	movs	r2, #3
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e8:	4b27      	ldr	r3, [pc, #156]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	2207      	movs	r2, #7
 80021f0:	4013      	ands	r3, r2
 80021f2:	3301      	adds	r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d10d      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	4824      	ldr	r0, [pc, #144]	; (8002290 <HAL_RCC_GetSysClockFreq+0x100>)
 8002200:	f7fd ff88 	bl	8000114 <__udivsi3>
 8002204:	0003      	movs	r3, r0
 8002206:	0019      	movs	r1, r3
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	227f      	movs	r2, #127	; 0x7f
 8002210:	4013      	ands	r3, r2
 8002212:	434b      	muls	r3, r1
 8002214:	617b      	str	r3, [r7, #20]
        break;
 8002216:	e00d      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	481c      	ldr	r0, [pc, #112]	; (800228c <HAL_RCC_GetSysClockFreq+0xfc>)
 800221c:	f7fd ff7a 	bl	8000114 <__udivsi3>
 8002220:	0003      	movs	r3, r0
 8002222:	0019      	movs	r1, r3
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	227f      	movs	r2, #127	; 0x7f
 800222c:	4013      	ands	r3, r2
 800222e:	434b      	muls	r3, r1
 8002230:	617b      	str	r3, [r7, #20]
        break;
 8002232:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0f5b      	lsrs	r3, r3, #29
 800223a:	2207      	movs	r2, #7
 800223c:	4013      	ands	r3, r2
 800223e:	3301      	adds	r3, #1
 8002240:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	6978      	ldr	r0, [r7, #20]
 8002246:	f7fd ff65 	bl	8000114 <__udivsi3>
 800224a:	0003      	movs	r3, r0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	e015      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2238      	movs	r2, #56	; 0x38
 8002256:	4013      	ands	r3, r2
 8002258:	2b20      	cmp	r3, #32
 800225a:	d103      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	e00b      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2238      	movs	r2, #56	; 0x38
 800226a:	4013      	ands	r3, r2
 800226c:	2b18      	cmp	r3, #24
 800226e:	d103      	bne.n	8002278 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002270:	23fa      	movs	r3, #250	; 0xfa
 8002272:	01db      	lsls	r3, r3, #7
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e001      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800227c:	693b      	ldr	r3, [r7, #16]
}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b006      	add	sp, #24
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	40021000 	.word	0x40021000
 800228c:	00f42400 	.word	0x00f42400
 8002290:	007a1200 	.word	0x007a1200

08002294 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002298:	4b02      	ldr	r3, [pc, #8]	; (80022a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	20000008 	.word	0x20000008

080022a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022ac:	f7ff fff2 	bl	8002294 <HAL_RCC_GetHCLKFreq>
 80022b0:	0004      	movs	r4, r0
 80022b2:	f7ff faf9 	bl	80018a8 <LL_RCC_GetAPB1Prescaler>
 80022b6:	0003      	movs	r3, r0
 80022b8:	0b1a      	lsrs	r2, r3, #12
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022bc:	0092      	lsls	r2, r2, #2
 80022be:	58d3      	ldr	r3, [r2, r3]
 80022c0:	221f      	movs	r2, #31
 80022c2:	4013      	ands	r3, r2
 80022c4:	40dc      	lsrs	r4, r3
 80022c6:	0023      	movs	r3, r4
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bdb0      	pop	{r4, r5, r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	08004c88 	.word	0x08004c88

080022d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80022dc:	2313      	movs	r3, #19
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022e4:	2312      	movs	r3, #18
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	029b      	lsls	r3, r3, #10
 80022f4:	4013      	ands	r3, r2
 80022f6:	d100      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80022f8:	e0ad      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2011      	movs	r0, #17
 80022fc:	183b      	adds	r3, r7, r0
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	055b      	lsls	r3, r3, #21
 800230a:	4013      	ands	r3, r2
 800230c:	d110      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0549      	lsls	r1, r1, #21
 8002318:	430a      	orrs	r2, r1
 800231a:	63da      	str	r2, [r3, #60]	; 0x3c
 800231c:	4b40      	ldr	r3, [pc, #256]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800231e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	055b      	lsls	r3, r3, #21
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232a:	183b      	adds	r3, r7, r0
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002330:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002336:	2180      	movs	r1, #128	; 0x80
 8002338:	0049      	lsls	r1, r1, #1
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800233e:	f7fe feff 	bl	8001140 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002346:	e00b      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe fefa 	bl	8001140 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d904      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002356:	2313      	movs	r3, #19
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2203      	movs	r2, #3
 800235c:	701a      	strb	r2, [r3, #0]
        break;
 800235e:	e005      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002360:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4013      	ands	r3, r2
 800236a:	d0ed      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800236c:	2313      	movs	r3, #19
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d15e      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002376:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002378:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800237a:	23c0      	movs	r3, #192	; 0xc0
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4013      	ands	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	429a      	cmp	r2, r3
 8002390:	d014      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	4a24      	ldr	r2, [pc, #144]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002398:	4013      	ands	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800239e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	0249      	lsls	r1, r1, #9
 80023a6:	430a      	orrs	r2, r1
 80023a8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023b0:	491e      	ldr	r1, [pc, #120]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80023b2:	400a      	ands	r2, r1
 80023b4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2201      	movs	r2, #1
 80023c0:	4013      	ands	r3, r2
 80023c2:	d016      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe febc 	bl	8001140 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023cc:	e00c      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe feb7 	bl	8001140 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d904      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80023de:	2313      	movs	r3, #19
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2203      	movs	r2, #3
 80023e4:	701a      	strb	r2, [r3, #0]
            break;
 80023e6:	e004      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d0ed      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80023f2:	2313      	movs	r3, #19
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002402:	4013      	ands	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800240c:	430a      	orrs	r2, r1
 800240e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002410:	e016      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002412:	2312      	movs	r3, #18
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2213      	movs	r2, #19
 8002418:	18ba      	adds	r2, r7, r2
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	e00f      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
 8002428:	fffffcff 	.word	0xfffffcff
 800242c:	fffeffff 	.word	0xfffeffff
 8002430:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002434:	2312      	movs	r3, #18
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2213      	movs	r2, #19
 800243a:	18ba      	adds	r2, r7, r2
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002440:	2311      	movs	r3, #17
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d105      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244a:	4bb6      	ldr	r3, [pc, #728]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800244c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800244e:	4bb5      	ldr	r3, [pc, #724]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002450:	49b5      	ldr	r1, [pc, #724]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002452:	400a      	ands	r2, r1
 8002454:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002460:	4bb0      	ldr	r3, [pc, #704]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	2203      	movs	r2, #3
 8002466:	4393      	bics	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4bad      	ldr	r3, [pc, #692]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002470:	430a      	orrs	r2, r1
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2202      	movs	r2, #2
 800247a:	4013      	ands	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800247e:	4ba9      	ldr	r3, [pc, #676]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	220c      	movs	r2, #12
 8002484:	4393      	bics	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4ba5      	ldr	r3, [pc, #660]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800248e:	430a      	orrs	r2, r1
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2204      	movs	r2, #4
 8002498:	4013      	ands	r3, r2
 800249a:	d009      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800249c:	4ba1      	ldr	r3, [pc, #644]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	2230      	movs	r2, #48	; 0x30
 80024a2:	4393      	bics	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	4b9e      	ldr	r3, [pc, #632]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ac:	430a      	orrs	r2, r1
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2210      	movs	r2, #16
 80024b6:	4013      	ands	r3, r2
 80024b8:	d009      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ba:	4b9a      	ldr	r3, [pc, #616]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	4a9b      	ldr	r2, [pc, #620]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	4b96      	ldr	r3, [pc, #600]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ca:	430a      	orrs	r2, r1
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	015b      	lsls	r3, r3, #5
 80024d6:	4013      	ands	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80024da:	4b92      	ldr	r3, [pc, #584]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	4a94      	ldr	r2, [pc, #592]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	4b8e      	ldr	r3, [pc, #568]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024fa:	4b8a      	ldr	r3, [pc, #552]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	4a8d      	ldr	r2, [pc, #564]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002500:	4013      	ands	r3, r2
 8002502:	0019      	movs	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002508:	4b86      	ldr	r3, [pc, #536]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250a:	430a      	orrs	r2, r1
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4013      	ands	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800251a:	4b82      	ldr	r3, [pc, #520]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	4a86      	ldr	r2, [pc, #536]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002520:	4013      	ands	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	4b7e      	ldr	r3, [pc, #504]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252a:	430a      	orrs	r2, r1
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2220      	movs	r2, #32
 8002534:	4013      	ands	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002538:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	4a7f      	ldr	r2, [pc, #508]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	4b77      	ldr	r3, [pc, #476]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002548:	430a      	orrs	r2, r1
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2240      	movs	r2, #64	; 0x40
 8002552:	4013      	ands	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002556:	4b73      	ldr	r3, [pc, #460]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	4a79      	ldr	r2, [pc, #484]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800255c:	4013      	ands	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	4b6f      	ldr	r3, [pc, #444]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002566:	430a      	orrs	r2, r1
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	01db      	lsls	r3, r3, #7
 8002572:	4013      	ands	r3, r2
 8002574:	d015      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002576:	4b6b      	ldr	r3, [pc, #428]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	0899      	lsrs	r1, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002582:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002584:	430a      	orrs	r2, r1
 8002586:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	05db      	lsls	r3, r3, #23
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002594:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	4b62      	ldr	r3, [pc, #392]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	0249      	lsls	r1, r1, #9
 800259e:	430a      	orrs	r2, r1
 80025a0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	031b      	lsls	r3, r3, #12
 80025aa:	4013      	ands	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025ae:	4b5d      	ldr	r3, [pc, #372]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	4393      	bics	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025be:	430a      	orrs	r2, r1
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	039b      	lsls	r3, r3, #14
 80025ca:	4013      	ands	r3, r2
 80025cc:	d016      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025ce:	4b55      	ldr	r3, [pc, #340]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	4a5c      	ldr	r2, [pc, #368]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025dc:	4b51      	ldr	r3, [pc, #324]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	03db      	lsls	r3, r3, #15
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d106      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80025ee:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	0449      	lsls	r1, r1, #17
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	03db      	lsls	r3, r3, #15
 8002604:	4013      	ands	r3, r2
 8002606:	d016      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002608:	4b46      	ldr	r3, [pc, #280]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	4a4e      	ldr	r2, [pc, #312]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800260e:	4013      	ands	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002616:	4b43      	ldr	r3, [pc, #268]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002618:	430a      	orrs	r2, r1
 800261a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	045b      	lsls	r3, r3, #17
 8002624:	429a      	cmp	r2, r3
 8002626:	d106      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002628:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	0449      	lsls	r1, r1, #17
 8002632:	430a      	orrs	r2, r1
 8002634:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4013      	ands	r3, r2
 8002640:	d014      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002642:	4b38      	ldr	r3, [pc, #224]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	2203      	movs	r2, #3
 8002648:	4393      	bics	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1a      	ldr	r2, [r3, #32]
 8002650:	4b34      	ldr	r3, [pc, #208]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002652:	430a      	orrs	r2, r1
 8002654:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d106      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800265e:	4b31      	ldr	r3, [pc, #196]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0249      	lsls	r1, r1, #9
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	019b      	lsls	r3, r3, #6
 8002674:	4013      	ands	r3, r2
 8002676:	d014      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002678:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	220c      	movs	r2, #12
 800267e:	4393      	bics	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002688:	430a      	orrs	r2, r1
 800268a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2b04      	cmp	r3, #4
 8002692:	d106      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	0249      	lsls	r1, r1, #9
 800269e:	430a      	orrs	r2, r1
 80026a0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	045b      	lsls	r3, r3, #17
 80026aa:	4013      	ands	r3, r2
 80026ac:	d016      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026be:	430a      	orrs	r2, r1
 80026c0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	019b      	lsls	r3, r3, #6
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d106      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0449      	lsls	r1, r1, #17
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	049b      	lsls	r3, r3, #18
 80026e4:	4013      	ands	r3, r2
 80026e6:	d016      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026f6:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	429a      	cmp	r2, r3
 8002706:	d106      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	0449      	lsls	r1, r1, #17
 8002712:	430a      	orrs	r2, r1
 8002714:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002716:	2312      	movs	r3, #18
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	781b      	ldrb	r3, [r3, #0]
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b006      	add	sp, #24
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	efffffff 	.word	0xefffffff
 800272c:	fffff3ff 	.word	0xfffff3ff
 8002730:	fffffcff 	.word	0xfffffcff
 8002734:	fff3ffff 	.word	0xfff3ffff
 8002738:	ffcfffff 	.word	0xffcfffff
 800273c:	ffffcfff 	.word	0xffffcfff
 8002740:	ffff3fff 	.word	0xffff3fff
 8002744:	ffbfffff 	.word	0xffbfffff
 8002748:	feffffff 	.word	0xfeffffff

0800274c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0a8      	b.n	80028b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	2382      	movs	r3, #130	; 0x82
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	429a      	cmp	r2, r3
 8002770:	d009      	beq.n	8002786 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	61da      	str	r2, [r3, #28]
 8002778:	e005      	b.n	8002786 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	225d      	movs	r2, #93	; 0x5d
 8002790:	5c9b      	ldrb	r3, [r3, r2]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	225c      	movs	r2, #92	; 0x5c
 800279c:	2100      	movs	r1, #0
 800279e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7fe fb4a 	bl	8000e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	225d      	movs	r2, #93	; 0x5d
 80027ac:	2102      	movs	r1, #2
 80027ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2140      	movs	r1, #64	; 0x40
 80027bc:	438a      	bics	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	23e0      	movs	r3, #224	; 0xe0
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d902      	bls.n	80027d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	e002      	b.n	80027d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	015b      	lsls	r3, r3, #5
 80027d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	23f0      	movs	r3, #240	; 0xf0
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d008      	beq.n	80027f6 <HAL_SPI_Init+0xaa>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	23e0      	movs	r3, #224	; 0xe0
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	2382      	movs	r3, #130	; 0x82
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	2384      	movs	r3, #132	; 0x84
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	400b      	ands	r3, r1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2102      	movs	r1, #2
 8002812:	400b      	ands	r3, r1
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2101      	movs	r1, #1
 800281c:	400b      	ands	r3, r1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6999      	ldr	r1, [r3, #24]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	400b      	ands	r3, r1
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2138      	movs	r1, #56	; 0x38
 8002832:	400b      	ands	r3, r1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	400b      	ands	r3, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	0011      	movs	r1, r2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	401a      	ands	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	2204      	movs	r2, #4
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2110      	movs	r1, #16
 8002864:	400b      	ands	r3, r1
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286c:	2108      	movs	r1, #8
 800286e:	400b      	ands	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68d9      	ldr	r1, [r3, #12]
 8002876:	23f0      	movs	r3, #240	; 0xf0
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	400b      	ands	r3, r1
 800287c:	431a      	orrs	r2, r3
 800287e:	0011      	movs	r1, r2
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	015b      	lsls	r3, r3, #5
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4907      	ldr	r1, [pc, #28]	; (80028b8 <HAL_SPI_Init+0x16c>)
 800289c:	400a      	ands	r2, r1
 800289e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	225d      	movs	r2, #93	; 0x5d
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b004      	add	sp, #16
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	fffff7ff 	.word	0xfffff7ff

080028bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	1dbb      	adds	r3, r7, #6
 80028ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028cc:	231f      	movs	r3, #31
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	225c      	movs	r2, #92	; 0x5c
 80028d8:	5c9b      	ldrb	r3, [r3, r2]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_SPI_Transmit+0x26>
 80028de:	2302      	movs	r3, #2
 80028e0:	e140      	b.n	8002b64 <HAL_SPI_Transmit+0x2a8>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	225c      	movs	r2, #92	; 0x5c
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ea:	f7fe fc29 	bl	8001140 <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80028f2:	2316      	movs	r3, #22
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	1dba      	adds	r2, r7, #6
 80028f8:	8812      	ldrh	r2, [r2, #0]
 80028fa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	225d      	movs	r2, #93	; 0x5d
 8002900:	5c9b      	ldrb	r3, [r3, r2]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d004      	beq.n	8002912 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002908:	231f      	movs	r3, #31
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2202      	movs	r2, #2
 800290e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002910:	e11d      	b.n	8002b4e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_SPI_Transmit+0x64>
 8002918:	1dbb      	adds	r3, r7, #6
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002920:	231f      	movs	r3, #31
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
    goto error;
 8002928:	e111      	b.n	8002b4e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	225d      	movs	r2, #93	; 0x5d
 800292e:	2103      	movs	r1, #3
 8002930:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1dba      	adds	r2, r7, #6
 8002942:	8812      	ldrh	r2, [r2, #0]
 8002944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1dba      	adds	r2, r7, #6
 800294a:	8812      	ldrh	r2, [r2, #0]
 800294c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2244      	movs	r2, #68	; 0x44
 8002958:	2100      	movs	r1, #0
 800295a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2246      	movs	r2, #70	; 0x46
 8002960:	2100      	movs	r1, #0
 8002962:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	429a      	cmp	r2, r3
 800297a:	d110      	bne.n	800299e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	438a      	bics	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	01c9      	lsls	r1, r1, #7
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d007      	beq.n	80029bc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2140      	movs	r1, #64	; 0x40
 80029b8:	430a      	orrs	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	23e0      	movs	r3, #224	; 0xe0
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d94e      	bls.n	8002a66 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <HAL_SPI_Transmit+0x11e>
 80029d0:	2316      	movs	r3, #22
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d13f      	bne.n	8002a5a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	1c9a      	adds	r2, r3, #2
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029fe:	e02c      	b.n	8002a5a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2202      	movs	r2, #2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d112      	bne.n	8002a34 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	1c9a      	adds	r2, r3, #2
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a32:	e012      	b.n	8002a5a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a34:	f7fe fb84 	bl	8001140 <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d802      	bhi.n	8002a4a <HAL_SPI_Transmit+0x18e>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_SPI_Transmit+0x194>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d104      	bne.n	8002a5a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002a50:	231f      	movs	r3, #31
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2203      	movs	r2, #3
 8002a56:	701a      	strb	r2, [r3, #0]
          goto error;
 8002a58:	e079      	b.n	8002b4e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1cd      	bne.n	8002a00 <HAL_SPI_Transmit+0x144>
 8002a64:	e04f      	b.n	8002b06 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d004      	beq.n	8002a78 <HAL_SPI_Transmit+0x1bc>
 8002a6e:	2316      	movs	r3, #22
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d141      	bne.n	8002afc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	330c      	adds	r3, #12
 8002a82:	7812      	ldrb	r2, [r2, #0]
 8002a84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002a9e:	e02d      	b.n	8002afc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d113      	bne.n	8002ad6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ad4:	e012      	b.n	8002afc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ad6:	f7fe fb33 	bl	8001140 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d802      	bhi.n	8002aec <HAL_SPI_Transmit+0x230>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	d102      	bne.n	8002af2 <HAL_SPI_Transmit+0x236>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002af2:	231f      	movs	r3, #31
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2203      	movs	r2, #3
 8002af8:	701a      	strb	r2, [r3, #0]
          goto error;
 8002afa:	e028      	b.n	8002b4e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1cc      	bne.n	8002aa0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	6839      	ldr	r1, [r7, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fcd9 	bl	80034c4 <SPI_EndRxTxTransaction>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002b42:	231f      	movs	r3, #31
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e000      	b.n	8002b4e <HAL_SPI_Transmit+0x292>
  }

error:
 8002b4c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	225d      	movs	r2, #93	; 0x5d
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	225c      	movs	r2, #92	; 0x5c
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b5e:	231f      	movs	r3, #31
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	781b      	ldrb	r3, [r3, #0]
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b008      	add	sp, #32
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b7c:	2317      	movs	r3, #23
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	2382      	movs	r3, #130	; 0x82
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d113      	bne.n	8002bb8 <HAL_SPI_Receive+0x4c>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	225d      	movs	r2, #93	; 0x5d
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ba0:	1dbb      	adds	r3, r7, #6
 8002ba2:	881c      	ldrh	r4, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	0023      	movs	r3, r4
 8002bb0:	f000 f928 	bl	8002e04 <HAL_SPI_TransmitReceive>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	e11c      	b.n	8002df2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	225c      	movs	r2, #92	; 0x5c
 8002bbc:	5c9b      	ldrb	r3, [r3, r2]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_SPI_Receive+0x5a>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e115      	b.n	8002df2 <HAL_SPI_Receive+0x286>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	225c      	movs	r2, #92	; 0x5c
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bce:	f7fe fab7 	bl	8001140 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	225d      	movs	r2, #93	; 0x5d
 8002bda:	5c9b      	ldrb	r3, [r3, r2]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d004      	beq.n	8002bec <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002be2:	2317      	movs	r3, #23
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2202      	movs	r2, #2
 8002be8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bea:	e0f7      	b.n	8002ddc <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_SPI_Receive+0x8e>
 8002bf2:	1dbb      	adds	r3, r7, #6
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002bfa:	2317      	movs	r3, #23
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c02:	e0eb      	b.n	8002ddc <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	225d      	movs	r2, #93	; 0x5d
 8002c08:	2104      	movs	r1, #4
 8002c0a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1dba      	adds	r2, r7, #6
 8002c1c:	2144      	movs	r1, #68	; 0x44
 8002c1e:	8812      	ldrh	r2, [r2, #0]
 8002c20:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1dba      	adds	r2, r7, #6
 8002c26:	2146      	movs	r1, #70	; 0x46
 8002c28:	8812      	ldrh	r2, [r2, #0]
 8002c2a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	23e0      	movs	r3, #224	; 0xe0
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d908      	bls.n	8002c68 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4966      	ldr	r1, [pc, #408]	; (8002dfc <HAL_SPI_Receive+0x290>)
 8002c62:	400a      	ands	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	e008      	b.n	8002c7a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	0149      	lsls	r1, r1, #5
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d10f      	bne.n	8002ca6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2140      	movs	r1, #64	; 0x40
 8002c92:	438a      	bics	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4957      	ldr	r1, [pc, #348]	; (8002e00 <HAL_SPI_Receive+0x294>)
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2240      	movs	r2, #64	; 0x40
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d007      	beq.n	8002cc4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2140      	movs	r1, #64	; 0x40
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	23e0      	movs	r3, #224	; 0xe0
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d900      	bls.n	8002cd2 <HAL_SPI_Receive+0x166>
 8002cd0:	e069      	b.n	8002da6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cd2:	e031      	b.n	8002d38 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d117      	bne.n	8002d12 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	001a      	movs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	7812      	ldrb	r2, [r2, #0]
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2246      	movs	r2, #70	; 0x46
 8002d02:	5a9b      	ldrh	r3, [r3, r2]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b299      	uxth	r1, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2246      	movs	r2, #70	; 0x46
 8002d0e:	5299      	strh	r1, [r3, r2]
 8002d10:	e012      	b.n	8002d38 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d12:	f7fe fa15 	bl	8001140 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d802      	bhi.n	8002d28 <HAL_SPI_Receive+0x1bc>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_SPI_Receive+0x1c2>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002d2e:	2317      	movs	r3, #23
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2203      	movs	r2, #3
 8002d34:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d36:	e051      	b.n	8002ddc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2246      	movs	r2, #70	; 0x46
 8002d3c:	5a9b      	ldrh	r3, [r3, r2]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1c7      	bne.n	8002cd4 <HAL_SPI_Receive+0x168>
 8002d44:	e035      	b.n	8002db2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d115      	bne.n	8002d80 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	1c9a      	adds	r2, r3, #2
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2246      	movs	r2, #70	; 0x46
 8002d70:	5a9b      	ldrh	r3, [r3, r2]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b299      	uxth	r1, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2246      	movs	r2, #70	; 0x46
 8002d7c:	5299      	strh	r1, [r3, r2]
 8002d7e:	e012      	b.n	8002da6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d80:	f7fe f9de 	bl	8001140 <HAL_GetTick>
 8002d84:	0002      	movs	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d802      	bhi.n	8002d96 <HAL_SPI_Receive+0x22a>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_SPI_Receive+0x230>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d104      	bne.n	8002da6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002d9c:	2317      	movs	r3, #23
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	2203      	movs	r2, #3
 8002da2:	701a      	strb	r2, [r3, #0]
          goto error;
 8002da4:	e01a      	b.n	8002ddc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2246      	movs	r2, #70	; 0x46
 8002daa:	5a9b      	ldrh	r3, [r3, r2]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1c9      	bne.n	8002d46 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	6839      	ldr	r1, [r7, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 fb25 	bl	8003408 <SPI_EndRxTransaction>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002dd0:	2317      	movs	r3, #23
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e000      	b.n	8002ddc <HAL_SPI_Receive+0x270>
  }

error :
 8002dda:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	225d      	movs	r2, #93	; 0x5d
 8002de0:	2101      	movs	r1, #1
 8002de2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	225c      	movs	r2, #92	; 0x5c
 8002de8:	2100      	movs	r1, #0
 8002dea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002dec:	2317      	movs	r3, #23
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	781b      	ldrb	r3, [r3, #0]
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b007      	add	sp, #28
 8002df8:	bd90      	pop	{r4, r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	ffffefff 	.word	0xffffefff
 8002e00:	ffffbfff 	.word	0xffffbfff

08002e04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	001a      	movs	r2, r3
 8002e12:	1cbb      	adds	r3, r7, #2
 8002e14:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e16:	2301      	movs	r3, #1
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e1a:	2323      	movs	r3, #35	; 0x23
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	225c      	movs	r2, #92	; 0x5c
 8002e26:	5c9b      	ldrb	r3, [r3, r2]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_SPI_TransmitReceive+0x2c>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e1b5      	b.n	800319c <HAL_SPI_TransmitReceive+0x398>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	225c      	movs	r2, #92	; 0x5c
 8002e34:	2101      	movs	r1, #1
 8002e36:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e38:	f7fe f982 	bl	8001140 <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e40:	201b      	movs	r0, #27
 8002e42:	183b      	adds	r3, r7, r0
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	215d      	movs	r1, #93	; 0x5d
 8002e48:	5c52      	ldrb	r2, [r2, r1]
 8002e4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002e52:	2312      	movs	r3, #18
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	1cba      	adds	r2, r7, #2
 8002e58:	8812      	ldrh	r2, [r2, #0]
 8002e5a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e5c:	183b      	adds	r3, r7, r0
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d011      	beq.n	8002e88 <HAL_SPI_TransmitReceive+0x84>
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	2382      	movs	r3, #130	; 0x82
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d107      	bne.n	8002e7e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <HAL_SPI_TransmitReceive+0x7a>
 8002e76:	183b      	adds	r3, r7, r0
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d004      	beq.n	8002e88 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002e7e:	2323      	movs	r3, #35	; 0x23
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	2202      	movs	r2, #2
 8002e84:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e86:	e17e      	b.n	8003186 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x98>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x98>
 8002e94:	1cbb      	adds	r3, r7, #2
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d104      	bne.n	8002ea6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002e9c:	2323      	movs	r3, #35	; 0x23
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ea4:	e16f      	b.n	8003186 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	225d      	movs	r2, #93	; 0x5d
 8002eaa:	5c9b      	ldrb	r3, [r3, r2]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d003      	beq.n	8002eba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	225d      	movs	r2, #93	; 0x5d
 8002eb6:	2105      	movs	r1, #5
 8002eb8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1cba      	adds	r2, r7, #2
 8002eca:	2146      	movs	r1, #70	; 0x46
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1cba      	adds	r2, r7, #2
 8002ed4:	2144      	movs	r1, #68	; 0x44
 8002ed6:	8812      	ldrh	r2, [r2, #0]
 8002ed8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1cba      	adds	r2, r7, #2
 8002ee4:	8812      	ldrh	r2, [r2, #0]
 8002ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1cba      	adds	r2, r7, #2
 8002eec:	8812      	ldrh	r2, [r2, #0]
 8002eee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	23e0      	movs	r3, #224	; 0xe0
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d908      	bls.n	8002f1a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	49a4      	ldr	r1, [pc, #656]	; (80031a4 <HAL_SPI_TransmitReceive+0x3a0>)
 8002f14:	400a      	ands	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	e008      	b.n	8002f2c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	0149      	lsls	r1, r1, #5
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2240      	movs	r2, #64	; 0x40
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d007      	beq.n	8002f4a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2140      	movs	r1, #64	; 0x40
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	23e0      	movs	r3, #224	; 0xe0
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d800      	bhi.n	8002f58 <HAL_SPI_TransmitReceive+0x154>
 8002f56:	e07f      	b.n	8003058 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_SPI_TransmitReceive+0x168>
 8002f60:	2312      	movs	r3, #18
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d000      	beq.n	8002f6c <HAL_SPI_TransmitReceive+0x168>
 8002f6a:	e069      	b.n	8003040 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f90:	e056      	b.n	8003040 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_SPI_TransmitReceive+0x1d4>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <HAL_SPI_TransmitReceive+0x1d4>
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d113      	bne.n	8002fd8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	881a      	ldrh	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	1c9a      	adds	r2, r3, #2
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d11c      	bne.n	8003020 <HAL_SPI_TransmitReceive+0x21c>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2246      	movs	r2, #70	; 0x46
 8002fea:	5a9b      	ldrh	r3, [r3, r2]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	b292      	uxth	r2, r2
 8002ffe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	1c9a      	adds	r2, r3, #2
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2246      	movs	r2, #70	; 0x46
 800300e:	5a9b      	ldrh	r3, [r3, r2]
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b299      	uxth	r1, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2246      	movs	r2, #70	; 0x46
 800301a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800301c:	2301      	movs	r3, #1
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003020:	f7fe f88e 	bl	8001140 <HAL_GetTick>
 8003024:	0002      	movs	r2, r0
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800302c:	429a      	cmp	r2, r3
 800302e:	d807      	bhi.n	8003040 <HAL_SPI_TransmitReceive+0x23c>
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	3301      	adds	r3, #1
 8003034:	d004      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003036:	2323      	movs	r3, #35	; 0x23
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	2203      	movs	r2, #3
 800303c:	701a      	strb	r2, [r3, #0]
        goto error;
 800303e:	e0a2      	b.n	8003186 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1a3      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x18e>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2246      	movs	r2, #70	; 0x46
 800304e:	5a9b      	ldrh	r3, [r3, r2]
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d19d      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x18e>
 8003056:	e085      	b.n	8003164 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_SPI_TransmitReceive+0x268>
 8003060:	2312      	movs	r3, #18
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d000      	beq.n	800306c <HAL_SPI_TransmitReceive+0x268>
 800306a:	e070      	b.n	800314e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003092:	e05c      	b.n	800314e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2202      	movs	r2, #2
 800309c:	4013      	ands	r3, r2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d11c      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x2d8>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d017      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x2d8>
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d114      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	7812      	ldrb	r2, [r2, #0]
 80030be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d11e      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x324>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2246      	movs	r2, #70	; 0x46
 80030ee:	5a9b      	ldrh	r3, [r3, r2]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d018      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	330c      	adds	r3, #12
 80030fc:	001a      	movs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2246      	movs	r2, #70	; 0x46
 8003116:	5a9b      	ldrh	r3, [r3, r2]
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b299      	uxth	r1, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2246      	movs	r2, #70	; 0x46
 8003122:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003124:	2301      	movs	r3, #1
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003128:	f7fe f80a 	bl	8001140 <HAL_GetTick>
 800312c:	0002      	movs	r2, r0
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003134:	429a      	cmp	r2, r3
 8003136:	d802      	bhi.n	800313e <HAL_SPI_TransmitReceive+0x33a>
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	3301      	adds	r3, #1
 800313c:	d102      	bne.n	8003144 <HAL_SPI_TransmitReceive+0x340>
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003144:	2323      	movs	r3, #35	; 0x23
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2203      	movs	r2, #3
 800314a:	701a      	strb	r2, [r3, #0]
        goto error;
 800314c:	e01b      	b.n	8003186 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d19d      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x290>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2246      	movs	r2, #70	; 0x46
 800315c:	5a9b      	ldrh	r3, [r3, r2]
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d197      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	0018      	movs	r0, r3
 800316c:	f000 f9aa 	bl	80034c4 <SPI_EndRxTxTransaction>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d007      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003174:	2323      	movs	r3, #35	; 0x23
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	661a      	str	r2, [r3, #96]	; 0x60
 8003182:	e000      	b.n	8003186 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003184:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	225d      	movs	r2, #93	; 0x5d
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	225c      	movs	r2, #92	; 0x5c
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003196:	2323      	movs	r3, #35	; 0x23
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	781b      	ldrb	r3, [r3, #0]
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b00a      	add	sp, #40	; 0x28
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	ffffefff 	.word	0xffffefff

080031a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031b8:	f7fd ffc2 	bl	8001140 <HAL_GetTick>
 80031bc:	0002      	movs	r2, r0
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c8:	f7fd ffba 	bl	8001140 <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031d0:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	015b      	lsls	r3, r3, #5
 80031d6:	0d1b      	lsrs	r3, r3, #20
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	4353      	muls	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031de:	e058      	b.n	8003292 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	d055      	beq.n	8003292 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031e6:	f7fd ffab 	bl	8001140 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d902      	bls.n	80031fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d142      	bne.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	21e0      	movs	r1, #224	; 0xe0
 8003208:	438a      	bics	r2, r1
 800320a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	2382      	movs	r3, #130	; 0x82
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	429a      	cmp	r2, r3
 8003216:	d113      	bne.n	8003240 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	429a      	cmp	r2, r3
 8003222:	d005      	beq.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	429a      	cmp	r2, r3
 800322e:	d107      	bne.n	8003240 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2140      	movs	r1, #64	; 0x40
 800323c:	438a      	bics	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	019b      	lsls	r3, r3, #6
 8003248:	429a      	cmp	r2, r3
 800324a:	d110      	bne.n	800326e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	491a      	ldr	r1, [pc, #104]	; (80032c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003258:	400a      	ands	r2, r1
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	0189      	lsls	r1, r1, #6
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	225d      	movs	r2, #93	; 0x5d
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	225c      	movs	r2, #92	; 0x5c
 800327a:	2100      	movs	r1, #0
 800327c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e017      	b.n	80032b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3b01      	subs	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	425a      	negs	r2, r3
 80032a2:	4153      	adcs	r3, r2
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	001a      	movs	r2, r3
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d197      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b008      	add	sp, #32
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20000008 	.word	0x20000008
 80032c0:	ffffdfff 	.word	0xffffdfff

080032c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032d2:	2317      	movs	r3, #23
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032da:	f7fd ff31 	bl	8001140 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	18d3      	adds	r3, r2, r3
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032ea:	f7fd ff29 	bl	8001140 <HAL_GetTick>
 80032ee:	0003      	movs	r3, r0
 80032f0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	0013      	movs	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	189b      	adds	r3, r3, r2
 8003304:	00da      	lsls	r2, r3, #3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	0d1b      	lsrs	r3, r3, #20
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	4353      	muls	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003310:	e068      	b.n	80033e4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	23c0      	movs	r3, #192	; 0xc0
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	429a      	cmp	r2, r3
 800331a:	d10a      	bne.n	8003332 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d107      	bne.n	8003332 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	2117      	movs	r1, #23
 800332a:	187b      	adds	r3, r7, r1
 800332c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800332e:	187b      	adds	r3, r7, r1
 8003330:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	d055      	beq.n	80033e4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003338:	f7fd ff02 	bl	8001140 <HAL_GetTick>
 800333c:	0002      	movs	r2, r0
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	429a      	cmp	r2, r3
 8003346:	d902      	bls.n	800334e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d142      	bne.n	80033d4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	21e0      	movs	r1, #224	; 0xe0
 800335a:	438a      	bics	r2, r1
 800335c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	2382      	movs	r3, #130	; 0x82
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	429a      	cmp	r2, r3
 8003368:	d113      	bne.n	8003392 <SPI_WaitFifoStateUntilTimeout+0xce>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	429a      	cmp	r2, r3
 8003374:	d005      	beq.n	8003382 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	429a      	cmp	r2, r3
 8003380:	d107      	bne.n	8003392 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2140      	movs	r1, #64	; 0x40
 800338e:	438a      	bics	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	429a      	cmp	r2, r3
 800339c:	d110      	bne.n	80033c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4916      	ldr	r1, [pc, #88]	; (8003404 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80033aa:	400a      	ands	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	0189      	lsls	r1, r1, #6
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	225d      	movs	r2, #93	; 0x5d
 80033c4:	2101      	movs	r1, #1
 80033c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	225c      	movs	r2, #92	; 0x5c
 80033cc:	2100      	movs	r1, #0
 80033ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e010      	b.n	80033f6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4013      	ands	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d18e      	bne.n	8003312 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b00a      	add	sp, #40	; 0x28
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	20000008 	.word	0x20000008
 8003404:	ffffdfff 	.word	0xffffdfff

08003408 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	2382      	movs	r3, #130	; 0x82
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	429a      	cmp	r2, r3
 800341e:	d113      	bne.n	8003448 <SPI_EndRxTransaction+0x40>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	429a      	cmp	r2, r3
 800342a:	d005      	beq.n	8003438 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	429a      	cmp	r2, r3
 8003436:	d107      	bne.n	8003448 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	438a      	bics	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	0013      	movs	r3, r2
 8003452:	2200      	movs	r2, #0
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	f7ff fea7 	bl	80031a8 <SPI_WaitFlagStateUntilTimeout>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d007      	beq.n	800346e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003462:	2220      	movs	r2, #32
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e026      	b.n	80034bc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	2382      	movs	r3, #130	; 0x82
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	429a      	cmp	r2, r3
 8003478:	d11f      	bne.n	80034ba <SPI_EndRxTransaction+0xb2>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	429a      	cmp	r2, r3
 8003484:	d005      	beq.n	8003492 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	429a      	cmp	r2, r3
 8003490:	d113      	bne.n	80034ba <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	23c0      	movs	r3, #192	; 0xc0
 8003496:	00d9      	lsls	r1, r3, #3
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	0013      	movs	r3, r2
 80034a0:	2200      	movs	r2, #0
 80034a2:	f7ff ff0f 	bl	80032c4 <SPI_WaitFifoStateUntilTimeout>
 80034a6:	1e03      	subs	r3, r0, #0
 80034a8:	d007      	beq.n	80034ba <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ae:	2220      	movs	r2, #32
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e000      	b.n	80034bc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b004      	add	sp, #16
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	23c0      	movs	r3, #192	; 0xc0
 80034d4:	0159      	lsls	r1, r3, #5
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	0013      	movs	r3, r2
 80034de:	2200      	movs	r2, #0
 80034e0:	f7ff fef0 	bl	80032c4 <SPI_WaitFifoStateUntilTimeout>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d007      	beq.n	80034f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ec:	2220      	movs	r2, #32
 80034ee:	431a      	orrs	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e027      	b.n	8003548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	0013      	movs	r3, r2
 8003502:	2200      	movs	r2, #0
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	f7ff fe4f 	bl	80031a8 <SPI_WaitFlagStateUntilTimeout>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d007      	beq.n	800351e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003512:	2220      	movs	r2, #32
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e014      	b.n	8003548 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	23c0      	movs	r3, #192	; 0xc0
 8003522:	00d9      	lsls	r1, r3, #3
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	0013      	movs	r3, r2
 800352c:	2200      	movs	r2, #0
 800352e:	f7ff fec9 	bl	80032c4 <SPI_WaitFifoStateUntilTimeout>
 8003532:	1e03      	subs	r3, r0, #0
 8003534:	d007      	beq.n	8003546 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353a:	2220      	movs	r2, #32
 800353c:	431a      	orrs	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e000      	b.n	8003548 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	b004      	add	sp, #16
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e046      	b.n	80035f0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2284      	movs	r2, #132	; 0x84
 8003566:	589b      	ldr	r3, [r3, r2]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d107      	bne.n	800357c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2280      	movs	r2, #128	; 0x80
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	0018      	movs	r0, r3
 8003578:	f7fd fcaa 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2284      	movs	r2, #132	; 0x84
 8003580:	2124      	movs	r1, #36	; 0x24
 8003582:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2101      	movs	r1, #1
 8003590:	438a      	bics	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	0018      	movs	r0, r3
 8003598:	f000 fc12 	bl	8003dc0 <UART_SetConfig>
 800359c:	0003      	movs	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e024      	b.n	80035f0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 ff5b 	bl	800446c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	490d      	ldr	r1, [pc, #52]	; (80035f8 <HAL_UART_Init+0xa8>)
 80035c2:	400a      	ands	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	212a      	movs	r1, #42	; 0x2a
 80035d2:	438a      	bics	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 fff3 	bl	80045d4 <UART_CheckIdleState>
 80035ee:	0003      	movs	r3, r0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	ffffb7ff 	.word	0xffffb7ff

080035fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	1dbb      	adds	r3, r7, #6
 800360a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2284      	movs	r2, #132	; 0x84
 8003610:	589b      	ldr	r3, [r3, r2]
 8003612:	2b20      	cmp	r3, #32
 8003614:	d000      	beq.n	8003618 <HAL_UART_Transmit+0x1c>
 8003616:	e097      	b.n	8003748 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_UART_Transmit+0x2a>
 800361e:	1dbb      	adds	r3, r7, #6
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e08f      	b.n	800374a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	015b      	lsls	r3, r3, #5
 8003632:	429a      	cmp	r2, r3
 8003634:	d109      	bne.n	800364a <HAL_UART_Transmit+0x4e>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2201      	movs	r2, #1
 8003642:	4013      	ands	r3, r2
 8003644:	d001      	beq.n	800364a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07f      	b.n	800374a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	5c9b      	ldrb	r3, [r3, r2]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_UART_Transmit+0x5c>
 8003654:	2302      	movs	r3, #2
 8003656:	e078      	b.n	800374a <HAL_UART_Transmit+0x14e>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	2101      	movs	r1, #1
 800365e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	228c      	movs	r2, #140	; 0x8c
 8003664:	2100      	movs	r1, #0
 8003666:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2284      	movs	r2, #132	; 0x84
 800366c:	2121      	movs	r1, #33	; 0x21
 800366e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003670:	f7fd fd66 	bl	8001140 <HAL_GetTick>
 8003674:	0003      	movs	r3, r0
 8003676:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1dba      	adds	r2, r7, #6
 800367c:	2154      	movs	r1, #84	; 0x54
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1dba      	adds	r2, r7, #6
 8003686:	2156      	movs	r1, #86	; 0x56
 8003688:	8812      	ldrh	r2, [r2, #0]
 800368a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	015b      	lsls	r3, r3, #5
 8003694:	429a      	cmp	r2, r3
 8003696:	d108      	bne.n	80036aa <HAL_UART_Transmit+0xae>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	e003      	b.n	80036b2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80036ba:	e02c      	b.n	8003716 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	0013      	movs	r3, r2
 80036c6:	2200      	movs	r2, #0
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	f000 ffcd 	bl	8004668 <UART_WaitOnFlagUntilTimeout>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e039      	b.n	800374a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	001a      	movs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	05d2      	lsls	r2, r2, #23
 80036e8:	0dd2      	lsrs	r2, r2, #23
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	3302      	adds	r3, #2
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	e007      	b.n	8003704 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3301      	adds	r3, #1
 8003702:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2256      	movs	r2, #86	; 0x56
 8003708:	5a9b      	ldrh	r3, [r3, r2]
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b299      	uxth	r1, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2256      	movs	r2, #86	; 0x56
 8003714:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2256      	movs	r2, #86	; 0x56
 800371a:	5a9b      	ldrh	r3, [r3, r2]
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1cc      	bne.n	80036bc <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	0013      	movs	r3, r2
 800372c:	2200      	movs	r2, #0
 800372e:	2140      	movs	r1, #64	; 0x40
 8003730:	f000 ff9a 	bl	8004668 <UART_WaitOnFlagUntilTimeout>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e006      	b.n	800374a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2284      	movs	r2, #132	; 0x84
 8003740:	2120      	movs	r1, #32
 8003742:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b008      	add	sp, #32
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b0aa      	sub	sp, #168	; 0xa8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	22a4      	movs	r2, #164	; 0xa4
 8003764:	18b9      	adds	r1, r7, r2
 8003766:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	20a0      	movs	r0, #160	; 0xa0
 8003770:	1839      	adds	r1, r7, r0
 8003772:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	249c      	movs	r4, #156	; 0x9c
 800377c:	1939      	adds	r1, r7, r4
 800377e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003780:	0011      	movs	r1, r2
 8003782:	18bb      	adds	r3, r7, r2
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4aa0      	ldr	r2, [pc, #640]	; (8003a08 <HAL_UART_IRQHandler+0x2b4>)
 8003788:	4013      	ands	r3, r2
 800378a:	2298      	movs	r2, #152	; 0x98
 800378c:	18bd      	adds	r5, r7, r2
 800378e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003790:	18bb      	adds	r3, r7, r2
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11a      	bne.n	80037ce <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003798:	187b      	adds	r3, r7, r1
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2220      	movs	r2, #32
 800379e:	4013      	ands	r3, r2
 80037a0:	d015      	beq.n	80037ce <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037a2:	183b      	adds	r3, r7, r0
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2220      	movs	r2, #32
 80037a8:	4013      	ands	r3, r2
 80037aa:	d105      	bne.n	80037b8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	055b      	lsls	r3, r3, #21
 80037b4:	4013      	ands	r3, r2
 80037b6:	d00a      	beq.n	80037ce <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d100      	bne.n	80037c2 <HAL_UART_IRQHandler+0x6e>
 80037c0:	e2cf      	b.n	8003d62 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	0010      	movs	r0, r2
 80037ca:	4798      	blx	r3
      }
      return;
 80037cc:	e2c9      	b.n	8003d62 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037ce:	2398      	movs	r3, #152	; 0x98
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d100      	bne.n	80037da <HAL_UART_IRQHandler+0x86>
 80037d8:	e11e      	b.n	8003a18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037da:	239c      	movs	r3, #156	; 0x9c
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a8a      	ldr	r2, [pc, #552]	; (8003a0c <HAL_UART_IRQHandler+0x2b8>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	d106      	bne.n	80037f4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037e6:	23a0      	movs	r3, #160	; 0xa0
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a88      	ldr	r2, [pc, #544]	; (8003a10 <HAL_UART_IRQHandler+0x2bc>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	d100      	bne.n	80037f4 <HAL_UART_IRQHandler+0xa0>
 80037f2:	e111      	b.n	8003a18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037f4:	23a4      	movs	r3, #164	; 0xa4
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2201      	movs	r2, #1
 80037fc:	4013      	ands	r3, r2
 80037fe:	d012      	beq.n	8003826 <HAL_UART_IRQHandler+0xd2>
 8003800:	23a0      	movs	r3, #160	; 0xa0
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4013      	ands	r3, r2
 800380c:	d00b      	beq.n	8003826 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2201      	movs	r2, #1
 8003814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	228c      	movs	r2, #140	; 0x8c
 800381a:	589b      	ldr	r3, [r3, r2]
 800381c:	2201      	movs	r2, #1
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	218c      	movs	r1, #140	; 0x8c
 8003824:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003826:	23a4      	movs	r3, #164	; 0xa4
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2202      	movs	r2, #2
 800382e:	4013      	ands	r3, r2
 8003830:	d011      	beq.n	8003856 <HAL_UART_IRQHandler+0x102>
 8003832:	239c      	movs	r3, #156	; 0x9c
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	4013      	ands	r3, r2
 800383c:	d00b      	beq.n	8003856 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2202      	movs	r2, #2
 8003844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	228c      	movs	r2, #140	; 0x8c
 800384a:	589b      	ldr	r3, [r3, r2]
 800384c:	2204      	movs	r2, #4
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	218c      	movs	r1, #140	; 0x8c
 8003854:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003856:	23a4      	movs	r3, #164	; 0xa4
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2204      	movs	r2, #4
 800385e:	4013      	ands	r3, r2
 8003860:	d011      	beq.n	8003886 <HAL_UART_IRQHandler+0x132>
 8003862:	239c      	movs	r3, #156	; 0x9c
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	4013      	ands	r3, r2
 800386c:	d00b      	beq.n	8003886 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2204      	movs	r2, #4
 8003874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	228c      	movs	r2, #140	; 0x8c
 800387a:	589b      	ldr	r3, [r3, r2]
 800387c:	2202      	movs	r2, #2
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	218c      	movs	r1, #140	; 0x8c
 8003884:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003886:	23a4      	movs	r3, #164	; 0xa4
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	4013      	ands	r3, r2
 8003890:	d017      	beq.n	80038c2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003892:	23a0      	movs	r3, #160	; 0xa0
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2220      	movs	r2, #32
 800389a:	4013      	ands	r3, r2
 800389c:	d105      	bne.n	80038aa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800389e:	239c      	movs	r3, #156	; 0x9c
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a59      	ldr	r2, [pc, #356]	; (8003a0c <HAL_UART_IRQHandler+0x2b8>)
 80038a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038a8:	d00b      	beq.n	80038c2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2208      	movs	r2, #8
 80038b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	228c      	movs	r2, #140	; 0x8c
 80038b6:	589b      	ldr	r3, [r3, r2]
 80038b8:	2208      	movs	r2, #8
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	218c      	movs	r1, #140	; 0x8c
 80038c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038c2:	23a4      	movs	r3, #164	; 0xa4
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	4013      	ands	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_UART_IRQHandler+0x1a4>
 80038d0:	23a0      	movs	r3, #160	; 0xa0
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	04db      	lsls	r3, r3, #19
 80038da:	4013      	ands	r3, r2
 80038dc:	d00c      	beq.n	80038f8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2280      	movs	r2, #128	; 0x80
 80038e4:	0112      	lsls	r2, r2, #4
 80038e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	228c      	movs	r2, #140	; 0x8c
 80038ec:	589b      	ldr	r3, [r3, r2]
 80038ee:	2220      	movs	r2, #32
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	218c      	movs	r1, #140	; 0x8c
 80038f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	228c      	movs	r2, #140	; 0x8c
 80038fc:	589b      	ldr	r3, [r3, r2]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d100      	bne.n	8003904 <HAL_UART_IRQHandler+0x1b0>
 8003902:	e230      	b.n	8003d66 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003904:	23a4      	movs	r3, #164	; 0xa4
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2220      	movs	r2, #32
 800390c:	4013      	ands	r3, r2
 800390e:	d015      	beq.n	800393c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003910:	23a0      	movs	r3, #160	; 0xa0
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2220      	movs	r2, #32
 8003918:	4013      	ands	r3, r2
 800391a:	d106      	bne.n	800392a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800391c:	239c      	movs	r3, #156	; 0x9c
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	055b      	lsls	r3, r3, #21
 8003926:	4013      	ands	r3, r2
 8003928:	d008      	beq.n	800393c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	0010      	movs	r0, r2
 800393a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	228c      	movs	r2, #140	; 0x8c
 8003940:	589b      	ldr	r3, [r3, r2]
 8003942:	2194      	movs	r1, #148	; 0x94
 8003944:	187a      	adds	r2, r7, r1
 8003946:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	4013      	ands	r3, r2
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d004      	beq.n	8003960 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003956:	187b      	adds	r3, r7, r1
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2228      	movs	r2, #40	; 0x28
 800395c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800395e:	d047      	beq.n	80039f0 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 ff48 	bl	80047f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	4013      	ands	r3, r2
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d137      	bne.n	80039e6 <HAL_UART_IRQHandler+0x292>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003976:	f3ef 8310 	mrs	r3, PRIMASK
 800397a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800397c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	2090      	movs	r0, #144	; 0x90
 8003980:	183a      	adds	r2, r7, r0
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	2301      	movs	r3, #1
 8003986:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800398a:	f383 8810 	msr	PRIMASK, r3
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	438a      	bics	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	183b      	adds	r3, r7, r0
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a8:	f383 8810 	msr	PRIMASK, r3
}
 80039ac:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d012      	beq.n	80039dc <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ba:	4a16      	ldr	r2, [pc, #88]	; (8003a14 <HAL_UART_IRQHandler+0x2c0>)
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fd fd3e 	bl	8001444 <HAL_DMA_Abort_IT>
 80039c8:	1e03      	subs	r3, r0, #0
 80039ca:	d01a      	beq.n	8003a02 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d6:	0018      	movs	r0, r3
 80039d8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039da:	e012      	b.n	8003a02 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	0018      	movs	r0, r3
 80039e0:	f000 f9da 	bl	8003d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	e00d      	b.n	8003a02 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 f9d5 	bl	8003d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ee:	e008      	b.n	8003a02 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 f9d0 	bl	8003d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	228c      	movs	r2, #140	; 0x8c
 80039fc:	2100      	movs	r1, #0
 80039fe:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a00:	e1b1      	b.n	8003d66 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a02:	46c0      	nop			; (mov r8, r8)
    return;
 8003a04:	e1af      	b.n	8003d66 <HAL_UART_IRQHandler+0x612>
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	0000080f 	.word	0x0000080f
 8003a0c:	10000001 	.word	0x10000001
 8003a10:	04000120 	.word	0x04000120
 8003a14:	080048c5 	.word	0x080048c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d000      	beq.n	8003a22 <HAL_UART_IRQHandler+0x2ce>
 8003a20:	e135      	b.n	8003c8e <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a22:	23a4      	movs	r3, #164	; 0xa4
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d100      	bne.n	8003a30 <HAL_UART_IRQHandler+0x2dc>
 8003a2e:	e12e      	b.n	8003c8e <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a30:	23a0      	movs	r3, #160	; 0xa0
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2210      	movs	r2, #16
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <HAL_UART_IRQHandler+0x2ea>
 8003a3c:	e127      	b.n	8003c8e <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2210      	movs	r2, #16
 8003a44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2240      	movs	r2, #64	; 0x40
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d000      	beq.n	8003a56 <HAL_UART_IRQHandler+0x302>
 8003a54:	e09e      	b.n	8003b94 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	217e      	movs	r1, #126	; 0x7e
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d100      	bne.n	8003a6e <HAL_UART_IRQHandler+0x31a>
 8003a6c:	e17d      	b.n	8003d6a <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	225c      	movs	r2, #92	; 0x5c
 8003a72:	5a9b      	ldrh	r3, [r3, r2]
 8003a74:	187a      	adds	r2, r7, r1
 8003a76:	8812      	ldrh	r2, [r2, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d300      	bcc.n	8003a7e <HAL_UART_IRQHandler+0x32a>
 8003a7c:	e175      	b.n	8003d6a <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	187a      	adds	r2, r7, r1
 8003a82:	215e      	movs	r1, #94	; 0x5e
 8003a84:	8812      	ldrh	r2, [r2, #0]
 8003a86:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2220      	movs	r2, #32
 8003a92:	4013      	ands	r3, r2
 8003a94:	d16f      	bne.n	8003b76 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a96:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa6:	f383 8810 	msr	PRIMASK, r3
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	49b1      	ldr	r1, [pc, #708]	; (8003d7c <HAL_UART_IRQHandler+0x628>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	f383 8810 	msr	PRIMASK, r3
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8003acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	677b      	str	r3, [r7, #116]	; 0x74
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad8:	f383 8810 	msr	PRIMASK, r3
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	438a      	bics	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af4:	f383 8810 	msr	PRIMASK, r3
}
 8003af8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afa:	f3ef 8310 	mrs	r3, PRIMASK
 8003afe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	673b      	str	r3, [r7, #112]	; 0x70
 8003b04:	2301      	movs	r3, #1
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0a:	f383 8810 	msr	PRIMASK, r3
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2140      	movs	r1, #64	; 0x40
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b22:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2288      	movs	r2, #136	; 0x88
 8003b30:	2120      	movs	r1, #32
 8003b32:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b44:	2301      	movs	r3, #1
 8003b46:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2110      	movs	r1, #16
 8003b5c:	438a      	bics	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b66:	f383 8810 	msr	PRIMASK, r3
}
 8003b6a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7fd fc07 	bl	8001384 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	225c      	movs	r2, #92	; 0x5c
 8003b7a:	5a9a      	ldrh	r2, [r3, r2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	215e      	movs	r1, #94	; 0x5e
 8003b80:	5a5b      	ldrh	r3, [r3, r1]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	0011      	movs	r1, r2
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f000 f90b 	bl	8003da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b92:	e0ea      	b.n	8003d6a <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	225c      	movs	r2, #92	; 0x5c
 8003b98:	5a99      	ldrh	r1, [r3, r2]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	225e      	movs	r2, #94	; 0x5e
 8003b9e:	5a9b      	ldrh	r3, [r3, r2]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	208e      	movs	r0, #142	; 0x8e
 8003ba4:	183b      	adds	r3, r7, r0
 8003ba6:	1a8a      	subs	r2, r1, r2
 8003ba8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	225e      	movs	r2, #94	; 0x5e
 8003bae:	5a9b      	ldrh	r3, [r3, r2]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d100      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x464>
 8003bb6:	e0da      	b.n	8003d6e <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d100      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x46e>
 8003bc0:	e0d5      	b.n	8003d6e <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bca:	2488      	movs	r4, #136	; 0x88
 8003bcc:	193a      	adds	r2, r7, r4
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f383 8810 	msr	PRIMASK, r3
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4966      	ldr	r1, [pc, #408]	; (8003d80 <HAL_UART_IRQHandler+0x62c>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	193b      	adds	r3, r7, r4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f383 8810 	msr	PRIMASK, r3
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c00:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c02:	2484      	movs	r4, #132	; 0x84
 8003c04:	193a      	adds	r2, r7, r4
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f383 8810 	msr	PRIMASK, r3
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4959      	ldr	r1, [pc, #356]	; (8003d84 <HAL_UART_IRQHandler+0x630>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	193b      	adds	r3, r7, r4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	f383 8810 	msr	PRIMASK, r3
}
 8003c30:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2288      	movs	r2, #136	; 0x88
 8003c36:	2120      	movs	r1, #32
 8003c38:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c46:	f3ef 8310 	mrs	r3, PRIMASK
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4e:	2480      	movs	r4, #128	; 0x80
 8003c50:	193a      	adds	r2, r7, r4
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	2301      	movs	r3, #1
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2110      	movs	r1, #16
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	193b      	adds	r3, r7, r4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c7e:	183b      	adds	r3, r7, r0
 8003c80:	881a      	ldrh	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0011      	movs	r1, r2
 8003c86:	0018      	movs	r0, r3
 8003c88:	f000 f88e 	bl	8003da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c8c:	e06f      	b.n	8003d6e <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c8e:	23a4      	movs	r3, #164	; 0xa4
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	035b      	lsls	r3, r3, #13
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d010      	beq.n	8003cbe <HAL_UART_IRQHandler+0x56a>
 8003c9c:	239c      	movs	r3, #156	; 0x9c
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	03db      	lsls	r3, r3, #15
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2280      	movs	r2, #128	; 0x80
 8003cb0:	0352      	lsls	r2, r2, #13
 8003cb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 fe47 	bl	800494a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cbc:	e05a      	b.n	8003d74 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003cbe:	23a4      	movs	r3, #164	; 0xa4
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d016      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003cca:	23a0      	movs	r3, #160	; 0xa0
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d106      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003cd6:	239c      	movs	r3, #156	; 0x9c
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d042      	beq.n	8003d72 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	0010      	movs	r0, r2
 8003cf4:	4798      	blx	r3
    }
    return;
 8003cf6:	e03c      	b.n	8003d72 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cf8:	23a4      	movs	r3, #164	; 0xa4
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2240      	movs	r2, #64	; 0x40
 8003d00:	4013      	ands	r3, r2
 8003d02:	d00a      	beq.n	8003d1a <HAL_UART_IRQHandler+0x5c6>
 8003d04:	23a0      	movs	r3, #160	; 0xa0
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2240      	movs	r2, #64	; 0x40
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 fded 	bl	80048f2 <UART_EndTransmit_IT>
    return;
 8003d18:	e02c      	b.n	8003d74 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d1a:	23a4      	movs	r3, #164	; 0xa4
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	4013      	ands	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <HAL_UART_IRQHandler+0x5ec>
 8003d28:	23a0      	movs	r3, #160	; 0xa0
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	05db      	lsls	r3, r3, #23
 8003d32:	4013      	ands	r3, r2
 8003d34:	d004      	beq.n	8003d40 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f000 fe16 	bl	800496a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d3e:	e019      	b.n	8003d74 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d40:	23a4      	movs	r3, #164	; 0xa4
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	045b      	lsls	r3, r3, #17
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d012      	beq.n	8003d74 <HAL_UART_IRQHandler+0x620>
 8003d4e:	23a0      	movs	r3, #160	; 0xa0
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	da0d      	bge.n	8003d74 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 fdfd 	bl	800495a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d60:	e008      	b.n	8003d74 <HAL_UART_IRQHandler+0x620>
      return;
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	e006      	b.n	8003d74 <HAL_UART_IRQHandler+0x620>
    return;
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	e004      	b.n	8003d74 <HAL_UART_IRQHandler+0x620>
      return;
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	e002      	b.n	8003d74 <HAL_UART_IRQHandler+0x620>
      return;
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	e000      	b.n	8003d74 <HAL_UART_IRQHandler+0x620>
    return;
 8003d72:	46c0      	nop			; (mov r8, r8)
  }
}
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b02a      	add	sp, #168	; 0xa8
 8003d78:	bdb0      	pop	{r4, r5, r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	fffffeff 	.word	0xfffffeff
 8003d80:	fffffedf 	.word	0xfffffedf
 8003d84:	effffffe 	.word	0xeffffffe

08003d88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	000a      	movs	r2, r1
 8003db2:	1cbb      	adds	r3, r7, #2
 8003db4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc0:	b5b0      	push	{r4, r5, r7, lr}
 8003dc2:	b090      	sub	sp, #64	; 0x40
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc8:	231a      	movs	r3, #26
 8003dca:	2220      	movs	r2, #32
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	19db      	adds	r3, r3, r7
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4ac1      	ldr	r2, [pc, #772]	; (80040f8 <UART_SetConfig+0x338>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	0019      	movs	r1, r3
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4abc      	ldr	r2, [pc, #752]	; (80040fc <UART_SetConfig+0x33c>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	68d9      	ldr	r1, [r3, #12]
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	0003      	movs	r3, r0
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4ab6      	ldr	r2, [pc, #728]	; (8004100 <UART_SetConfig+0x340>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <UART_SetConfig+0x80>
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4ab4      	ldr	r2, [pc, #720]	; (8004104 <UART_SetConfig+0x344>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4ab0      	ldr	r2, [pc, #704]	; (8004108 <UART_SetConfig+0x348>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	0019      	movs	r1, r3
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e52:	430b      	orrs	r3, r1
 8003e54:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	4393      	bics	r3, r2
 8003e60:	0018      	movs	r0, r3
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4aa5      	ldr	r2, [pc, #660]	; (800410c <UART_SetConfig+0x34c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d131      	bne.n	8003ede <UART_SetConfig+0x11e>
 8003e7a:	4ba5      	ldr	r3, [pc, #660]	; (8004110 <UART_SetConfig+0x350>)
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	2203      	movs	r2, #3
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d01d      	beq.n	8003ec2 <UART_SetConfig+0x102>
 8003e86:	d823      	bhi.n	8003ed0 <UART_SetConfig+0x110>
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d00c      	beq.n	8003ea6 <UART_SetConfig+0xe6>
 8003e8c:	d820      	bhi.n	8003ed0 <UART_SetConfig+0x110>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <UART_SetConfig+0xd8>
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d00e      	beq.n	8003eb4 <UART_SetConfig+0xf4>
 8003e96:	e01b      	b.n	8003ed0 <UART_SetConfig+0x110>
 8003e98:	231b      	movs	r3, #27
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	189b      	adds	r3, r3, r2
 8003e9e:	19db      	adds	r3, r3, r7
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	e154      	b.n	8004150 <UART_SetConfig+0x390>
 8003ea6:	231b      	movs	r3, #27
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	19db      	adds	r3, r3, r7
 8003eae:	2202      	movs	r2, #2
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e14d      	b.n	8004150 <UART_SetConfig+0x390>
 8003eb4:	231b      	movs	r3, #27
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	189b      	adds	r3, r3, r2
 8003eba:	19db      	adds	r3, r3, r7
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e146      	b.n	8004150 <UART_SetConfig+0x390>
 8003ec2:	231b      	movs	r3, #27
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	19db      	adds	r3, r3, r7
 8003eca:	2208      	movs	r2, #8
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e13f      	b.n	8004150 <UART_SetConfig+0x390>
 8003ed0:	231b      	movs	r3, #27
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	2210      	movs	r2, #16
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e138      	b.n	8004150 <UART_SetConfig+0x390>
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a8c      	ldr	r2, [pc, #560]	; (8004114 <UART_SetConfig+0x354>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d131      	bne.n	8003f4c <UART_SetConfig+0x18c>
 8003ee8:	4b89      	ldr	r3, [pc, #548]	; (8004110 <UART_SetConfig+0x350>)
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	220c      	movs	r2, #12
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b0c      	cmp	r3, #12
 8003ef2:	d01d      	beq.n	8003f30 <UART_SetConfig+0x170>
 8003ef4:	d823      	bhi.n	8003f3e <UART_SetConfig+0x17e>
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d00c      	beq.n	8003f14 <UART_SetConfig+0x154>
 8003efa:	d820      	bhi.n	8003f3e <UART_SetConfig+0x17e>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <UART_SetConfig+0x146>
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d00e      	beq.n	8003f22 <UART_SetConfig+0x162>
 8003f04:	e01b      	b.n	8003f3e <UART_SetConfig+0x17e>
 8003f06:	231b      	movs	r3, #27
 8003f08:	2220      	movs	r2, #32
 8003f0a:	189b      	adds	r3, r3, r2
 8003f0c:	19db      	adds	r3, r3, r7
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e11d      	b.n	8004150 <UART_SetConfig+0x390>
 8003f14:	231b      	movs	r3, #27
 8003f16:	2220      	movs	r2, #32
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	19db      	adds	r3, r3, r7
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e116      	b.n	8004150 <UART_SetConfig+0x390>
 8003f22:	231b      	movs	r3, #27
 8003f24:	2220      	movs	r2, #32
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	19db      	adds	r3, r3, r7
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e10f      	b.n	8004150 <UART_SetConfig+0x390>
 8003f30:	231b      	movs	r3, #27
 8003f32:	2220      	movs	r2, #32
 8003f34:	189b      	adds	r3, r3, r2
 8003f36:	19db      	adds	r3, r3, r7
 8003f38:	2208      	movs	r2, #8
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e108      	b.n	8004150 <UART_SetConfig+0x390>
 8003f3e:	231b      	movs	r3, #27
 8003f40:	2220      	movs	r2, #32
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	19db      	adds	r3, r3, r7
 8003f46:	2210      	movs	r2, #16
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e101      	b.n	8004150 <UART_SetConfig+0x390>
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a71      	ldr	r2, [pc, #452]	; (8004118 <UART_SetConfig+0x358>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d131      	bne.n	8003fba <UART_SetConfig+0x1fa>
 8003f56:	4b6e      	ldr	r3, [pc, #440]	; (8004110 <UART_SetConfig+0x350>)
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	2230      	movs	r2, #48	; 0x30
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b30      	cmp	r3, #48	; 0x30
 8003f60:	d01d      	beq.n	8003f9e <UART_SetConfig+0x1de>
 8003f62:	d823      	bhi.n	8003fac <UART_SetConfig+0x1ec>
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d00c      	beq.n	8003f82 <UART_SetConfig+0x1c2>
 8003f68:	d820      	bhi.n	8003fac <UART_SetConfig+0x1ec>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <UART_SetConfig+0x1b4>
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d00e      	beq.n	8003f90 <UART_SetConfig+0x1d0>
 8003f72:	e01b      	b.n	8003fac <UART_SetConfig+0x1ec>
 8003f74:	231b      	movs	r3, #27
 8003f76:	2220      	movs	r2, #32
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	19db      	adds	r3, r3, r7
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e0e6      	b.n	8004150 <UART_SetConfig+0x390>
 8003f82:	231b      	movs	r3, #27
 8003f84:	2220      	movs	r2, #32
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	19db      	adds	r3, r3, r7
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e0df      	b.n	8004150 <UART_SetConfig+0x390>
 8003f90:	231b      	movs	r3, #27
 8003f92:	2220      	movs	r2, #32
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	19db      	adds	r3, r3, r7
 8003f98:	2204      	movs	r2, #4
 8003f9a:	701a      	strb	r2, [r3, #0]
 8003f9c:	e0d8      	b.n	8004150 <UART_SetConfig+0x390>
 8003f9e:	231b      	movs	r3, #27
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	19db      	adds	r3, r3, r7
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e0d1      	b.n	8004150 <UART_SetConfig+0x390>
 8003fac:	231b      	movs	r3, #27
 8003fae:	2220      	movs	r2, #32
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e0ca      	b.n	8004150 <UART_SetConfig+0x390>
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a57      	ldr	r2, [pc, #348]	; (800411c <UART_SetConfig+0x35c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d106      	bne.n	8003fd2 <UART_SetConfig+0x212>
 8003fc4:	231b      	movs	r3, #27
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	189b      	adds	r3, r3, r2
 8003fca:	19db      	adds	r3, r3, r7
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e0be      	b.n	8004150 <UART_SetConfig+0x390>
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a52      	ldr	r2, [pc, #328]	; (8004120 <UART_SetConfig+0x360>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d106      	bne.n	8003fea <UART_SetConfig+0x22a>
 8003fdc:	231b      	movs	r3, #27
 8003fde:	2220      	movs	r2, #32
 8003fe0:	189b      	adds	r3, r3, r2
 8003fe2:	19db      	adds	r3, r3, r7
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e0b2      	b.n	8004150 <UART_SetConfig+0x390>
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a4d      	ldr	r2, [pc, #308]	; (8004124 <UART_SetConfig+0x364>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d106      	bne.n	8004002 <UART_SetConfig+0x242>
 8003ff4:	231b      	movs	r3, #27
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	189b      	adds	r3, r3, r2
 8003ffa:	19db      	adds	r3, r3, r7
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e0a6      	b.n	8004150 <UART_SetConfig+0x390>
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a3e      	ldr	r2, [pc, #248]	; (8004100 <UART_SetConfig+0x340>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d13e      	bne.n	800408a <UART_SetConfig+0x2ca>
 800400c:	4b40      	ldr	r3, [pc, #256]	; (8004110 <UART_SetConfig+0x350>)
 800400e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004010:	23c0      	movs	r3, #192	; 0xc0
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	4013      	ands	r3, r2
 8004016:	22c0      	movs	r2, #192	; 0xc0
 8004018:	0112      	lsls	r2, r2, #4
 800401a:	4293      	cmp	r3, r2
 800401c:	d027      	beq.n	800406e <UART_SetConfig+0x2ae>
 800401e:	22c0      	movs	r2, #192	; 0xc0
 8004020:	0112      	lsls	r2, r2, #4
 8004022:	4293      	cmp	r3, r2
 8004024:	d82a      	bhi.n	800407c <UART_SetConfig+0x2bc>
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	0112      	lsls	r2, r2, #4
 800402a:	4293      	cmp	r3, r2
 800402c:	d011      	beq.n	8004052 <UART_SetConfig+0x292>
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	4293      	cmp	r3, r2
 8004034:	d822      	bhi.n	800407c <UART_SetConfig+0x2bc>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <UART_SetConfig+0x284>
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	00d2      	lsls	r2, r2, #3
 800403e:	4293      	cmp	r3, r2
 8004040:	d00e      	beq.n	8004060 <UART_SetConfig+0x2a0>
 8004042:	e01b      	b.n	800407c <UART_SetConfig+0x2bc>
 8004044:	231b      	movs	r3, #27
 8004046:	2220      	movs	r2, #32
 8004048:	189b      	adds	r3, r3, r2
 800404a:	19db      	adds	r3, r3, r7
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	e07e      	b.n	8004150 <UART_SetConfig+0x390>
 8004052:	231b      	movs	r3, #27
 8004054:	2220      	movs	r2, #32
 8004056:	189b      	adds	r3, r3, r2
 8004058:	19db      	adds	r3, r3, r7
 800405a:	2202      	movs	r2, #2
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e077      	b.n	8004150 <UART_SetConfig+0x390>
 8004060:	231b      	movs	r3, #27
 8004062:	2220      	movs	r2, #32
 8004064:	189b      	adds	r3, r3, r2
 8004066:	19db      	adds	r3, r3, r7
 8004068:	2204      	movs	r2, #4
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e070      	b.n	8004150 <UART_SetConfig+0x390>
 800406e:	231b      	movs	r3, #27
 8004070:	2220      	movs	r2, #32
 8004072:	189b      	adds	r3, r3, r2
 8004074:	19db      	adds	r3, r3, r7
 8004076:	2208      	movs	r2, #8
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	e069      	b.n	8004150 <UART_SetConfig+0x390>
 800407c:	231b      	movs	r3, #27
 800407e:	2220      	movs	r2, #32
 8004080:	189b      	adds	r3, r3, r2
 8004082:	19db      	adds	r3, r3, r7
 8004084:	2210      	movs	r2, #16
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	e062      	b.n	8004150 <UART_SetConfig+0x390>
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <UART_SetConfig+0x344>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d157      	bne.n	8004144 <UART_SetConfig+0x384>
 8004094:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <UART_SetConfig+0x350>)
 8004096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004098:	23c0      	movs	r3, #192	; 0xc0
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4013      	ands	r3, r2
 800409e:	22c0      	movs	r2, #192	; 0xc0
 80040a0:	0092      	lsls	r2, r2, #2
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d040      	beq.n	8004128 <UART_SetConfig+0x368>
 80040a6:	22c0      	movs	r2, #192	; 0xc0
 80040a8:	0092      	lsls	r2, r2, #2
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d843      	bhi.n	8004136 <UART_SetConfig+0x376>
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	0092      	lsls	r2, r2, #2
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d011      	beq.n	80040da <UART_SetConfig+0x31a>
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	0092      	lsls	r2, r2, #2
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d83b      	bhi.n	8004136 <UART_SetConfig+0x376>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <UART_SetConfig+0x30c>
 80040c2:	2280      	movs	r2, #128	; 0x80
 80040c4:	0052      	lsls	r2, r2, #1
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <UART_SetConfig+0x328>
 80040ca:	e034      	b.n	8004136 <UART_SetConfig+0x376>
 80040cc:	231b      	movs	r3, #27
 80040ce:	2220      	movs	r2, #32
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	19db      	adds	r3, r3, r7
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e03a      	b.n	8004150 <UART_SetConfig+0x390>
 80040da:	231b      	movs	r3, #27
 80040dc:	2220      	movs	r2, #32
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	19db      	adds	r3, r3, r7
 80040e2:	2202      	movs	r2, #2
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e033      	b.n	8004150 <UART_SetConfig+0x390>
 80040e8:	231b      	movs	r3, #27
 80040ea:	2220      	movs	r2, #32
 80040ec:	189b      	adds	r3, r3, r2
 80040ee:	19db      	adds	r3, r3, r7
 80040f0:	2204      	movs	r2, #4
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e02c      	b.n	8004150 <UART_SetConfig+0x390>
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	cfff69f3 	.word	0xcfff69f3
 80040fc:	ffffcfff 	.word	0xffffcfff
 8004100:	40008000 	.word	0x40008000
 8004104:	40008400 	.word	0x40008400
 8004108:	11fff4ff 	.word	0x11fff4ff
 800410c:	40013800 	.word	0x40013800
 8004110:	40021000 	.word	0x40021000
 8004114:	40004400 	.word	0x40004400
 8004118:	40004800 	.word	0x40004800
 800411c:	40004c00 	.word	0x40004c00
 8004120:	40005000 	.word	0x40005000
 8004124:	40013c00 	.word	0x40013c00
 8004128:	231b      	movs	r3, #27
 800412a:	2220      	movs	r2, #32
 800412c:	189b      	adds	r3, r3, r2
 800412e:	19db      	adds	r3, r3, r7
 8004130:	2208      	movs	r2, #8
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e00c      	b.n	8004150 <UART_SetConfig+0x390>
 8004136:	231b      	movs	r3, #27
 8004138:	2220      	movs	r2, #32
 800413a:	189b      	adds	r3, r3, r2
 800413c:	19db      	adds	r3, r3, r7
 800413e:	2210      	movs	r2, #16
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e005      	b.n	8004150 <UART_SetConfig+0x390>
 8004144:	231b      	movs	r3, #27
 8004146:	2220      	movs	r2, #32
 8004148:	189b      	adds	r3, r3, r2
 800414a:	19db      	adds	r3, r3, r7
 800414c:	2210      	movs	r2, #16
 800414e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4ac1      	ldr	r2, [pc, #772]	; (800445c <UART_SetConfig+0x69c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d005      	beq.n	8004166 <UART_SetConfig+0x3a6>
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4ac0      	ldr	r2, [pc, #768]	; (8004460 <UART_SetConfig+0x6a0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d000      	beq.n	8004166 <UART_SetConfig+0x3a6>
 8004164:	e093      	b.n	800428e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004166:	231b      	movs	r3, #27
 8004168:	2220      	movs	r2, #32
 800416a:	189b      	adds	r3, r3, r2
 800416c:	19db      	adds	r3, r3, r7
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d015      	beq.n	80041a0 <UART_SetConfig+0x3e0>
 8004174:	dc18      	bgt.n	80041a8 <UART_SetConfig+0x3e8>
 8004176:	2b04      	cmp	r3, #4
 8004178:	d00d      	beq.n	8004196 <UART_SetConfig+0x3d6>
 800417a:	dc15      	bgt.n	80041a8 <UART_SetConfig+0x3e8>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <UART_SetConfig+0x3c6>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d005      	beq.n	8004190 <UART_SetConfig+0x3d0>
 8004184:	e010      	b.n	80041a8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004186:	f7fe f88f 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 800418a:	0003      	movs	r3, r0
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800418e:	e014      	b.n	80041ba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004190:	4bb4      	ldr	r3, [pc, #720]	; (8004464 <UART_SetConfig+0x6a4>)
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004194:	e011      	b.n	80041ba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fd fffb 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800419a:	0003      	movs	r3, r0
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800419e:	e00c      	b.n	80041ba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041a6:	e008      	b.n	80041ba <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80041ac:	231a      	movs	r3, #26
 80041ae:	2220      	movs	r2, #32
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	19db      	adds	r3, r3, r7
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
        break;
 80041b8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d100      	bne.n	80041c2 <UART_SetConfig+0x402>
 80041c0:	e135      	b.n	800442e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c6:	4ba8      	ldr	r3, [pc, #672]	; (8004468 <UART_SetConfig+0x6a8>)
 80041c8:	0052      	lsls	r2, r2, #1
 80041ca:	5ad3      	ldrh	r3, [r2, r3]
 80041cc:	0019      	movs	r1, r3
 80041ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041d0:	f7fb ffa0 	bl	8000114 <__udivsi3>
 80041d4:	0003      	movs	r3, r0
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	0013      	movs	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	189b      	adds	r3, r3, r2
 80041e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d305      	bcc.n	80041f4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d906      	bls.n	8004202 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80041f4:	231a      	movs	r3, #26
 80041f6:	2220      	movs	r2, #32
 80041f8:	189b      	adds	r3, r3, r2
 80041fa:	19db      	adds	r3, r3, r7
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e044      	b.n	800428c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800420e:	4b96      	ldr	r3, [pc, #600]	; (8004468 <UART_SetConfig+0x6a8>)
 8004210:	0052      	lsls	r2, r2, #1
 8004212:	5ad3      	ldrh	r3, [r2, r3]
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	69b8      	ldr	r0, [r7, #24]
 8004220:	69f9      	ldr	r1, [r7, #28]
 8004222:	f7fc f8ed 	bl	8000400 <__aeabi_uldivmod>
 8004226:	0002      	movs	r2, r0
 8004228:	000b      	movs	r3, r1
 800422a:	0e11      	lsrs	r1, r2, #24
 800422c:	021d      	lsls	r5, r3, #8
 800422e:	430d      	orrs	r5, r1
 8004230:	0214      	lsls	r4, r2, #8
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68b8      	ldr	r0, [r7, #8]
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	1900      	adds	r0, r0, r4
 8004244:	4169      	adcs	r1, r5
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	2300      	movs	r3, #0
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f7fc f8d4 	bl	8000400 <__aeabi_uldivmod>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	0013      	movs	r3, r2
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004262:	23c0      	movs	r3, #192	; 0xc0
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	429a      	cmp	r2, r3
 8004268:	d309      	bcc.n	800427e <UART_SetConfig+0x4be>
 800426a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	035b      	lsls	r3, r3, #13
 8004270:	429a      	cmp	r2, r3
 8004272:	d204      	bcs.n	800427e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	e006      	b.n	800428c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800427e:	231a      	movs	r3, #26
 8004280:	2220      	movs	r2, #32
 8004282:	189b      	adds	r3, r3, r2
 8004284:	19db      	adds	r3, r3, r7
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800428a:	e0d0      	b.n	800442e <UART_SetConfig+0x66e>
 800428c:	e0cf      	b.n	800442e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	429a      	cmp	r2, r3
 8004298:	d000      	beq.n	800429c <UART_SetConfig+0x4dc>
 800429a:	e070      	b.n	800437e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800429c:	231b      	movs	r3, #27
 800429e:	2220      	movs	r2, #32
 80042a0:	189b      	adds	r3, r3, r2
 80042a2:	19db      	adds	r3, r3, r7
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d015      	beq.n	80042d6 <UART_SetConfig+0x516>
 80042aa:	dc18      	bgt.n	80042de <UART_SetConfig+0x51e>
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d00d      	beq.n	80042cc <UART_SetConfig+0x50c>
 80042b0:	dc15      	bgt.n	80042de <UART_SetConfig+0x51e>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <UART_SetConfig+0x4fc>
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d005      	beq.n	80042c6 <UART_SetConfig+0x506>
 80042ba:	e010      	b.n	80042de <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042bc:	f7fd fff4 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 80042c0:	0003      	movs	r3, r0
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042c4:	e014      	b.n	80042f0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c6:	4b67      	ldr	r3, [pc, #412]	; (8004464 <UART_SetConfig+0x6a4>)
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042ca:	e011      	b.n	80042f0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042cc:	f7fd ff60 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 80042d0:	0003      	movs	r3, r0
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042d4:	e00c      	b.n	80042f0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042dc:	e008      	b.n	80042f0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80042e2:	231a      	movs	r3, #26
 80042e4:	2220      	movs	r2, #32
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	19db      	adds	r3, r3, r7
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
        break;
 80042ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d100      	bne.n	80042f8 <UART_SetConfig+0x538>
 80042f6:	e09a      	b.n	800442e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042fc:	4b5a      	ldr	r3, [pc, #360]	; (8004468 <UART_SetConfig+0x6a8>)
 80042fe:	0052      	lsls	r2, r2, #1
 8004300:	5ad3      	ldrh	r3, [r2, r3]
 8004302:	0019      	movs	r1, r3
 8004304:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004306:	f7fb ff05 	bl	8000114 <__udivsi3>
 800430a:	0003      	movs	r3, r0
 800430c:	005a      	lsls	r2, r3, #1
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	18d2      	adds	r2, r2, r3
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	0019      	movs	r1, r3
 800431c:	0010      	movs	r0, r2
 800431e:	f7fb fef9 	bl	8000114 <__udivsi3>
 8004322:	0003      	movs	r3, r0
 8004324:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	2b0f      	cmp	r3, #15
 800432a:	d921      	bls.n	8004370 <UART_SetConfig+0x5b0>
 800432c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	025b      	lsls	r3, r3, #9
 8004332:	429a      	cmp	r2, r3
 8004334:	d21c      	bcs.n	8004370 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	b29a      	uxth	r2, r3
 800433a:	200e      	movs	r0, #14
 800433c:	2420      	movs	r4, #32
 800433e:	1903      	adds	r3, r0, r4
 8004340:	19db      	adds	r3, r3, r7
 8004342:	210f      	movs	r1, #15
 8004344:	438a      	bics	r2, r1
 8004346:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	b29b      	uxth	r3, r3
 800434e:	2207      	movs	r2, #7
 8004350:	4013      	ands	r3, r2
 8004352:	b299      	uxth	r1, r3
 8004354:	1903      	adds	r3, r0, r4
 8004356:	19db      	adds	r3, r3, r7
 8004358:	1902      	adds	r2, r0, r4
 800435a:	19d2      	adds	r2, r2, r7
 800435c:	8812      	ldrh	r2, [r2, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	1902      	adds	r2, r0, r4
 8004368:	19d2      	adds	r2, r2, r7
 800436a:	8812      	ldrh	r2, [r2, #0]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	e05e      	b.n	800442e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004370:	231a      	movs	r3, #26
 8004372:	2220      	movs	r2, #32
 8004374:	189b      	adds	r3, r3, r2
 8004376:	19db      	adds	r3, r3, r7
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e057      	b.n	800442e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800437e:	231b      	movs	r3, #27
 8004380:	2220      	movs	r2, #32
 8004382:	189b      	adds	r3, r3, r2
 8004384:	19db      	adds	r3, r3, r7
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d015      	beq.n	80043b8 <UART_SetConfig+0x5f8>
 800438c:	dc18      	bgt.n	80043c0 <UART_SetConfig+0x600>
 800438e:	2b04      	cmp	r3, #4
 8004390:	d00d      	beq.n	80043ae <UART_SetConfig+0x5ee>
 8004392:	dc15      	bgt.n	80043c0 <UART_SetConfig+0x600>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <UART_SetConfig+0x5de>
 8004398:	2b02      	cmp	r3, #2
 800439a:	d005      	beq.n	80043a8 <UART_SetConfig+0x5e8>
 800439c:	e010      	b.n	80043c0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800439e:	f7fd ff83 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 80043a2:	0003      	movs	r3, r0
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043a6:	e014      	b.n	80043d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a8:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <UART_SetConfig+0x6a4>)
 80043aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043ac:	e011      	b.n	80043d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ae:	f7fd feef 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 80043b2:	0003      	movs	r3, r0
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043b6:	e00c      	b.n	80043d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043be:	e008      	b.n	80043d2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80043c4:	231a      	movs	r3, #26
 80043c6:	2220      	movs	r2, #32
 80043c8:	189b      	adds	r3, r3, r2
 80043ca:	19db      	adds	r3, r3, r7
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
        break;
 80043d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d02a      	beq.n	800442e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043dc:	4b22      	ldr	r3, [pc, #136]	; (8004468 <UART_SetConfig+0x6a8>)
 80043de:	0052      	lsls	r2, r2, #1
 80043e0:	5ad3      	ldrh	r3, [r2, r3]
 80043e2:	0019      	movs	r1, r3
 80043e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043e6:	f7fb fe95 	bl	8000114 <__udivsi3>
 80043ea:	0003      	movs	r3, r0
 80043ec:	001a      	movs	r2, r3
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	18d2      	adds	r2, r2, r3
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	0019      	movs	r1, r3
 80043fc:	0010      	movs	r0, r2
 80043fe:	f7fb fe89 	bl	8000114 <__udivsi3>
 8004402:	0003      	movs	r3, r0
 8004404:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	2b0f      	cmp	r3, #15
 800440a:	d90a      	bls.n	8004422 <UART_SetConfig+0x662>
 800440c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	429a      	cmp	r2, r3
 8004414:	d205      	bcs.n	8004422 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	b29a      	uxth	r2, r3
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60da      	str	r2, [r3, #12]
 8004420:	e005      	b.n	800442e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004422:	231a      	movs	r3, #26
 8004424:	2220      	movs	r2, #32
 8004426:	189b      	adds	r3, r3, r2
 8004428:	19db      	adds	r3, r3, r7
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	226a      	movs	r2, #106	; 0x6a
 8004432:	2101      	movs	r1, #1
 8004434:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	2268      	movs	r2, #104	; 0x68
 800443a:	2101      	movs	r1, #1
 800443c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	2200      	movs	r2, #0
 8004442:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	2200      	movs	r2, #0
 8004448:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800444a:	231a      	movs	r3, #26
 800444c:	2220      	movs	r2, #32
 800444e:	189b      	adds	r3, r3, r2
 8004450:	19db      	adds	r3, r3, r7
 8004452:	781b      	ldrb	r3, [r3, #0]
}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	b010      	add	sp, #64	; 0x40
 800445a:	bdb0      	pop	{r4, r5, r7, pc}
 800445c:	40008000 	.word	0x40008000
 8004460:	40008400 	.word	0x40008400
 8004464:	00f42400 	.word	0x00f42400
 8004468:	08004ca8 	.word	0x08004ca8

0800446c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	2201      	movs	r2, #1
 800447a:	4013      	ands	r3, r2
 800447c:	d00b      	beq.n	8004496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a4a      	ldr	r2, [pc, #296]	; (80045b0 <UART_AdvFeatureConfig+0x144>)
 8004486:	4013      	ands	r3, r2
 8004488:	0019      	movs	r1, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	2202      	movs	r2, #2
 800449c:	4013      	ands	r3, r2
 800449e:	d00b      	beq.n	80044b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4a43      	ldr	r2, [pc, #268]	; (80045b4 <UART_AdvFeatureConfig+0x148>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	0019      	movs	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	2204      	movs	r2, #4
 80044be:	4013      	ands	r3, r2
 80044c0:	d00b      	beq.n	80044da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a3b      	ldr	r2, [pc, #236]	; (80045b8 <UART_AdvFeatureConfig+0x14c>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	0019      	movs	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	2208      	movs	r2, #8
 80044e0:	4013      	ands	r3, r2
 80044e2:	d00b      	beq.n	80044fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4a34      	ldr	r2, [pc, #208]	; (80045bc <UART_AdvFeatureConfig+0x150>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	2210      	movs	r2, #16
 8004502:	4013      	ands	r3, r2
 8004504:	d00b      	beq.n	800451e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <UART_AdvFeatureConfig+0x154>)
 800450e:	4013      	ands	r3, r2
 8004510:	0019      	movs	r1, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	2220      	movs	r2, #32
 8004524:	4013      	ands	r3, r2
 8004526:	d00b      	beq.n	8004540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <UART_AdvFeatureConfig+0x158>)
 8004530:	4013      	ands	r3, r2
 8004532:	0019      	movs	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	2240      	movs	r2, #64	; 0x40
 8004546:	4013      	ands	r3, r2
 8004548:	d01d      	beq.n	8004586 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <UART_AdvFeatureConfig+0x15c>)
 8004552:	4013      	ands	r3, r2
 8004554:	0019      	movs	r1, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	035b      	lsls	r3, r3, #13
 800456a:	429a      	cmp	r2, r3
 800456c:	d10b      	bne.n	8004586 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <UART_AdvFeatureConfig+0x160>)
 8004576:	4013      	ands	r3, r2
 8004578:	0019      	movs	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	2280      	movs	r2, #128	; 0x80
 800458c:	4013      	ands	r3, r2
 800458e:	d00b      	beq.n	80045a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <UART_AdvFeatureConfig+0x164>)
 8004598:	4013      	ands	r3, r2
 800459a:	0019      	movs	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]
  }
}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b002      	add	sp, #8
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	fffdffff 	.word	0xfffdffff
 80045b4:	fffeffff 	.word	0xfffeffff
 80045b8:	fffbffff 	.word	0xfffbffff
 80045bc:	ffff7fff 	.word	0xffff7fff
 80045c0:	ffffefff 	.word	0xffffefff
 80045c4:	ffffdfff 	.word	0xffffdfff
 80045c8:	ffefffff 	.word	0xffefffff
 80045cc:	ff9fffff 	.word	0xff9fffff
 80045d0:	fff7ffff 	.word	0xfff7ffff

080045d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af02      	add	r7, sp, #8
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	228c      	movs	r2, #140	; 0x8c
 80045e0:	2100      	movs	r1, #0
 80045e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045e4:	f7fc fdac 	bl	8001140 <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2208      	movs	r2, #8
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d10c      	bne.n	8004614 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2280      	movs	r2, #128	; 0x80
 80045fe:	0391      	lsls	r1, r2, #14
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4a18      	ldr	r2, [pc, #96]	; (8004664 <UART_CheckIdleState+0x90>)
 8004604:	9200      	str	r2, [sp, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	f000 f82e 	bl	8004668 <UART_WaitOnFlagUntilTimeout>
 800460c:	1e03      	subs	r3, r0, #0
 800460e:	d001      	beq.n	8004614 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e023      	b.n	800465c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2204      	movs	r2, #4
 800461c:	4013      	ands	r3, r2
 800461e:	2b04      	cmp	r3, #4
 8004620:	d10c      	bne.n	800463c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2280      	movs	r2, #128	; 0x80
 8004626:	03d1      	lsls	r1, r2, #15
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <UART_CheckIdleState+0x90>)
 800462c:	9200      	str	r2, [sp, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	f000 f81a 	bl	8004668 <UART_WaitOnFlagUntilTimeout>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e00f      	b.n	800465c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2284      	movs	r2, #132	; 0x84
 8004640:	2120      	movs	r1, #32
 8004642:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2288      	movs	r2, #136	; 0x88
 8004648:	2120      	movs	r1, #32
 800464a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bd80      	pop	{r7, pc}
 8004664:	01ffffff 	.word	0x01ffffff

08004668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b094      	sub	sp, #80	; 0x50
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004678:	e0a7      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800467c:	3301      	adds	r3, #1
 800467e:	d100      	bne.n	8004682 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004680:	e0a3      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004682:	f7fc fd5d 	bl	8001140 <HAL_GetTick>
 8004686:	0002      	movs	r2, r0
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800468e:	429a      	cmp	r2, r3
 8004690:	d302      	bcc.n	8004698 <UART_WaitOnFlagUntilTimeout+0x30>
 8004692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004694:	2b00      	cmp	r3, #0
 8004696:	d13f      	bne.n	8004718 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004698:	f3ef 8310 	mrs	r3, PRIMASK
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046a0:	647b      	str	r3, [r7, #68]	; 0x44
 80046a2:	2301      	movs	r3, #1
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	f383 8810 	msr	PRIMASK, r3
}
 80046ac:	46c0      	nop			; (mov r8, r8)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	494e      	ldr	r1, [pc, #312]	; (80047f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80046ba:	400a      	ands	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	f383 8810 	msr	PRIMASK, r3
}
 80046c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ca:	f3ef 8310 	mrs	r3, PRIMASK
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80046d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d2:	643b      	str	r3, [r7, #64]	; 0x40
 80046d4:	2301      	movs	r3, #1
 80046d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046da:	f383 8810 	msr	PRIMASK, r3
}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2101      	movs	r1, #1
 80046ec:	438a      	bics	r2, r1
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f6:	f383 8810 	msr	PRIMASK, r3
}
 80046fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2284      	movs	r2, #132	; 0x84
 8004700:	2120      	movs	r1, #32
 8004702:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2288      	movs	r2, #136	; 0x88
 8004708:	2120      	movs	r1, #32
 800470a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2280      	movs	r2, #128	; 0x80
 8004710:	2100      	movs	r1, #0
 8004712:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e069      	b.n	80047ec <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2204      	movs	r2, #4
 8004720:	4013      	ands	r3, r2
 8004722:	d052      	beq.n	80047ca <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	401a      	ands	r2, r3
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	429a      	cmp	r2, r3
 8004736:	d148      	bne.n	80047ca <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2280      	movs	r2, #128	; 0x80
 800473e:	0112      	lsls	r2, r2, #4
 8004740:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004742:	f3ef 8310 	mrs	r3, PRIMASK
 8004746:	613b      	str	r3, [r7, #16]
  return(result);
 8004748:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f383 8810 	msr	PRIMASK, r3
}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4924      	ldr	r1, [pc, #144]	; (80047f4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004764:	400a      	ands	r2, r1
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f383 8810 	msr	PRIMASK, r3
}
 8004772:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004774:	f3ef 8310 	mrs	r3, PRIMASK
 8004778:	61fb      	str	r3, [r7, #28]
  return(result);
 800477a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477c:	64bb      	str	r3, [r7, #72]	; 0x48
 800477e:	2301      	movs	r3, #1
 8004780:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	f383 8810 	msr	PRIMASK, r3
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2101      	movs	r1, #1
 8004796:	438a      	bics	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
 800479a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	f383 8810 	msr	PRIMASK, r3
}
 80047a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2284      	movs	r2, #132	; 0x84
 80047aa:	2120      	movs	r1, #32
 80047ac:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2288      	movs	r2, #136	; 0x88
 80047b2:	2120      	movs	r1, #32
 80047b4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	228c      	movs	r2, #140	; 0x8c
 80047ba:	2120      	movs	r1, #32
 80047bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2280      	movs	r2, #128	; 0x80
 80047c2:	2100      	movs	r1, #0
 80047c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e010      	b.n	80047ec <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	425a      	negs	r2, r3
 80047da:	4153      	adcs	r3, r2
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	001a      	movs	r2, r3
 80047e0:	1dfb      	adds	r3, r7, #7
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d100      	bne.n	80047ea <UART_WaitOnFlagUntilTimeout+0x182>
 80047e8:	e747      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b014      	add	sp, #80	; 0x50
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	fffffe5f 	.word	0xfffffe5f

080047f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08e      	sub	sp, #56	; 0x38
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004800:	f3ef 8310 	mrs	r3, PRIMASK
 8004804:	617b      	str	r3, [r7, #20]
  return(result);
 8004806:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
 800480a:	2301      	movs	r3, #1
 800480c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	f383 8810 	msr	PRIMASK, r3
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4926      	ldr	r1, [pc, #152]	; (80048bc <UART_EndRxTransfer+0xc4>)
 8004822:	400a      	ands	r2, r1
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f383 8810 	msr	PRIMASK, r3
}
 8004830:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	623b      	str	r3, [r7, #32]
  return(result);
 8004838:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
 800483c:	2301      	movs	r3, #1
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	491b      	ldr	r1, [pc, #108]	; (80048c0 <UART_EndRxTransfer+0xc8>)
 8004854:	400a      	ands	r2, r1
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	f383 8810 	msr	PRIMASK, r3
}
 8004862:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d118      	bne.n	800489e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486c:	f3ef 8310 	mrs	r3, PRIMASK
 8004870:	60bb      	str	r3, [r7, #8]
  return(result);
 8004872:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004876:	2301      	movs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f383 8810 	msr	PRIMASK, r3
}
 8004880:	46c0      	nop			; (mov r8, r8)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2110      	movs	r1, #16
 800488e:	438a      	bics	r2, r1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f383 8810 	msr	PRIMASK, r3
}
 800489c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2288      	movs	r2, #136	; 0x88
 80048a2:	2120      	movs	r1, #32
 80048a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b00e      	add	sp, #56	; 0x38
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	fffffedf 	.word	0xfffffedf
 80048c0:	effffffe 	.word	0xeffffffe

080048c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	225e      	movs	r2, #94	; 0x5e
 80048d6:	2100      	movs	r1, #0
 80048d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2256      	movs	r2, #86	; 0x56
 80048de:	2100      	movs	r1, #0
 80048e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff fa57 	bl	8003d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b004      	add	sp, #16
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fa:	f3ef 8310 	mrs	r3, PRIMASK
 80048fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004900:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	2301      	movs	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2140      	movs	r1, #64	; 0x40
 800491c:	438a      	bics	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f383 8810 	msr	PRIMASK, r3
}
 800492a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2284      	movs	r2, #132	; 0x84
 8004930:	2120      	movs	r1, #32
 8004932:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f7ff fa23 	bl	8003d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	46bd      	mov	sp, r7
 8004946:	b006      	add	sp, #24
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b002      	add	sp, #8
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	b002      	add	sp, #8
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2280      	movs	r2, #128	; 0x80
 8004988:	5c9b      	ldrb	r3, [r3, r2]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_UARTEx_DisableFifoMode+0x16>
 800498e:	2302      	movs	r3, #2
 8004990:	e027      	b.n	80049e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	2101      	movs	r1, #1
 8004998:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2284      	movs	r2, #132	; 0x84
 800499e:	2124      	movs	r1, #36	; 0x24
 80049a0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2101      	movs	r1, #1
 80049b6:	438a      	bics	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <HAL_UARTEx_DisableFifoMode+0x70>)
 80049be:	4013      	ands	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2284      	movs	r2, #132	; 0x84
 80049d4:	2120      	movs	r1, #32
 80049d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2280      	movs	r2, #128	; 0x80
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b004      	add	sp, #16
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	dfffffff 	.word	0xdfffffff

080049f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	5c9b      	ldrb	r3, [r3, r2]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e02e      	b.n	8004a66 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2280      	movs	r2, #128	; 0x80
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2284      	movs	r2, #132	; 0x84
 8004a14:	2124      	movs	r1, #36	; 0x24
 8004a16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	438a      	bics	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	08d9      	lsrs	r1, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	0018      	movs	r0, r3
 8004a48:	f000 f854 	bl	8004af4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2284      	movs	r2, #132	; 0x84
 8004a58:	2120      	movs	r1, #32
 8004a5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2280      	movs	r2, #128	; 0x80
 8004a60:	2100      	movs	r1, #0
 8004a62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b004      	add	sp, #16
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	5c9b      	ldrb	r3, [r3, r2]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e02f      	b.n	8004ae8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2280      	movs	r2, #128	; 0x80
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2284      	movs	r2, #132	; 0x84
 8004a94:	2124      	movs	r1, #36	; 0x24
 8004a96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2101      	movs	r1, #1
 8004aac:	438a      	bics	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	0019      	movs	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f000 f813 	bl	8004af4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2284      	movs	r2, #132	; 0x84
 8004ada:	2120      	movs	r1, #32
 8004adc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2280      	movs	r2, #128	; 0x80
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	0018      	movs	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b004      	add	sp, #16
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	f1ffffff 	.word	0xf1ffffff

08004af4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d108      	bne.n	8004b16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	226a      	movs	r2, #106	; 0x6a
 8004b08:	2101      	movs	r1, #1
 8004b0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2268      	movs	r2, #104	; 0x68
 8004b10:	2101      	movs	r1, #1
 8004b12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b14:	e043      	b.n	8004b9e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b16:	260f      	movs	r6, #15
 8004b18:	19bb      	adds	r3, r7, r6
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b1e:	200e      	movs	r0, #14
 8004b20:	183b      	adds	r3, r7, r0
 8004b22:	2208      	movs	r2, #8
 8004b24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	0e5b      	lsrs	r3, r3, #25
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	240d      	movs	r4, #13
 8004b32:	193b      	adds	r3, r7, r4
 8004b34:	2107      	movs	r1, #7
 8004b36:	400a      	ands	r2, r1
 8004b38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	0f5b      	lsrs	r3, r3, #29
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	250c      	movs	r5, #12
 8004b46:	197b      	adds	r3, r7, r5
 8004b48:	2107      	movs	r1, #7
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b4e:	183b      	adds	r3, r7, r0
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	197a      	adds	r2, r7, r5
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	4914      	ldr	r1, [pc, #80]	; (8004ba8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b58:	5c8a      	ldrb	r2, [r1, r2]
 8004b5a:	435a      	muls	r2, r3
 8004b5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b5e:	197b      	adds	r3, r7, r5
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	4a12      	ldr	r2, [pc, #72]	; (8004bac <UARTEx_SetNbDataToProcess+0xb8>)
 8004b64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b66:	0019      	movs	r1, r3
 8004b68:	f7fb fb5e 	bl	8000228 <__divsi3>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	b299      	uxth	r1, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	226a      	movs	r2, #106	; 0x6a
 8004b74:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b76:	19bb      	adds	r3, r7, r6
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	193a      	adds	r2, r7, r4
 8004b7c:	7812      	ldrb	r2, [r2, #0]
 8004b7e:	490a      	ldr	r1, [pc, #40]	; (8004ba8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b80:	5c8a      	ldrb	r2, [r1, r2]
 8004b82:	435a      	muls	r2, r3
 8004b84:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b86:	193b      	adds	r3, r7, r4
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	4a08      	ldr	r2, [pc, #32]	; (8004bac <UARTEx_SetNbDataToProcess+0xb8>)
 8004b8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b8e:	0019      	movs	r1, r3
 8004b90:	f7fb fb4a 	bl	8000228 <__divsi3>
 8004b94:	0003      	movs	r3, r0
 8004b96:	b299      	uxth	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2268      	movs	r2, #104	; 0x68
 8004b9c:	5299      	strh	r1, [r3, r2]
}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	b005      	add	sp, #20
 8004ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	08004cc0 	.word	0x08004cc0
 8004bac:	08004cc8 	.word	0x08004cc8

08004bb0 <__libc_init_array>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	4d0c      	ldr	r5, [pc, #48]	; (8004be8 <__libc_init_array+0x38>)
 8004bb6:	4c0d      	ldr	r4, [pc, #52]	; (8004bec <__libc_init_array+0x3c>)
 8004bb8:	1b64      	subs	r4, r4, r5
 8004bba:	10a4      	asrs	r4, r4, #2
 8004bbc:	42a6      	cmp	r6, r4
 8004bbe:	d109      	bne.n	8004bd4 <__libc_init_array+0x24>
 8004bc0:	2600      	movs	r6, #0
 8004bc2:	f000 f821 	bl	8004c08 <_init>
 8004bc6:	4d0a      	ldr	r5, [pc, #40]	; (8004bf0 <__libc_init_array+0x40>)
 8004bc8:	4c0a      	ldr	r4, [pc, #40]	; (8004bf4 <__libc_init_array+0x44>)
 8004bca:	1b64      	subs	r4, r4, r5
 8004bcc:	10a4      	asrs	r4, r4, #2
 8004bce:	42a6      	cmp	r6, r4
 8004bd0:	d105      	bne.n	8004bde <__libc_init_array+0x2e>
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	00b3      	lsls	r3, r6, #2
 8004bd6:	58eb      	ldr	r3, [r5, r3]
 8004bd8:	4798      	blx	r3
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7ee      	b.n	8004bbc <__libc_init_array+0xc>
 8004bde:	00b3      	lsls	r3, r6, #2
 8004be0:	58eb      	ldr	r3, [r5, r3]
 8004be2:	4798      	blx	r3
 8004be4:	3601      	adds	r6, #1
 8004be6:	e7f2      	b.n	8004bce <__libc_init_array+0x1e>
 8004be8:	08004cd8 	.word	0x08004cd8
 8004bec:	08004cd8 	.word	0x08004cd8
 8004bf0:	08004cd8 	.word	0x08004cd8
 8004bf4:	08004cdc 	.word	0x08004cdc

08004bf8 <memset>:
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	1882      	adds	r2, r0, r2
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <memset+0xa>
 8004c00:	4770      	bx	lr
 8004c02:	7019      	strb	r1, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	e7f9      	b.n	8004bfc <memset+0x4>

08004c08 <_init>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr

08004c14 <_fini>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr
