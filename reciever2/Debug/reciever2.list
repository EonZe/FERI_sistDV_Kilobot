
reciever2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  080071b4  080071b4  000171b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d4  080077d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077dc  080077dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080077e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000078  0800785c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200004c8  0800785c  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001045a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240d  00000000  00000000  000304fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00032908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00033648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c403  00000000  00000000  000342b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8ab  00000000  00000000  000506b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3cb8  00000000  00000000  0005ff5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003308  00000000  00000000  00113c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800719c 	.word	0x0800719c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	0800719c 	.word	0x0800719c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <NRF24_DelayMicroSeconds+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	490a      	ldr	r1, [pc, #40]	; (800067c <NRF24_DelayMicroSeconds+0x3c>)
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff fd68 	bl	8000128 <__udivsi3>
 8000658:	0003      	movs	r3, r0
 800065a:	001a      	movs	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4353      	muls	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	1e5a      	subs	r2, r3, #1
 8000668:	60fa      	str	r2, [r7, #12]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1fa      	bne.n	8000664 <NRF24_DelayMicroSeconds+0x24>
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b004      	add	sp, #16
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000008 	.word	0x20000008
 800067c:	002dc6c0 	.word	0x002dc6c0

08000680 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d008      	beq.n	80006a0 <NRF24_csn+0x20>
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <NRF24_csn+0x38>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <NRF24_csn+0x3c>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	2201      	movs	r2, #1
 8000698:	0019      	movs	r1, r3
 800069a:	f002 f915 	bl	80028c8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800069e:	e007      	b.n	80006b0 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <NRF24_csn+0x38>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <NRF24_csn+0x3c>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	0019      	movs	r1, r3
 80006ac:	f002 f90c 	bl	80028c8 <HAL_GPIO_WritePin>
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b002      	add	sp, #8
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000009c 	.word	0x2000009c
 80006bc:	200000a0 	.word	0x200000a0

080006c0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d008      	beq.n	80006e0 <NRF24_ce+0x20>
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <NRF24_ce+0x38>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <NRF24_ce+0x3c>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	2201      	movs	r2, #1
 80006d8:	0019      	movs	r1, r3
 80006da:	f002 f8f5 	bl	80028c8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80006de:	e007      	b.n	80006f0 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <NRF24_ce+0x38>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <NRF24_ce+0x3c>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	2200      	movs	r2, #0
 80006ea:	0019      	movs	r1, r3
 80006ec:	f002 f8ec 	bl	80028c8 <HAL_GPIO_WritePin>
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000009c 	.word	0x2000009c
 80006fc:	200000a2 	.word	0x200000a2

08000700 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	0002      	movs	r2, r0
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ffb7 	bl	8000680 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	221f      	movs	r2, #31
 8000718:	4013      	ands	r3, r2
 800071a:	b2da      	uxtb	r2, r3
 800071c:	240c      	movs	r4, #12
 800071e:	193b      	adds	r3, r7, r4
 8000720:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000722:	1939      	adds	r1, r7, r4
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <NRF24_read_register+0x58>)
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	2201      	movs	r2, #1
 800072a:	f003 f935 	bl	8003998 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800072e:	193b      	adds	r3, r7, r4
 8000730:	1c59      	adds	r1, r3, #1
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <NRF24_read_register+0x58>)
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	2201      	movs	r2, #1
 8000738:	f003 fa86 	bl	8003c48 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800073c:	250f      	movs	r5, #15
 800073e:	197b      	adds	r3, r7, r5
 8000740:	193a      	adds	r2, r7, r4
 8000742:	7852      	ldrb	r2, [r2, #1]
 8000744:	701a      	strb	r2, [r3, #0]
	//Bring CSN high
	NRF24_csn(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ff9a 	bl	8000680 <NRF24_csn>
	return retData;
 800074c:	197b      	adds	r3, r7, r5
 800074e:	781b      	ldrb	r3, [r3, #0]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b004      	add	sp, #16
 8000756:	bdb0      	pop	{r4, r5, r7, pc}
 8000758:	200000a4 	.word	0x200000a4

0800075c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6039      	str	r1, [r7, #0]
 8000764:	0011      	movs	r1, r2
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	1c02      	adds	r2, r0, #0
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	1c0a      	adds	r2, r1, #0
 8000770:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff ff84 	bl	8000680 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	221f      	movs	r2, #31
 800077e:	4013      	ands	r3, r2
 8000780:	b2da      	uxtb	r2, r3
 8000782:	210c      	movs	r1, #12
 8000784:	187b      	adds	r3, r7, r1
 8000786:	701a      	strb	r2, [r3, #0]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000788:	1879      	adds	r1, r7, r1
 800078a:	480a      	ldr	r0, [pc, #40]	; (80007b4 <NRF24_read_registerN+0x58>)
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2201      	movs	r2, #1
 8000790:	f003 f902 	bl	8003998 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000794:	1dbb      	adds	r3, r7, #6
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b29a      	uxth	r2, r3
 800079a:	6839      	ldr	r1, [r7, #0]
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <NRF24_read_registerN+0x58>)
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	f003 fa52 	bl	8003c48 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff ff6b 	bl	8000680 <NRF24_csn>
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b004      	add	sp, #16
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	200000a4 	.word	0x200000a4

080007b8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	1c0a      	adds	r2, r1, #0
 80007c8:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ff58 	bl	8000680 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2220      	movs	r2, #32
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	210c      	movs	r1, #12
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = value;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	1dba      	adds	r2, r7, #6
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80007e8:	1879      	adds	r1, r7, r1
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <NRF24_write_register+0x4c>)
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	2202      	movs	r2, #2
 80007f0:	f003 f8d2 	bl	8003998 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff ff43 	bl	8000680 <NRF24_csn>
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b004      	add	sp, #16
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	200000a4 	.word	0x200000a4

08000808 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6039      	str	r1, [r7, #0]
 8000810:	0011      	movs	r1, r2
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	1c02      	adds	r2, r0, #0
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	1dbb      	adds	r3, r7, #6
 800081a:	1c0a      	adds	r2, r1, #0
 800081c:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff ff2e 	bl	8000680 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2220      	movs	r2, #32
 800082a:	4313      	orrs	r3, r2
 800082c:	b2da      	uxtb	r2, r3
 800082e:	210c      	movs	r1, #12
 8000830:	187b      	adds	r3, r7, r1
 8000832:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000834:	1879      	adds	r1, r7, r1
 8000836:	480a      	ldr	r0, [pc, #40]	; (8000860 <NRF24_write_registerN+0x58>)
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	2201      	movs	r2, #1
 800083c:	f003 f8ac 	bl	8003998 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	6839      	ldr	r1, [r7, #0]
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <NRF24_write_registerN+0x58>)
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	f003 f8a4 	bl	8003998 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff ff15 	bl	8000680 <NRF24_csn>
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	200000a4 	.word	0x200000a4

08000864 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	000a      	movs	r2, r1
 800086e:	1cfb      	adds	r3, r7, #3
 8000870:	701a      	strb	r2, [r3, #0]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff ff04 	bl	8000680 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000878:	210f      	movs	r1, #15
 800087a:	187b      	adds	r3, r7, r1
 800087c:	22a0      	movs	r2, #160	; 0xa0
 800087e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000880:	1879      	adds	r1, r7, r1
 8000882:	480a      	ldr	r0, [pc, #40]	; (80008ac <NRF24_write_payload+0x48>)
 8000884:	2364      	movs	r3, #100	; 0x64
 8000886:	2201      	movs	r2, #1
 8000888:	f003 f886 	bl	8003998 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800088c:	1cfb      	adds	r3, r7, #3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <NRF24_write_payload+0x48>)
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	f003 f87e 	bl	8003998 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff feef 	bl	8000680 <NRF24_csn>
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	200000a4 	.word	0x200000a4

080008b0 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80008b4:	21ff      	movs	r1, #255	; 0xff
 80008b6:	20e1      	movs	r0, #225	; 0xe1
 80008b8:	f7ff ff7e 	bl	80007b8 <NRF24_write_register>
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80008c6:	21ff      	movs	r1, #255	; 0xff
 80008c8:	20e2      	movs	r0, #226	; 0xe2
 80008ca:	f7ff ff75 	bl	80007b8 <NRF24_write_register>
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80008da:	1dfc      	adds	r4, r7, #7
 80008dc:	2007      	movs	r0, #7
 80008de:	f7ff ff0f 	bl	8000700 <NRF24_read_register>
 80008e2:	0003      	movs	r3, r0
 80008e4:	7023      	strb	r3, [r4, #0]
	return statReg;
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b003      	add	sp, #12
 80008f0:	bd90      	pop	{r4, r7, pc}
	...

080008f4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80008f4:	b082      	sub	sp, #8
 80008f6:	b5b0      	push	{r4, r5, r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	0008      	movs	r0, r1
 8000900:	0011      	movs	r1, r2
 8000902:	2204      	movs	r2, #4
 8000904:	2418      	movs	r4, #24
 8000906:	1912      	adds	r2, r2, r4
 8000908:	2508      	movs	r5, #8
 800090a:	46ac      	mov	ip, r5
 800090c:	44bc      	add	ip, r7
 800090e:	4462      	add	r2, ip
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	1cbb      	adds	r3, r7, #2
 8000914:	1c02      	adds	r2, r0, #0
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	003b      	movs	r3, r7
 800091a:	1c0a      	adds	r2, r1, #0
 800091c:	801a      	strh	r2, [r3, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800091e:	4a72      	ldr	r2, [pc, #456]	; (8000ae8 <NRF24_begin+0x1f4>)
 8000920:	2304      	movs	r3, #4
 8000922:	191b      	adds	r3, r3, r4
 8000924:	2108      	movs	r1, #8
 8000926:	468c      	mov	ip, r1
 8000928:	44bc      	add	ip, r7
 800092a:	4463      	add	r3, ip
 800092c:	0010      	movs	r0, r2
 800092e:	0019      	movs	r1, r3
 8000930:	2364      	movs	r3, #100	; 0x64
 8000932:	001a      	movs	r2, r3
 8000934:	f005 ffc0 	bl	80068b8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000938:	4b6c      	ldr	r3, [pc, #432]	; (8000aec <NRF24_begin+0x1f8>)
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800093e:	4b6c      	ldr	r3, [pc, #432]	; (8000af0 <NRF24_begin+0x1fc>)
 8000940:	1cba      	adds	r2, r7, #2
 8000942:	8812      	ldrh	r2, [r2, #0]
 8000944:	801a      	strh	r2, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000946:	4b6b      	ldr	r3, [pc, #428]	; (8000af4 <NRF24_begin+0x200>)
 8000948:	003a      	movs	r2, r7
 800094a:	8812      	ldrh	r2, [r2, #0]
 800094c:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff fe96 	bl	8000680 <NRF24_csn>
	NRF24_ce(0);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff feb3 	bl	80006c0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800095a:	2005      	movs	r0, #5
 800095c:	f001 fc68 	bl	8002230 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000960:	2108      	movs	r1, #8
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff ff28 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000968:	213f      	movs	r1, #63	; 0x3f
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff ff24 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000970:	2103      	movs	r1, #3
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff ff20 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000978:	2103      	movs	r1, #3
 800097a:	2003      	movs	r0, #3
 800097c:	f7ff ff1c 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000980:	2103      	movs	r1, #3
 8000982:	2004      	movs	r0, #4
 8000984:	f7ff ff18 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000988:	2102      	movs	r1, #2
 800098a:	2005      	movs	r0, #5
 800098c:	f7ff ff14 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000990:	210f      	movs	r1, #15
 8000992:	2006      	movs	r0, #6
 8000994:	f7ff ff10 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000998:	210e      	movs	r1, #14
 800099a:	2007      	movs	r0, #7
 800099c:	f7ff ff0c 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80009a0:	2100      	movs	r1, #0
 80009a2:	2008      	movs	r0, #8
 80009a4:	f7ff ff08 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80009a8:	2100      	movs	r1, #0
 80009aa:	2009      	movs	r0, #9
 80009ac:	f7ff ff04 	bl	80007b8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80009b0:	2108      	movs	r1, #8
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	22e7      	movs	r2, #231	; 0xe7
 80009b6:	711a      	strb	r2, [r3, #4]
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	22e7      	movs	r2, #231	; 0xe7
 80009bc:	70da      	strb	r2, [r3, #3]
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	22e7      	movs	r2, #231	; 0xe7
 80009c2:	709a      	strb	r2, [r3, #2]
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	22e7      	movs	r2, #231	; 0xe7
 80009c8:	705a      	strb	r2, [r3, #1]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	22e7      	movs	r2, #231	; 0xe7
 80009ce:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80009d0:	000c      	movs	r4, r1
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2205      	movs	r2, #5
 80009d6:	0019      	movs	r1, r3
 80009d8:	200a      	movs	r0, #10
 80009da:	f7ff ff15 	bl	8000808 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	22c2      	movs	r2, #194	; 0xc2
 80009e4:	711a      	strb	r2, [r3, #4]
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	22c2      	movs	r2, #194	; 0xc2
 80009ea:	70da      	strb	r2, [r3, #3]
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	22c2      	movs	r2, #194	; 0xc2
 80009f0:	709a      	strb	r2, [r3, #2]
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	22c2      	movs	r2, #194	; 0xc2
 80009f6:	705a      	strb	r2, [r3, #1]
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	22c2      	movs	r2, #194	; 0xc2
 80009fc:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80009fe:	000c      	movs	r4, r1
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2205      	movs	r2, #5
 8000a04:	0019      	movs	r1, r3
 8000a06:	200b      	movs	r0, #11
 8000a08:	f7ff fefe 	bl	8000808 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000a0c:	21c3      	movs	r1, #195	; 0xc3
 8000a0e:	200c      	movs	r0, #12
 8000a10:	f7ff fed2 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000a14:	21c4      	movs	r1, #196	; 0xc4
 8000a16:	200d      	movs	r0, #13
 8000a18:	f7ff fece 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000a1c:	21c5      	movs	r1, #197	; 0xc5
 8000a1e:	200e      	movs	r0, #14
 8000a20:	f7ff feca 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000a24:	21c6      	movs	r1, #198	; 0xc6
 8000a26:	200f      	movs	r0, #15
 8000a28:	f7ff fec6 	bl	80007b8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000a2c:	0021      	movs	r1, r4
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	22e7      	movs	r2, #231	; 0xe7
 8000a32:	711a      	strb	r2, [r3, #4]
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	22e7      	movs	r2, #231	; 0xe7
 8000a38:	70da      	strb	r2, [r3, #3]
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	22e7      	movs	r2, #231	; 0xe7
 8000a3e:	709a      	strb	r2, [r3, #2]
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	22e7      	movs	r2, #231	; 0xe7
 8000a44:	705a      	strb	r2, [r3, #1]
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	22e7      	movs	r2, #231	; 0xe7
 8000a4a:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2205      	movs	r2, #5
 8000a50:	0019      	movs	r1, r3
 8000a52:	2010      	movs	r0, #16
 8000a54:	f7ff fed8 	bl	8000808 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2011      	movs	r0, #17
 8000a5c:	f7ff feac 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2012      	movs	r0, #18
 8000a64:	f7ff fea8 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2013      	movs	r0, #19
 8000a6c:	f7ff fea4 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000a70:	2100      	movs	r1, #0
 8000a72:	2014      	movs	r0, #20
 8000a74:	f7ff fea0 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2015      	movs	r0, #21
 8000a7c:	f7ff fe9c 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000a80:	2100      	movs	r1, #0
 8000a82:	2016      	movs	r0, #22
 8000a84:	f7ff fe98 	bl	80007b8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000a88:	f000 faf8 	bl	800107c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	201c      	movs	r0, #28
 8000a90:	f7ff fe92 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000a94:	2100      	movs	r1, #0
 8000a96:	201d      	movs	r0, #29
 8000a98:	f7ff fe8e 	bl	80007b8 <NRF24_write_register>
	printRadioSettings();
 8000a9c:	f000 fb0a 	bl	80010b4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f8be 	bl	8000c24 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f94e 	bl	8000d4a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f000 f99c 	bl	8000dec <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f000 f9f5 	bl	8000ea4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000aba:	f000 f913 	bl	8000ce4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000abe:	2020      	movs	r0, #32
 8000ac0:	f000 f8ea 	bl	8000c98 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000ac4:	f000 fad1 	bl	800106a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000ac8:	204c      	movs	r0, #76	; 0x4c
 8000aca:	f000 f8c9 	bl	8000c60 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000ace:	f7ff feef 	bl	80008b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000ad2:	f7ff fef6 	bl	80008c2 <NRF24_flush_rx>

	NRF24_powerDown();
 8000ad6:	f000 fa1d 	bl	8000f14 <NRF24_powerDown>

}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b004      	add	sp, #16
 8000ae0:	bcb0      	pop	{r4, r5, r7}
 8000ae2:	bc08      	pop	{r3}
 8000ae4:	b002      	add	sp, #8
 8000ae6:	4718      	bx	r3
 8000ae8:	200000a4 	.word	0x200000a4
 8000aec:	2000009c 	.word	0x2000009c
 8000af0:	200000a0 	.word	0x200000a0
 8000af4:	200000a2 	.word	0x200000a2

08000af8 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fddf 	bl	80006c0 <NRF24_ce>
	NRF24_flush_tx();
 8000b02:	f7ff fed5 	bl	80008b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000b06:	f7ff fedc 	bl	80008c2 <NRF24_flush_rx>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	000a      	movs	r2, r1
 8000b1a:	1cfb      	adds	r3, r7, #3
 8000b1c:	701a      	strb	r2, [r3, #0]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000b1e:	f000 faa4 	bl	800106a <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000b22:	1cfb      	adds	r3, r7, #3
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	0011      	movs	r1, r2
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fa3d 	bl	8000faa <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000b30:	f001 fb74 	bl	800221c <HAL_GetTick>
 8000b34:	0003      	movs	r3, r0
 8000b36:	617b      	str	r3, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000b38:	230a      	movs	r3, #10
 8000b3a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000b3c:	230d      	movs	r3, #13
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	2201      	movs	r2, #1
 8000b42:	0019      	movs	r1, r3
 8000b44:	2008      	movs	r0, #8
 8000b46:	f7ff fe09 	bl	800075c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000b4a:	250f      	movs	r5, #15
 8000b4c:	197c      	adds	r4, r7, r5
 8000b4e:	f7ff fec1 	bl	80008d4 <NRF24_get_status>
 8000b52:	0003      	movs	r3, r0
 8000b54:	7023      	strb	r3, [r4, #0]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000b56:	197b      	adds	r3, r7, r5
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2230      	movs	r2, #48	; 0x30
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	d107      	bne.n	8000b70 <NRF24_write+0x60>
 8000b60:	f001 fb5c 	bl	800221c <HAL_GetTick>
 8000b64:	0002      	movs	r2, r0
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8e5      	bhi.n	8000b3c <NRF24_write+0x2c>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000b70:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <NRF24_write+0xa4>)
 8000b72:	230b      	movs	r3, #11
 8000b74:	18f9      	adds	r1, r7, r3
 8000b76:	240c      	movs	r4, #12
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fa42 	bl	8001004 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000b80:	230e      	movs	r3, #14
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	193a      	adds	r2, r7, r4
 8000b86:	7812      	ldrb	r2, [r2, #0]
 8000b88:	701a      	strb	r2, [r3, #0]
	if ( ack_payload_available )
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <NRF24_write+0xa4>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d005      	beq.n	8000b9e <NRF24_write+0x8e>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000b92:	f000 f89d 	bl	8000cd0 <NRF24_getDynamicPayloadSize>
 8000b96:	0003      	movs	r3, r0
 8000b98:	001a      	movs	r2, r3
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <NRF24_write+0xa8>)
 8000b9c:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8000b9e:	f000 f80d 	bl	8000bbc <NRF24_available>
	NRF24_flush_tx();
 8000ba2:	f7ff fe85 	bl	80008b0 <NRF24_flush_tx>
	return retStatus;
 8000ba6:	230e      	movs	r3, #14
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	781b      	ldrb	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b006      	add	sp, #24
 8000bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb4:	20000094 	.word	0x20000094
 8000bb8:	20000095 	.word	0x20000095

08000bbc <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 f9b9 	bl	8000f38 <NRF24_availablePipe>
 8000bc6:	0003      	movs	r3, r0
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6038      	str	r0, [r7, #0]
 8000bd8:	6079      	str	r1, [r7, #4]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000bda:	003b      	movs	r3, r7
 8000bdc:	2205      	movs	r2, #5
 8000bde:	0019      	movs	r1, r3
 8000be0:	200a      	movs	r0, #10
 8000be2:	f7ff fe11 	bl	8000808 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000be6:	003b      	movs	r3, r7
 8000be8:	2205      	movs	r2, #5
 8000bea:	0019      	movs	r1, r3
 8000bec:	2010      	movs	r0, #16
 8000bee:	f7ff fe0b 	bl	8000808 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <NRF24_openWritingPipe+0x50>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	1c10      	adds	r0, r2, #0
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2d9      	uxtb	r1, r3
 8000c06:	b2c2      	uxtb	r2, r0
 8000c08:	4291      	cmp	r1, r2
 8000c0a:	d900      	bls.n	8000c0e <NRF24_openWritingPipe+0x3e>
 8000c0c:	1c03      	adds	r3, r0, #0
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	0019      	movs	r1, r3
 8000c12:	2011      	movs	r0, #17
 8000c14:	f7ff fdd0 	bl	80007b8 <NRF24_write_register>
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b004      	add	sp, #16
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000096 	.word	0x20000096

08000c24 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	1dbb      	adds	r3, r7, #6
 8000c32:	1c0a      	adds	r2, r1, #0
 8000c34:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	b25a      	sxtb	r2, r3
 8000c3e:	1dbb      	adds	r3, r7, #6
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	210f      	movs	r1, #15
 8000c46:	400b      	ands	r3, r1
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	0019      	movs	r1, r3
 8000c52:	2004      	movs	r0, #4
 8000c54:	f7ff fdb0 	bl	80007b8 <NRF24_write_register>
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	701a      	strb	r2, [r3, #0]
	const uint8_t max_channel = 127;
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	227f      	movs	r2, #127	; 0x7f
 8000c72:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	1dfa      	adds	r2, r7, #7
 8000c78:	7810      	ldrb	r0, [r2, #0]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2d9      	uxtb	r1, r3
 8000c7e:	b2c2      	uxtb	r2, r0
 8000c80:	4291      	cmp	r1, r2
 8000c82:	d900      	bls.n	8000c86 <NRF24_setChannel+0x26>
 8000c84:	1c03      	adds	r3, r0, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	0019      	movs	r1, r3
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	f7ff fd94 	bl	80007b8 <NRF24_write_register>
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b004      	add	sp, #16
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	701a      	strb	r2, [r3, #0]
	const uint8_t max_payload_size = 32;
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2220      	movs	r2, #32
 8000caa:	701a      	strb	r2, [r3, #0]
  payload_size = MIN(size,max_payload_size);
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	1dfa      	adds	r2, r7, #7
 8000cb0:	7810      	ldrb	r0, [r2, #0]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2d9      	uxtb	r1, r3
 8000cb6:	b2c2      	uxtb	r2, r0
 8000cb8:	4291      	cmp	r1, r2
 8000cba:	d900      	bls.n	8000cbe <NRF24_setPayloadSize+0x26>
 8000cbc:	1c03      	adds	r3, r0, #0
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <NRF24_setPayloadSize+0x34>)
 8000cc2:	701a      	strb	r2, [r3, #0]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b004      	add	sp, #16
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000096 	.word	0x20000096

08000cd0 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000cd4:	2060      	movs	r0, #96	; 0x60
 8000cd6:	f7ff fd13 	bl	8000700 <NRF24_read_register>
 8000cda:	0003      	movs	r3, r0
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ce8:	201d      	movs	r0, #29
 8000cea:	f7ff fd09 	bl	8000700 <NRF24_read_register>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	439a      	bics	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	201d      	movs	r0, #29
 8000cfe:	f7ff fd5b 	bl	80007b8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000d02:	2100      	movs	r1, #0
 8000d04:	201c      	movs	r0, #28
 8000d06:	f7ff fd57 	bl	80007b8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d0a:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <NRF24_disableDynamicPayloads+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	20000097 	.word	0x20000097

08000d1c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	701a      	strb	r2, [r3, #0]
	if ( enable )
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d004      	beq.n	8000d3a <NRF24_setAutoAck+0x1e>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000d30:	213f      	movs	r1, #63	; 0x3f
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fd40 	bl	80007b8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000d38:	e003      	b.n	8000d42 <NRF24_setAutoAck+0x26>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f7ff fd3b 	bl	80007b8 <NRF24_write_register>
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000d4a:	b5b0      	push	{r4, r5, r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	0002      	movs	r2, r0
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	701a      	strb	r2, [r3, #0]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d56:	250f      	movs	r5, #15
 8000d58:	197c      	adds	r4, r7, r5
 8000d5a:	2006      	movs	r0, #6
 8000d5c:	f7ff fcd0 	bl	8000700 <NRF24_read_register>
 8000d60:	0003      	movs	r3, r0
 8000d62:	7023      	strb	r3, [r4, #0]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d64:	0028      	movs	r0, r5
 8000d66:	183b      	adds	r3, r7, r0
 8000d68:	183a      	adds	r2, r7, r0
 8000d6a:	7812      	ldrb	r2, [r2, #0]
 8000d6c:	2106      	movs	r1, #6
 8000d6e:	438a      	bics	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d106      	bne.n	8000d88 <NRF24_setPALevel+0x3e>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d7a:	183b      	adds	r3, r7, r0
 8000d7c:	183a      	adds	r2, r7, r0
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	2106      	movs	r1, #6
 8000d82:	430a      	orrs	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e026      	b.n	8000dd6 <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m6dB )
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d107      	bne.n	8000da0 <NRF24_setPALevel+0x56>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000d90:	220f      	movs	r2, #15
 8000d92:	18bb      	adds	r3, r7, r2
 8000d94:	18ba      	adds	r2, r7, r2
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	2104      	movs	r1, #4
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e01a      	b.n	8000dd6 <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m12dB )
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d107      	bne.n	8000db8 <NRF24_setPALevel+0x6e>
  {
    setup |= _BV(RF_PWR_LOW);
 8000da8:	220f      	movs	r2, #15
 8000daa:	18bb      	adds	r3, r7, r2
 8000dac:	18ba      	adds	r2, r7, r2
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	2102      	movs	r1, #2
 8000db2:	430a      	orrs	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e00e      	b.n	8000dd6 <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m18dB )
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00a      	beq.n	8000dd6 <NRF24_setPALevel+0x8c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d106      	bne.n	8000dd6 <NRF24_setPALevel+0x8c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000dc8:	220f      	movs	r2, #15
 8000dca:	18bb      	adds	r3, r7, r2
 8000dcc:	18ba      	adds	r2, r7, r2
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	2106      	movs	r1, #6
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	2006      	movs	r0, #6
 8000de0:	f7ff fcea 	bl	80007b8 <NRF24_write_register>
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b004      	add	sp, #16
 8000dea:	bdb0      	pop	{r4, r5, r7, pc}

08000dec <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	0002      	movs	r2, r0
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e00:	250e      	movs	r5, #14
 8000e02:	197c      	adds	r4, r7, r5
 8000e04:	2006      	movs	r0, #6
 8000e06:	f7ff fc7b 	bl	8000700 <NRF24_read_register>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	7023      	strb	r3, [r4, #0]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000e14:	0028      	movs	r0, r5
 8000e16:	183b      	adds	r3, r7, r0
 8000e18:	183a      	adds	r2, r7, r0
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	2128      	movs	r1, #40	; 0x28
 8000e1e:	438a      	bics	r2, r1
 8000e20:	701a      	strb	r2, [r3, #0]
  if( speed == RF24_250KBPS )
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d109      	bne.n	8000e3e <NRF24_setDataRate+0x52>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e30:	183b      	adds	r3, r7, r0
 8000e32:	183a      	adds	r2, r7, r0
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	2120      	movs	r1, #32
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e011      	b.n	8000e62 <NRF24_setDataRate+0x76>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10a      	bne.n	8000e5c <NRF24_setDataRate+0x70>
    {
      wide_band = true ;
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e4c:	220e      	movs	r2, #14
 8000e4e:	18bb      	adds	r3, r7, r2
 8000e50:	18ba      	adds	r2, r7, r2
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	2108      	movs	r1, #8
 8000e56:	430a      	orrs	r2, r1
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e002      	b.n	8000e62 <NRF24_setDataRate+0x76>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e62:	240e      	movs	r4, #14
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	0019      	movs	r1, r3
 8000e6a:	2006      	movs	r0, #6
 8000e6c:	f7ff fca4 	bl	80007b8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e70:	2006      	movs	r0, #6
 8000e72:	f7ff fc45 	bl	8000700 <NRF24_read_register>
 8000e76:	0003      	movs	r3, r0
 8000e78:	001a      	movs	r2, r3
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d104      	bne.n	8000e8c <NRF24_setDataRate+0xa0>
  {
    result = true;
 8000e82:	230f      	movs	r3, #15
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e002      	b.n	8000e92 <NRF24_setDataRate+0xa6>
  }
  else
  {
    wide_band = false;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000e92:	230f      	movs	r3, #15
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	781b      	ldrb	r3, [r3, #0]
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b004      	add	sp, #16
 8000e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea0:	20000098 	.word	0x20000098

08000ea4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	0002      	movs	r2, r0
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	701a      	strb	r2, [r3, #0]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fc25 	bl	8000700 <NRF24_read_register>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	0019      	movs	r1, r3
 8000eba:	200f      	movs	r0, #15
 8000ebc:	183b      	adds	r3, r7, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	4391      	bics	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d017      	beq.n	8000efe <NRF24_setCRCLength+0x5a>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d106      	bne.n	8000ee4 <NRF24_setCRCLength+0x40>
  {
    config |= _BV(BIT_EN_CRC);
 8000ed6:	183b      	adds	r3, r7, r0
 8000ed8:	183a      	adds	r2, r7, r0
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	2108      	movs	r1, #8
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e00c      	b.n	8000efe <NRF24_setCRCLength+0x5a>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000ee4:	200f      	movs	r0, #15
 8000ee6:	183b      	adds	r3, r7, r0
 8000ee8:	183a      	adds	r2, r7, r0
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	2108      	movs	r1, #8
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	701a      	strb	r2, [r3, #0]
    config |= _BV( BIT_CRCO );
 8000ef2:	183b      	adds	r3, r7, r0
 8000ef4:	183a      	adds	r2, r7, r0
 8000ef6:	7812      	ldrb	r2, [r2, #0]
 8000ef8:	2104      	movs	r1, #4
 8000efa:	430a      	orrs	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000efe:	230f      	movs	r3, #15
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	0019      	movs	r1, r3
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fc56 	bl	80007b8 <NRF24_write_register>
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b004      	add	sp, #16
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fbf1 	bl	8000700 <NRF24_read_register>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	001a      	movs	r2, r3
 8000f22:	2302      	movs	r3, #2
 8000f24:	439a      	bics	r2, r3
 8000f26:	0013      	movs	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fc43 	bl	80007b8 <NRF24_write_register>
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000f40:	250f      	movs	r5, #15
 8000f42:	197c      	adds	r4, r7, r5
 8000f44:	f7ff fcc6 	bl	80008d4 <NRF24_get_status>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	7023      	strb	r3, [r4, #0]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000f4c:	0028      	movs	r0, r5
 8000f4e:	183b      	adds	r3, r7, r0
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2240      	movs	r2, #64	; 0x40
 8000f54:	401a      	ands	r2, r3
 8000f56:	240e      	movs	r4, #14
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	1e51      	subs	r1, r2, #1
 8000f5c:	418a      	sbcs	r2, r1
 8000f5e:	701a      	strb	r2, [r3, #0]

  if (result)
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d019      	beq.n	8000f9c <NRF24_availablePipe+0x64>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <NRF24_availablePipe+0x48>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000f6e:	183b      	adds	r3, r7, r0
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	085b      	lsrs	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2207      	movs	r2, #7
 8000f78:	4013      	ands	r3, r2
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	2007      	movs	r0, #7
 8000f84:	f7ff fc18 	bl	80007b8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2220      	movs	r2, #32
 8000f90:	4013      	ands	r3, r2
 8000f92:	d003      	beq.n	8000f9c <NRF24_availablePipe+0x64>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000f94:	2120      	movs	r1, #32
 8000f96:	2007      	movs	r0, #7
 8000f98:	f7ff fc0e 	bl	80007b8 <NRF24_write_register>
    }
  }
  return result;
 8000f9c:	230e      	movs	r3, #14
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}

08000faa <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	1cfb      	adds	r3, r7, #3
 8000fb6:	701a      	strb	r2, [r3, #0]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fba1 	bl	8000700 <NRF24_read_register>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4393      	bics	r3, r2
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	0019      	movs	r1, r3
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fbf1 	bl	80007b8 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8000fd6:	2096      	movs	r0, #150	; 0x96
 8000fd8:	f7ff fb32 	bl	8000640 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000fdc:	1cfb      	adds	r3, r7, #3
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fc3d 	bl	8000864 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff fb68 	bl	80006c0 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	f7ff fb25 	bl	8000640 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fb62 	bl	80006c0 <NRF24_ce>
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001010:	2517      	movs	r5, #23
 8001012:	197c      	adds	r4, r7, r5
 8001014:	f7ff fc5e 	bl	80008d4 <NRF24_get_status>
 8001018:	0003      	movs	r3, r0
 800101a:	7023      	strb	r3, [r4, #0]
	*tx_ok = 0;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001022:	2170      	movs	r1, #112	; 0x70
 8001024:	2007      	movs	r0, #7
 8001026:	f7ff fbc7 	bl	80007b8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800102a:	0029      	movs	r1, r5
 800102c:	187b      	adds	r3, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2220      	movs	r2, #32
 8001032:	4013      	ands	r3, r2
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	4193      	sbcs	r3, r2
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800103e:	187b      	adds	r3, r7, r1
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2210      	movs	r2, #16
 8001044:	4013      	ands	r3, r2
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	4193      	sbcs	r3, r2
 800104a:	b2da      	uxtb	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001050:	187b      	adds	r3, r7, r1
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2240      	movs	r2, #64	; 0x40
 8001056:	4013      	ands	r3, r2
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	4193      	sbcs	r3, r2
 800105c:	b2da      	uxtb	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	701a      	strb	r2, [r3, #0]
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b006      	add	sp, #24
 8001068:	bdb0      	pop	{r4, r5, r7, pc}

0800106a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800106e:	2170      	movs	r1, #112	; 0x70
 8001070:	2007      	movs	r0, #7
 8001072:	f7ff fba1 	bl	80007b8 <NRF24_write_register>
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fafc 	bl	8000680 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2250      	movs	r2, #80	; 0x50
 800108c:	701a      	strb	r2, [r3, #0]
	cmdRxBuf[1] = 0x73;
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2273      	movs	r2, #115	; 0x73
 8001092:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001094:	1d39      	adds	r1, r7, #4
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <NRF24_ACTIVATE_cmd+0x34>)
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	2202      	movs	r2, #2
 800109c:	f002 fc7c 	bl	8003998 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff faed 	bl	8000680 <NRF24_csn>
}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	200000a4 	.word	0x200000a4

080010b4 <printRadioSettings>:
}



void printRadioSettings(void)
{
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	46c6      	mov	lr, r8
 80010b8:	b500      	push	{lr}
 80010ba:	b0a0      	sub	sp, #128	; 0x80
 80010bc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010be:	4ac2      	ldr	r2, [pc, #776]	; (80013c8 <printRadioSettings+0x314>)
 80010c0:	2508      	movs	r5, #8
 80010c2:	197b      	adds	r3, r7, r5
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f005 fc08 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010cc:	197b      	adds	r3, r7, r5
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff f818 	bl	8000104 <strlen>
 80010d4:	0003      	movs	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	1979      	adds	r1, r7, r5
 80010da:	48bc      	ldr	r0, [pc, #752]	; (80013cc <printRadioSettings+0x318>)
 80010dc:	230a      	movs	r3, #10
 80010de:	f003 fafb 	bl	80046d8 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80010e2:	266f      	movs	r6, #111	; 0x6f
 80010e4:	19bc      	adds	r4, r7, r6
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff fb0a 	bl	8000700 <NRF24_read_register>
 80010ec:	0003      	movs	r3, r0
 80010ee:	7023      	strb	r3, [r4, #0]
	if(reg8Val & (1 << 3))
 80010f0:	0031      	movs	r1, r6
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2208      	movs	r2, #8
 80010f8:	4013      	ands	r3, r2
 80010fa:	d013      	beq.n	8001124 <printRadioSettings+0x70>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2204      	movs	r2, #4
 8001102:	4013      	ands	r3, r2
 8001104:	d006      	beq.n	8001114 <printRadioSettings+0x60>
 8001106:	4ab2      	ldr	r2, [pc, #712]	; (80013d0 <printRadioSettings+0x31c>)
 8001108:	197b      	adds	r3, r7, r5
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f005 fbe5 	bl	80068dc <siprintf>
 8001112:	e00e      	b.n	8001132 <printRadioSettings+0x7e>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001114:	4aaf      	ldr	r2, [pc, #700]	; (80013d4 <printRadioSettings+0x320>)
 8001116:	2308      	movs	r3, #8
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f005 fbdd 	bl	80068dc <siprintf>
 8001122:	e006      	b.n	8001132 <printRadioSettings+0x7e>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001124:	4aac      	ldr	r2, [pc, #688]	; (80013d8 <printRadioSettings+0x324>)
 8001126:	2308      	movs	r3, #8
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f005 fbd5 	bl	80068dc <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001132:	2408      	movs	r4, #8
 8001134:	193b      	adds	r3, r7, r4
 8001136:	0018      	movs	r0, r3
 8001138:	f7fe ffe4 	bl	8000104 <strlen>
 800113c:	0003      	movs	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	1939      	adds	r1, r7, r4
 8001142:	48a2      	ldr	r0, [pc, #648]	; (80013cc <printRadioSettings+0x318>)
 8001144:	230a      	movs	r3, #10
 8001146:	f003 fac7 	bl	80046d8 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800114a:	256f      	movs	r5, #111	; 0x6f
 800114c:	197c      	adds	r4, r7, r5
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff fad6 	bl	8000700 <NRF24_read_register>
 8001154:	0003      	movs	r3, r0
 8001156:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001158:	0029      	movs	r1, r5
 800115a:	187b      	adds	r3, r7, r1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001162:	17da      	asrs	r2, r3, #31
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	0fdb      	lsrs	r3, r3, #31
 8001168:	b2db      	uxtb	r3, r3
 800116a:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800116c:	187b      	adds	r3, r7, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2202      	movs	r2, #2
 8001172:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001174:	17da      	asrs	r2, r3, #31
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	0fdb      	lsrs	r3, r3, #31
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800117e:	187b      	adds	r3, r7, r1
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2204      	movs	r2, #4
 8001184:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001186:	17da      	asrs	r2, r3, #31
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	0fdb      	lsrs	r3, r3, #31
 800118c:	b2db      	uxtb	r3, r3
 800118e:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001190:	187b      	adds	r3, r7, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2208      	movs	r2, #8
 8001196:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001198:	17da      	asrs	r2, r3, #31
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	0fdb      	lsrs	r3, r3, #31
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2210      	movs	r2, #16
 80011a8:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011aa:	17da      	asrs	r2, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	0fdb      	lsrs	r3, r3, #31
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2220      	movs	r2, #32
 80011ba:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011bc:	17da      	asrs	r2, r3, #31
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	0fdb      	lsrs	r3, r3, #31
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4985      	ldr	r1, [pc, #532]	; (80013dc <printRadioSettings+0x328>)
 80011c6:	2208      	movs	r2, #8
 80011c8:	18b8      	adds	r0, r7, r2
 80011ca:	9303      	str	r3, [sp, #12]
 80011cc:	9602      	str	r6, [sp, #8]
 80011ce:	9501      	str	r5, [sp, #4]
 80011d0:	9400      	str	r4, [sp, #0]
 80011d2:	4643      	mov	r3, r8
 80011d4:	4662      	mov	r2, ip
 80011d6:	f005 fb81 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011da:	2408      	movs	r4, #8
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	0018      	movs	r0, r3
 80011e0:	f7fe ff90 	bl	8000104 <strlen>
 80011e4:	0003      	movs	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	1939      	adds	r1, r7, r4
 80011ea:	4878      	ldr	r0, [pc, #480]	; (80013cc <printRadioSettings+0x318>)
 80011ec:	230a      	movs	r3, #10
 80011ee:	f003 fa73 	bl	80046d8 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011f2:	216f      	movs	r1, #111	; 0x6f
 80011f4:	000d      	movs	r5, r1
 80011f6:	187c      	adds	r4, r7, r1
 80011f8:	2002      	movs	r0, #2
 80011fa:	f7ff fa81 	bl	8000700 <NRF24_read_register>
 80011fe:	0003      	movs	r3, r0
 8001200:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001202:	0029      	movs	r1, r5
 8001204:	187b      	adds	r3, r7, r1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2201      	movs	r2, #1
 800120a:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800120c:	17da      	asrs	r2, r3, #31
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	0fdb      	lsrs	r3, r3, #31
 8001212:	b2db      	uxtb	r3, r3
 8001214:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001216:	187b      	adds	r3, r7, r1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2202      	movs	r2, #2
 800121c:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800121e:	17da      	asrs	r2, r3, #31
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	0fdb      	lsrs	r3, r3, #31
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001228:	187b      	adds	r3, r7, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2204      	movs	r2, #4
 800122e:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001230:	17da      	asrs	r2, r3, #31
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	b2db      	uxtb	r3, r3
 8001238:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800123a:	187b      	adds	r3, r7, r1
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2208      	movs	r2, #8
 8001240:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001242:	17da      	asrs	r2, r3, #31
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	0fdb      	lsrs	r3, r3, #31
 8001248:	b2db      	uxtb	r3, r3
 800124a:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2210      	movs	r2, #16
 8001252:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	17da      	asrs	r2, r3, #31
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	0fdb      	lsrs	r3, r3, #31
 800125a:	b2db      	uxtb	r3, r3
 800125c:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800125e:	187b      	adds	r3, r7, r1
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2220      	movs	r2, #32
 8001264:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001266:	17da      	asrs	r2, r3, #31
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	0fdb      	lsrs	r3, r3, #31
 800126c:	b2db      	uxtb	r3, r3
 800126e:	495c      	ldr	r1, [pc, #368]	; (80013e0 <printRadioSettings+0x32c>)
 8001270:	2208      	movs	r2, #8
 8001272:	18b8      	adds	r0, r7, r2
 8001274:	9303      	str	r3, [sp, #12]
 8001276:	9602      	str	r6, [sp, #8]
 8001278:	9501      	str	r5, [sp, #4]
 800127a:	9400      	str	r4, [sp, #0]
 800127c:	4643      	mov	r3, r8
 800127e:	4662      	mov	r2, ip
 8001280:	f005 fb2c 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001284:	2508      	movs	r5, #8
 8001286:	197b      	adds	r3, r7, r5
 8001288:	0018      	movs	r0, r3
 800128a:	f7fe ff3b 	bl	8000104 <strlen>
 800128e:	0003      	movs	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	1979      	adds	r1, r7, r5
 8001294:	484d      	ldr	r0, [pc, #308]	; (80013cc <printRadioSettings+0x318>)
 8001296:	230a      	movs	r3, #10
 8001298:	f003 fa1e 	bl	80046d8 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800129c:	2003      	movs	r0, #3
 800129e:	f7ff fa2f 	bl	8000700 <NRF24_read_register>
 80012a2:	0003      	movs	r3, r0
 80012a4:	0019      	movs	r1, r3
 80012a6:	246f      	movs	r4, #111	; 0x6f
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	2203      	movs	r2, #3
 80012ac:	400a      	ands	r2, r1
 80012ae:	701a      	strb	r2, [r3, #0]
	reg8Val +=2;
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	193a      	adds	r2, r7, r4
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	3202      	adds	r2, #2
 80012b8:	701a      	strb	r2, [r3, #0]
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	4949      	ldr	r1, [pc, #292]	; (80013e4 <printRadioSettings+0x330>)
 80012c0:	002e      	movs	r6, r5
 80012c2:	19bb      	adds	r3, r7, r6
 80012c4:	0018      	movs	r0, r3
 80012c6:	f005 fb09 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ca:	19bb      	adds	r3, r7, r6
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7fe ff19 	bl	8000104 <strlen>
 80012d2:	0003      	movs	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	19b9      	adds	r1, r7, r6
 80012d8:	483c      	ldr	r0, [pc, #240]	; (80013cc <printRadioSettings+0x318>)
 80012da:	230a      	movs	r3, #10
 80012dc:	f003 f9fc 	bl	80046d8 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012e0:	0025      	movs	r5, r4
 80012e2:	193c      	adds	r4, r7, r4
 80012e4:	2005      	movs	r0, #5
 80012e6:	f7ff fa0b 	bl	8000700 <NRF24_read_register>
 80012ea:	0003      	movs	r3, r0
 80012ec:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012ee:	002c      	movs	r4, r5
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	227f      	movs	r2, #127	; 0x7f
 80012f6:	401a      	ands	r2, r3
 80012f8:	493b      	ldr	r1, [pc, #236]	; (80013e8 <printRadioSettings+0x334>)
 80012fa:	19bb      	adds	r3, r7, r6
 80012fc:	0018      	movs	r0, r3
 80012fe:	f005 faed 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001302:	19bb      	adds	r3, r7, r6
 8001304:	0018      	movs	r0, r3
 8001306:	f7fe fefd 	bl	8000104 <strlen>
 800130a:	0003      	movs	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	19b9      	adds	r1, r7, r6
 8001310:	482e      	ldr	r0, [pc, #184]	; (80013cc <printRadioSettings+0x318>)
 8001312:	230a      	movs	r3, #10
 8001314:	f003 f9e0 	bl	80046d8 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001318:	0025      	movs	r5, r4
 800131a:	193c      	adds	r4, r7, r4
 800131c:	2006      	movs	r0, #6
 800131e:	f7ff f9ef 	bl	8000700 <NRF24_read_register>
 8001322:	0003      	movs	r3, r0
 8001324:	7023      	strb	r3, [r4, #0]
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001326:	197b      	adds	r3, r7, r5
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2208      	movs	r2, #8
 800132c:	4013      	ands	r3, r2
 800132e:	d006      	beq.n	800133e <printRadioSettings+0x28a>
 8001330:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <printRadioSettings+0x338>)
 8001332:	19bb      	adds	r3, r7, r6
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f005 fad0 	bl	80068dc <siprintf>
 800133c:	e006      	b.n	800134c <printRadioSettings+0x298>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800133e:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <printRadioSettings+0x33c>)
 8001340:	2308      	movs	r3, #8
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f005 fac8 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800134c:	2408      	movs	r4, #8
 800134e:	193b      	adds	r3, r7, r4
 8001350:	0018      	movs	r0, r3
 8001352:	f7fe fed7 	bl	8000104 <strlen>
 8001356:	0003      	movs	r3, r0
 8001358:	b29a      	uxth	r2, r3
 800135a:	1939      	adds	r1, r7, r4
 800135c:	481b      	ldr	r0, [pc, #108]	; (80013cc <printRadioSettings+0x318>)
 800135e:	230a      	movs	r3, #10
 8001360:	f003 f9ba 	bl	80046d8 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001364:	206f      	movs	r0, #111	; 0x6f
 8001366:	183b      	adds	r3, r7, r0
 8001368:	183a      	adds	r2, r7, r0
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	2106      	movs	r1, #6
 800136e:	400a      	ands	r2, r1
 8001370:	701a      	strb	r2, [r3, #0]
	reg8Val = (reg8Val>>1);
 8001372:	0001      	movs	r1, r0
 8001374:	187b      	adds	r3, r7, r1
 8001376:	187a      	adds	r2, r7, r1
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	0852      	lsrs	r2, r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800137e:	187b      	adds	r3, r7, r1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <printRadioSettings+0x2e0>
 8001386:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <printRadioSettings+0x340>)
 8001388:	193b      	adds	r3, r7, r4
 800138a:	0011      	movs	r1, r2
 800138c:	0018      	movs	r0, r3
 800138e:	f005 faa5 	bl	80068dc <siprintf>
 8001392:	e041      	b.n	8001418 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001394:	236f      	movs	r3, #111	; 0x6f
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d107      	bne.n	80013ae <printRadioSettings+0x2fa>
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <printRadioSettings+0x344>)
 80013a0:	2308      	movs	r3, #8
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f005 fa98 	bl	80068dc <siprintf>
 80013ac:	e034      	b.n	8001418 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013ae:	236f      	movs	r3, #111	; 0x6f
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <printRadioSettings+0x34c>
 80013b8:	4a10      	ldr	r2, [pc, #64]	; (80013fc <printRadioSettings+0x348>)
 80013ba:	2308      	movs	r3, #8
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f005 fa8b 	bl	80068dc <siprintf>
 80013c6:	e027      	b.n	8001418 <printRadioSettings+0x364>
 80013c8:	080071b4 	.word	0x080071b4
 80013cc:	20000108 	.word	0x20000108
 80013d0:	080071e8 	.word	0x080071e8
 80013d4:	08007204 	.word	0x08007204
 80013d8:	08007220 	.word	0x08007220
 80013dc:	08007234 	.word	0x08007234
 80013e0:	08007278 	.word	0x08007278
 80013e4:	080072c4 	.word	0x080072c4
 80013e8:	080072e0 	.word	0x080072e0
 80013ec:	080072f4 	.word	0x080072f4
 80013f0:	0800730c 	.word	0x0800730c
 80013f4:	08007324 	.word	0x08007324
 80013f8:	08007338 	.word	0x08007338
 80013fc:	0800734c 	.word	0x0800734c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001400:	236f      	movs	r3, #111	; 0x6f
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d106      	bne.n	8001418 <printRadioSettings+0x364>
 800140a:	4afe      	ldr	r2, [pc, #1016]	; (8001804 <printRadioSettings+0x750>)
 800140c:	2308      	movs	r3, #8
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	0011      	movs	r1, r2
 8001412:	0018      	movs	r0, r3
 8001414:	f005 fa62 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001418:	2408      	movs	r4, #8
 800141a:	193b      	adds	r3, r7, r4
 800141c:	0018      	movs	r0, r3
 800141e:	f7fe fe71 	bl	8000104 <strlen>
 8001422:	0003      	movs	r3, r0
 8001424:	b29a      	uxth	r2, r3
 8001426:	1939      	adds	r1, r7, r4
 8001428:	48f7      	ldr	r0, [pc, #988]	; (8001808 <printRadioSettings+0x754>)
 800142a:	230a      	movs	r3, #10
 800142c:	f003 f954 	bl	80046d8 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001430:	003b      	movs	r3, r7
 8001432:	2205      	movs	r2, #5
 8001434:	0019      	movs	r1, r3
 8001436:	200a      	movs	r0, #10
 8001438:	f7ff f990 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800143c:	003b      	movs	r3, r7
 800143e:	791b      	ldrb	r3, [r3, #4]
 8001440:	001d      	movs	r5, r3
 8001442:	003b      	movs	r3, r7
 8001444:	78db      	ldrb	r3, [r3, #3]
 8001446:	001e      	movs	r6, r3
 8001448:	003b      	movs	r3, r7
 800144a:	789b      	ldrb	r3, [r3, #2]
 800144c:	001a      	movs	r2, r3
 800144e:	003b      	movs	r3, r7
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	001c      	movs	r4, r3
 8001454:	003b      	movs	r3, r7
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	49ec      	ldr	r1, [pc, #944]	; (800180c <printRadioSettings+0x758>)
 800145a:	2008      	movs	r0, #8
 800145c:	1838      	adds	r0, r7, r0
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	9401      	str	r4, [sp, #4]
 8001462:	9200      	str	r2, [sp, #0]
 8001464:	0033      	movs	r3, r6
 8001466:	002a      	movs	r2, r5
 8001468:	f005 fa38 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800146c:	2408      	movs	r4, #8
 800146e:	193b      	adds	r3, r7, r4
 8001470:	0018      	movs	r0, r3
 8001472:	f7fe fe47 	bl	8000104 <strlen>
 8001476:	0003      	movs	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	1939      	adds	r1, r7, r4
 800147c:	48e2      	ldr	r0, [pc, #904]	; (8001808 <printRadioSettings+0x754>)
 800147e:	230a      	movs	r3, #10
 8001480:	f003 f92a 	bl	80046d8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001484:	003b      	movs	r3, r7
 8001486:	2205      	movs	r2, #5
 8001488:	0019      	movs	r1, r3
 800148a:	200b      	movs	r0, #11
 800148c:	f7ff f966 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001490:	003b      	movs	r3, r7
 8001492:	791b      	ldrb	r3, [r3, #4]
 8001494:	001d      	movs	r5, r3
 8001496:	003b      	movs	r3, r7
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	001e      	movs	r6, r3
 800149c:	003b      	movs	r3, r7
 800149e:	789b      	ldrb	r3, [r3, #2]
 80014a0:	001a      	movs	r2, r3
 80014a2:	003b      	movs	r3, r7
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	001c      	movs	r4, r3
 80014a8:	003b      	movs	r3, r7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	49d8      	ldr	r1, [pc, #864]	; (8001810 <printRadioSettings+0x75c>)
 80014ae:	2008      	movs	r0, #8
 80014b0:	1838      	adds	r0, r7, r0
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	9401      	str	r4, [sp, #4]
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	0033      	movs	r3, r6
 80014ba:	002a      	movs	r2, r5
 80014bc:	f005 fa0e 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c0:	2408      	movs	r4, #8
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7fe fe1d 	bl	8000104 <strlen>
 80014ca:	0003      	movs	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	1939      	adds	r1, r7, r4
 80014d0:	48cd      	ldr	r0, [pc, #820]	; (8001808 <printRadioSettings+0x754>)
 80014d2:	230a      	movs	r3, #10
 80014d4:	f003 f900 	bl	80046d8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014d8:	003b      	movs	r3, r7
 80014da:	2201      	movs	r2, #1
 80014dc:	0019      	movs	r1, r3
 80014de:	200c      	movs	r0, #12
 80014e0:	f7ff f93c 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014e4:	003b      	movs	r3, r7
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	001a      	movs	r2, r3
 80014ea:	49ca      	ldr	r1, [pc, #808]	; (8001814 <printRadioSettings+0x760>)
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	0018      	movs	r0, r3
 80014f0:	f005 f9f4 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7fe fe04 	bl	8000104 <strlen>
 80014fc:	0003      	movs	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	1939      	adds	r1, r7, r4
 8001502:	48c1      	ldr	r0, [pc, #772]	; (8001808 <printRadioSettings+0x754>)
 8001504:	230a      	movs	r3, #10
 8001506:	f003 f8e7 	bl	80046d8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800150a:	003b      	movs	r3, r7
 800150c:	2201      	movs	r2, #1
 800150e:	0019      	movs	r1, r3
 8001510:	200d      	movs	r0, #13
 8001512:	f7ff f923 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001516:	003b      	movs	r3, r7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	001a      	movs	r2, r3
 800151c:	49be      	ldr	r1, [pc, #760]	; (8001818 <printRadioSettings+0x764>)
 800151e:	193b      	adds	r3, r7, r4
 8001520:	0018      	movs	r0, r3
 8001522:	f005 f9db 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001526:	193b      	adds	r3, r7, r4
 8001528:	0018      	movs	r0, r3
 800152a:	f7fe fdeb 	bl	8000104 <strlen>
 800152e:	0003      	movs	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	1939      	adds	r1, r7, r4
 8001534:	48b4      	ldr	r0, [pc, #720]	; (8001808 <printRadioSettings+0x754>)
 8001536:	230a      	movs	r3, #10
 8001538:	f003 f8ce 	bl	80046d8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800153c:	003b      	movs	r3, r7
 800153e:	2201      	movs	r2, #1
 8001540:	0019      	movs	r1, r3
 8001542:	200e      	movs	r0, #14
 8001544:	f7ff f90a 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001548:	003b      	movs	r3, r7
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	001a      	movs	r2, r3
 800154e:	49b3      	ldr	r1, [pc, #716]	; (800181c <printRadioSettings+0x768>)
 8001550:	193b      	adds	r3, r7, r4
 8001552:	0018      	movs	r0, r3
 8001554:	f005 f9c2 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001558:	193b      	adds	r3, r7, r4
 800155a:	0018      	movs	r0, r3
 800155c:	f7fe fdd2 	bl	8000104 <strlen>
 8001560:	0003      	movs	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	1939      	adds	r1, r7, r4
 8001566:	48a8      	ldr	r0, [pc, #672]	; (8001808 <printRadioSettings+0x754>)
 8001568:	230a      	movs	r3, #10
 800156a:	f003 f8b5 	bl	80046d8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800156e:	003b      	movs	r3, r7
 8001570:	2201      	movs	r2, #1
 8001572:	0019      	movs	r1, r3
 8001574:	200f      	movs	r0, #15
 8001576:	f7ff f8f1 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800157a:	003b      	movs	r3, r7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	001a      	movs	r2, r3
 8001580:	49a7      	ldr	r1, [pc, #668]	; (8001820 <printRadioSettings+0x76c>)
 8001582:	193b      	adds	r3, r7, r4
 8001584:	0018      	movs	r0, r3
 8001586:	f005 f9a9 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800158a:	193b      	adds	r3, r7, r4
 800158c:	0018      	movs	r0, r3
 800158e:	f7fe fdb9 	bl	8000104 <strlen>
 8001592:	0003      	movs	r3, r0
 8001594:	b29a      	uxth	r2, r3
 8001596:	1939      	adds	r1, r7, r4
 8001598:	489b      	ldr	r0, [pc, #620]	; (8001808 <printRadioSettings+0x754>)
 800159a:	230a      	movs	r3, #10
 800159c:	f003 f89c 	bl	80046d8 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015a0:	003b      	movs	r3, r7
 80015a2:	2205      	movs	r2, #5
 80015a4:	0019      	movs	r1, r3
 80015a6:	2010      	movs	r0, #16
 80015a8:	f7ff f8d8 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015ac:	003b      	movs	r3, r7
 80015ae:	791b      	ldrb	r3, [r3, #4]
 80015b0:	001d      	movs	r5, r3
 80015b2:	003b      	movs	r3, r7
 80015b4:	78db      	ldrb	r3, [r3, #3]
 80015b6:	001e      	movs	r6, r3
 80015b8:	003b      	movs	r3, r7
 80015ba:	789b      	ldrb	r3, [r3, #2]
 80015bc:	001a      	movs	r2, r3
 80015be:	003b      	movs	r3, r7
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	001c      	movs	r4, r3
 80015c4:	003b      	movs	r3, r7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4996      	ldr	r1, [pc, #600]	; (8001824 <printRadioSettings+0x770>)
 80015ca:	2008      	movs	r0, #8
 80015cc:	1838      	adds	r0, r7, r0
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	9401      	str	r4, [sp, #4]
 80015d2:	9200      	str	r2, [sp, #0]
 80015d4:	0033      	movs	r3, r6
 80015d6:	002a      	movs	r2, r5
 80015d8:	f005 f980 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015dc:	2508      	movs	r5, #8
 80015de:	197b      	adds	r3, r7, r5
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7fe fd8f 	bl	8000104 <strlen>
 80015e6:	0003      	movs	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	1979      	adds	r1, r7, r5
 80015ec:	4886      	ldr	r0, [pc, #536]	; (8001808 <printRadioSettings+0x754>)
 80015ee:	230a      	movs	r3, #10
 80015f0:	f003 f872 	bl	80046d8 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80015f4:	266f      	movs	r6, #111	; 0x6f
 80015f6:	19bc      	adds	r4, r7, r6
 80015f8:	2011      	movs	r0, #17
 80015fa:	f7ff f881 	bl	8000700 <NRF24_read_register>
 80015fe:	0003      	movs	r3, r0
 8001600:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001602:	0034      	movs	r4, r6
 8001604:	193b      	adds	r3, r7, r4
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	223f      	movs	r2, #63	; 0x3f
 800160a:	401a      	ands	r2, r3
 800160c:	4986      	ldr	r1, [pc, #536]	; (8001828 <printRadioSettings+0x774>)
 800160e:	197b      	adds	r3, r7, r5
 8001610:	0018      	movs	r0, r3
 8001612:	f005 f963 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001616:	197b      	adds	r3, r7, r5
 8001618:	0018      	movs	r0, r3
 800161a:	f7fe fd73 	bl	8000104 <strlen>
 800161e:	0003      	movs	r3, r0
 8001620:	b29a      	uxth	r2, r3
 8001622:	1979      	adds	r1, r7, r5
 8001624:	4878      	ldr	r0, [pc, #480]	; (8001808 <printRadioSettings+0x754>)
 8001626:	230a      	movs	r3, #10
 8001628:	f003 f856 	bl	80046d8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800162c:	0026      	movs	r6, r4
 800162e:	193c      	adds	r4, r7, r4
 8001630:	2012      	movs	r0, #18
 8001632:	f7ff f865 	bl	8000700 <NRF24_read_register>
 8001636:	0003      	movs	r3, r0
 8001638:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800163a:	0034      	movs	r4, r6
 800163c:	193b      	adds	r3, r7, r4
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	223f      	movs	r2, #63	; 0x3f
 8001642:	401a      	ands	r2, r3
 8001644:	4979      	ldr	r1, [pc, #484]	; (800182c <printRadioSettings+0x778>)
 8001646:	197b      	adds	r3, r7, r5
 8001648:	0018      	movs	r0, r3
 800164a:	f005 f947 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800164e:	197b      	adds	r3, r7, r5
 8001650:	0018      	movs	r0, r3
 8001652:	f7fe fd57 	bl	8000104 <strlen>
 8001656:	0003      	movs	r3, r0
 8001658:	b29a      	uxth	r2, r3
 800165a:	1979      	adds	r1, r7, r5
 800165c:	486a      	ldr	r0, [pc, #424]	; (8001808 <printRadioSettings+0x754>)
 800165e:	230a      	movs	r3, #10
 8001660:	f003 f83a 	bl	80046d8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001664:	0026      	movs	r6, r4
 8001666:	193c      	adds	r4, r7, r4
 8001668:	2013      	movs	r0, #19
 800166a:	f7ff f849 	bl	8000700 <NRF24_read_register>
 800166e:	0003      	movs	r3, r0
 8001670:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001672:	0034      	movs	r4, r6
 8001674:	193b      	adds	r3, r7, r4
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	223f      	movs	r2, #63	; 0x3f
 800167a:	401a      	ands	r2, r3
 800167c:	496c      	ldr	r1, [pc, #432]	; (8001830 <printRadioSettings+0x77c>)
 800167e:	197b      	adds	r3, r7, r5
 8001680:	0018      	movs	r0, r3
 8001682:	f005 f92b 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001686:	197b      	adds	r3, r7, r5
 8001688:	0018      	movs	r0, r3
 800168a:	f7fe fd3b 	bl	8000104 <strlen>
 800168e:	0003      	movs	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	1979      	adds	r1, r7, r5
 8001694:	485c      	ldr	r0, [pc, #368]	; (8001808 <printRadioSettings+0x754>)
 8001696:	230a      	movs	r3, #10
 8001698:	f003 f81e 	bl	80046d8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800169c:	0026      	movs	r6, r4
 800169e:	193c      	adds	r4, r7, r4
 80016a0:	2014      	movs	r0, #20
 80016a2:	f7ff f82d 	bl	8000700 <NRF24_read_register>
 80016a6:	0003      	movs	r3, r0
 80016a8:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016aa:	0034      	movs	r4, r6
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	223f      	movs	r2, #63	; 0x3f
 80016b2:	401a      	ands	r2, r3
 80016b4:	495f      	ldr	r1, [pc, #380]	; (8001834 <printRadioSettings+0x780>)
 80016b6:	197b      	adds	r3, r7, r5
 80016b8:	0018      	movs	r0, r3
 80016ba:	f005 f90f 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016be:	197b      	adds	r3, r7, r5
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7fe fd1f 	bl	8000104 <strlen>
 80016c6:	0003      	movs	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	1979      	adds	r1, r7, r5
 80016cc:	484e      	ldr	r0, [pc, #312]	; (8001808 <printRadioSettings+0x754>)
 80016ce:	230a      	movs	r3, #10
 80016d0:	f003 f802 	bl	80046d8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016d4:	0026      	movs	r6, r4
 80016d6:	193c      	adds	r4, r7, r4
 80016d8:	2015      	movs	r0, #21
 80016da:	f7ff f811 	bl	8000700 <NRF24_read_register>
 80016de:	0003      	movs	r3, r0
 80016e0:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016e2:	0034      	movs	r4, r6
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	223f      	movs	r2, #63	; 0x3f
 80016ea:	401a      	ands	r2, r3
 80016ec:	4952      	ldr	r1, [pc, #328]	; (8001838 <printRadioSettings+0x784>)
 80016ee:	197b      	adds	r3, r7, r5
 80016f0:	0018      	movs	r0, r3
 80016f2:	f005 f8f3 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016f6:	197b      	adds	r3, r7, r5
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7fe fd03 	bl	8000104 <strlen>
 80016fe:	0003      	movs	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	1979      	adds	r1, r7, r5
 8001704:	4840      	ldr	r0, [pc, #256]	; (8001808 <printRadioSettings+0x754>)
 8001706:	230a      	movs	r3, #10
 8001708:	f002 ffe6 	bl	80046d8 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800170c:	0026      	movs	r6, r4
 800170e:	193c      	adds	r4, r7, r4
 8001710:	2016      	movs	r0, #22
 8001712:	f7fe fff5 	bl	8000700 <NRF24_read_register>
 8001716:	0003      	movs	r3, r0
 8001718:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800171a:	0034      	movs	r4, r6
 800171c:	193b      	adds	r3, r7, r4
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	223f      	movs	r2, #63	; 0x3f
 8001722:	401a      	ands	r2, r3
 8001724:	4945      	ldr	r1, [pc, #276]	; (800183c <printRadioSettings+0x788>)
 8001726:	197b      	adds	r3, r7, r5
 8001728:	0018      	movs	r0, r3
 800172a:	f005 f8d7 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172e:	197b      	adds	r3, r7, r5
 8001730:	0018      	movs	r0, r3
 8001732:	f7fe fce7 	bl	8000104 <strlen>
 8001736:	0003      	movs	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	1979      	adds	r1, r7, r5
 800173c:	4832      	ldr	r0, [pc, #200]	; (8001808 <printRadioSettings+0x754>)
 800173e:	230a      	movs	r3, #10
 8001740:	f002 ffca 	bl	80046d8 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001744:	0026      	movs	r6, r4
 8001746:	193c      	adds	r4, r7, r4
 8001748:	201c      	movs	r0, #28
 800174a:	f7fe ffd9 	bl	8000700 <NRF24_read_register>
 800174e:	0003      	movs	r3, r0
 8001750:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001752:	0031      	movs	r1, r6
 8001754:	187b      	adds	r3, r7, r1
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800175c:	17da      	asrs	r2, r3, #31
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	0fdb      	lsrs	r3, r3, #31
 8001762:	b2db      	uxtb	r3, r3
 8001764:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001766:	187b      	adds	r3, r7, r1
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800176e:	17da      	asrs	r2, r3, #31
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	0fdb      	lsrs	r3, r3, #31
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001778:	187b      	adds	r3, r7, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2204      	movs	r2, #4
 800177e:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	0fdb      	lsrs	r3, r3, #31
 8001786:	b2db      	uxtb	r3, r3
 8001788:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800178a:	187b      	adds	r3, r7, r1
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2208      	movs	r2, #8
 8001790:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001792:	17da      	asrs	r2, r3, #31
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	0fdb      	lsrs	r3, r3, #31
 8001798:	b2db      	uxtb	r3, r3
 800179a:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800179c:	187b      	adds	r3, r7, r1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2210      	movs	r2, #16
 80017a2:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017a4:	17da      	asrs	r2, r3, #31
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	0fdb      	lsrs	r3, r3, #31
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2220      	movs	r2, #32
 80017b4:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017b6:	17da      	asrs	r2, r3, #31
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4920      	ldr	r1, [pc, #128]	; (8001840 <printRadioSettings+0x78c>)
 80017c0:	2208      	movs	r2, #8
 80017c2:	18b8      	adds	r0, r7, r2
 80017c4:	9303      	str	r3, [sp, #12]
 80017c6:	9602      	str	r6, [sp, #8]
 80017c8:	9501      	str	r5, [sp, #4]
 80017ca:	9400      	str	r4, [sp, #0]
 80017cc:	4643      	mov	r3, r8
 80017ce:	4662      	mov	r2, ip
 80017d0:	f005 f884 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017d4:	2508      	movs	r5, #8
 80017d6:	197b      	adds	r3, r7, r5
 80017d8:	0018      	movs	r0, r3
 80017da:	f7fe fc93 	bl	8000104 <strlen>
 80017de:	0003      	movs	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	1979      	adds	r1, r7, r5
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <printRadioSettings+0x754>)
 80017e6:	230a      	movs	r3, #10
 80017e8:	f002 ff76 	bl	80046d8 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80017ec:	266f      	movs	r6, #111	; 0x6f
 80017ee:	19bc      	adds	r4, r7, r6
 80017f0:	201d      	movs	r0, #29
 80017f2:	f7fe ff85 	bl	8000700 <NRF24_read_register>
 80017f6:	0003      	movs	r3, r0
 80017f8:	7023      	strb	r3, [r4, #0]
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80017fa:	19bb      	adds	r3, r7, r6
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2204      	movs	r2, #4
 8001800:	4013      	ands	r3, r2
 8001802:	e01f      	b.n	8001844 <printRadioSettings+0x790>
 8001804:	08007360 	.word	0x08007360
 8001808:	20000108 	.word	0x20000108
 800180c:	08007374 	.word	0x08007374
 8001810:	080073a4 	.word	0x080073a4
 8001814:	080073d4 	.word	0x080073d4
 8001818:	080073fc 	.word	0x080073fc
 800181c:	08007424 	.word	0x08007424
 8001820:	0800744c 	.word	0x0800744c
 8001824:	08007474 	.word	0x08007474
 8001828:	080074a0 	.word	0x080074a0
 800182c:	080074bc 	.word	0x080074bc
 8001830:	080074d8 	.word	0x080074d8
 8001834:	080074f4 	.word	0x080074f4
 8001838:	08007510 	.word	0x08007510
 800183c:	0800752c 	.word	0x0800752c
 8001840:	08007548 	.word	0x08007548
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <printRadioSettings+0x7a2>
 8001848:	4a28      	ldr	r2, [pc, #160]	; (80018ec <printRadioSettings+0x838>)
 800184a:	197b      	adds	r3, r7, r5
 800184c:	0011      	movs	r1, r2
 800184e:	0018      	movs	r0, r3
 8001850:	f005 f844 	bl	80068dc <siprintf>
 8001854:	e006      	b.n	8001864 <printRadioSettings+0x7b0>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001856:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <printRadioSettings+0x83c>)
 8001858:	2308      	movs	r3, #8
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f005 f83c 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001864:	2408      	movs	r4, #8
 8001866:	193b      	adds	r3, r7, r4
 8001868:	0018      	movs	r0, r3
 800186a:	f7fe fc4b 	bl	8000104 <strlen>
 800186e:	0003      	movs	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	1939      	adds	r1, r7, r4
 8001874:	481f      	ldr	r0, [pc, #124]	; (80018f4 <printRadioSettings+0x840>)
 8001876:	230a      	movs	r3, #10
 8001878:	f002 ff2e 	bl	80046d8 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800187c:	236f      	movs	r3, #111	; 0x6f
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d006      	beq.n	8001896 <printRadioSettings+0x7e2>
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <printRadioSettings+0x844>)
 800188a:	193b      	adds	r3, r7, r4
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f005 f824 	bl	80068dc <siprintf>
 8001894:	e006      	b.n	80018a4 <printRadioSettings+0x7f0>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001896:	4a19      	ldr	r2, [pc, #100]	; (80018fc <printRadioSettings+0x848>)
 8001898:	2308      	movs	r3, #8
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f005 f81c 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018a4:	2408      	movs	r4, #8
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7fe fc2b 	bl	8000104 <strlen>
 80018ae:	0003      	movs	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	1939      	adds	r1, r7, r4
 80018b4:	480f      	ldr	r0, [pc, #60]	; (80018f4 <printRadioSettings+0x840>)
 80018b6:	230a      	movs	r3, #10
 80018b8:	f002 ff0e 	bl	80046d8 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018bc:	4a10      	ldr	r2, [pc, #64]	; (8001900 <printRadioSettings+0x84c>)
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	0011      	movs	r1, r2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f005 f80a 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7fe fc1a 	bl	8000104 <strlen>
 80018d0:	0003      	movs	r3, r0
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	1939      	adds	r1, r7, r4
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <printRadioSettings+0x840>)
 80018d8:	230a      	movs	r3, #10
 80018da:	f002 fefd 	bl	80046d8 <HAL_UART_Transmit>
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b01c      	add	sp, #112	; 0x70
 80018e4:	bc80      	pop	{r7}
 80018e6:	46b8      	mov	r8, r7
 80018e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	08007594 	.word	0x08007594
 80018f0:	080075ac 	.word	0x080075ac
 80018f4:	20000108 	.word	0x20000108
 80018f8:	080075c4 	.word	0x080075c4
 80018fc:	080075e0 	.word	0x080075e0
 8001900:	080071b4 	.word	0x080071b4

08001904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	46c6      	mov	lr, r8
 8001908:	b500      	push	{lr}
 800190a:	b09a      	sub	sp, #104	; 0x68
 800190c:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190e:	f000 fc09 	bl	8002124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001912:	f000 f8bf 	bl	8001a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001916:	f000 f991 	bl	8001c3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800191a:	f000 f941 	bl	8001ba0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800191e:	f000 f901 	bl	8001b24 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //UART
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8001922:	4b54      	ldr	r3, [pc, #336]	; (8001a74 <main+0x170>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <main+0x170>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2140      	movs	r1, #64	; 0x40
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001932:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <main+0x170>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <main+0x170>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2120      	movs	r1, #32
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
  	HAL_UART_Receive_IT(&huart2, &RxSingleByte, 1);
 8001942:	494d      	ldr	r1, [pc, #308]	; (8001a78 <main+0x174>)
 8001944:	4b4b      	ldr	r3, [pc, #300]	; (8001a74 <main+0x170>)
 8001946:	2201      	movs	r2, #1
 8001948:	0018      	movs	r0, r3
 800194a:	f002 ff71 	bl	8004830 <HAL_UART_Receive_IT>
  	serialWrite("Gateway running");
 800194e:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <main+0x178>)
 8001950:	0018      	movs	r0, r3
 8001952:	f000 f9c5 	bl	8001ce0 <serialWrite>
  //**** TRANSMITTER ****//

    NRF24_begin(GPIOA, NRF_CSN_Pin, NRF_CE_Pin, hspi1);
 8001956:	4c4a      	ldr	r4, [pc, #296]	; (8001a80 <main+0x17c>)
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4698      	mov	r8, r3
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	005e      	lsls	r6, r3, #1
 8001962:	23a0      	movs	r3, #160	; 0xa0
 8001964:	05dd      	lsls	r5, r3, #23
 8001966:	466b      	mov	r3, sp
 8001968:	0018      	movs	r0, r3
 800196a:	1d23      	adds	r3, r4, #4
 800196c:	2260      	movs	r2, #96	; 0x60
 800196e:	0019      	movs	r1, r3
 8001970:	f004 ffa2 	bl	80068b8 <memcpy>
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	4642      	mov	r2, r8
 8001978:	0031      	movs	r1, r6
 800197a:	0028      	movs	r0, r5
 800197c:	f7fe ffba 	bl	80008f4 <NRF24_begin>
   // nrf24_DebugUART_Init(huart2);
   // printRadioSettings();

    NRF24_stopListening();
 8001980:	f7ff f8ba 	bl	8000af8 <NRF24_stopListening>

    NRF24_openWritingPipe(TxAddress);
 8001984:	4b3f      	ldr	r3, [pc, #252]	; (8001a84 <main+0x180>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0010      	movs	r0, r2
 800198c:	0019      	movs	r1, r3
 800198e:	f7ff f91f 	bl	8000bd0 <NRF24_openWritingPipe>

    NRF24_setAutoAck(false);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff f9c2 	bl	8000d1c <NRF24_setAutoAck>
    NRF24_setChannel(83);
 8001998:	2053      	movs	r0, #83	; 0x53
 800199a:	f7ff f961 	bl	8000c60 <NRF24_setChannel>
    NRF24_setPayloadSize(PAYLOAD_SIZE);
 800199e:	2020      	movs	r0, #32
 80019a0:	f7ff f97a 	bl	8000c98 <NRF24_setPayloadSize>
    NRF24_setPALevel(RF24_PA_m6dB);
 80019a4:	2002      	movs	r0, #2
 80019a6:	f7ff f9d0 	bl	8000d4a <NRF24_setPALevel>
    NRF24_setDataRate(RF24_2MBPS);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f7ff fa1e 	bl	8000dec <NRF24_setDataRate>
  /* USER CODE END 2 */

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  uint8_t buffer_index =0;
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  if (dataFlag == 1) {
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <main+0x184>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d1fb      	bne.n	80019b6 <main+0xb2>
		  buffer_index = 0;
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i< UART_BUFFER; i++) {
 80019c4:	2300      	movs	r3, #0
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	e043      	b.n	8001a52 <main+0x14e>

			  TxBuffer[buffer_index++] = Txdata[i];
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	1dfa      	adds	r2, r7, #7
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	7011      	strb	r1, [r2, #0]
 80019d4:	0019      	movs	r1, r3
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <main+0x188>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	18d3      	adds	r3, r2, r3
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <main+0x18c>)
 80019e0:	545a      	strb	r2, [r3, r1]

			  if (Txdata[i]=='\0' || Txdata[i]==';' || buffer_index == PAYLOAD_SIZE ||i == (UART_BUFFER-1)) {
 80019e2:	4a2a      	ldr	r2, [pc, #168]	; (8001a8c <main+0x188>)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	18d3      	adds	r3, r2, r3
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00c      	beq.n	8001a08 <main+0x104>
 80019ee:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <main+0x188>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	18d3      	adds	r3, r2, r3
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b3b      	cmp	r3, #59	; 0x3b
 80019f8:	d006      	beq.n	8001a08 <main+0x104>
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	d002      	beq.n	8001a08 <main+0x104>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2bff      	cmp	r3, #255	; 0xff
 8001a06:	d121      	bne.n	8001a4c <main+0x148>
				  if(Txdata[i]==';') TxBuffer[buffer_index-1] ='\0';
 8001a08:	4a20      	ldr	r2, [pc, #128]	; (8001a8c <main+0x188>)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	18d3      	adds	r3, r2, r3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b3b      	cmp	r3, #59	; 0x3b
 8001a12:	d105      	bne.n	8001a20 <main+0x11c>
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <main+0x18c>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	54d1      	strb	r1, [r2, r3]

				  NRF24_write(TxBuffer, PAYLOAD_SIZE);
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <main+0x18c>)
 8001a22:	2120      	movs	r1, #32
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff f873 	bl	8000b10 <NRF24_write>

				  clearString(TxBuffer, PAYLOAD_SIZE);
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <main+0x18c>)
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 f9ea 	bl	8001e08 <clearString>
				  buffer_index = 0;
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
				  if (Txdata[i]=='\0') break;
 8001a3a:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <main+0x188>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	18d3      	adds	r3, r2, r3
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <main+0x156>
				  HAL_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 fbf2 	bl	8002230 <HAL_Delay>
		  for (int i = 0; i< UART_BUFFER; i++) {
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2bff      	cmp	r3, #255	; 0xff
 8001a56:	ddb8      	ble.n	80019ca <main+0xc6>
 8001a58:	e000      	b.n	8001a5c <main+0x158>
				  if (Txdata[i]=='\0') break;
 8001a5a:	46c0      	nop			; (mov r8, r8)
			  }

		  }


		  clearString(Txdata, UART_BUFFER);
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	005a      	lsls	r2, r3, #1
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <main+0x188>)
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 f9cf 	bl	8001e08 <clearString>
		  dataFlag = 0;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <main+0x184>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
	  if (dataFlag == 1) {
 8001a70:	e7a1      	b.n	80019b6 <main+0xb2>
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	200001fc 	.word	0x200001fc
 8001a78:	200004ad 	.word	0x200004ad
 8001a7c:	080076f8 	.word	0x080076f8
 8001a80:	20000198 	.word	0x20000198
 8001a84:	20000000 	.word	0x20000000
 8001a88:	200004ae 	.word	0x200004ae
 8001a8c:	2000038c 	.word	0x2000038c
 8001a90:	2000048c 	.word	0x2000048c

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b095      	sub	sp, #84	; 0x54
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	2414      	movs	r4, #20
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	233c      	movs	r3, #60	; 0x3c
 8001aa2:	001a      	movs	r2, r3
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	f004 ff10 	bl	80068ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	0018      	movs	r0, r3
 8001aae:	2310      	movs	r3, #16
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f004 ff09 	bl	80068ca <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 ff21 	bl	8002904 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	0052      	lsls	r2, r2, #1
 8001ace:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	2240      	movs	r2, #64	; 0x40
 8001ada:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 ff59 	bl	800299c <HAL_RCC_OscConfig>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001aee:	f000 f9a5 	bl	8001e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f001 faa4 	bl	800305c <HAL_RCC_ClockConfig>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d001      	beq.n	8001b1c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001b18:	f000 f990 	bl	8001e3c <Error_Handler>
  }
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b015      	add	sp, #84	; 0x54
 8001b22:	bd90      	pop	{r4, r7, pc}

08001b24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <MX_SPI1_Init+0x78>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b30:	2282      	movs	r2, #130	; 0x82
 8001b32:	0052      	lsls	r2, r2, #1
 8001b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b3e:	22e0      	movs	r2, #224	; 0xe0
 8001b40:	00d2      	lsls	r2, r2, #3
 8001b42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b72:	2207      	movs	r2, #7
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b7e:	2208      	movs	r2, #8
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <MX_SPI1_Init+0x74>)
 8001b84:	0018      	movs	r0, r3
 8001b86:	f001 fe4f 	bl	8003828 <HAL_SPI_Init>
 8001b8a:	1e03      	subs	r3, r0, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b8e:	f000 f955 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000198 	.word	0x20000198
 8001b9c:	40013000 	.word	0x40013000

08001ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001ba6:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <MX_USART2_UART_Init+0x98>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bac:	22e1      	movs	r2, #225	; 0xe1
 8001bae:	0252      	lsls	r2, r2, #9
 8001bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bea:	0018      	movs	r0, r3
 8001bec:	f002 fd1e 	bl	800462c <HAL_UART_Init>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bf4:	f000 f922 	bl	8001e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f004 fd51 	bl	80066a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c06:	f000 f919 	bl	8001e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f004 fd88 	bl	8006724 <HAL_UARTEx_SetRxFifoThreshold>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d001      	beq.n	8001c1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c18:	f000 f910 	bl	8001e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <MX_USART2_UART_Init+0x94>)
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f004 fd06 	bl	8006630 <HAL_UARTEx_DisableFifoMode>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d001      	beq.n	8001c2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c28:	f000 f908 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	200001fc 	.word	0x200001fc
 8001c38:	40004400 	.word	0x40004400

08001c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c42:	240c      	movs	r4, #12
 8001c44:	193b      	adds	r3, r7, r4
 8001c46:	0018      	movs	r0, r3
 8001c48:	2314      	movs	r3, #20
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f004 fe3c 	bl	80068ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <MX_GPIO_Init+0xa0>)
 8001c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_GPIO_Init+0xa0>)
 8001c58:	2104      	movs	r1, #4
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <MX_GPIO_Init+0xa0>)
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	2204      	movs	r2, #4
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <MX_GPIO_Init+0xa0>)
 8001c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <MX_GPIO_Init+0xa0>)
 8001c70:	2120      	movs	r1, #32
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <MX_GPIO_Init+0xa0>)
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <MX_GPIO_Init+0xa0>)
 8001c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <MX_GPIO_Init+0xa0>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_GPIO_Init+0xa0>)
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	2201      	movs	r2, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	0099      	lsls	r1, r3, #2
 8001c9e:	23a0      	movs	r3, #160	; 0xa0
 8001ca0:	05db      	lsls	r3, r3, #23
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 fe0f 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin;
 8001caa:	193b      	adds	r3, r7, r4
 8001cac:	22c0      	movs	r2, #192	; 0xc0
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	193b      	adds	r3, r7, r4
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	193b      	adds	r3, r7, r4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	193b      	adds	r3, r7, r4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	193a      	adds	r2, r7, r4
 8001cc6:	23a0      	movs	r3, #160	; 0xa0
 8001cc8:	05db      	lsls	r3, r3, #23
 8001cca:	0011      	movs	r1, r2
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fc8f 	bl	80025f0 <HAL_GPIO_Init>

}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b009      	add	sp, #36	; 0x24
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <serialWrite>:

/* USER CODE BEGIN 4 */
void serialWrite(char data[]){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) data, strlen(data), 10);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7fe fa0a 	bl	8000104 <strlen>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4807      	ldr	r0, [pc, #28]	; (8001d14 <serialWrite+0x34>)
 8001cf8:	230a      	movs	r3, #10
 8001cfa:	f002 fced 	bl	80046d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)"\n",1,10);
 8001cfe:	4906      	ldr	r1, [pc, #24]	; (8001d18 <serialWrite+0x38>)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <serialWrite+0x34>)
 8001d02:	230a      	movs	r3, #10
 8001d04:	2201      	movs	r2, #1
 8001d06:	f002 fce7 	bl	80046d8 <HAL_UART_Transmit>
}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	200001fc 	.word	0x200001fc
 8001d18:	08007708 	.word	0x08007708

08001d1c <serialProcessRxData>:

void serialProcessRxData(){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0

	if(dataFlag == 0) {
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <serialProcessRxData+0x74>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d120      	bne.n	8001d6c <serialProcessRxData+0x50>
		for (int i = 0; i < RxUARTLength; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	e00b      	b.n	8001d48 <serialProcessRxData+0x2c>
			Txdata[i] = RxUARTBuffer[i];
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <serialProcessRxData+0x78>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	18d3      	adds	r3, r2, r3
 8001d36:	7819      	ldrb	r1, [r3, #0]
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <serialProcessRxData+0x7c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	18d3      	adds	r3, r2, r3
 8001d3e:	1c0a      	adds	r2, r1, #0
 8001d40:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < RxUARTLength; i++)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3301      	adds	r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <serialProcessRxData+0x80>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4293      	cmp	r3, r2
 8001d52:	dbed      	blt.n	8001d30 <serialProcessRxData+0x14>
		dataFlag = 1;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <serialProcessRxData+0x74>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
		serialWrite(Txdata);
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <serialProcessRxData+0x7c>)
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7ff ffbf 	bl	8001ce0 <serialWrite>
		serialWrite("OK");
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <serialProcessRxData+0x84>)
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff ffbb 	bl	8001ce0 <serialWrite>
 8001d6a:	e003      	b.n	8001d74 <serialProcessRxData+0x58>
	}
	else serialWrite("NOK");
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <serialProcessRxData+0x88>)
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff ffb6 	bl	8001ce0 <serialWrite>

	clearString(RxUARTBuffer, UART_BUFFER);
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	005a      	lsls	r2, r3, #1
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <serialProcessRxData+0x78>)
 8001d7a:	0011      	movs	r1, r2
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f000 f843 	bl	8001e08 <clearString>

	RxUARTLength = 0;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <serialProcessRxData+0x80>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200004ae 	.word	0x200004ae
 8001d94:	2000028c 	.word	0x2000028c
 8001d98:	2000038c 	.word	0x2000038c
 8001d9c:	200004ac 	.word	0x200004ac
 8001da0:	0800770c 	.word	0x0800770c
 8001da4:	08007710 	.word	0x08007710

08001da8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <HAL_UART_RxCpltCallback+0x4c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d117      	bne.n	8001dea <HAL_UART_RxCpltCallback+0x42>
		if(RxSingleByte == '\n')
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_UART_RxCpltCallback+0x50>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b0a      	cmp	r3, #10
 8001dc0:	d102      	bne.n	8001dc8 <HAL_UART_RxCpltCallback+0x20>
			serialProcessRxData();
 8001dc2:	f7ff ffab 	bl	8001d1c <serialProcessRxData>
 8001dc6:	e00a      	b.n	8001dde <HAL_UART_RxCpltCallback+0x36>
		else RxUARTBuffer[RxUARTLength++] = RxSingleByte;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_UART_RxCpltCallback+0x54>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	b2d1      	uxtb	r1, r2
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_UART_RxCpltCallback+0x54>)
 8001dd2:	7011      	strb	r1, [r2, #0]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_UART_RxCpltCallback+0x50>)
 8001dd8:	7819      	ldrb	r1, [r3, #0]
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_UART_RxCpltCallback+0x58>)
 8001ddc:	5499      	strb	r1, [r3, r2]

		if (RxUARTLength == UART_BUFFER)
			serialProcessRxData();

		HAL_UART_Receive_IT(&huart2, &RxSingleByte, 1);
 8001dde:	4906      	ldr	r1, [pc, #24]	; (8001df8 <HAL_UART_RxCpltCallback+0x50>)
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_UART_RxCpltCallback+0x5c>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	0018      	movs	r0, r3
 8001de6:	f002 fd23 	bl	8004830 <HAL_UART_Receive_IT>
	}
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40004400 	.word	0x40004400
 8001df8:	200004ad 	.word	0x200004ad
 8001dfc:	200004ac 	.word	0x200004ac
 8001e00:	2000028c 	.word	0x2000028c
 8001e04:	200001fc 	.word	0x200001fc

08001e08 <clearString>:

void clearString(char * str, int len) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
	for(int i = 0; i< len; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e007      	b.n	8001e28 <clearString+0x20>
		str[i] = '\0';
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	18d3      	adds	r3, r2, r3
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< len; i++)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3301      	adds	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf3      	blt.n	8001e18 <clearString+0x10>
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  serialWrite("err");
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <Error_Handler+0x1c>)
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7ff ff4a 	bl	8001ce0 <serialWrite>
	  HAL_Delay(1000);
 8001e4c:	23fa      	movs	r3, #250	; 0xfa
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 f9ed 	bl	8002230 <HAL_Delay>
	  serialWrite("err");
 8001e56:	e7f5      	b.n	8001e44 <Error_Handler+0x8>
 8001e58:	08007714 	.word	0x08007714

08001e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_MspInit+0x4c>)
 8001e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_MspInit+0x4c>)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_MspInit+0x4c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2201      	movs	r2, #1
 8001e74:	4013      	ands	r3, r2
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_MspInit+0x4c>)
 8001e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_MspInit+0x4c>)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0549      	lsls	r1, r1, #21
 8001e84:	430a      	orrs	r2, r1
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_MspInit+0x4c>)
 8001e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	4013      	ands	r3, r2
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 f9ec 	bl	8002278 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b08b      	sub	sp, #44	; 0x2c
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	2414      	movs	r4, #20
 8001eb6:	193b      	adds	r3, r7, r4
 8001eb8:	0018      	movs	r0, r3
 8001eba:	2314      	movs	r3, #20
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	f004 fd03 	bl	80068ca <memset>
  if(hspi->Instance==SPI1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_SPI_MspInit+0x8c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d130      	bne.n	8001f30 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_SPI_MspInit+0x90>)
 8001ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_SPI_MspInit+0x90>)
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	0149      	lsls	r1, r1, #5
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_SPI_MspInit+0x90>)
 8001ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	015b      	lsls	r3, r3, #5
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_SPI_MspInit+0x90>)
 8001eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_SPI_MspInit+0x90>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_SPI_MspInit+0x90>)
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	2201      	movs	r2, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f02:	0021      	movs	r1, r4
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	22e0      	movs	r2, #224	; 0xe0
 8001f08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	187a      	adds	r2, r7, r1
 8001f24:	23a0      	movs	r3, #160	; 0xa0
 8001f26:	05db      	lsls	r3, r3, #23
 8001f28:	0011      	movs	r1, r2
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 fb60 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b00b      	add	sp, #44	; 0x2c
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	40013000 	.word	0x40013000
 8001f3c:	40021000 	.word	0x40021000

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b09d      	sub	sp, #116	; 0x74
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	235c      	movs	r3, #92	; 0x5c
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	2314      	movs	r3, #20
 8001f50:	001a      	movs	r2, r3
 8001f52:	2100      	movs	r1, #0
 8001f54:	f004 fcb9 	bl	80068ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f58:	2410      	movs	r4, #16
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	234c      	movs	r3, #76	; 0x4c
 8001f60:	001a      	movs	r2, r3
 8001f62:	2100      	movs	r1, #0
 8001f64:	f004 fcb1 	bl	80068ca <memset>
  if(huart->Instance==USART2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a26      	ldr	r2, [pc, #152]	; (8002008 <HAL_UART_MspInit+0xc8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d146      	bne.n	8002000 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f72:	193b      	adds	r3, r7, r4
 8001f74:	2202      	movs	r2, #2
 8001f76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f78:	193b      	adds	r3, r7, r4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	0018      	movs	r0, r3
 8001f82:	f001 fa15 	bl	80033b0 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	1e03      	subs	r3, r0, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f8a:	f7ff ff57 	bl	8001e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <HAL_UART_MspInit+0xcc>)
 8001f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <HAL_UART_MspInit+0xcc>)
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	0289      	lsls	r1, r1, #10
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_UART_MspInit+0xcc>)
 8001f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	029b      	lsls	r3, r3, #10
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_UART_MspInit+0xcc>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_UART_MspInit+0xcc>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_UART_MspInit+0xcc>)
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001fc2:	215c      	movs	r1, #92	; 0x5c
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	2202      	movs	r2, #2
 8001fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2201      	movs	r2, #1
 8001fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	187a      	adds	r2, r7, r1
 8001fe4:	23a0      	movs	r3, #160	; 0xa0
 8001fe6:	05db      	lsls	r3, r3, #23
 8001fe8:	0011      	movs	r1, r2
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 fb00 	bl	80025f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	201c      	movs	r0, #28
 8001ff6:	f000 fa01 	bl	80023fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8001ffa:	201c      	movs	r0, #28
 8001ffc:	f000 fa13 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b01d      	add	sp, #116	; 0x74
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	40004400 	.word	0x40004400
 800200c:	40021000 	.word	0x40021000

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <NMI_Handler+0x4>

08002016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <HardFault_Handler+0x4>

0800201c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002034:	f000 f8e0 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <USART2_LPUART2_IRQHandler+0x14>)
 8002046:	0018      	movs	r0, r3
 8002048:	f002 fc62 	bl	8004910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	200001fc 	.word	0x200001fc

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	18d3      	adds	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f004 fbec 	bl	8006864 <__errno>
 800208c:	0003      	movs	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	2301      	movs	r3, #1
 8002094:	425b      	negs	r3, r3
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	18d2      	adds	r2, r2, r3
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <_sbrk+0x64>)
 80020a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b006      	add	sp, #24
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20024000 	.word	0x20024000
 80020b8:	00004000 	.word	0x00004000
 80020bc:	200004b0 	.word	0x200004b0
 80020c0:	200004c8 	.word	0x200004c8

080020c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020d4:	f7ff fff6 	bl	80020c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <LoopForever+0x6>)
  ldr r1, =_edata
 80020da:	490d      	ldr	r1, [pc, #52]	; (8002110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <LoopForever+0xe>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020f0:	4c0a      	ldr	r4, [pc, #40]	; (800211c <LoopForever+0x16>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020fe:	f004 fbb7 	bl	8006870 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002102:	f7ff fbff 	bl	8001904 <main>

08002106 <LoopForever>:

LoopForever:
  b LoopForever
 8002106:	e7fe      	b.n	8002106 <LoopForever>
  ldr   r0, =_estack
 8002108:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002114:	080077e4 	.word	0x080077e4
  ldr r2, =_sbss
 8002118:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800211c:	200004c8 	.word	0x200004c8

08002120 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC1_COMP_IRQHandler>
	...

08002124 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_Init+0x3c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_Init+0x3c>)
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	0049      	lsls	r1, r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213e:	2000      	movs	r0, #0
 8002140:	f000 f810 	bl	8002164 <HAL_InitTick>
 8002144:	1e03      	subs	r3, r0, #0
 8002146:	d003      	beq.n	8002150 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002148:	1dfb      	adds	r3, r7, #7
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e001      	b.n	8002154 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002150:	f7ff fe84 	bl	8001e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	781b      	ldrb	r3, [r3, #0]
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40022000 	.word	0x40022000

08002164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_InitTick+0x88>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d02b      	beq.n	80021d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_InitTick+0x8c>)
 800217e:	681c      	ldr	r4, [r3, #0]
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <HAL_InitTick+0x88>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	0019      	movs	r1, r3
 8002186:	23fa      	movs	r3, #250	; 0xfa
 8002188:	0098      	lsls	r0, r3, #2
 800218a:	f7fd ffcd 	bl	8000128 <__udivsi3>
 800218e:	0003      	movs	r3, r0
 8002190:	0019      	movs	r1, r3
 8002192:	0020      	movs	r0, r4
 8002194:	f7fd ffc8 	bl	8000128 <__udivsi3>
 8002198:	0003      	movs	r3, r0
 800219a:	0018      	movs	r0, r3
 800219c:	f000 f953 	bl	8002446 <HAL_SYSTICK_Config>
 80021a0:	1e03      	subs	r3, r0, #0
 80021a2:	d112      	bne.n	80021ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d80a      	bhi.n	80021c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	2301      	movs	r3, #1
 80021ae:	425b      	negs	r3, r3
 80021b0:	2200      	movs	r2, #0
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 f922 	bl	80023fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_InitTick+0x90>)
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e00d      	b.n	80021dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80021c0:	230f      	movs	r3, #15
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e008      	b.n	80021dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ca:	230f      	movs	r3, #15
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	e003      	b.n	80021dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d4:	230f      	movs	r3, #15
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80021dc:	230f      	movs	r3, #15
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b005      	add	sp, #20
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	20000010 	.word	0x20000010
 80021f0:	20000008 	.word	0x20000008
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_IncTick+0x1c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	001a      	movs	r2, r3
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_IncTick+0x20>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	18d2      	adds	r2, r2, r3
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_IncTick+0x20>)
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	20000010 	.word	0x20000010
 8002218:	200004b4 	.word	0x200004b4

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <HAL_GetTick+0x10>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	200004b4 	.word	0x200004b4

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff fff0 	bl	800221c <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	001a      	movs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	189b      	adds	r3, r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	f7ff ffe0 	bl	800221c <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	46bd      	mov	sp, r7
 800226e:	b004      	add	sp, #16
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	20000010 	.word	0x20000010

08002278 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	40010000 	.word	0x40010000
 80022a0:	fffff9ff 	.word	0xfffff9ff

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	0002      	movs	r2, r0
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	1dfb      	adds	r3, r7, #7
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b7f      	cmp	r3, #127	; 0x7f
 80022b6:	d809      	bhi.n	80022cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	001a      	movs	r2, r3
 80022be:	231f      	movs	r3, #31
 80022c0:	401a      	ands	r2, r3
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_EnableIRQ+0x30>)
 80022c4:	2101      	movs	r1, #1
 80022c6:	4091      	lsls	r1, r2
 80022c8:	000a      	movs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	0002      	movs	r2, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	1dfb      	adds	r3, r7, #7
 80022e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b7f      	cmp	r3, #127	; 0x7f
 80022ec:	d828      	bhi.n	8002340 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ee:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <__NVIC_SetPriority+0xd4>)
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	33c0      	adds	r3, #192	; 0xc0
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	589b      	ldr	r3, [r3, r2]
 80022fe:	1dfa      	adds	r2, r7, #7
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	0011      	movs	r1, r2
 8002304:	2203      	movs	r2, #3
 8002306:	400a      	ands	r2, r1
 8002308:	00d2      	lsls	r2, r2, #3
 800230a:	21ff      	movs	r1, #255	; 0xff
 800230c:	4091      	lsls	r1, r2
 800230e:	000a      	movs	r2, r1
 8002310:	43d2      	mvns	r2, r2
 8002312:	401a      	ands	r2, r3
 8002314:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	019b      	lsls	r3, r3, #6
 800231a:	22ff      	movs	r2, #255	; 0xff
 800231c:	401a      	ands	r2, r3
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	0018      	movs	r0, r3
 8002324:	2303      	movs	r3, #3
 8002326:	4003      	ands	r3, r0
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800232c:	481f      	ldr	r0, [pc, #124]	; (80023ac <__NVIC_SetPriority+0xd4>)
 800232e:	1dfb      	adds	r3, r7, #7
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b25b      	sxtb	r3, r3
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	430a      	orrs	r2, r1
 8002338:	33c0      	adds	r3, #192	; 0xc0
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800233e:	e031      	b.n	80023a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <__NVIC_SetPriority+0xd8>)
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	0019      	movs	r1, r3
 8002348:	230f      	movs	r3, #15
 800234a:	400b      	ands	r3, r1
 800234c:	3b08      	subs	r3, #8
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3306      	adds	r3, #6
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	18d3      	adds	r3, r2, r3
 8002356:	3304      	adds	r3, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	1dfa      	adds	r2, r7, #7
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	0011      	movs	r1, r2
 8002360:	2203      	movs	r2, #3
 8002362:	400a      	ands	r2, r1
 8002364:	00d2      	lsls	r2, r2, #3
 8002366:	21ff      	movs	r1, #255	; 0xff
 8002368:	4091      	lsls	r1, r2
 800236a:	000a      	movs	r2, r1
 800236c:	43d2      	mvns	r2, r2
 800236e:	401a      	ands	r2, r3
 8002370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	401a      	ands	r2, r3
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	0018      	movs	r0, r3
 8002380:	2303      	movs	r3, #3
 8002382:	4003      	ands	r3, r0
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002388:	4809      	ldr	r0, [pc, #36]	; (80023b0 <__NVIC_SetPriority+0xd8>)
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	001c      	movs	r4, r3
 8002390:	230f      	movs	r3, #15
 8002392:	4023      	ands	r3, r4
 8002394:	3b08      	subs	r3, #8
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	430a      	orrs	r2, r1
 800239a:	3306      	adds	r3, #6
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	18c3      	adds	r3, r0, r3
 80023a0:	3304      	adds	r3, #4
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b003      	add	sp, #12
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	e000e100 	.word	0xe000e100
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	045b      	lsls	r3, r3, #17
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d301      	bcc.n	80023cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c8:	2301      	movs	r3, #1
 80023ca:	e010      	b.n	80023ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <SysTick_Config+0x44>)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	3a01      	subs	r2, #1
 80023d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d4:	2301      	movs	r3, #1
 80023d6:	425b      	negs	r3, r3
 80023d8:	2103      	movs	r1, #3
 80023da:	0018      	movs	r0, r3
 80023dc:	f7ff ff7c 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SysTick_Config+0x44>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <SysTick_Config+0x44>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	210f      	movs	r1, #15
 8002408:	187b      	adds	r3, r7, r1
 800240a:	1c02      	adds	r2, r0, #0
 800240c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	187b      	adds	r3, r7, r1
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b25b      	sxtb	r3, r3
 8002416:	0011      	movs	r1, r2
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b004      	add	sp, #16
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	0002      	movs	r2, r0
 800242e:	1dfb      	adds	r3, r7, #7
 8002430:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b25b      	sxtb	r3, r3
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff ff33 	bl	80022a4 <__NVIC_EnableIRQ>
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff ffaf 	bl	80023b4 <SysTick_Config>
 8002456:	0003      	movs	r3, r0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e04f      	b.n	8002512 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2225      	movs	r2, #37	; 0x25
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d008      	beq.n	8002490 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2204      	movs	r2, #4
 8002482:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	; 0x24
 8002488:	2100      	movs	r1, #0
 800248a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e040      	b.n	8002512 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	210e      	movs	r1, #14
 800249c:	438a      	bics	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024aa:	491c      	ldr	r1, [pc, #112]	; (800251c <HAL_DMA_Abort+0xbc>)
 80024ac:	400a      	ands	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	221c      	movs	r2, #28
 80024c6:	401a      	ands	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	2101      	movs	r1, #1
 80024ce:	4091      	lsls	r1, r2
 80024d0:	000a      	movs	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00c      	beq.n	8002500 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	490a      	ldr	r1, [pc, #40]	; (800251c <HAL_DMA_Abort+0xbc>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2225      	movs	r2, #37	; 0x25
 8002504:	2101      	movs	r1, #1
 8002506:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2224      	movs	r2, #36	; 0x24
 800250c:	2100      	movs	r1, #0
 800250e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	fffffeff 	.word	0xfffffeff

08002520 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	210f      	movs	r1, #15
 800252a:	187b      	adds	r3, r7, r1
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2225      	movs	r2, #37	; 0x25
 8002534:	5c9b      	ldrb	r3, [r3, r2]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d006      	beq.n	800254a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2204      	movs	r2, #4
 8002540:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002542:	187b      	adds	r3, r7, r1
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e048      	b.n	80025dc <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	210e      	movs	r1, #14
 8002556:	438a      	bics	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	438a      	bics	r2, r1
 8002568:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	491d      	ldr	r1, [pc, #116]	; (80025ec <HAL_DMA_Abort_IT+0xcc>)
 8002576:	400a      	ands	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	221c      	movs	r2, #28
 8002580:	401a      	ands	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2101      	movs	r1, #1
 8002588:	4091      	lsls	r1, r2
 800258a:	000a      	movs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002596:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00c      	beq.n	80025ba <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	4910      	ldr	r1, [pc, #64]	; (80025ec <HAL_DMA_Abort_IT+0xcc>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2225      	movs	r2, #37	; 0x25
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2224      	movs	r2, #36	; 0x24
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	0010      	movs	r0, r2
 80025da:	4798      	blx	r3
    }
  }
  return status;
 80025dc:	230f      	movs	r3, #15
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	781b      	ldrb	r3, [r3, #0]
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	fffffeff 	.word	0xfffffeff

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fe:	e14d      	b.n	800289c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4091      	lsls	r1, r2
 800260a:	000a      	movs	r2, r1
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d100      	bne.n	8002618 <HAL_GPIO_Init+0x28>
 8002616:	e13e      	b.n	8002896 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2203      	movs	r2, #3
 800261e:	4013      	ands	r3, r2
 8002620:	2b01      	cmp	r3, #1
 8002622:	d005      	beq.n	8002630 <HAL_GPIO_Init+0x40>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2203      	movs	r2, #3
 800262a:	4013      	ands	r3, r2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d130      	bne.n	8002692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	409a      	lsls	r2, r3
 800263e:	0013      	movs	r3, r2
 8002640:	43da      	mvns	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	409a      	lsls	r2, r3
 8002652:	0013      	movs	r3, r2
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002666:	2201      	movs	r2, #1
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	43da      	mvns	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	2201      	movs	r2, #1
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
 8002684:	0013      	movs	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2203      	movs	r2, #3
 8002698:	4013      	ands	r3, r2
 800269a:	2b03      	cmp	r3, #3
 800269c:	d017      	beq.n	80026ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	409a      	lsls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	43da      	mvns	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2203      	movs	r2, #3
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d123      	bne.n	8002722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	58d3      	ldr	r3, [r2, r3]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2207      	movs	r2, #7
 80026ec:	4013      	ands	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	409a      	lsls	r2, r3
 80026f4:	0013      	movs	r3, r2
 80026f6:	43da      	mvns	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2107      	movs	r1, #7
 8002706:	400b      	ands	r3, r1
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	0092      	lsls	r2, r2, #2
 800271e:	6939      	ldr	r1, [r7, #16]
 8002720:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	43da      	mvns	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2203      	movs	r2, #3
 8002740:	401a      	ands	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	0013      	movs	r3, r2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	23c0      	movs	r3, #192	; 0xc0
 800275c:	029b      	lsls	r3, r3, #10
 800275e:	4013      	ands	r3, r2
 8002760:	d100      	bne.n	8002764 <HAL_GPIO_Init+0x174>
 8002762:	e098      	b.n	8002896 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002764:	4a53      	ldr	r2, [pc, #332]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3318      	adds	r3, #24
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	589b      	ldr	r3, [r3, r2]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2203      	movs	r2, #3
 8002776:	4013      	ands	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	220f      	movs	r2, #15
 800277c:	409a      	lsls	r2, r3
 800277e:	0013      	movs	r3, r2
 8002780:	43da      	mvns	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	23a0      	movs	r3, #160	; 0xa0
 800278c:	05db      	lsls	r3, r3, #23
 800278e:	429a      	cmp	r2, r3
 8002790:	d019      	beq.n	80027c6 <HAL_GPIO_Init+0x1d6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a48      	ldr	r2, [pc, #288]	; (80028b8 <HAL_GPIO_Init+0x2c8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_GPIO_Init+0x1d2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a47      	ldr	r2, [pc, #284]	; (80028bc <HAL_GPIO_Init+0x2cc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00d      	beq.n	80027be <HAL_GPIO_Init+0x1ce>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a46      	ldr	r2, [pc, #280]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <HAL_GPIO_Init+0x1ca>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a45      	ldr	r2, [pc, #276]	; (80028c4 <HAL_GPIO_Init+0x2d4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_GPIO_Init+0x1c6>
 80027b2:	2304      	movs	r3, #4
 80027b4:	e008      	b.n	80027c8 <HAL_GPIO_Init+0x1d8>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x1d8>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e004      	b.n	80027c8 <HAL_GPIO_Init+0x1d8>
 80027be:	2302      	movs	r3, #2
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_Init+0x1d8>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_GPIO_Init+0x1d8>
 80027c6:	2300      	movs	r3, #0
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	2103      	movs	r1, #3
 80027cc:	400a      	ands	r2, r1
 80027ce:	00d2      	lsls	r2, r2, #3
 80027d0:	4093      	lsls	r3, r2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027d8:	4936      	ldr	r1, [pc, #216]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3318      	adds	r3, #24
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e6:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43da      	mvns	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	035b      	lsls	r3, r3, #13
 80027fe:	4013      	ands	r3, r2
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800280a:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002810:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43da      	mvns	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	039b      	lsls	r3, r3, #14
 8002828:	4013      	ands	r3, r2
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002834:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 800283c:	2384      	movs	r3, #132	; 0x84
 800283e:	58d3      	ldr	r3, [r2, r3]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43da      	mvns	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	029b      	lsls	r3, r3, #10
 8002854:	4013      	ands	r3, r2
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002860:	4914      	ldr	r1, [pc, #80]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 8002862:	2284      	movs	r2, #132	; 0x84
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002868:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	58d3      	ldr	r3, [r2, r3]
 800286e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	43da      	mvns	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4013      	ands	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	025b      	lsls	r3, r3, #9
 8002882:	4013      	ands	r3, r2
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800288e:	4909      	ldr	r1, [pc, #36]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3301      	adds	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	40da      	lsrs	r2, r3
 80028a4:	1e13      	subs	r3, r2, #0
 80028a6:	d000      	beq.n	80028aa <HAL_GPIO_Init+0x2ba>
 80028a8:	e6aa      	b.n	8002600 <HAL_GPIO_Init+0x10>
  }
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b006      	add	sp, #24
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021800 	.word	0x40021800
 80028b8:	50000400 	.word	0x50000400
 80028bc:	50000800 	.word	0x50000800
 80028c0:	50000c00 	.word	0x50000c00
 80028c4:	50001000 	.word	0x50001000

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	0008      	movs	r0, r1
 80028d2:	0011      	movs	r1, r2
 80028d4:	1cbb      	adds	r3, r7, #2
 80028d6:	1c02      	adds	r2, r0, #0
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	1c7b      	adds	r3, r7, #1
 80028dc:	1c0a      	adds	r2, r1, #0
 80028de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e0:	1c7b      	adds	r3, r7, #1
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d004      	beq.n	80028f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e8:	1cbb      	adds	r3, r7, #2
 80028ea:	881a      	ldrh	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f0:	e003      	b.n	80028fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f2:	1cbb      	adds	r3, r7, #2
 80028f4:	881a      	ldrh	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002912:	4013      	ands	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d11f      	bne.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	0013      	movs	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	189b      	adds	r3, r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4912      	ldr	r1, [pc, #72]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002936:	0018      	movs	r0, r3
 8002938:	f7fd fbf6 	bl	8000128 <__udivsi3>
 800293c:	0003      	movs	r3, r0
 800293e:	3301      	adds	r3, #1
 8002940:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002942:	e008      	b.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3b01      	subs	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e001      	b.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e009      	b.n	800296a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	401a      	ands	r2, r3
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	429a      	cmp	r2, r3
 8002966:	d0ed      	beq.n	8002944 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b004      	add	sp, #16
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	40007000 	.word	0x40007000
 8002978:	fffff9ff 	.word	0xfffff9ff
 800297c:	20000008 	.word	0x20000008
 8002980:	000f4240 	.word	0x000f4240

08002984 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <LL_RCC_GetAPB1Prescaler+0x14>)
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	23e0      	movs	r3, #224	; 0xe0
 800298e:	01db      	lsls	r3, r3, #7
 8002990:	4013      	ands	r3, r2
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000

0800299c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f000 fb50 	bl	8003050 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2201      	movs	r2, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	d100      	bne.n	80029bc <HAL_RCC_OscConfig+0x20>
 80029ba:	e07c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029bc:	4bc3      	ldr	r3, [pc, #780]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2238      	movs	r2, #56	; 0x38
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c6:	4bc1      	ldr	r3, [pc, #772]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2203      	movs	r2, #3
 80029cc:	4013      	ands	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b10      	cmp	r3, #16
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_OscConfig+0x40>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d002      	beq.n	80029e2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d10b      	bne.n	80029fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e2:	4bba      	ldr	r3, [pc, #744]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	029b      	lsls	r3, r3, #10
 80029ea:	4013      	ands	r3, r2
 80029ec:	d062      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x118>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d15e      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e32a      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	025b      	lsls	r3, r3, #9
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_OscConfig+0x7a>
 8002a06:	4bb1      	ldr	r3, [pc, #708]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4bb0      	ldr	r3, [pc, #704]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0249      	lsls	r1, r1, #9
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e020      	b.n	8002a58 <HAL_RCC_OscConfig+0xbc>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	23a0      	movs	r3, #160	; 0xa0
 8002a1c:	02db      	lsls	r3, r3, #11
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d10e      	bne.n	8002a40 <HAL_RCC_OscConfig+0xa4>
 8002a22:	4baa      	ldr	r3, [pc, #680]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4ba9      	ldr	r3, [pc, #676]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	02c9      	lsls	r1, r1, #11
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4ba6      	ldr	r3, [pc, #664]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4ba5      	ldr	r3, [pc, #660]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0249      	lsls	r1, r1, #9
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xbc>
 8002a40:	4ba2      	ldr	r3, [pc, #648]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4ba1      	ldr	r3, [pc, #644]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a46:	49a2      	ldr	r1, [pc, #648]	; (8002cd0 <HAL_RCC_OscConfig+0x334>)
 8002a48:	400a      	ands	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b9f      	ldr	r3, [pc, #636]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b9e      	ldr	r3, [pc, #632]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a52:	49a0      	ldr	r1, [pc, #640]	; (8002cd4 <HAL_RCC_OscConfig+0x338>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d014      	beq.n	8002a8a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7ff fbdc 	bl	800221c <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6a:	f7ff fbd7 	bl	800221c <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b64      	cmp	r3, #100	; 0x64
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e2e9      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7c:	4b93      	ldr	r3, [pc, #588]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	029b      	lsls	r3, r3, #10
 8002a84:	4013      	ands	r3, r2
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0xce>
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7ff fbc7 	bl	800221c <HAL_GetTick>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7ff fbc2 	bl	800221c <HAL_GetTick>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e2d4      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa6:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	029b      	lsls	r3, r3, #10
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0xf8>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2202      	movs	r2, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x126>
 8002ac0:	e099      	b.n	8002bf6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac2:	4b82      	ldr	r3, [pc, #520]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2238      	movs	r2, #56	; 0x38
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002acc:	4b7f      	ldr	r3, [pc, #508]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d102      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x146>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d135      	bne.n	8002b54 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae8:	4b78      	ldr	r3, [pc, #480]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4013      	ands	r3, r2
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x164>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e2a7      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a74      	ldr	r2, [pc, #464]	; (8002cd8 <HAL_RCC_OscConfig+0x33c>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	021a      	lsls	r2, r3, #8
 8002b10:	4b6e      	ldr	r3, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d112      	bne.n	8002b42 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x340>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b30:	4b66      	ldr	r3, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0adb      	lsrs	r3, r3, #11
 8002b36:	2207      	movs	r2, #7
 8002b38:	4013      	ands	r3, r2
 8002b3a:	4a69      	ldr	r2, [pc, #420]	; (8002ce0 <HAL_RCC_OscConfig+0x344>)
 8002b3c:	40da      	lsrs	r2, r3
 8002b3e:	4b69      	ldr	r3, [pc, #420]	; (8002ce4 <HAL_RCC_OscConfig+0x348>)
 8002b40:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b42:	4b69      	ldr	r3, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x34c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7ff fb0c 	bl	8002164 <HAL_InitTick>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d051      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e27d      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d030      	beq.n	8002bbe <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b5c:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5e      	ldr	r2, [pc, #376]	; (8002cdc <HAL_RCC_OscConfig+0x340>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b56      	ldr	r3, [pc, #344]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b76:	2180      	movs	r1, #128	; 0x80
 8002b78:	0049      	lsls	r1, r1, #1
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7ff fb4d 	bl	800221c <HAL_GetTick>
 8002b82:	0003      	movs	r3, r0
 8002b84:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7ff fb48 	bl	800221c <HAL_GetTick>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e25a      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	4b49      	ldr	r3, [pc, #292]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4a4b      	ldr	r2, [pc, #300]	; (8002cd8 <HAL_RCC_OscConfig+0x33c>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	0019      	movs	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	021a      	lsls	r2, r3, #8
 8002bb6:	4b45      	ldr	r3, [pc, #276]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	e01b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b43      	ldr	r3, [pc, #268]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002bc4:	4949      	ldr	r1, [pc, #292]	; (8002cec <HAL_RCC_OscConfig+0x350>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7ff fb27 	bl	800221c <HAL_GetTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7ff fb22 	bl	800221c <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e234      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x238>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d047      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c00:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2238      	movs	r2, #56	; 0x38
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b18      	cmp	r3, #24
 8002c0a:	d10a      	bne.n	8002c22 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c10:	2202      	movs	r2, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	d03c      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2f4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d138      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e216      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c30:	2101      	movs	r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7ff faf1 	bl	800221c <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c40:	f7ff faec 	bl	800221c <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1fe      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c52:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0f1      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2a4>
 8002c5c:	e018      	b.n	8002c90 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	438a      	bics	r2, r1
 8002c68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7ff fad7 	bl	800221c <HAL_GetTick>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c74:	f7ff fad2 	bl	800221c <HAL_GetTick>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1e4      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d1f1      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2204      	movs	r2, #4
 8002c96:	4013      	ands	r3, r2
 8002c98:	d100      	bne.n	8002c9c <HAL_RCC_OscConfig+0x300>
 8002c9a:	e0c7      	b.n	8002e2c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9c:	231f      	movs	r3, #31
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2238      	movs	r2, #56	; 0x38
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d11f      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_OscConfig+0x330>)
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d100      	bne.n	8002cbc <HAL_RCC_OscConfig+0x320>
 8002cba:	e0b7      	b.n	8002e2c <HAL_RCC_OscConfig+0x490>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d000      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x32a>
 8002cc4:	e0b2      	b.n	8002e2c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1c2      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	fffeffff 	.word	0xfffeffff
 8002cd4:	fffbffff 	.word	0xfffbffff
 8002cd8:	ffff80ff 	.word	0xffff80ff
 8002cdc:	ffffc7ff 	.word	0xffffc7ff
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	20000008 	.word	0x20000008
 8002ce8:	2000000c 	.word	0x2000000c
 8002cec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cf0:	4bb5      	ldr	r3, [pc, #724]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	055b      	lsls	r3, r3, #21
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_OscConfig+0x364>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x366>
 8002d00:	2300      	movs	r3, #0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d011      	beq.n	8002d2a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	4bb0      	ldr	r3, [pc, #704]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d0a:	4baf      	ldr	r3, [pc, #700]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	0549      	lsls	r1, r1, #21
 8002d10:	430a      	orrs	r2, r1
 8002d12:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d14:	4bac      	ldr	r3, [pc, #688]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	055b      	lsls	r3, r3, #21
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d22:	231f      	movs	r3, #31
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2a:	4ba8      	ldr	r3, [pc, #672]	; (8002fcc <HAL_RCC_OscConfig+0x630>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4013      	ands	r3, r2
 8002d34:	d11a      	bne.n	8002d6c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d36:	4ba5      	ldr	r3, [pc, #660]	; (8002fcc <HAL_RCC_OscConfig+0x630>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4ba4      	ldr	r3, [pc, #656]	; (8002fcc <HAL_RCC_OscConfig+0x630>)
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0049      	lsls	r1, r1, #1
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d44:	f7ff fa6a 	bl	800221c <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7ff fa65 	bl	800221c <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e177      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d60:	4b9a      	ldr	r3, [pc, #616]	; (8002fcc <HAL_RCC_OscConfig+0x630>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3e6>
 8002d74:	4b94      	ldr	r3, [pc, #592]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002d76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d78:	4b93      	ldr	r3, [pc, #588]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x420>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x408>
 8002d8a:	4b8f      	ldr	r3, [pc, #572]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d8e:	4b8e      	ldr	r3, [pc, #568]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002d90:	2104      	movs	r1, #4
 8002d92:	430a      	orrs	r2, r1
 8002d94:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d96:	4b8c      	ldr	r3, [pc, #560]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002d98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d9a:	4b8b      	ldr	r3, [pc, #556]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0x420>
 8002da4:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002da6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002da8:	4b87      	ldr	r3, [pc, #540]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	438a      	bics	r2, r1
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db0:	4b85      	ldr	r3, [pc, #532]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002db4:	4b84      	ldr	r3, [pc, #528]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002db6:	2104      	movs	r1, #4
 8002db8:	438a      	bics	r2, r1
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d014      	beq.n	8002dee <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7ff fa2a 	bl	800221c <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dcc:	e009      	b.n	8002de2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7ff fa25 	bl	800221c <HAL_GetTick>
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	4a7d      	ldr	r2, [pc, #500]	; (8002fd0 <HAL_RCC_OscConfig+0x634>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e136      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de2:	4b79      	ldr	r3, [pc, #484]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	2202      	movs	r2, #2
 8002de8:	4013      	ands	r3, r2
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x432>
 8002dec:	e013      	b.n	8002e16 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7ff fa15 	bl	800221c <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df6:	e009      	b.n	8002e0c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7ff fa10 	bl	800221c <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	4a73      	ldr	r2, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x634>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e121      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e0c:	4b6e      	ldr	r3, [pc, #440]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	2202      	movs	r2, #2
 8002e12:	4013      	ands	r3, r2
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e16:	231f      	movs	r3, #31
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e20:	4b69      	ldr	r3, [pc, #420]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e24:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002e26:	496b      	ldr	r1, [pc, #428]	; (8002fd4 <HAL_RCC_OscConfig+0x638>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2220      	movs	r2, #32
 8002e32:	4013      	ands	r3, r2
 8002e34:	d039      	beq.n	8002eaa <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01b      	beq.n	8002e76 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e3e:	4b62      	ldr	r3, [pc, #392]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	03c9      	lsls	r1, r1, #15
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7ff f9e6 	bl	800221c <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e56:	f7ff f9e1 	bl	800221c <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0f3      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e68:	4b57      	ldr	r3, [pc, #348]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	041b      	lsls	r3, r3, #16
 8002e70:	4013      	ands	r3, r2
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4ba>
 8002e74:	e019      	b.n	8002eaa <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e76:	4b54      	ldr	r3, [pc, #336]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b53      	ldr	r3, [pc, #332]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002e7c:	4956      	ldr	r1, [pc, #344]	; (8002fd8 <HAL_RCC_OscConfig+0x63c>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7ff f9cb 	bl	800221c <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8c:	f7ff f9c6 	bl	800221c <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0d8      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d100      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x518>
 8002eb2:	e0cc      	b.n	800304e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb4:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2238      	movs	r2, #56	; 0x38
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d100      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x526>
 8002ec0:	e07b      	b.n	8002fba <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d156      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002ed0:	4942      	ldr	r1, [pc, #264]	; (8002fdc <HAL_RCC_OscConfig+0x640>)
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7ff f9a1 	bl	800221c <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7ff f99c 	bl	800221c <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0ae      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	049b      	lsls	r3, r3, #18
 8002efa:	4013      	ands	r3, r2
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efe:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x644>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f32:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	0449      	lsls	r1, r1, #17
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f40:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	0549      	lsls	r1, r1, #21
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7ff f965 	bl	800221c <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7ff f960 	bl	800221c <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e072      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	049b      	lsls	r3, r3, #18
 8002f72:	4013      	ands	r3, r2
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x5bc>
 8002f76:	e06a      	b.n	800304e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002f7e:	4917      	ldr	r1, [pc, #92]	; (8002fdc <HAL_RCC_OscConfig+0x640>)
 8002f80:	400a      	ands	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7ff f94a 	bl	800221c <HAL_GetTick>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7ff f945 	bl	800221c <HAL_GetTick>
 8002f92:	0002      	movs	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e057      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	049b      	lsls	r3, r3, #18
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCC_OscConfig+0x62c>)
 8002fb2:	490c      	ldr	r1, [pc, #48]	; (8002fe4 <HAL_RCC_OscConfig+0x648>)
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]
 8002fb8:	e049      	b.n	800304e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d112      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e044      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	00001388 	.word	0x00001388
 8002fd4:	efffffff 	.word	0xefffffff
 8002fd8:	ffbfffff 	.word	0xffbfffff
 8002fdc:	feffffff 	.word	0xfeffffff
 8002fe0:	11c1808c 	.word	0x11c1808c
 8002fe4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x6bc>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d126      	bne.n	800304a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2270      	movs	r2, #112	; 0x70
 8003000:	401a      	ands	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d11f      	bne.n	800304a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	23fe      	movs	r3, #254	; 0xfe
 800300e:	01db      	lsls	r3, r3, #7
 8003010:	401a      	ands	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d116      	bne.n	800304a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	23f8      	movs	r3, #248	; 0xf8
 8003020:	039b      	lsls	r3, r3, #14
 8003022:	401a      	ands	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d10e      	bne.n	800304a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	23e0      	movs	r3, #224	; 0xe0
 8003030:	051b      	lsls	r3, r3, #20
 8003032:	401a      	ands	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	0f5b      	lsrs	r3, r3, #29
 8003040:	075a      	lsls	r2, r3, #29
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b008      	add	sp, #32
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000

0800305c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0e9      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2207      	movs	r2, #7
 8003076:	4013      	ands	r3, r2
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d91e      	bls.n	80030bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b73      	ldr	r3, [pc, #460]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2207      	movs	r2, #7
 8003084:	4393      	bics	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	4b70      	ldr	r3, [pc, #448]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003090:	f7ff f8c4 	bl	800221c <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003098:	e009      	b.n	80030ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309a:	f7ff f8bf 	bl	800221c <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <HAL_RCC_ClockConfig+0x1f4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0ca      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2207      	movs	r2, #7
 80030b4:	4013      	ands	r3, r2
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1ee      	bne.n	800309a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d015      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2204      	movs	r2, #4
 80030cc:	4013      	ands	r3, r2
 80030ce:	d006      	beq.n	80030de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030d0:	4b60      	ldr	r3, [pc, #384]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	4b5f      	ldr	r3, [pc, #380]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 80030d6:	21e0      	movs	r1, #224	; 0xe0
 80030d8:	01c9      	lsls	r1, r1, #7
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030de:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <HAL_RCC_ClockConfig+0x1fc>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b59      	ldr	r3, [pc, #356]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2201      	movs	r2, #1
 80030f8:	4013      	ands	r3, r2
 80030fa:	d057      	beq.n	80031ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d107      	bne.n	8003114 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003104:	4b53      	ldr	r3, [pc, #332]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	029b      	lsls	r3, r3, #10
 800310c:	4013      	ands	r3, r2
 800310e:	d12b      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e097      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d107      	bne.n	800312c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	049b      	lsls	r3, r3, #18
 8003124:	4013      	ands	r3, r2
 8003126:	d11f      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e08b      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d107      	bne.n	8003144 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4013      	ands	r3, r2
 800313e:	d113      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e07f      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d106      	bne.n	800315a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800314e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003150:	2202      	movs	r2, #2
 8003152:	4013      	ands	r3, r2
 8003154:	d108      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e074      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	2202      	movs	r2, #2
 8003160:	4013      	ands	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e06d      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003168:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2207      	movs	r2, #7
 800316e:	4393      	bics	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7ff f84e 	bl	800221c <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003184:	e009      	b.n	800319a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003186:	f7ff f849 	bl	800221c <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <HAL_RCC_ClockConfig+0x1f4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e054      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2238      	movs	r2, #56	; 0x38
 80031a0:	401a      	ands	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1ec      	bne.n	8003186 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2207      	movs	r2, #7
 80031b2:	4013      	ands	r3, r2
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d21e      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2207      	movs	r2, #7
 80031c0:	4393      	bics	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031cc:	f7ff f826 	bl	800221c <HAL_GetTick>
 80031d0:	0003      	movs	r3, r0
 80031d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031d4:	e009      	b.n	80031ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d6:	f7ff f821 	bl	800221c <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <HAL_RCC_ClockConfig+0x1f4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e02c      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2207      	movs	r2, #7
 80031f0:	4013      	ands	r3, r2
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1ee      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2204      	movs	r2, #4
 80031fe:	4013      	ands	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <HAL_RCC_ClockConfig+0x200>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003216:	f000 f829 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800321a:	0001      	movs	r1, r0
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	220f      	movs	r2, #15
 8003224:	401a      	ands	r2, r3
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x204>)
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	58d3      	ldr	r3, [r2, r3]
 800322c:	221f      	movs	r2, #31
 800322e:	4013      	ands	r3, r2
 8003230:	000a      	movs	r2, r1
 8003232:	40da      	lsrs	r2, r3
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_ClockConfig+0x208>)
 8003236:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x20c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0018      	movs	r0, r3
 800323e:	f7fe ff91 	bl	8002164 <HAL_InitTick>
 8003242:	0003      	movs	r3, r0
}
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	b004      	add	sp, #16
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40022000 	.word	0x40022000
 8003250:	00001388 	.word	0x00001388
 8003254:	40021000 	.word	0x40021000
 8003258:	fffff0ff 	.word	0xfffff0ff
 800325c:	ffff8fff 	.word	0xffff8fff
 8003260:	08007718 	.word	0x08007718
 8003264:	20000008 	.word	0x20000008
 8003268:	2000000c 	.word	0x2000000c

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003272:	4b3c      	ldr	r3, [pc, #240]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2238      	movs	r2, #56	; 0x38
 8003278:	4013      	ands	r3, r2
 800327a:	d10f      	bne.n	800329c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800327c:	4b39      	ldr	r3, [pc, #228]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0adb      	lsrs	r3, r3, #11
 8003282:	2207      	movs	r2, #7
 8003284:	4013      	ands	r3, r2
 8003286:	2201      	movs	r2, #1
 8003288:	409a      	lsls	r2, r3
 800328a:	0013      	movs	r3, r2
 800328c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800328e:	6839      	ldr	r1, [r7, #0]
 8003290:	4835      	ldr	r0, [pc, #212]	; (8003368 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003292:	f7fc ff49 	bl	8000128 <__udivsi3>
 8003296:	0003      	movs	r3, r0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	e05d      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800329c:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2238      	movs	r2, #56	; 0x38
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032a8:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_RCC_GetSysClockFreq+0x100>)
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	e054      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2238      	movs	r2, #56	; 0x38
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d138      	bne.n	800332c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80032ba:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2203      	movs	r2, #3
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032c4:	4b27      	ldr	r3, [pc, #156]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	2207      	movs	r2, #7
 80032cc:	4013      	ands	r3, r2
 80032ce:	3301      	adds	r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d10d      	bne.n	80032f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	4824      	ldr	r0, [pc, #144]	; (800336c <HAL_RCC_GetSysClockFreq+0x100>)
 80032dc:	f7fc ff24 	bl	8000128 <__udivsi3>
 80032e0:	0003      	movs	r3, r0
 80032e2:	0019      	movs	r1, r3
 80032e4:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	227f      	movs	r2, #127	; 0x7f
 80032ec:	4013      	ands	r3, r2
 80032ee:	434b      	muls	r3, r1
 80032f0:	617b      	str	r3, [r7, #20]
        break;
 80032f2:	e00d      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	481c      	ldr	r0, [pc, #112]	; (8003368 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032f8:	f7fc ff16 	bl	8000128 <__udivsi3>
 80032fc:	0003      	movs	r3, r0
 80032fe:	0019      	movs	r1, r3
 8003300:	4b18      	ldr	r3, [pc, #96]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	227f      	movs	r2, #127	; 0x7f
 8003308:	4013      	ands	r3, r2
 800330a:	434b      	muls	r3, r1
 800330c:	617b      	str	r3, [r7, #20]
        break;
 800330e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0f5b      	lsrs	r3, r3, #29
 8003316:	2207      	movs	r2, #7
 8003318:	4013      	ands	r3, r2
 800331a:	3301      	adds	r3, #1
 800331c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	6978      	ldr	r0, [r7, #20]
 8003322:	f7fc ff01 	bl	8000128 <__udivsi3>
 8003326:	0003      	movs	r3, r0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	e015      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2238      	movs	r2, #56	; 0x38
 8003332:	4013      	ands	r3, r2
 8003334:	2b20      	cmp	r3, #32
 8003336:	d103      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2238      	movs	r2, #56	; 0x38
 8003346:	4013      	ands	r3, r2
 8003348:	2b18      	cmp	r3, #24
 800334a:	d103      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800334c:	23fa      	movs	r3, #250	; 0xfa
 800334e:	01db      	lsls	r3, r3, #7
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e001      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003358:	693b      	ldr	r3, [r7, #16]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b006      	add	sp, #24
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	40021000 	.word	0x40021000
 8003368:	00f42400 	.word	0x00f42400
 800336c:	007a1200 	.word	0x007a1200

08003370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003374:	4b02      	ldr	r3, [pc, #8]	; (8003380 <HAL_RCC_GetHCLKFreq+0x10>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	20000008 	.word	0x20000008

08003384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003388:	f7ff fff2 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 800338c:	0004      	movs	r4, r0
 800338e:	f7ff faf9 	bl	8002984 <LL_RCC_GetAPB1Prescaler>
 8003392:	0003      	movs	r3, r0
 8003394:	0b1a      	lsrs	r2, r3, #12
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003398:	0092      	lsls	r2, r2, #2
 800339a:	58d3      	ldr	r3, [r2, r3]
 800339c:	221f      	movs	r2, #31
 800339e:	4013      	ands	r3, r2
 80033a0:	40dc      	lsrs	r4, r3
 80033a2:	0023      	movs	r3, r4
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bdb0      	pop	{r4, r5, r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	08007758 	.word	0x08007758

080033b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80033b8:	2313      	movs	r3, #19
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033c0:	2312      	movs	r3, #18
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	029b      	lsls	r3, r3, #10
 80033d0:	4013      	ands	r3, r2
 80033d2:	d100      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80033d4:	e0ad      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d6:	2011      	movs	r0, #17
 80033d8:	183b      	adds	r3, r7, r0
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	055b      	lsls	r3, r3, #21
 80033e6:	4013      	ands	r3, r2
 80033e8:	d110      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b44      	ldr	r3, [pc, #272]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ee:	4b43      	ldr	r3, [pc, #268]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	0549      	lsls	r1, r1, #21
 80033f4:	430a      	orrs	r2, r1
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80033f8:	4b40      	ldr	r3, [pc, #256]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	055b      	lsls	r3, r3, #21
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	183b      	adds	r3, r7, r0
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800340c:	4b3c      	ldr	r3, [pc, #240]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	0049      	lsls	r1, r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800341a:	f7fe feff 	bl	800221c <HAL_GetTick>
 800341e:	0003      	movs	r3, r0
 8003420:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003422:	e00b      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fe fefa 	bl	800221c <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d904      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003432:	2313      	movs	r3, #19
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2203      	movs	r2, #3
 8003438:	701a      	strb	r2, [r3, #0]
        break;
 800343a:	e005      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800343c:	4b30      	ldr	r3, [pc, #192]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4013      	ands	r3, r2
 8003446:	d0ed      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003448:	2313      	movs	r3, #19
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d15e      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003456:	23c0      	movs	r3, #192	; 0xc0
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4013      	ands	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	429a      	cmp	r2, r3
 800346c:	d014      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003474:	4013      	ands	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003478:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800347a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800347c:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	0249      	lsls	r1, r1, #9
 8003482:	430a      	orrs	r2, r1
 8003484:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800348a:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800348c:	491e      	ldr	r1, [pc, #120]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800348e:	400a      	ands	r2, r1
 8003490:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	d016      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe febc 	bl	800221c <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a8:	e00c      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe feb7 	bl	800221c <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d904      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80034ba:	2313      	movs	r3, #19
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2203      	movs	r2, #3
 80034c0:	701a      	strb	r2, [r3, #0]
            break;
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	2202      	movs	r2, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d0ed      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80034ce:	2313      	movs	r3, #19
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034e8:	430a      	orrs	r2, r1
 80034ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ec:	e016      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ee:	2312      	movs	r3, #18
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2213      	movs	r2, #19
 80034f4:	18ba      	adds	r2, r7, r2
 80034f6:	7812      	ldrb	r2, [r2, #0]
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e00f      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034fc:	40021000 	.word	0x40021000
 8003500:	40007000 	.word	0x40007000
 8003504:	fffffcff 	.word	0xfffffcff
 8003508:	fffeffff 	.word	0xfffeffff
 800350c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	2312      	movs	r3, #18
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2213      	movs	r2, #19
 8003516:	18ba      	adds	r2, r7, r2
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800351c:	2311      	movs	r3, #17
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4bb6      	ldr	r3, [pc, #728]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	4bb5      	ldr	r3, [pc, #724]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800352c:	49b5      	ldr	r1, [pc, #724]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800352e:	400a      	ands	r2, r1
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	4013      	ands	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353c:	4bb0      	ldr	r3, [pc, #704]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	2203      	movs	r2, #3
 8003542:	4393      	bics	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4bad      	ldr	r3, [pc, #692]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800354c:	430a      	orrs	r2, r1
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	4013      	ands	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800355a:	4ba9      	ldr	r3, [pc, #676]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	220c      	movs	r2, #12
 8003560:	4393      	bics	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	4ba5      	ldr	r3, [pc, #660]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800356a:	430a      	orrs	r2, r1
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2204      	movs	r2, #4
 8003574:	4013      	ands	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003578:	4ba1      	ldr	r3, [pc, #644]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	2230      	movs	r2, #48	; 0x30
 800357e:	4393      	bics	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4b9e      	ldr	r3, [pc, #632]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003588:	430a      	orrs	r2, r1
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2210      	movs	r2, #16
 8003592:	4013      	ands	r3, r2
 8003594:	d009      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003596:	4b9a      	ldr	r3, [pc, #616]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	4a9b      	ldr	r2, [pc, #620]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	4b96      	ldr	r3, [pc, #600]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035a6:	430a      	orrs	r2, r1
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	015b      	lsls	r3, r3, #5
 80035b2:	4013      	ands	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80035b6:	4b92      	ldr	r3, [pc, #584]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	4a94      	ldr	r2, [pc, #592]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035bc:	4013      	ands	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	4b8e      	ldr	r3, [pc, #568]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035c6:	430a      	orrs	r2, r1
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4013      	ands	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d6:	4b8a      	ldr	r3, [pc, #552]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	4a8d      	ldr	r2, [pc, #564]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e4:	4b86      	ldr	r3, [pc, #536]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4013      	ands	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035f6:	4b82      	ldr	r3, [pc, #520]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	4a86      	ldr	r2, [pc, #536]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	4b7e      	ldr	r3, [pc, #504]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003606:	430a      	orrs	r2, r1
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2220      	movs	r2, #32
 8003610:	4013      	ands	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003614:	4b7a      	ldr	r3, [pc, #488]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	4a7f      	ldr	r2, [pc, #508]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	4b77      	ldr	r3, [pc, #476]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003624:	430a      	orrs	r2, r1
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2240      	movs	r2, #64	; 0x40
 800362e:	4013      	ands	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003632:	4b73      	ldr	r3, [pc, #460]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	4a79      	ldr	r2, [pc, #484]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003642:	430a      	orrs	r2, r1
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	01db      	lsls	r3, r3, #7
 800364e:	4013      	ands	r3, r2
 8003650:	d015      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003652:	4b6b      	ldr	r3, [pc, #428]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	0899      	lsrs	r1, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365e:	4b68      	ldr	r3, [pc, #416]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003660:	430a      	orrs	r2, r1
 8003662:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	05db      	lsls	r3, r3, #23
 800366c:	429a      	cmp	r2, r3
 800366e:	d106      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003670:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	4b62      	ldr	r3, [pc, #392]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003676:	2180      	movs	r1, #128	; 0x80
 8003678:	0249      	lsls	r1, r1, #9
 800367a:	430a      	orrs	r2, r1
 800367c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	031b      	lsls	r3, r3, #12
 8003686:	4013      	ands	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800368a:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	2240      	movs	r2, #64	; 0x40
 8003690:	4393      	bics	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003698:	4b59      	ldr	r3, [pc, #356]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800369a:	430a      	orrs	r2, r1
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	039b      	lsls	r3, r3, #14
 80036a6:	4013      	ands	r3, r2
 80036a8:	d016      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036aa:	4b55      	ldr	r3, [pc, #340]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b8:	4b51      	ldr	r3, [pc, #324]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036ba:	430a      	orrs	r2, r1
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	03db      	lsls	r3, r3, #15
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d106      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036ca:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	0449      	lsls	r1, r1, #17
 80036d4:	430a      	orrs	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	03db      	lsls	r3, r3, #15
 80036e0:	4013      	ands	r3, r2
 80036e2:	d016      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036e4:	4b46      	ldr	r3, [pc, #280]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	4a4e      	ldr	r2, [pc, #312]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	045b      	lsls	r3, r3, #17
 8003700:	429a      	cmp	r2, r3
 8003702:	d106      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003704:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	0449      	lsls	r1, r1, #17
 800370e:	430a      	orrs	r2, r1
 8003710:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	4013      	ands	r3, r2
 800371c:	d014      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800371e:	4b38      	ldr	r3, [pc, #224]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	2203      	movs	r2, #3
 8003724:	4393      	bics	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800372e:	430a      	orrs	r2, r1
 8003730:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d106      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	4b30      	ldr	r3, [pc, #192]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	0249      	lsls	r1, r1, #9
 8003744:	430a      	orrs	r2, r1
 8003746:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	019b      	lsls	r3, r3, #6
 8003750:	4013      	ands	r3, r2
 8003752:	d014      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003754:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	220c      	movs	r2, #12
 800375a:	4393      	bics	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003762:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003764:	430a      	orrs	r2, r1
 8003766:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	2b04      	cmp	r3, #4
 800376e:	d106      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003770:	4b23      	ldr	r3, [pc, #140]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	0249      	lsls	r1, r1, #9
 800377a:	430a      	orrs	r2, r1
 800377c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	045b      	lsls	r3, r3, #17
 8003786:	4013      	ands	r3, r2
 8003788:	d016      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800379a:	430a      	orrs	r2, r1
 800379c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d106      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037b0:	2180      	movs	r1, #128	; 0x80
 80037b2:	0449      	lsls	r1, r1, #17
 80037b4:	430a      	orrs	r2, r1
 80037b6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	049b      	lsls	r3, r3, #18
 80037c0:	4013      	ands	r3, r2
 80037c2:	d016      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037d4:	430a      	orrs	r2, r1
 80037d6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d106      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037ea:	2180      	movs	r1, #128	; 0x80
 80037ec:	0449      	lsls	r1, r1, #17
 80037ee:	430a      	orrs	r2, r1
 80037f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80037f2:	2312      	movs	r3, #18
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	781b      	ldrb	r3, [r3, #0]
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b006      	add	sp, #24
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	efffffff 	.word	0xefffffff
 8003808:	fffff3ff 	.word	0xfffff3ff
 800380c:	fffffcff 	.word	0xfffffcff
 8003810:	fff3ffff 	.word	0xfff3ffff
 8003814:	ffcfffff 	.word	0xffcfffff
 8003818:	ffffcfff 	.word	0xffffcfff
 800381c:	ffff3fff 	.word	0xffff3fff
 8003820:	ffbfffff 	.word	0xffbfffff
 8003824:	feffffff 	.word	0xfeffffff

08003828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0a8      	b.n	800398c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	2382      	movs	r3, #130	; 0x82
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	429a      	cmp	r2, r3
 800384c:	d009      	beq.n	8003862 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	61da      	str	r2, [r3, #28]
 8003854:	e005      	b.n	8003862 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	225d      	movs	r2, #93	; 0x5d
 800386c:	5c9b      	ldrb	r3, [r3, r2]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	225c      	movs	r2, #92	; 0x5c
 8003878:	2100      	movs	r1, #0
 800387a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0018      	movs	r0, r3
 8003880:	f7fe fb14 	bl	8001eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	225d      	movs	r2, #93	; 0x5d
 8003888:	2102      	movs	r1, #2
 800388a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2140      	movs	r1, #64	; 0x40
 8003898:	438a      	bics	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	23e0      	movs	r3, #224	; 0xe0
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d902      	bls.n	80038ae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e002      	b.n	80038b4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	015b      	lsls	r3, r3, #5
 80038b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	23f0      	movs	r3, #240	; 0xf0
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	429a      	cmp	r2, r3
 80038be:	d008      	beq.n	80038d2 <HAL_SPI_Init+0xaa>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	23e0      	movs	r3, #224	; 0xe0
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d002      	beq.n	80038d2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	2382      	movs	r3, #130	; 0x82
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	401a      	ands	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	2384      	movs	r3, #132	; 0x84
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	400b      	ands	r3, r1
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2102      	movs	r1, #2
 80038ee:	400b      	ands	r3, r1
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	2101      	movs	r1, #1
 80038f8:	400b      	ands	r3, r1
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6999      	ldr	r1, [r3, #24]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	400b      	ands	r3, r1
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	2138      	movs	r1, #56	; 0x38
 800390e:	400b      	ands	r3, r1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	400b      	ands	r3, r1
 800391a:	431a      	orrs	r2, r3
 800391c:	0011      	movs	r1, r2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	401a      	ands	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	2204      	movs	r2, #4
 8003938:	401a      	ands	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2110      	movs	r1, #16
 8003940:	400b      	ands	r3, r1
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	2108      	movs	r1, #8
 800394a:	400b      	ands	r3, r1
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68d9      	ldr	r1, [r3, #12]
 8003952:	23f0      	movs	r3, #240	; 0xf0
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	400b      	ands	r3, r1
 8003958:	431a      	orrs	r2, r3
 800395a:	0011      	movs	r1, r2
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	015b      	lsls	r3, r3, #5
 8003962:	401a      	ands	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69da      	ldr	r2, [r3, #28]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4907      	ldr	r1, [pc, #28]	; (8003994 <HAL_SPI_Init+0x16c>)
 8003978:	400a      	ands	r2, r1
 800397a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	225d      	movs	r2, #93	; 0x5d
 8003986:	2101      	movs	r1, #1
 8003988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	b004      	add	sp, #16
 8003992:	bd80      	pop	{r7, pc}
 8003994:	fffff7ff 	.word	0xfffff7ff

08003998 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	1dbb      	adds	r3, r7, #6
 80039a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039a8:	231f      	movs	r3, #31
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	225c      	movs	r2, #92	; 0x5c
 80039b4:	5c9b      	ldrb	r3, [r3, r2]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_SPI_Transmit+0x26>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e140      	b.n	8003c40 <HAL_SPI_Transmit+0x2a8>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	225c      	movs	r2, #92	; 0x5c
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039c6:	f7fe fc29 	bl	800221c <HAL_GetTick>
 80039ca:	0003      	movs	r3, r0
 80039cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80039ce:	2316      	movs	r3, #22
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	1dba      	adds	r2, r7, #6
 80039d4:	8812      	ldrh	r2, [r2, #0]
 80039d6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	225d      	movs	r2, #93	; 0x5d
 80039dc:	5c9b      	ldrb	r3, [r3, r2]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d004      	beq.n	80039ee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80039e4:	231f      	movs	r3, #31
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	2202      	movs	r2, #2
 80039ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80039ec:	e11d      	b.n	8003c2a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_SPI_Transmit+0x64>
 80039f4:	1dbb      	adds	r3, r7, #6
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80039fc:	231f      	movs	r3, #31
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
    goto error;
 8003a04:	e111      	b.n	8003c2a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	225d      	movs	r2, #93	; 0x5d
 8003a0a:	2103      	movs	r1, #3
 8003a0c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1dba      	adds	r2, r7, #6
 8003a1e:	8812      	ldrh	r2, [r2, #0]
 8003a20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1dba      	adds	r2, r7, #6
 8003a26:	8812      	ldrh	r2, [r2, #0]
 8003a28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2244      	movs	r2, #68	; 0x44
 8003a34:	2100      	movs	r1, #0
 8003a36:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2246      	movs	r2, #70	; 0x46
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d110      	bne.n	8003a7a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2140      	movs	r1, #64	; 0x40
 8003a64:	438a      	bics	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	01c9      	lsls	r1, r1, #7
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2240      	movs	r2, #64	; 0x40
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d007      	beq.n	8003a98 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2140      	movs	r1, #64	; 0x40
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	23e0      	movs	r3, #224	; 0xe0
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d94e      	bls.n	8003b42 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_SPI_Transmit+0x11e>
 8003aac:	2316      	movs	r3, #22
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d13f      	bne.n	8003b36 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	1c9a      	adds	r2, r3, #2
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ada:	e02c      	b.n	8003b36 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d112      	bne.n	8003b10 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	881a      	ldrh	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	1c9a      	adds	r2, r3, #2
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b0e:	e012      	b.n	8003b36 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b10:	f7fe fb84 	bl	800221c <HAL_GetTick>
 8003b14:	0002      	movs	r2, r0
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d802      	bhi.n	8003b26 <HAL_SPI_Transmit+0x18e>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	d102      	bne.n	8003b2c <HAL_SPI_Transmit+0x194>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003b2c:	231f      	movs	r3, #31
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2203      	movs	r2, #3
 8003b32:	701a      	strb	r2, [r3, #0]
          goto error;
 8003b34:	e079      	b.n	8003c2a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1cd      	bne.n	8003adc <HAL_SPI_Transmit+0x144>
 8003b40:	e04f      	b.n	8003be2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <HAL_SPI_Transmit+0x1bc>
 8003b4a:	2316      	movs	r3, #22
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d141      	bne.n	8003bd8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003b7a:	e02d      	b.n	8003bd8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2202      	movs	r2, #2
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d113      	bne.n	8003bb2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	7812      	ldrb	r2, [r2, #0]
 8003b96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bb0:	e012      	b.n	8003bd8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bb2:	f7fe fb33 	bl	800221c <HAL_GetTick>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d802      	bhi.n	8003bc8 <HAL_SPI_Transmit+0x230>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	d102      	bne.n	8003bce <HAL_SPI_Transmit+0x236>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003bce:	231f      	movs	r3, #31
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	701a      	strb	r2, [r3, #0]
          goto error;
 8003bd6:	e028      	b.n	8003c2a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1cc      	bne.n	8003b7c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	6839      	ldr	r1, [r7, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 fcd9 	bl	80045a0 <SPI_EndRxTxTransaction>
 8003bee:	1e03      	subs	r3, r0, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c00:	2300      	movs	r3, #0
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003c1e:	231f      	movs	r3, #31
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e000      	b.n	8003c2a <HAL_SPI_Transmit+0x292>
  }

error:
 8003c28:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	225d      	movs	r2, #93	; 0x5d
 8003c2e:	2101      	movs	r1, #1
 8003c30:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	225c      	movs	r2, #92	; 0x5c
 8003c36:	2100      	movs	r1, #0
 8003c38:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003c3a:	231f      	movs	r3, #31
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	781b      	ldrb	r3, [r3, #0]
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b008      	add	sp, #32
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b089      	sub	sp, #36	; 0x24
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	1dbb      	adds	r3, r7, #6
 8003c56:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c58:	2317      	movs	r3, #23
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	2382      	movs	r3, #130	; 0x82
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d113      	bne.n	8003c94 <HAL_SPI_Receive+0x4c>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10f      	bne.n	8003c94 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	225d      	movs	r2, #93	; 0x5d
 8003c78:	2104      	movs	r1, #4
 8003c7a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c7c:	1dbb      	adds	r3, r7, #6
 8003c7e:	881c      	ldrh	r4, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	0023      	movs	r3, r4
 8003c8c:	f000 f928 	bl	8003ee0 <HAL_SPI_TransmitReceive>
 8003c90:	0003      	movs	r3, r0
 8003c92:	e11c      	b.n	8003ece <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	225c      	movs	r2, #92	; 0x5c
 8003c98:	5c9b      	ldrb	r3, [r3, r2]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_SPI_Receive+0x5a>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e115      	b.n	8003ece <HAL_SPI_Receive+0x286>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	225c      	movs	r2, #92	; 0x5c
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003caa:	f7fe fab7 	bl	800221c <HAL_GetTick>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	225d      	movs	r2, #93	; 0x5d
 8003cb6:	5c9b      	ldrb	r3, [r3, r2]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d004      	beq.n	8003cc8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003cbe:	2317      	movs	r3, #23
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cc6:	e0f7      	b.n	8003eb8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_SPI_Receive+0x8e>
 8003cce:	1dbb      	adds	r3, r7, #6
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003cd6:	2317      	movs	r3, #23
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cde:	e0eb      	b.n	8003eb8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	225d      	movs	r2, #93	; 0x5d
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1dba      	adds	r2, r7, #6
 8003cf8:	2144      	movs	r1, #68	; 0x44
 8003cfa:	8812      	ldrh	r2, [r2, #0]
 8003cfc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1dba      	adds	r2, r7, #6
 8003d02:	2146      	movs	r1, #70	; 0x46
 8003d04:	8812      	ldrh	r2, [r2, #0]
 8003d06:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	23e0      	movs	r3, #224	; 0xe0
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d908      	bls.n	8003d44 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4966      	ldr	r1, [pc, #408]	; (8003ed8 <HAL_SPI_Receive+0x290>)
 8003d3e:	400a      	ands	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	e008      	b.n	8003d56 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	0149      	lsls	r1, r1, #5
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d10f      	bne.n	8003d82 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2140      	movs	r1, #64	; 0x40
 8003d6e:	438a      	bics	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4957      	ldr	r1, [pc, #348]	; (8003edc <HAL_SPI_Receive+0x294>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2240      	movs	r2, #64	; 0x40
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	d007      	beq.n	8003da0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2140      	movs	r1, #64	; 0x40
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	23e0      	movs	r3, #224	; 0xe0
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d900      	bls.n	8003dae <HAL_SPI_Receive+0x166>
 8003dac:	e069      	b.n	8003e82 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003dae:	e031      	b.n	8003e14 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2201      	movs	r2, #1
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d117      	bne.n	8003dee <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2246      	movs	r2, #70	; 0x46
 8003dde:	5a9b      	ldrh	r3, [r3, r2]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b299      	uxth	r1, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2246      	movs	r2, #70	; 0x46
 8003dea:	5299      	strh	r1, [r3, r2]
 8003dec:	e012      	b.n	8003e14 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dee:	f7fe fa15 	bl	800221c <HAL_GetTick>
 8003df2:	0002      	movs	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d802      	bhi.n	8003e04 <HAL_SPI_Receive+0x1bc>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	d102      	bne.n	8003e0a <HAL_SPI_Receive+0x1c2>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8003e0a:	2317      	movs	r3, #23
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	2203      	movs	r2, #3
 8003e10:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e12:	e051      	b.n	8003eb8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2246      	movs	r2, #70	; 0x46
 8003e18:	5a9b      	ldrh	r3, [r3, r2]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1c7      	bne.n	8003db0 <HAL_SPI_Receive+0x168>
 8003e20:	e035      	b.n	8003e8e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d115      	bne.n	8003e5c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	b292      	uxth	r2, r2
 8003e3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	1c9a      	adds	r2, r3, #2
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2246      	movs	r2, #70	; 0x46
 8003e4c:	5a9b      	ldrh	r3, [r3, r2]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b299      	uxth	r1, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2246      	movs	r2, #70	; 0x46
 8003e58:	5299      	strh	r1, [r3, r2]
 8003e5a:	e012      	b.n	8003e82 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5c:	f7fe f9de 	bl	800221c <HAL_GetTick>
 8003e60:	0002      	movs	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d802      	bhi.n	8003e72 <HAL_SPI_Receive+0x22a>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	d102      	bne.n	8003e78 <HAL_SPI_Receive+0x230>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8003e78:	2317      	movs	r3, #23
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e80:	e01a      	b.n	8003eb8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2246      	movs	r2, #70	; 0x46
 8003e86:	5a9b      	ldrh	r3, [r3, r2]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1c9      	bne.n	8003e22 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 fb25 	bl	80044e4 <SPI_EndRxTransaction>
 8003e9a:	1e03      	subs	r3, r0, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8003eac:	2317      	movs	r3, #23
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e000      	b.n	8003eb8 <HAL_SPI_Receive+0x270>
  }

error :
 8003eb6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	225d      	movs	r2, #93	; 0x5d
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	225c      	movs	r2, #92	; 0x5c
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ec8:	2317      	movs	r3, #23
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	781b      	ldrb	r3, [r3, #0]
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b007      	add	sp, #28
 8003ed4:	bd90      	pop	{r4, r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	ffffefff 	.word	0xffffefff
 8003edc:	ffffbfff 	.word	0xffffbfff

08003ee0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	001a      	movs	r2, r3
 8003eee:	1cbb      	adds	r3, r7, #2
 8003ef0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ef6:	2323      	movs	r3, #35	; 0x23
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	225c      	movs	r2, #92	; 0x5c
 8003f02:	5c9b      	ldrb	r3, [r3, r2]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x2c>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e1b5      	b.n	8004278 <HAL_SPI_TransmitReceive+0x398>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	225c      	movs	r2, #92	; 0x5c
 8003f10:	2101      	movs	r1, #1
 8003f12:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f14:	f7fe f982 	bl	800221c <HAL_GetTick>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f1c:	201b      	movs	r0, #27
 8003f1e:	183b      	adds	r3, r7, r0
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	215d      	movs	r1, #93	; 0x5d
 8003f24:	5c52      	ldrb	r2, [r2, r1]
 8003f26:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f2e:	2312      	movs	r3, #18
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	1cba      	adds	r2, r7, #2
 8003f34:	8812      	ldrh	r2, [r2, #0]
 8003f36:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f38:	183b      	adds	r3, r7, r0
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d011      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x84>
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	2382      	movs	r3, #130	; 0x82
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d107      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x7a>
 8003f52:	183b      	adds	r3, r7, r0
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d004      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003f5a:	2323      	movs	r3, #35	; 0x23
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f62:	e17e      	b.n	8004262 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d006      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x98>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x98>
 8003f70:	1cbb      	adds	r3, r7, #2
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003f78:	2323      	movs	r3, #35	; 0x23
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f80:	e16f      	b.n	8004262 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	225d      	movs	r2, #93	; 0x5d
 8003f86:	5c9b      	ldrb	r3, [r3, r2]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d003      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	225d      	movs	r2, #93	; 0x5d
 8003f92:	2105      	movs	r1, #5
 8003f94:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1cba      	adds	r2, r7, #2
 8003fa6:	2146      	movs	r1, #70	; 0x46
 8003fa8:	8812      	ldrh	r2, [r2, #0]
 8003faa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1cba      	adds	r2, r7, #2
 8003fb0:	2144      	movs	r1, #68	; 0x44
 8003fb2:	8812      	ldrh	r2, [r2, #0]
 8003fb4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1cba      	adds	r2, r7, #2
 8003fc0:	8812      	ldrh	r2, [r2, #0]
 8003fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1cba      	adds	r2, r7, #2
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	23e0      	movs	r3, #224	; 0xe0
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d908      	bls.n	8003ff6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	49a4      	ldr	r1, [pc, #656]	; (8004280 <HAL_SPI_TransmitReceive+0x3a0>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	e008      	b.n	8004008 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2180      	movs	r1, #128	; 0x80
 8004002:	0149      	lsls	r1, r1, #5
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2240      	movs	r2, #64	; 0x40
 8004010:	4013      	ands	r3, r2
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d007      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2140      	movs	r1, #64	; 0x40
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	23e0      	movs	r3, #224	; 0xe0
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	429a      	cmp	r2, r3
 8004030:	d800      	bhi.n	8004034 <HAL_SPI_TransmitReceive+0x154>
 8004032:	e07f      	b.n	8004134 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x168>
 800403c:	2312      	movs	r3, #18
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d000      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x168>
 8004046:	e069      	b.n	800411c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	1c9a      	adds	r2, r3, #2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406c:	e056      	b.n	800411c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	2b02      	cmp	r3, #2
 800407a:	d11b      	bne.n	80040b4 <HAL_SPI_TransmitReceive+0x1d4>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_SPI_TransmitReceive+0x1d4>
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	2b01      	cmp	r3, #1
 800408a:	d113      	bne.n	80040b4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	881a      	ldrh	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	1c9a      	adds	r2, r3, #2
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2201      	movs	r2, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d11c      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x21c>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2246      	movs	r2, #70	; 0x46
 80040c6:	5a9b      	ldrh	r3, [r3, r2]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	b292      	uxth	r2, r2
 80040da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2246      	movs	r2, #70	; 0x46
 80040ea:	5a9b      	ldrh	r3, [r3, r2]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b299      	uxth	r1, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2246      	movs	r2, #70	; 0x46
 80040f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f8:	2301      	movs	r3, #1
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040fc:	f7fe f88e 	bl	800221c <HAL_GetTick>
 8004100:	0002      	movs	r2, r0
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004108:	429a      	cmp	r2, r3
 800410a:	d807      	bhi.n	800411c <HAL_SPI_TransmitReceive+0x23c>
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	3301      	adds	r3, #1
 8004110:	d004      	beq.n	800411c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004112:	2323      	movs	r3, #35	; 0x23
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	2203      	movs	r2, #3
 8004118:	701a      	strb	r2, [r3, #0]
        goto error;
 800411a:	e0a2      	b.n	8004262 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1a3      	bne.n	800406e <HAL_SPI_TransmitReceive+0x18e>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2246      	movs	r2, #70	; 0x46
 800412a:	5a9b      	ldrh	r3, [r3, r2]
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d19d      	bne.n	800406e <HAL_SPI_TransmitReceive+0x18e>
 8004132:	e085      	b.n	8004240 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x268>
 800413c:	2312      	movs	r3, #18
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d000      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x268>
 8004146:	e070      	b.n	800422a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416e:	e05c      	b.n	800422a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2202      	movs	r2, #2
 8004178:	4013      	ands	r3, r2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d11c      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x2d8>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d017      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x2d8>
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	2b01      	cmp	r3, #1
 800418c:	d114      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2201      	movs	r2, #1
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d11e      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x324>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2246      	movs	r2, #70	; 0x46
 80041ca:	5a9b      	ldrh	r3, [r3, r2]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	001a      	movs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2246      	movs	r2, #70	; 0x46
 80041f2:	5a9b      	ldrh	r3, [r3, r2]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b299      	uxth	r1, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2246      	movs	r2, #70	; 0x46
 80041fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004200:	2301      	movs	r3, #1
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004204:	f7fe f80a 	bl	800221c <HAL_GetTick>
 8004208:	0002      	movs	r2, r0
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004210:	429a      	cmp	r2, r3
 8004212:	d802      	bhi.n	800421a <HAL_SPI_TransmitReceive+0x33a>
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	3301      	adds	r3, #1
 8004218:	d102      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x340>
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004220:	2323      	movs	r3, #35	; 0x23
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	2203      	movs	r2, #3
 8004226:	701a      	strb	r2, [r3, #0]
        goto error;
 8004228:	e01b      	b.n	8004262 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d19d      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x290>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2246      	movs	r2, #70	; 0x46
 8004238:	5a9b      	ldrh	r3, [r3, r2]
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d197      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	0018      	movs	r0, r3
 8004248:	f000 f9aa 	bl	80045a0 <SPI_EndRxTxTransaction>
 800424c:	1e03      	subs	r3, r0, #0
 800424e:	d007      	beq.n	8004260 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004250:	2323      	movs	r3, #35	; 0x23
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	661a      	str	r2, [r3, #96]	; 0x60
 800425e:	e000      	b.n	8004262 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004260:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	225d      	movs	r2, #93	; 0x5d
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	225c      	movs	r2, #92	; 0x5c
 800426e:	2100      	movs	r1, #0
 8004270:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004272:	2323      	movs	r3, #35	; 0x23
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	781b      	ldrb	r3, [r3, #0]
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b00a      	add	sp, #40	; 0x28
 800427e:	bd80      	pop	{r7, pc}
 8004280:	ffffefff 	.word	0xffffefff

08004284 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	1dfb      	adds	r3, r7, #7
 8004292:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004294:	f7fd ffc2 	bl	800221c <HAL_GetTick>
 8004298:	0002      	movs	r2, r0
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	18d3      	adds	r3, r2, r3
 80042a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042a4:	f7fd ffba 	bl	800221c <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ac:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	015b      	lsls	r3, r3, #5
 80042b2:	0d1b      	lsrs	r3, r3, #20
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	4353      	muls	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ba:	e058      	b.n	800436e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	3301      	adds	r3, #1
 80042c0:	d055      	beq.n	800436e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042c2:	f7fd ffab 	bl	800221c <HAL_GetTick>
 80042c6:	0002      	movs	r2, r0
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d902      	bls.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d142      	bne.n	800435e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	21e0      	movs	r1, #224	; 0xe0
 80042e4:	438a      	bics	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	2382      	movs	r3, #130	; 0x82
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d113      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x98>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d005      	beq.n	800430c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	429a      	cmp	r2, r3
 800430a:	d107      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2140      	movs	r1, #64	; 0x40
 8004318:	438a      	bics	r2, r1
 800431a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	429a      	cmp	r2, r3
 8004326:	d110      	bne.n	800434a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	491a      	ldr	r1, [pc, #104]	; (800439c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004334:	400a      	ands	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	0189      	lsls	r1, r1, #6
 8004346:	430a      	orrs	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	225d      	movs	r2, #93	; 0x5d
 800434e:	2101      	movs	r1, #1
 8004350:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	225c      	movs	r2, #92	; 0x5c
 8004356:	2100      	movs	r1, #0
 8004358:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e017      	b.n	800438e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3b01      	subs	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	425a      	negs	r2, r3
 800437e:	4153      	adcs	r3, r2
 8004380:	b2db      	uxtb	r3, r3
 8004382:	001a      	movs	r2, r3
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d197      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b008      	add	sp, #32
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	20000008 	.word	0x20000008
 800439c:	ffffdfff 	.word	0xffffdfff

080043a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043ae:	2317      	movs	r3, #23
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043b6:	f7fd ff31 	bl	800221c <HAL_GetTick>
 80043ba:	0002      	movs	r2, r0
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	18d3      	adds	r3, r2, r3
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043c6:	f7fd ff29 	bl	800221c <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	330c      	adds	r3, #12
 80043d4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043d6:	4b41      	ldr	r3, [pc, #260]	; (80044dc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	0013      	movs	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	00da      	lsls	r2, r3, #3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	0d1b      	lsrs	r3, r3, #20
 80043e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e8:	4353      	muls	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043ec:	e068      	b.n	80044c0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	23c0      	movs	r3, #192	; 0xc0
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d10a      	bne.n	800440e <SPI_WaitFifoStateUntilTimeout+0x6e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d107      	bne.n	800440e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	2117      	movs	r1, #23
 8004406:	187b      	adds	r3, r7, r1
 8004408:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800440a:	187b      	adds	r3, r7, r1
 800440c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	3301      	adds	r3, #1
 8004412:	d055      	beq.n	80044c0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004414:	f7fd ff02 	bl	800221c <HAL_GetTick>
 8004418:	0002      	movs	r2, r0
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	429a      	cmp	r2, r3
 8004422:	d902      	bls.n	800442a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d142      	bne.n	80044b0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	21e0      	movs	r1, #224	; 0xe0
 8004436:	438a      	bics	r2, r1
 8004438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	2382      	movs	r3, #130	; 0x82
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	429a      	cmp	r2, r3
 8004444:	d113      	bne.n	800446e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	429a      	cmp	r2, r3
 8004450:	d005      	beq.n	800445e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	429a      	cmp	r2, r3
 800445c:	d107      	bne.n	800446e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2140      	movs	r1, #64	; 0x40
 800446a:	438a      	bics	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	019b      	lsls	r3, r3, #6
 8004476:	429a      	cmp	r2, r3
 8004478:	d110      	bne.n	800449c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4916      	ldr	r1, [pc, #88]	; (80044e0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004486:	400a      	ands	r2, r1
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2180      	movs	r1, #128	; 0x80
 8004496:	0189      	lsls	r1, r1, #6
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	225d      	movs	r2, #93	; 0x5d
 80044a0:	2101      	movs	r1, #1
 80044a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	225c      	movs	r2, #92	; 0x5c
 80044a8:	2100      	movs	r1, #0
 80044aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e010      	b.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	3b01      	subs	r3, #1
 80044be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d18e      	bne.n	80043ee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	0018      	movs	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b00a      	add	sp, #40	; 0x28
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	20000008 	.word	0x20000008
 80044e0:	ffffdfff 	.word	0xffffdfff

080044e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	2382      	movs	r3, #130	; 0x82
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d113      	bne.n	8004524 <SPI_EndRxTransaction+0x40>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	429a      	cmp	r2, r3
 8004506:	d005      	beq.n	8004514 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2140      	movs	r1, #64	; 0x40
 8004520:	438a      	bics	r2, r1
 8004522:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	0013      	movs	r3, r2
 800452e:	2200      	movs	r2, #0
 8004530:	2180      	movs	r1, #128	; 0x80
 8004532:	f7ff fea7 	bl	8004284 <SPI_WaitFlagStateUntilTimeout>
 8004536:	1e03      	subs	r3, r0, #0
 8004538:	d007      	beq.n	800454a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453e:	2220      	movs	r2, #32
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e026      	b.n	8004598 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	2382      	movs	r3, #130	; 0x82
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	429a      	cmp	r2, r3
 8004554:	d11f      	bne.n	8004596 <SPI_EndRxTransaction+0xb2>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	429a      	cmp	r2, r3
 8004560:	d005      	beq.n	800456e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	429a      	cmp	r2, r3
 800456c:	d113      	bne.n	8004596 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	23c0      	movs	r3, #192	; 0xc0
 8004572:	00d9      	lsls	r1, r3, #3
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	0013      	movs	r3, r2
 800457c:	2200      	movs	r2, #0
 800457e:	f7ff ff0f 	bl	80043a0 <SPI_WaitFifoStateUntilTimeout>
 8004582:	1e03      	subs	r3, r0, #0
 8004584:	d007      	beq.n	8004596 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458a:	2220      	movs	r2, #32
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e000      	b.n	8004598 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	b004      	add	sp, #16
 800459e:	bd80      	pop	{r7, pc}

080045a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	23c0      	movs	r3, #192	; 0xc0
 80045b0:	0159      	lsls	r1, r3, #5
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	0013      	movs	r3, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	f7ff fef0 	bl	80043a0 <SPI_WaitFifoStateUntilTimeout>
 80045c0:	1e03      	subs	r3, r0, #0
 80045c2:	d007      	beq.n	80045d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c8:	2220      	movs	r2, #32
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e027      	b.n	8004624 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	0013      	movs	r3, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	2180      	movs	r1, #128	; 0x80
 80045e2:	f7ff fe4f 	bl	8004284 <SPI_WaitFlagStateUntilTimeout>
 80045e6:	1e03      	subs	r3, r0, #0
 80045e8:	d007      	beq.n	80045fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ee:	2220      	movs	r2, #32
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e014      	b.n	8004624 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	23c0      	movs	r3, #192	; 0xc0
 80045fe:	00d9      	lsls	r1, r3, #3
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	0013      	movs	r3, r2
 8004608:	2200      	movs	r2, #0
 800460a:	f7ff fec9 	bl	80043a0 <SPI_WaitFifoStateUntilTimeout>
 800460e:	1e03      	subs	r3, r0, #0
 8004610:	d007      	beq.n	8004622 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004616:	2220      	movs	r2, #32
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e000      	b.n	8004624 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b004      	add	sp, #16
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e046      	b.n	80046cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2284      	movs	r2, #132	; 0x84
 8004642:	589b      	ldr	r3, [r3, r2]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2280      	movs	r2, #128	; 0x80
 800464c:	2100      	movs	r1, #0
 800464e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	0018      	movs	r0, r3
 8004654:	f7fd fc74 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2284      	movs	r2, #132	; 0x84
 800465c:	2124      	movs	r1, #36	; 0x24
 800465e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2101      	movs	r1, #1
 800466c:	438a      	bics	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	0018      	movs	r0, r3
 8004674:	f000 fc82 	bl	8004f7c <UART_SetConfig>
 8004678:	0003      	movs	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e024      	b.n	80046cc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 ffcb 	bl	8005628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	490d      	ldr	r1, [pc, #52]	; (80046d4 <HAL_UART_Init+0xa8>)
 800469e:	400a      	ands	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	212a      	movs	r1, #42	; 0x2a
 80046ae:	438a      	bics	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	0018      	movs	r0, r3
 80046c6:	f001 f863 	bl	8005790 <UART_CheckIdleState>
 80046ca:	0003      	movs	r3, r0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b002      	add	sp, #8
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	ffffb7ff 	.word	0xffffb7ff

080046d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	1dbb      	adds	r3, r7, #6
 80046e6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2284      	movs	r2, #132	; 0x84
 80046ec:	589b      	ldr	r3, [r3, r2]
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d000      	beq.n	80046f4 <HAL_UART_Transmit+0x1c>
 80046f2:	e097      	b.n	8004824 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_UART_Transmit+0x2a>
 80046fa:	1dbb      	adds	r3, r7, #6
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e08f      	b.n	8004826 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	015b      	lsls	r3, r3, #5
 800470e:	429a      	cmp	r2, r3
 8004710:	d109      	bne.n	8004726 <HAL_UART_Transmit+0x4e>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2201      	movs	r2, #1
 800471e:	4013      	ands	r3, r2
 8004720:	d001      	beq.n	8004726 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e07f      	b.n	8004826 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_UART_Transmit+0x5c>
 8004730:	2302      	movs	r3, #2
 8004732:	e078      	b.n	8004826 <HAL_UART_Transmit+0x14e>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2280      	movs	r2, #128	; 0x80
 8004738:	2101      	movs	r1, #1
 800473a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	228c      	movs	r2, #140	; 0x8c
 8004740:	2100      	movs	r1, #0
 8004742:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2284      	movs	r2, #132	; 0x84
 8004748:	2121      	movs	r1, #33	; 0x21
 800474a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800474c:	f7fd fd66 	bl	800221c <HAL_GetTick>
 8004750:	0003      	movs	r3, r0
 8004752:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1dba      	adds	r2, r7, #6
 8004758:	2154      	movs	r1, #84	; 0x54
 800475a:	8812      	ldrh	r2, [r2, #0]
 800475c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1dba      	adds	r2, r7, #6
 8004762:	2156      	movs	r1, #86	; 0x56
 8004764:	8812      	ldrh	r2, [r2, #0]
 8004766:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	015b      	lsls	r3, r3, #5
 8004770:	429a      	cmp	r2, r3
 8004772:	d108      	bne.n	8004786 <HAL_UART_Transmit+0xae>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	e003      	b.n	800478e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	2100      	movs	r1, #0
 8004794:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004796:	e02c      	b.n	80047f2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	0013      	movs	r3, r2
 80047a2:	2200      	movs	r2, #0
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	f001 f83d 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 80047aa:	1e03      	subs	r3, r0, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e039      	b.n	8004826 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	001a      	movs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	05d2      	lsls	r2, r2, #23
 80047c4:	0dd2      	lsrs	r2, r2, #23
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	3302      	adds	r3, #2
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e007      	b.n	80047e0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	781a      	ldrb	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3301      	adds	r3, #1
 80047de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2256      	movs	r2, #86	; 0x56
 80047e4:	5a9b      	ldrh	r3, [r3, r2]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b299      	uxth	r1, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2256      	movs	r2, #86	; 0x56
 80047f0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2256      	movs	r2, #86	; 0x56
 80047f6:	5a9b      	ldrh	r3, [r3, r2]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1cc      	bne.n	8004798 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	0013      	movs	r3, r2
 8004808:	2200      	movs	r2, #0
 800480a:	2140      	movs	r1, #64	; 0x40
 800480c:	f001 f80a 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 8004810:	1e03      	subs	r3, r0, #0
 8004812:	d001      	beq.n	8004818 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e006      	b.n	8004826 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2284      	movs	r2, #132	; 0x84
 800481c:	2120      	movs	r1, #32
 800481e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	b008      	add	sp, #32
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	1dbb      	adds	r3, r7, #6
 800483c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2288      	movs	r2, #136	; 0x88
 8004842:	589b      	ldr	r3, [r3, r2]
 8004844:	2b20      	cmp	r3, #32
 8004846:	d15a      	bne.n	80048fe <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_UART_Receive_IT+0x26>
 800484e:	1dbb      	adds	r3, r7, #6
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e052      	b.n	8004900 <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	015b      	lsls	r3, r3, #5
 8004862:	429a      	cmp	r2, r3
 8004864:	d109      	bne.n	800487a <HAL_UART_Receive_IT+0x4a>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2201      	movs	r2, #1
 8004872:	4013      	ands	r3, r2
 8004874:	d001      	beq.n	800487a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e042      	b.n	8004900 <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	5c9b      	ldrb	r3, [r3, r2]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_UART_Receive_IT+0x58>
 8004884:	2302      	movs	r3, #2
 8004886:	e03b      	b.n	8004900 <HAL_UART_Receive_IT+0xd0>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2280      	movs	r2, #128	; 0x80
 800488c:	2101      	movs	r1, #1
 800488e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1b      	ldr	r2, [pc, #108]	; (8004908 <HAL_UART_Receive_IT+0xd8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d025      	beq.n	80048ec <HAL_UART_Receive_IT+0xbc>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a19      	ldr	r2, [pc, #100]	; (800490c <HAL_UART_Receive_IT+0xdc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d020      	beq.n	80048ec <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	4013      	ands	r3, r2
 80048b6:	d019      	beq.n	80048ec <HAL_UART_Receive_IT+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b8:	f3ef 8310 	mrs	r3, PRIMASK
 80048bc:	613b      	str	r3, [r7, #16]
  return(result);
 80048be:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	2301      	movs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f383 8810 	msr	PRIMASK, r3
}
 80048cc:	46c0      	nop			; (mov r8, r8)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2180      	movs	r1, #128	; 0x80
 80048da:	04c9      	lsls	r1, r1, #19
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f383 8810 	msr	PRIMASK, r3
}
 80048ea:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048ec:	1dbb      	adds	r3, r7, #6
 80048ee:	881a      	ldrh	r2, [r3, #0]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	0018      	movs	r0, r3
 80048f6:	f001 f85d 	bl	80059b4 <UART_Start_Receive_IT>
 80048fa:	0003      	movs	r3, r0
 80048fc:	e000      	b.n	8004900 <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80048fe:	2302      	movs	r3, #2
  }
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b008      	add	sp, #32
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40008000 	.word	0x40008000
 800490c:	40008400 	.word	0x40008400

08004910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004910:	b5b0      	push	{r4, r5, r7, lr}
 8004912:	b0aa      	sub	sp, #168	; 0xa8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	22a4      	movs	r2, #164	; 0xa4
 8004920:	18b9      	adds	r1, r7, r2
 8004922:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	20a0      	movs	r0, #160	; 0xa0
 800492c:	1839      	adds	r1, r7, r0
 800492e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	249c      	movs	r4, #156	; 0x9c
 8004938:	1939      	adds	r1, r7, r4
 800493a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800493c:	0011      	movs	r1, r2
 800493e:	18bb      	adds	r3, r7, r2
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4aa0      	ldr	r2, [pc, #640]	; (8004bc4 <HAL_UART_IRQHandler+0x2b4>)
 8004944:	4013      	ands	r3, r2
 8004946:	2298      	movs	r2, #152	; 0x98
 8004948:	18bd      	adds	r5, r7, r2
 800494a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800494c:	18bb      	adds	r3, r7, r2
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d11a      	bne.n	800498a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004954:	187b      	adds	r3, r7, r1
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2220      	movs	r2, #32
 800495a:	4013      	ands	r3, r2
 800495c:	d015      	beq.n	800498a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800495e:	183b      	adds	r3, r7, r0
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2220      	movs	r2, #32
 8004964:	4013      	ands	r3, r2
 8004966:	d105      	bne.n	8004974 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004968:	193b      	adds	r3, r7, r4
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	055b      	lsls	r3, r3, #21
 8004970:	4013      	ands	r3, r2
 8004972:	d00a      	beq.n	800498a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	2b00      	cmp	r3, #0
 800497a:	d100      	bne.n	800497e <HAL_UART_IRQHandler+0x6e>
 800497c:	e2cf      	b.n	8004f1e <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	0010      	movs	r0, r2
 8004986:	4798      	blx	r3
      }
      return;
 8004988:	e2c9      	b.n	8004f1e <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800498a:	2398      	movs	r3, #152	; 0x98
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d100      	bne.n	8004996 <HAL_UART_IRQHandler+0x86>
 8004994:	e11e      	b.n	8004bd4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004996:	239c      	movs	r3, #156	; 0x9c
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a8a      	ldr	r2, [pc, #552]	; (8004bc8 <HAL_UART_IRQHandler+0x2b8>)
 800499e:	4013      	ands	r3, r2
 80049a0:	d106      	bne.n	80049b0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80049a2:	23a0      	movs	r3, #160	; 0xa0
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a88      	ldr	r2, [pc, #544]	; (8004bcc <HAL_UART_IRQHandler+0x2bc>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	d100      	bne.n	80049b0 <HAL_UART_IRQHandler+0xa0>
 80049ae:	e111      	b.n	8004bd4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049b0:	23a4      	movs	r3, #164	; 0xa4
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2201      	movs	r2, #1
 80049b8:	4013      	ands	r3, r2
 80049ba:	d012      	beq.n	80049e2 <HAL_UART_IRQHandler+0xd2>
 80049bc:	23a0      	movs	r3, #160	; 0xa0
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4013      	ands	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2201      	movs	r2, #1
 80049d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	228c      	movs	r2, #140	; 0x8c
 80049d6:	589b      	ldr	r3, [r3, r2]
 80049d8:	2201      	movs	r2, #1
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	218c      	movs	r1, #140	; 0x8c
 80049e0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e2:	23a4      	movs	r3, #164	; 0xa4
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2202      	movs	r2, #2
 80049ea:	4013      	ands	r3, r2
 80049ec:	d011      	beq.n	8004a12 <HAL_UART_IRQHandler+0x102>
 80049ee:	239c      	movs	r3, #156	; 0x9c
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4013      	ands	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2202      	movs	r2, #2
 8004a00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	228c      	movs	r2, #140	; 0x8c
 8004a06:	589b      	ldr	r3, [r3, r2]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	218c      	movs	r1, #140	; 0x8c
 8004a10:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a12:	23a4      	movs	r3, #164	; 0xa4
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2204      	movs	r2, #4
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d011      	beq.n	8004a42 <HAL_UART_IRQHandler+0x132>
 8004a1e:	239c      	movs	r3, #156	; 0x9c
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2201      	movs	r2, #1
 8004a26:	4013      	ands	r3, r2
 8004a28:	d00b      	beq.n	8004a42 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	228c      	movs	r2, #140	; 0x8c
 8004a36:	589b      	ldr	r3, [r3, r2]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	218c      	movs	r1, #140	; 0x8c
 8004a40:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a42:	23a4      	movs	r3, #164	; 0xa4
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d017      	beq.n	8004a7e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a4e:	23a0      	movs	r3, #160	; 0xa0
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2220      	movs	r2, #32
 8004a56:	4013      	ands	r3, r2
 8004a58:	d105      	bne.n	8004a66 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a5a:	239c      	movs	r3, #156	; 0x9c
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a59      	ldr	r2, [pc, #356]	; (8004bc8 <HAL_UART_IRQHandler+0x2b8>)
 8004a62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a64:	d00b      	beq.n	8004a7e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	228c      	movs	r2, #140	; 0x8c
 8004a72:	589b      	ldr	r3, [r3, r2]
 8004a74:	2208      	movs	r2, #8
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	218c      	movs	r1, #140	; 0x8c
 8004a7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a7e:	23a4      	movs	r3, #164	; 0xa4
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x1a4>
 8004a8c:	23a0      	movs	r3, #160	; 0xa0
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	04db      	lsls	r3, r3, #19
 8004a96:	4013      	ands	r3, r2
 8004a98:	d00c      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2280      	movs	r2, #128	; 0x80
 8004aa0:	0112      	lsls	r2, r2, #4
 8004aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	228c      	movs	r2, #140	; 0x8c
 8004aa8:	589b      	ldr	r3, [r3, r2]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	218c      	movs	r1, #140	; 0x8c
 8004ab2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	228c      	movs	r2, #140	; 0x8c
 8004ab8:	589b      	ldr	r3, [r3, r2]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d100      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x1b0>
 8004abe:	e230      	b.n	8004f22 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ac0:	23a4      	movs	r3, #164	; 0xa4
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d015      	beq.n	8004af8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004acc:	23a0      	movs	r3, #160	; 0xa0
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d106      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ad8:	239c      	movs	r3, #156	; 0x9c
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	055b      	lsls	r3, r3, #21
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d008      	beq.n	8004af8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	0010      	movs	r0, r2
 8004af6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	228c      	movs	r2, #140	; 0x8c
 8004afc:	589b      	ldr	r3, [r3, r2]
 8004afe:	2194      	movs	r1, #148	; 0x94
 8004b00:	187a      	adds	r2, r7, r1
 8004b02:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2240      	movs	r2, #64	; 0x40
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d004      	beq.n	8004b1c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b12:	187b      	adds	r3, r7, r1
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2228      	movs	r2, #40	; 0x28
 8004b18:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b1a:	d047      	beq.n	8004bac <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f001 f874 	bl	8005c0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2240      	movs	r2, #64	; 0x40
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d137      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b32:	f3ef 8310 	mrs	r3, PRIMASK
 8004b36:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3a:	2090      	movs	r0, #144	; 0x90
 8004b3c:	183a      	adds	r2, r7, r0
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	2301      	movs	r3, #1
 8004b42:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b46:	f383 8810 	msr	PRIMASK, r3
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2140      	movs	r1, #64	; 0x40
 8004b58:	438a      	bics	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]
 8004b5c:	183b      	adds	r3, r7, r0
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b64:	f383 8810 	msr	PRIMASK, r3
}
 8004b68:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d012      	beq.n	8004b98 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b76:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <HAL_UART_IRQHandler+0x2c0>)
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f7fd fcce 	bl	8002520 <HAL_DMA_Abort_IT>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d01a      	beq.n	8004bbe <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b92:	0018      	movs	r0, r3
 8004b94:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b96:	e012      	b.n	8004bbe <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f000 f9da 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	e00d      	b.n	8004bbe <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 f9d5 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004baa:	e008      	b.n	8004bbe <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 f9d0 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	228c      	movs	r2, #140	; 0x8c
 8004bb8:	2100      	movs	r1, #0
 8004bba:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004bbc:	e1b1      	b.n	8004f22 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbe:	46c0      	nop			; (mov r8, r8)
    return;
 8004bc0:	e1af      	b.n	8004f22 <HAL_UART_IRQHandler+0x612>
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	0000080f 	.word	0x0000080f
 8004bc8:	10000001 	.word	0x10000001
 8004bcc:	04000120 	.word	0x04000120
 8004bd0:	08005cd9 	.word	0x08005cd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d000      	beq.n	8004bde <HAL_UART_IRQHandler+0x2ce>
 8004bdc:	e135      	b.n	8004e4a <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bde:	23a4      	movs	r3, #164	; 0xa4
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2210      	movs	r2, #16
 8004be6:	4013      	ands	r3, r2
 8004be8:	d100      	bne.n	8004bec <HAL_UART_IRQHandler+0x2dc>
 8004bea:	e12e      	b.n	8004e4a <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bec:	23a0      	movs	r3, #160	; 0xa0
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d100      	bne.n	8004bfa <HAL_UART_IRQHandler+0x2ea>
 8004bf8:	e127      	b.n	8004e4a <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2210      	movs	r2, #16
 8004c00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2240      	movs	r2, #64	; 0x40
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d000      	beq.n	8004c12 <HAL_UART_IRQHandler+0x302>
 8004c10:	e09e      	b.n	8004d50 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	217e      	movs	r1, #126	; 0x7e
 8004c1c:	187b      	adds	r3, r7, r1
 8004c1e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d100      	bne.n	8004c2a <HAL_UART_IRQHandler+0x31a>
 8004c28:	e17d      	b.n	8004f26 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	225c      	movs	r2, #92	; 0x5c
 8004c2e:	5a9b      	ldrh	r3, [r3, r2]
 8004c30:	187a      	adds	r2, r7, r1
 8004c32:	8812      	ldrh	r2, [r2, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d300      	bcc.n	8004c3a <HAL_UART_IRQHandler+0x32a>
 8004c38:	e175      	b.n	8004f26 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	187a      	adds	r2, r7, r1
 8004c3e:	215e      	movs	r1, #94	; 0x5e
 8004c40:	8812      	ldrh	r2, [r2, #0]
 8004c42:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d16f      	bne.n	8004d32 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c52:	f3ef 8310 	mrs	r3, PRIMASK
 8004c56:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c62:	f383 8810 	msr	PRIMASK, r3
}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	49b1      	ldr	r1, [pc, #708]	; (8004f38 <HAL_UART_IRQHandler+0x628>)
 8004c74:	400a      	ands	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	f383 8810 	msr	PRIMASK, r3
}
 8004c82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c84:	f3ef 8310 	mrs	r3, PRIMASK
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8c:	677b      	str	r3, [r7, #116]	; 0x74
 8004c8e:	2301      	movs	r3, #1
 8004c90:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c94:	f383 8810 	msr	PRIMASK, r3
}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	438a      	bics	r2, r1
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb0:	f383 8810 	msr	PRIMASK, r3
}
 8004cb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cbe:	673b      	str	r3, [r7, #112]	; 0x70
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc6:	f383 8810 	msr	PRIMASK, r3
}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2140      	movs	r1, #64	; 0x40
 8004cd8:	438a      	bics	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cde:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce2:	f383 8810 	msr	PRIMASK, r3
}
 8004ce6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2288      	movs	r2, #136	; 0x88
 8004cec:	2120      	movs	r1, #32
 8004cee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d00:	2301      	movs	r3, #1
 8004d02:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d06:	f383 8810 	msr	PRIMASK, r3
}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2110      	movs	r1, #16
 8004d18:	438a      	bics	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d22:	f383 8810 	msr	PRIMASK, r3
}
 8004d26:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fd fb97 	bl	8002460 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	225c      	movs	r2, #92	; 0x5c
 8004d36:	5a9a      	ldrh	r2, [r3, r2]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	215e      	movs	r1, #94	; 0x5e
 8004d3c:	5a5b      	ldrh	r3, [r3, r1]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	0011      	movs	r1, r2
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f000 f90b 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d4e:	e0ea      	b.n	8004f26 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	225c      	movs	r2, #92	; 0x5c
 8004d54:	5a99      	ldrh	r1, [r3, r2]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	225e      	movs	r2, #94	; 0x5e
 8004d5a:	5a9b      	ldrh	r3, [r3, r2]
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	208e      	movs	r0, #142	; 0x8e
 8004d60:	183b      	adds	r3, r7, r0
 8004d62:	1a8a      	subs	r2, r1, r2
 8004d64:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	225e      	movs	r2, #94	; 0x5e
 8004d6a:	5a9b      	ldrh	r3, [r3, r2]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d100      	bne.n	8004d74 <HAL_UART_IRQHandler+0x464>
 8004d72:	e0da      	b.n	8004f2a <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8004d74:	183b      	adds	r3, r7, r0
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d100      	bne.n	8004d7e <HAL_UART_IRQHandler+0x46e>
 8004d7c:	e0d5      	b.n	8004f2a <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d82:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d84:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d86:	2488      	movs	r4, #136	; 0x88
 8004d88:	193a      	adds	r2, r7, r4
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f383 8810 	msr	PRIMASK, r3
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4966      	ldr	r1, [pc, #408]	; (8004f3c <HAL_UART_IRQHandler+0x62c>)
 8004da4:	400a      	ands	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	193b      	adds	r3, r7, r4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f383 8810 	msr	PRIMASK, r3
}
 8004db4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dba:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dbc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dbe:	2484      	movs	r4, #132	; 0x84
 8004dc0:	193a      	adds	r2, r7, r4
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f383 8810 	msr	PRIMASK, r3
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4959      	ldr	r1, [pc, #356]	; (8004f40 <HAL_UART_IRQHandler+0x630>)
 8004ddc:	400a      	ands	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	193b      	adds	r3, r7, r4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f383 8810 	msr	PRIMASK, r3
}
 8004dec:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2288      	movs	r2, #136	; 0x88
 8004df2:	2120      	movs	r1, #32
 8004df4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e02:	f3ef 8310 	mrs	r3, PRIMASK
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0a:	2480      	movs	r4, #128	; 0x80
 8004e0c:	193a      	adds	r2, r7, r4
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	2301      	movs	r3, #1
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	f383 8810 	msr	PRIMASK, r3
}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2110      	movs	r1, #16
 8004e28:	438a      	bics	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	193b      	adds	r3, r7, r4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	f383 8810 	msr	PRIMASK, r3
}
 8004e38:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e3a:	183b      	adds	r3, r7, r0
 8004e3c:	881a      	ldrh	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0011      	movs	r1, r2
 8004e42:	0018      	movs	r0, r3
 8004e44:	f000 f88e 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e48:	e06f      	b.n	8004f2a <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e4a:	23a4      	movs	r3, #164	; 0xa4
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	035b      	lsls	r3, r3, #13
 8004e54:	4013      	ands	r3, r2
 8004e56:	d010      	beq.n	8004e7a <HAL_UART_IRQHandler+0x56a>
 8004e58:	239c      	movs	r3, #156	; 0x9c
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	03db      	lsls	r3, r3, #15
 8004e62:	4013      	ands	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2280      	movs	r2, #128	; 0x80
 8004e6c:	0352      	lsls	r2, r2, #13
 8004e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f001 fbc4 	bl	8006600 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e78:	e05a      	b.n	8004f30 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e7a:	23a4      	movs	r3, #164	; 0xa4
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2280      	movs	r2, #128	; 0x80
 8004e82:	4013      	ands	r3, r2
 8004e84:	d016      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e86:	23a0      	movs	r3, #160	; 0xa0
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d106      	bne.n	8004ea0 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e92:	239c      	movs	r3, #156	; 0x9c
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d042      	beq.n	8004f2e <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	0010      	movs	r0, r2
 8004eb0:	4798      	blx	r3
    }
    return;
 8004eb2:	e03c      	b.n	8004f2e <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eb4:	23a4      	movs	r3, #164	; 0xa4
 8004eb6:	18fb      	adds	r3, r7, r3
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2240      	movs	r2, #64	; 0x40
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x5c6>
 8004ec0:	23a0      	movs	r3, #160	; 0xa0
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2240      	movs	r2, #64	; 0x40
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 ff19 	bl	8005d06 <UART_EndTransmit_IT>
    return;
 8004ed4:	e02c      	b.n	8004f30 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004ed6:	23a4      	movs	r3, #164	; 0xa4
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <HAL_UART_IRQHandler+0x5ec>
 8004ee4:	23a0      	movs	r3, #160	; 0xa0
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	05db      	lsls	r3, r3, #23
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f001 fb93 	bl	8006620 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004efa:	e019      	b.n	8004f30 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004efc:	23a4      	movs	r3, #164	; 0xa4
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	045b      	lsls	r3, r3, #17
 8004f06:	4013      	ands	r3, r2
 8004f08:	d012      	beq.n	8004f30 <HAL_UART_IRQHandler+0x620>
 8004f0a:	23a0      	movs	r3, #160	; 0xa0
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	da0d      	bge.n	8004f30 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f001 fb7a 	bl	8006610 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f1c:	e008      	b.n	8004f30 <HAL_UART_IRQHandler+0x620>
      return;
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	e006      	b.n	8004f30 <HAL_UART_IRQHandler+0x620>
    return;
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	e004      	b.n	8004f30 <HAL_UART_IRQHandler+0x620>
      return;
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	e002      	b.n	8004f30 <HAL_UART_IRQHandler+0x620>
      return;
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	e000      	b.n	8004f30 <HAL_UART_IRQHandler+0x620>
    return;
 8004f2e:	46c0      	nop			; (mov r8, r8)
  }
}
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b02a      	add	sp, #168	; 0xa8
 8004f34:	bdb0      	pop	{r4, r5, r7, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	fffffeff 	.word	0xfffffeff
 8004f3c:	fffffedf 	.word	0xfffffedf
 8004f40:	effffffe 	.word	0xeffffffe

08004f44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b002      	add	sp, #8
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	000a      	movs	r2, r1
 8004f6e:	1cbb      	adds	r3, r7, #2
 8004f70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b002      	add	sp, #8
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	b5b0      	push	{r4, r5, r7, lr}
 8004f7e:	b090      	sub	sp, #64	; 0x40
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f84:	231a      	movs	r3, #26
 8004f86:	2220      	movs	r2, #32
 8004f88:	189b      	adds	r3, r3, r2
 8004f8a:	19db      	adds	r3, r3, r7
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4ac1      	ldr	r2, [pc, #772]	; (80052b4 <UART_SetConfig+0x338>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4abc      	ldr	r2, [pc, #752]	; (80052b8 <UART_SetConfig+0x33c>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	0018      	movs	r0, r3
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	68d9      	ldr	r1, [r3, #12]
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4ab6      	ldr	r2, [pc, #728]	; (80052bc <UART_SetConfig+0x340>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <UART_SetConfig+0x80>
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4ab4      	ldr	r2, [pc, #720]	; (80052c0 <UART_SetConfig+0x344>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	4ab0      	ldr	r2, [pc, #704]	; (80052c4 <UART_SetConfig+0x348>)
 8005004:	4013      	ands	r3, r2
 8005006:	0019      	movs	r1, r3
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500e:	430b      	orrs	r3, r1
 8005010:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	220f      	movs	r2, #15
 800501a:	4393      	bics	r3, r2
 800501c:	0018      	movs	r0, r3
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	0003      	movs	r3, r0
 8005028:	430b      	orrs	r3, r1
 800502a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4aa5      	ldr	r2, [pc, #660]	; (80052c8 <UART_SetConfig+0x34c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d131      	bne.n	800509a <UART_SetConfig+0x11e>
 8005036:	4ba5      	ldr	r3, [pc, #660]	; (80052cc <UART_SetConfig+0x350>)
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	2203      	movs	r2, #3
 800503c:	4013      	ands	r3, r2
 800503e:	2b03      	cmp	r3, #3
 8005040:	d01d      	beq.n	800507e <UART_SetConfig+0x102>
 8005042:	d823      	bhi.n	800508c <UART_SetConfig+0x110>
 8005044:	2b02      	cmp	r3, #2
 8005046:	d00c      	beq.n	8005062 <UART_SetConfig+0xe6>
 8005048:	d820      	bhi.n	800508c <UART_SetConfig+0x110>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <UART_SetConfig+0xd8>
 800504e:	2b01      	cmp	r3, #1
 8005050:	d00e      	beq.n	8005070 <UART_SetConfig+0xf4>
 8005052:	e01b      	b.n	800508c <UART_SetConfig+0x110>
 8005054:	231b      	movs	r3, #27
 8005056:	2220      	movs	r2, #32
 8005058:	189b      	adds	r3, r3, r2
 800505a:	19db      	adds	r3, r3, r7
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	e154      	b.n	800530c <UART_SetConfig+0x390>
 8005062:	231b      	movs	r3, #27
 8005064:	2220      	movs	r2, #32
 8005066:	189b      	adds	r3, r3, r2
 8005068:	19db      	adds	r3, r3, r7
 800506a:	2202      	movs	r2, #2
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e14d      	b.n	800530c <UART_SetConfig+0x390>
 8005070:	231b      	movs	r3, #27
 8005072:	2220      	movs	r2, #32
 8005074:	189b      	adds	r3, r3, r2
 8005076:	19db      	adds	r3, r3, r7
 8005078:	2204      	movs	r2, #4
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	e146      	b.n	800530c <UART_SetConfig+0x390>
 800507e:	231b      	movs	r3, #27
 8005080:	2220      	movs	r2, #32
 8005082:	189b      	adds	r3, r3, r2
 8005084:	19db      	adds	r3, r3, r7
 8005086:	2208      	movs	r2, #8
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e13f      	b.n	800530c <UART_SetConfig+0x390>
 800508c:	231b      	movs	r3, #27
 800508e:	2220      	movs	r2, #32
 8005090:	189b      	adds	r3, r3, r2
 8005092:	19db      	adds	r3, r3, r7
 8005094:	2210      	movs	r2, #16
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e138      	b.n	800530c <UART_SetConfig+0x390>
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a8c      	ldr	r2, [pc, #560]	; (80052d0 <UART_SetConfig+0x354>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d131      	bne.n	8005108 <UART_SetConfig+0x18c>
 80050a4:	4b89      	ldr	r3, [pc, #548]	; (80052cc <UART_SetConfig+0x350>)
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	220c      	movs	r2, #12
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d01d      	beq.n	80050ec <UART_SetConfig+0x170>
 80050b0:	d823      	bhi.n	80050fa <UART_SetConfig+0x17e>
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d00c      	beq.n	80050d0 <UART_SetConfig+0x154>
 80050b6:	d820      	bhi.n	80050fa <UART_SetConfig+0x17e>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <UART_SetConfig+0x146>
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d00e      	beq.n	80050de <UART_SetConfig+0x162>
 80050c0:	e01b      	b.n	80050fa <UART_SetConfig+0x17e>
 80050c2:	231b      	movs	r3, #27
 80050c4:	2220      	movs	r2, #32
 80050c6:	189b      	adds	r3, r3, r2
 80050c8:	19db      	adds	r3, r3, r7
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	e11d      	b.n	800530c <UART_SetConfig+0x390>
 80050d0:	231b      	movs	r3, #27
 80050d2:	2220      	movs	r2, #32
 80050d4:	189b      	adds	r3, r3, r2
 80050d6:	19db      	adds	r3, r3, r7
 80050d8:	2202      	movs	r2, #2
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	e116      	b.n	800530c <UART_SetConfig+0x390>
 80050de:	231b      	movs	r3, #27
 80050e0:	2220      	movs	r2, #32
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	19db      	adds	r3, r3, r7
 80050e6:	2204      	movs	r2, #4
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e10f      	b.n	800530c <UART_SetConfig+0x390>
 80050ec:	231b      	movs	r3, #27
 80050ee:	2220      	movs	r2, #32
 80050f0:	189b      	adds	r3, r3, r2
 80050f2:	19db      	adds	r3, r3, r7
 80050f4:	2208      	movs	r2, #8
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e108      	b.n	800530c <UART_SetConfig+0x390>
 80050fa:	231b      	movs	r3, #27
 80050fc:	2220      	movs	r2, #32
 80050fe:	189b      	adds	r3, r3, r2
 8005100:	19db      	adds	r3, r3, r7
 8005102:	2210      	movs	r2, #16
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e101      	b.n	800530c <UART_SetConfig+0x390>
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a71      	ldr	r2, [pc, #452]	; (80052d4 <UART_SetConfig+0x358>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d131      	bne.n	8005176 <UART_SetConfig+0x1fa>
 8005112:	4b6e      	ldr	r3, [pc, #440]	; (80052cc <UART_SetConfig+0x350>)
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	2230      	movs	r2, #48	; 0x30
 8005118:	4013      	ands	r3, r2
 800511a:	2b30      	cmp	r3, #48	; 0x30
 800511c:	d01d      	beq.n	800515a <UART_SetConfig+0x1de>
 800511e:	d823      	bhi.n	8005168 <UART_SetConfig+0x1ec>
 8005120:	2b20      	cmp	r3, #32
 8005122:	d00c      	beq.n	800513e <UART_SetConfig+0x1c2>
 8005124:	d820      	bhi.n	8005168 <UART_SetConfig+0x1ec>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <UART_SetConfig+0x1b4>
 800512a:	2b10      	cmp	r3, #16
 800512c:	d00e      	beq.n	800514c <UART_SetConfig+0x1d0>
 800512e:	e01b      	b.n	8005168 <UART_SetConfig+0x1ec>
 8005130:	231b      	movs	r3, #27
 8005132:	2220      	movs	r2, #32
 8005134:	189b      	adds	r3, r3, r2
 8005136:	19db      	adds	r3, r3, r7
 8005138:	2200      	movs	r2, #0
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e0e6      	b.n	800530c <UART_SetConfig+0x390>
 800513e:	231b      	movs	r3, #27
 8005140:	2220      	movs	r2, #32
 8005142:	189b      	adds	r3, r3, r2
 8005144:	19db      	adds	r3, r3, r7
 8005146:	2202      	movs	r2, #2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	e0df      	b.n	800530c <UART_SetConfig+0x390>
 800514c:	231b      	movs	r3, #27
 800514e:	2220      	movs	r2, #32
 8005150:	189b      	adds	r3, r3, r2
 8005152:	19db      	adds	r3, r3, r7
 8005154:	2204      	movs	r2, #4
 8005156:	701a      	strb	r2, [r3, #0]
 8005158:	e0d8      	b.n	800530c <UART_SetConfig+0x390>
 800515a:	231b      	movs	r3, #27
 800515c:	2220      	movs	r2, #32
 800515e:	189b      	adds	r3, r3, r2
 8005160:	19db      	adds	r3, r3, r7
 8005162:	2208      	movs	r2, #8
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	e0d1      	b.n	800530c <UART_SetConfig+0x390>
 8005168:	231b      	movs	r3, #27
 800516a:	2220      	movs	r2, #32
 800516c:	189b      	adds	r3, r3, r2
 800516e:	19db      	adds	r3, r3, r7
 8005170:	2210      	movs	r2, #16
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	e0ca      	b.n	800530c <UART_SetConfig+0x390>
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a57      	ldr	r2, [pc, #348]	; (80052d8 <UART_SetConfig+0x35c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d106      	bne.n	800518e <UART_SetConfig+0x212>
 8005180:	231b      	movs	r3, #27
 8005182:	2220      	movs	r2, #32
 8005184:	189b      	adds	r3, r3, r2
 8005186:	19db      	adds	r3, r3, r7
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e0be      	b.n	800530c <UART_SetConfig+0x390>
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a52      	ldr	r2, [pc, #328]	; (80052dc <UART_SetConfig+0x360>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d106      	bne.n	80051a6 <UART_SetConfig+0x22a>
 8005198:	231b      	movs	r3, #27
 800519a:	2220      	movs	r2, #32
 800519c:	189b      	adds	r3, r3, r2
 800519e:	19db      	adds	r3, r3, r7
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e0b2      	b.n	800530c <UART_SetConfig+0x390>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a4d      	ldr	r2, [pc, #308]	; (80052e0 <UART_SetConfig+0x364>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d106      	bne.n	80051be <UART_SetConfig+0x242>
 80051b0:	231b      	movs	r3, #27
 80051b2:	2220      	movs	r2, #32
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	19db      	adds	r3, r3, r7
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e0a6      	b.n	800530c <UART_SetConfig+0x390>
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3e      	ldr	r2, [pc, #248]	; (80052bc <UART_SetConfig+0x340>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d13e      	bne.n	8005246 <UART_SetConfig+0x2ca>
 80051c8:	4b40      	ldr	r3, [pc, #256]	; (80052cc <UART_SetConfig+0x350>)
 80051ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051cc:	23c0      	movs	r3, #192	; 0xc0
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	4013      	ands	r3, r2
 80051d2:	22c0      	movs	r2, #192	; 0xc0
 80051d4:	0112      	lsls	r2, r2, #4
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d027      	beq.n	800522a <UART_SetConfig+0x2ae>
 80051da:	22c0      	movs	r2, #192	; 0xc0
 80051dc:	0112      	lsls	r2, r2, #4
 80051de:	4293      	cmp	r3, r2
 80051e0:	d82a      	bhi.n	8005238 <UART_SetConfig+0x2bc>
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	0112      	lsls	r2, r2, #4
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d011      	beq.n	800520e <UART_SetConfig+0x292>
 80051ea:	2280      	movs	r2, #128	; 0x80
 80051ec:	0112      	lsls	r2, r2, #4
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d822      	bhi.n	8005238 <UART_SetConfig+0x2bc>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d004      	beq.n	8005200 <UART_SetConfig+0x284>
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	00d2      	lsls	r2, r2, #3
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <UART_SetConfig+0x2a0>
 80051fe:	e01b      	b.n	8005238 <UART_SetConfig+0x2bc>
 8005200:	231b      	movs	r3, #27
 8005202:	2220      	movs	r2, #32
 8005204:	189b      	adds	r3, r3, r2
 8005206:	19db      	adds	r3, r3, r7
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e07e      	b.n	800530c <UART_SetConfig+0x390>
 800520e:	231b      	movs	r3, #27
 8005210:	2220      	movs	r2, #32
 8005212:	189b      	adds	r3, r3, r2
 8005214:	19db      	adds	r3, r3, r7
 8005216:	2202      	movs	r2, #2
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e077      	b.n	800530c <UART_SetConfig+0x390>
 800521c:	231b      	movs	r3, #27
 800521e:	2220      	movs	r2, #32
 8005220:	189b      	adds	r3, r3, r2
 8005222:	19db      	adds	r3, r3, r7
 8005224:	2204      	movs	r2, #4
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	e070      	b.n	800530c <UART_SetConfig+0x390>
 800522a:	231b      	movs	r3, #27
 800522c:	2220      	movs	r2, #32
 800522e:	189b      	adds	r3, r3, r2
 8005230:	19db      	adds	r3, r3, r7
 8005232:	2208      	movs	r2, #8
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e069      	b.n	800530c <UART_SetConfig+0x390>
 8005238:	231b      	movs	r3, #27
 800523a:	2220      	movs	r2, #32
 800523c:	189b      	adds	r3, r3, r2
 800523e:	19db      	adds	r3, r3, r7
 8005240:	2210      	movs	r2, #16
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	e062      	b.n	800530c <UART_SetConfig+0x390>
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1d      	ldr	r2, [pc, #116]	; (80052c0 <UART_SetConfig+0x344>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d157      	bne.n	8005300 <UART_SetConfig+0x384>
 8005250:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <UART_SetConfig+0x350>)
 8005252:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005254:	23c0      	movs	r3, #192	; 0xc0
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4013      	ands	r3, r2
 800525a:	22c0      	movs	r2, #192	; 0xc0
 800525c:	0092      	lsls	r2, r2, #2
 800525e:	4293      	cmp	r3, r2
 8005260:	d040      	beq.n	80052e4 <UART_SetConfig+0x368>
 8005262:	22c0      	movs	r2, #192	; 0xc0
 8005264:	0092      	lsls	r2, r2, #2
 8005266:	4293      	cmp	r3, r2
 8005268:	d843      	bhi.n	80052f2 <UART_SetConfig+0x376>
 800526a:	2280      	movs	r2, #128	; 0x80
 800526c:	0092      	lsls	r2, r2, #2
 800526e:	4293      	cmp	r3, r2
 8005270:	d011      	beq.n	8005296 <UART_SetConfig+0x31a>
 8005272:	2280      	movs	r2, #128	; 0x80
 8005274:	0092      	lsls	r2, r2, #2
 8005276:	4293      	cmp	r3, r2
 8005278:	d83b      	bhi.n	80052f2 <UART_SetConfig+0x376>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <UART_SetConfig+0x30c>
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	0052      	lsls	r2, r2, #1
 8005282:	4293      	cmp	r3, r2
 8005284:	d00e      	beq.n	80052a4 <UART_SetConfig+0x328>
 8005286:	e034      	b.n	80052f2 <UART_SetConfig+0x376>
 8005288:	231b      	movs	r3, #27
 800528a:	2220      	movs	r2, #32
 800528c:	189b      	adds	r3, r3, r2
 800528e:	19db      	adds	r3, r3, r7
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e03a      	b.n	800530c <UART_SetConfig+0x390>
 8005296:	231b      	movs	r3, #27
 8005298:	2220      	movs	r2, #32
 800529a:	189b      	adds	r3, r3, r2
 800529c:	19db      	adds	r3, r3, r7
 800529e:	2202      	movs	r2, #2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e033      	b.n	800530c <UART_SetConfig+0x390>
 80052a4:	231b      	movs	r3, #27
 80052a6:	2220      	movs	r2, #32
 80052a8:	189b      	adds	r3, r3, r2
 80052aa:	19db      	adds	r3, r3, r7
 80052ac:	2204      	movs	r2, #4
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e02c      	b.n	800530c <UART_SetConfig+0x390>
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	cfff69f3 	.word	0xcfff69f3
 80052b8:	ffffcfff 	.word	0xffffcfff
 80052bc:	40008000 	.word	0x40008000
 80052c0:	40008400 	.word	0x40008400
 80052c4:	11fff4ff 	.word	0x11fff4ff
 80052c8:	40013800 	.word	0x40013800
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40004400 	.word	0x40004400
 80052d4:	40004800 	.word	0x40004800
 80052d8:	40004c00 	.word	0x40004c00
 80052dc:	40005000 	.word	0x40005000
 80052e0:	40013c00 	.word	0x40013c00
 80052e4:	231b      	movs	r3, #27
 80052e6:	2220      	movs	r2, #32
 80052e8:	189b      	adds	r3, r3, r2
 80052ea:	19db      	adds	r3, r3, r7
 80052ec:	2208      	movs	r2, #8
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	e00c      	b.n	800530c <UART_SetConfig+0x390>
 80052f2:	231b      	movs	r3, #27
 80052f4:	2220      	movs	r2, #32
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	19db      	adds	r3, r3, r7
 80052fa:	2210      	movs	r2, #16
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	e005      	b.n	800530c <UART_SetConfig+0x390>
 8005300:	231b      	movs	r3, #27
 8005302:	2220      	movs	r2, #32
 8005304:	189b      	adds	r3, r3, r2
 8005306:	19db      	adds	r3, r3, r7
 8005308:	2210      	movs	r2, #16
 800530a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4ac1      	ldr	r2, [pc, #772]	; (8005618 <UART_SetConfig+0x69c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d005      	beq.n	8005322 <UART_SetConfig+0x3a6>
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4ac0      	ldr	r2, [pc, #768]	; (800561c <UART_SetConfig+0x6a0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d000      	beq.n	8005322 <UART_SetConfig+0x3a6>
 8005320:	e093      	b.n	800544a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005322:	231b      	movs	r3, #27
 8005324:	2220      	movs	r2, #32
 8005326:	189b      	adds	r3, r3, r2
 8005328:	19db      	adds	r3, r3, r7
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d015      	beq.n	800535c <UART_SetConfig+0x3e0>
 8005330:	dc18      	bgt.n	8005364 <UART_SetConfig+0x3e8>
 8005332:	2b04      	cmp	r3, #4
 8005334:	d00d      	beq.n	8005352 <UART_SetConfig+0x3d6>
 8005336:	dc15      	bgt.n	8005364 <UART_SetConfig+0x3e8>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <UART_SetConfig+0x3c6>
 800533c:	2b02      	cmp	r3, #2
 800533e:	d005      	beq.n	800534c <UART_SetConfig+0x3d0>
 8005340:	e010      	b.n	8005364 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005342:	f7fe f81f 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 8005346:	0003      	movs	r3, r0
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800534a:	e014      	b.n	8005376 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800534c:	4bb4      	ldr	r3, [pc, #720]	; (8005620 <UART_SetConfig+0x6a4>)
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005350:	e011      	b.n	8005376 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005352:	f7fd ff8b 	bl	800326c <HAL_RCC_GetSysClockFreq>
 8005356:	0003      	movs	r3, r0
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800535a:	e00c      	b.n	8005376 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005362:	e008      	b.n	8005376 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005368:	231a      	movs	r3, #26
 800536a:	2220      	movs	r2, #32
 800536c:	189b      	adds	r3, r3, r2
 800536e:	19db      	adds	r3, r3, r7
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
        break;
 8005374:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005378:	2b00      	cmp	r3, #0
 800537a:	d100      	bne.n	800537e <UART_SetConfig+0x402>
 800537c:	e135      	b.n	80055ea <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005382:	4ba8      	ldr	r3, [pc, #672]	; (8005624 <UART_SetConfig+0x6a8>)
 8005384:	0052      	lsls	r2, r2, #1
 8005386:	5ad3      	ldrh	r3, [r2, r3]
 8005388:	0019      	movs	r1, r3
 800538a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800538c:	f7fa fecc 	bl	8000128 <__udivsi3>
 8005390:	0003      	movs	r3, r0
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	0013      	movs	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	189b      	adds	r3, r3, r2
 800539e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d305      	bcc.n	80053b0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d906      	bls.n	80053be <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80053b0:	231a      	movs	r3, #26
 80053b2:	2220      	movs	r2, #32
 80053b4:	189b      	adds	r3, r3, r2
 80053b6:	19db      	adds	r3, r3, r7
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e044      	b.n	8005448 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ca:	4b96      	ldr	r3, [pc, #600]	; (8005624 <UART_SetConfig+0x6a8>)
 80053cc:	0052      	lsls	r2, r2, #1
 80053ce:	5ad3      	ldrh	r3, [r2, r3]
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	69b8      	ldr	r0, [r7, #24]
 80053dc:	69f9      	ldr	r1, [r7, #28]
 80053de:	f7fb f819 	bl	8000414 <__aeabi_uldivmod>
 80053e2:	0002      	movs	r2, r0
 80053e4:	000b      	movs	r3, r1
 80053e6:	0e11      	lsrs	r1, r2, #24
 80053e8:	021d      	lsls	r5, r3, #8
 80053ea:	430d      	orrs	r5, r1
 80053ec:	0214      	lsls	r4, r2, #8
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68b8      	ldr	r0, [r7, #8]
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	1900      	adds	r0, r0, r4
 8005400:	4169      	adcs	r1, r5
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	2300      	movs	r3, #0
 800540a:	607b      	str	r3, [r7, #4]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f7fb f800 	bl	8000414 <__aeabi_uldivmod>
 8005414:	0002      	movs	r2, r0
 8005416:	000b      	movs	r3, r1
 8005418:	0013      	movs	r3, r2
 800541a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800541c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541e:	23c0      	movs	r3, #192	; 0xc0
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	429a      	cmp	r2, r3
 8005424:	d309      	bcc.n	800543a <UART_SetConfig+0x4be>
 8005426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	035b      	lsls	r3, r3, #13
 800542c:	429a      	cmp	r2, r3
 800542e:	d204      	bcs.n	800543a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005436:	60da      	str	r2, [r3, #12]
 8005438:	e006      	b.n	8005448 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800543a:	231a      	movs	r3, #26
 800543c:	2220      	movs	r2, #32
 800543e:	189b      	adds	r3, r3, r2
 8005440:	19db      	adds	r3, r3, r7
 8005442:	2201      	movs	r2, #1
 8005444:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005446:	e0d0      	b.n	80055ea <UART_SetConfig+0x66e>
 8005448:	e0cf      	b.n	80055ea <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	429a      	cmp	r2, r3
 8005454:	d000      	beq.n	8005458 <UART_SetConfig+0x4dc>
 8005456:	e070      	b.n	800553a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005458:	231b      	movs	r3, #27
 800545a:	2220      	movs	r2, #32
 800545c:	189b      	adds	r3, r3, r2
 800545e:	19db      	adds	r3, r3, r7
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b08      	cmp	r3, #8
 8005464:	d015      	beq.n	8005492 <UART_SetConfig+0x516>
 8005466:	dc18      	bgt.n	800549a <UART_SetConfig+0x51e>
 8005468:	2b04      	cmp	r3, #4
 800546a:	d00d      	beq.n	8005488 <UART_SetConfig+0x50c>
 800546c:	dc15      	bgt.n	800549a <UART_SetConfig+0x51e>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <UART_SetConfig+0x4fc>
 8005472:	2b02      	cmp	r3, #2
 8005474:	d005      	beq.n	8005482 <UART_SetConfig+0x506>
 8005476:	e010      	b.n	800549a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005478:	f7fd ff84 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 800547c:	0003      	movs	r3, r0
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005480:	e014      	b.n	80054ac <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005482:	4b67      	ldr	r3, [pc, #412]	; (8005620 <UART_SetConfig+0x6a4>)
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005486:	e011      	b.n	80054ac <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005488:	f7fd fef0 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800548c:	0003      	movs	r3, r0
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005490:	e00c      	b.n	80054ac <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005498:	e008      	b.n	80054ac <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800549e:	231a      	movs	r3, #26
 80054a0:	2220      	movs	r2, #32
 80054a2:	189b      	adds	r3, r3, r2
 80054a4:	19db      	adds	r3, r3, r7
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
        break;
 80054aa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d100      	bne.n	80054b4 <UART_SetConfig+0x538>
 80054b2:	e09a      	b.n	80055ea <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b8:	4b5a      	ldr	r3, [pc, #360]	; (8005624 <UART_SetConfig+0x6a8>)
 80054ba:	0052      	lsls	r2, r2, #1
 80054bc:	5ad3      	ldrh	r3, [r2, r3]
 80054be:	0019      	movs	r1, r3
 80054c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054c2:	f7fa fe31 	bl	8000128 <__udivsi3>
 80054c6:	0003      	movs	r3, r0
 80054c8:	005a      	lsls	r2, r3, #1
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	18d2      	adds	r2, r2, r3
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	0019      	movs	r1, r3
 80054d8:	0010      	movs	r0, r2
 80054da:	f7fa fe25 	bl	8000128 <__udivsi3>
 80054de:	0003      	movs	r3, r0
 80054e0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	2b0f      	cmp	r3, #15
 80054e6:	d921      	bls.n	800552c <UART_SetConfig+0x5b0>
 80054e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	025b      	lsls	r3, r3, #9
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d21c      	bcs.n	800552c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	200e      	movs	r0, #14
 80054f8:	2420      	movs	r4, #32
 80054fa:	1903      	adds	r3, r0, r4
 80054fc:	19db      	adds	r3, r3, r7
 80054fe:	210f      	movs	r1, #15
 8005500:	438a      	bics	r2, r1
 8005502:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	b29b      	uxth	r3, r3
 800550a:	2207      	movs	r2, #7
 800550c:	4013      	ands	r3, r2
 800550e:	b299      	uxth	r1, r3
 8005510:	1903      	adds	r3, r0, r4
 8005512:	19db      	adds	r3, r3, r7
 8005514:	1902      	adds	r2, r0, r4
 8005516:	19d2      	adds	r2, r2, r7
 8005518:	8812      	ldrh	r2, [r2, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	1902      	adds	r2, r0, r4
 8005524:	19d2      	adds	r2, r2, r7
 8005526:	8812      	ldrh	r2, [r2, #0]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	e05e      	b.n	80055ea <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800552c:	231a      	movs	r3, #26
 800552e:	2220      	movs	r2, #32
 8005530:	189b      	adds	r3, r3, r2
 8005532:	19db      	adds	r3, r3, r7
 8005534:	2201      	movs	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e057      	b.n	80055ea <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800553a:	231b      	movs	r3, #27
 800553c:	2220      	movs	r2, #32
 800553e:	189b      	adds	r3, r3, r2
 8005540:	19db      	adds	r3, r3, r7
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d015      	beq.n	8005574 <UART_SetConfig+0x5f8>
 8005548:	dc18      	bgt.n	800557c <UART_SetConfig+0x600>
 800554a:	2b04      	cmp	r3, #4
 800554c:	d00d      	beq.n	800556a <UART_SetConfig+0x5ee>
 800554e:	dc15      	bgt.n	800557c <UART_SetConfig+0x600>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <UART_SetConfig+0x5de>
 8005554:	2b02      	cmp	r3, #2
 8005556:	d005      	beq.n	8005564 <UART_SetConfig+0x5e8>
 8005558:	e010      	b.n	800557c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800555a:	f7fd ff13 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 800555e:	0003      	movs	r3, r0
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005562:	e014      	b.n	800558e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005564:	4b2e      	ldr	r3, [pc, #184]	; (8005620 <UART_SetConfig+0x6a4>)
 8005566:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005568:	e011      	b.n	800558e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556a:	f7fd fe7f 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800556e:	0003      	movs	r3, r0
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005572:	e00c      	b.n	800558e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800557a:	e008      	b.n	800558e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005580:	231a      	movs	r3, #26
 8005582:	2220      	movs	r2, #32
 8005584:	189b      	adds	r3, r3, r2
 8005586:	19db      	adds	r3, r3, r7
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
        break;
 800558c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02a      	beq.n	80055ea <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005598:	4b22      	ldr	r3, [pc, #136]	; (8005624 <UART_SetConfig+0x6a8>)
 800559a:	0052      	lsls	r2, r2, #1
 800559c:	5ad3      	ldrh	r3, [r2, r3]
 800559e:	0019      	movs	r1, r3
 80055a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80055a2:	f7fa fdc1 	bl	8000128 <__udivsi3>
 80055a6:	0003      	movs	r3, r0
 80055a8:	001a      	movs	r2, r3
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	18d2      	adds	r2, r2, r3
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	0019      	movs	r1, r3
 80055b8:	0010      	movs	r0, r2
 80055ba:	f7fa fdb5 	bl	8000128 <__udivsi3>
 80055be:	0003      	movs	r3, r0
 80055c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2b0f      	cmp	r3, #15
 80055c6:	d90a      	bls.n	80055de <UART_SetConfig+0x662>
 80055c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	025b      	lsls	r3, r3, #9
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d205      	bcs.n	80055de <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	e005      	b.n	80055ea <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80055de:	231a      	movs	r3, #26
 80055e0:	2220      	movs	r2, #32
 80055e2:	189b      	adds	r3, r3, r2
 80055e4:	19db      	adds	r3, r3, r7
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	226a      	movs	r2, #106	; 0x6a
 80055ee:	2101      	movs	r1, #1
 80055f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	2268      	movs	r2, #104	; 0x68
 80055f6:	2101      	movs	r1, #1
 80055f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	2200      	movs	r2, #0
 80055fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2200      	movs	r2, #0
 8005604:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005606:	231a      	movs	r3, #26
 8005608:	2220      	movs	r2, #32
 800560a:	189b      	adds	r3, r3, r2
 800560c:	19db      	adds	r3, r3, r7
 800560e:	781b      	ldrb	r3, [r3, #0]
}
 8005610:	0018      	movs	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	b010      	add	sp, #64	; 0x40
 8005616:	bdb0      	pop	{r4, r5, r7, pc}
 8005618:	40008000 	.word	0x40008000
 800561c:	40008400 	.word	0x40008400
 8005620:	00f42400 	.word	0x00f42400
 8005624:	08007778 	.word	0x08007778

08005628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	2201      	movs	r2, #1
 8005636:	4013      	ands	r3, r2
 8005638:	d00b      	beq.n	8005652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a4a      	ldr	r2, [pc, #296]	; (800576c <UART_AdvFeatureConfig+0x144>)
 8005642:	4013      	ands	r3, r2
 8005644:	0019      	movs	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	2202      	movs	r2, #2
 8005658:	4013      	ands	r3, r2
 800565a:	d00b      	beq.n	8005674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	4a43      	ldr	r2, [pc, #268]	; (8005770 <UART_AdvFeatureConfig+0x148>)
 8005664:	4013      	ands	r3, r2
 8005666:	0019      	movs	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	2204      	movs	r2, #4
 800567a:	4013      	ands	r3, r2
 800567c:	d00b      	beq.n	8005696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	4a3b      	ldr	r2, [pc, #236]	; (8005774 <UART_AdvFeatureConfig+0x14c>)
 8005686:	4013      	ands	r3, r2
 8005688:	0019      	movs	r1, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	2208      	movs	r2, #8
 800569c:	4013      	ands	r3, r2
 800569e:	d00b      	beq.n	80056b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4a34      	ldr	r2, [pc, #208]	; (8005778 <UART_AdvFeatureConfig+0x150>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	0019      	movs	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	2210      	movs	r2, #16
 80056be:	4013      	ands	r3, r2
 80056c0:	d00b      	beq.n	80056da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a2c      	ldr	r2, [pc, #176]	; (800577c <UART_AdvFeatureConfig+0x154>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	0019      	movs	r1, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	2220      	movs	r2, #32
 80056e0:	4013      	ands	r3, r2
 80056e2:	d00b      	beq.n	80056fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	4a25      	ldr	r2, [pc, #148]	; (8005780 <UART_AdvFeatureConfig+0x158>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	0019      	movs	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	2240      	movs	r2, #64	; 0x40
 8005702:	4013      	ands	r3, r2
 8005704:	d01d      	beq.n	8005742 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <UART_AdvFeatureConfig+0x15c>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	035b      	lsls	r3, r3, #13
 8005726:	429a      	cmp	r2, r3
 8005728:	d10b      	bne.n	8005742 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	4a15      	ldr	r2, [pc, #84]	; (8005788 <UART_AdvFeatureConfig+0x160>)
 8005732:	4013      	ands	r3, r2
 8005734:	0019      	movs	r1, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	2280      	movs	r2, #128	; 0x80
 8005748:	4013      	ands	r3, r2
 800574a:	d00b      	beq.n	8005764 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	4a0e      	ldr	r2, [pc, #56]	; (800578c <UART_AdvFeatureConfig+0x164>)
 8005754:	4013      	ands	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	605a      	str	r2, [r3, #4]
  }
}
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	46bd      	mov	sp, r7
 8005768:	b002      	add	sp, #8
 800576a:	bd80      	pop	{r7, pc}
 800576c:	fffdffff 	.word	0xfffdffff
 8005770:	fffeffff 	.word	0xfffeffff
 8005774:	fffbffff 	.word	0xfffbffff
 8005778:	ffff7fff 	.word	0xffff7fff
 800577c:	ffffefff 	.word	0xffffefff
 8005780:	ffffdfff 	.word	0xffffdfff
 8005784:	ffefffff 	.word	0xffefffff
 8005788:	ff9fffff 	.word	0xff9fffff
 800578c:	fff7ffff 	.word	0xfff7ffff

08005790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af02      	add	r7, sp, #8
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	228c      	movs	r2, #140	; 0x8c
 800579c:	2100      	movs	r1, #0
 800579e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057a0:	f7fc fd3c 	bl	800221c <HAL_GetTick>
 80057a4:	0003      	movs	r3, r0
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2208      	movs	r2, #8
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d10c      	bne.n	80057d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	0391      	lsls	r1, r2, #14
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <UART_CheckIdleState+0x90>)
 80057c0:	9200      	str	r2, [sp, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f000 f82e 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 80057c8:	1e03      	subs	r3, r0, #0
 80057ca:	d001      	beq.n	80057d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e023      	b.n	8005818 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2204      	movs	r2, #4
 80057d8:	4013      	ands	r3, r2
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d10c      	bne.n	80057f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2280      	movs	r2, #128	; 0x80
 80057e2:	03d1      	lsls	r1, r2, #15
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4a0e      	ldr	r2, [pc, #56]	; (8005820 <UART_CheckIdleState+0x90>)
 80057e8:	9200      	str	r2, [sp, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f000 f81a 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 80057f0:	1e03      	subs	r3, r0, #0
 80057f2:	d001      	beq.n	80057f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e00f      	b.n	8005818 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2284      	movs	r2, #132	; 0x84
 80057fc:	2120      	movs	r1, #32
 80057fe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2288      	movs	r2, #136	; 0x88
 8005804:	2120      	movs	r1, #32
 8005806:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	2100      	movs	r1, #0
 8005814:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	0018      	movs	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	b004      	add	sp, #16
 800581e:	bd80      	pop	{r7, pc}
 8005820:	01ffffff 	.word	0x01ffffff

08005824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b094      	sub	sp, #80	; 0x50
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	1dfb      	adds	r3, r7, #7
 8005832:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005834:	e0a7      	b.n	8005986 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005838:	3301      	adds	r3, #1
 800583a:	d100      	bne.n	800583e <UART_WaitOnFlagUntilTimeout+0x1a>
 800583c:	e0a3      	b.n	8005986 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583e:	f7fc fced 	bl	800221c <HAL_GetTick>
 8005842:	0002      	movs	r2, r0
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <UART_WaitOnFlagUntilTimeout+0x30>
 800584e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005850:	2b00      	cmp	r3, #0
 8005852:	d13f      	bne.n	80058d4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005854:	f3ef 8310 	mrs	r3, PRIMASK
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800585c:	647b      	str	r3, [r7, #68]	; 0x44
 800585e:	2301      	movs	r3, #1
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005864:	f383 8810 	msr	PRIMASK, r3
}
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	494e      	ldr	r1, [pc, #312]	; (80059b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005876:	400a      	ands	r2, r1
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	f383 8810 	msr	PRIMASK, r3
}
 8005884:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005886:	f3ef 8310 	mrs	r3, PRIMASK
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	643b      	str	r3, [r7, #64]	; 0x40
 8005890:	2301      	movs	r3, #1
 8005892:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	f383 8810 	msr	PRIMASK, r3
}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2101      	movs	r1, #1
 80058a8:	438a      	bics	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b2:	f383 8810 	msr	PRIMASK, r3
}
 80058b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2284      	movs	r2, #132	; 0x84
 80058bc:	2120      	movs	r1, #32
 80058be:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2288      	movs	r2, #136	; 0x88
 80058c4:	2120      	movs	r1, #32
 80058c6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2280      	movs	r2, #128	; 0x80
 80058cc:	2100      	movs	r1, #0
 80058ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e069      	b.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2204      	movs	r2, #4
 80058dc:	4013      	ands	r3, r2
 80058de:	d052      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	2380      	movs	r3, #128	; 0x80
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	401a      	ands	r2, r3
 80058ec:	2380      	movs	r3, #128	; 0x80
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d148      	bne.n	8005986 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	0112      	lsls	r2, r2, #4
 80058fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005902:	613b      	str	r3, [r7, #16]
  return(result);
 8005904:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f383 8810 	msr	PRIMASK, r3
}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4924      	ldr	r1, [pc, #144]	; (80059b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005920:	400a      	ands	r2, r1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005926:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f383 8810 	msr	PRIMASK, r3
}
 800592e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005930:	f3ef 8310 	mrs	r3, PRIMASK
 8005934:	61fb      	str	r3, [r7, #28]
  return(result);
 8005936:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	64bb      	str	r3, [r7, #72]	; 0x48
 800593a:	2301      	movs	r3, #1
 800593c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	f383 8810 	msr	PRIMASK, r3
}
 8005944:	46c0      	nop			; (mov r8, r8)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2101      	movs	r1, #1
 8005952:	438a      	bics	r2, r1
 8005954:	609a      	str	r2, [r3, #8]
 8005956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	f383 8810 	msr	PRIMASK, r3
}
 8005960:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2284      	movs	r2, #132	; 0x84
 8005966:	2120      	movs	r1, #32
 8005968:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2288      	movs	r2, #136	; 0x88
 800596e:	2120      	movs	r1, #32
 8005970:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	228c      	movs	r2, #140	; 0x8c
 8005976:	2120      	movs	r1, #32
 8005978:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2280      	movs	r2, #128	; 0x80
 800597e:	2100      	movs	r1, #0
 8005980:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e010      	b.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	4013      	ands	r3, r2
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	425a      	negs	r2, r3
 8005996:	4153      	adcs	r3, r2
 8005998:	b2db      	uxtb	r3, r3
 800599a:	001a      	movs	r2, r3
 800599c:	1dfb      	adds	r3, r7, #7
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d100      	bne.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80059a4:	e747      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b014      	add	sp, #80	; 0x50
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	fffffe5f 	.word	0xfffffe5f

080059b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b098      	sub	sp, #96	; 0x60
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	1dbb      	adds	r3, r7, #6
 80059c0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	1dba      	adds	r2, r7, #6
 80059cc:	215c      	movs	r1, #92	; 0x5c
 80059ce:	8812      	ldrh	r2, [r2, #0]
 80059d0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1dba      	adds	r2, r7, #6
 80059d6:	215e      	movs	r1, #94	; 0x5e
 80059d8:	8812      	ldrh	r2, [r2, #0]
 80059da:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	2380      	movs	r3, #128	; 0x80
 80059e8:	015b      	lsls	r3, r3, #5
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d10d      	bne.n	8005a0a <UART_Start_Receive_IT+0x56>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <UART_Start_Receive_IT+0x4c>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2260      	movs	r2, #96	; 0x60
 80059fa:	497f      	ldr	r1, [pc, #508]	; (8005bf8 <UART_Start_Receive_IT+0x244>)
 80059fc:	5299      	strh	r1, [r3, r2]
 80059fe:	e02e      	b.n	8005a5e <UART_Start_Receive_IT+0xaa>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2260      	movs	r2, #96	; 0x60
 8005a04:	21ff      	movs	r1, #255	; 0xff
 8005a06:	5299      	strh	r1, [r3, r2]
 8005a08:	e029      	b.n	8005a5e <UART_Start_Receive_IT+0xaa>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10d      	bne.n	8005a2e <UART_Start_Receive_IT+0x7a>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <UART_Start_Receive_IT+0x70>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2260      	movs	r2, #96	; 0x60
 8005a1e:	21ff      	movs	r1, #255	; 0xff
 8005a20:	5299      	strh	r1, [r3, r2]
 8005a22:	e01c      	b.n	8005a5e <UART_Start_Receive_IT+0xaa>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2260      	movs	r2, #96	; 0x60
 8005a28:	217f      	movs	r1, #127	; 0x7f
 8005a2a:	5299      	strh	r1, [r3, r2]
 8005a2c:	e017      	b.n	8005a5e <UART_Start_Receive_IT+0xaa>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	055b      	lsls	r3, r3, #21
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d10d      	bne.n	8005a56 <UART_Start_Receive_IT+0xa2>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <UART_Start_Receive_IT+0x98>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2260      	movs	r2, #96	; 0x60
 8005a46:	217f      	movs	r1, #127	; 0x7f
 8005a48:	5299      	strh	r1, [r3, r2]
 8005a4a:	e008      	b.n	8005a5e <UART_Start_Receive_IT+0xaa>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2260      	movs	r2, #96	; 0x60
 8005a50:	213f      	movs	r1, #63	; 0x3f
 8005a52:	5299      	strh	r1, [r3, r2]
 8005a54:	e003      	b.n	8005a5e <UART_Start_Receive_IT+0xaa>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2260      	movs	r2, #96	; 0x60
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	228c      	movs	r2, #140	; 0x8c
 8005a62:	2100      	movs	r1, #0
 8005a64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2288      	movs	r2, #136	; 0x88
 8005a6a:	2122      	movs	r1, #34	; 0x22
 8005a6c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a72:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a78:	2301      	movs	r3, #1
 8005a7a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	f383 8810 	msr	PRIMASK, r3
}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2101      	movs	r1, #1
 8005a90:	430a      	orrs	r2, r1
 8005a92:	609a      	str	r2, [r3, #8]
 8005a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a96:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9a:	f383 8810 	msr	PRIMASK, r3
}
 8005a9e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005aa4:	2380      	movs	r3, #128	; 0x80
 8005aa6:	059b      	lsls	r3, r3, #22
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d154      	bne.n	8005b56 <UART_Start_Receive_IT+0x1a2>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2268      	movs	r2, #104	; 0x68
 8005ab0:	5a9b      	ldrh	r3, [r3, r2]
 8005ab2:	1dba      	adds	r2, r7, #6
 8005ab4:	8812      	ldrh	r2, [r2, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d34d      	bcc.n	8005b56 <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	2380      	movs	r3, #128	; 0x80
 8005ac0:	015b      	lsls	r3, r3, #5
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d107      	bne.n	8005ad6 <UART_Start_Receive_IT+0x122>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a4a      	ldr	r2, [pc, #296]	; (8005bfc <UART_Start_Receive_IT+0x248>)
 8005ad2:	671a      	str	r2, [r3, #112]	; 0x70
 8005ad4:	e002      	b.n	8005adc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4a49      	ldr	r2, [pc, #292]	; (8005c00 <UART_Start_Receive_IT+0x24c>)
 8005ada:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d019      	beq.n	8005b20 <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aec:	f3ef 8310 	mrs	r3, PRIMASK
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af6:	2301      	movs	r3, #1
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	f383 8810 	msr	PRIMASK, r3
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2180      	movs	r1, #128	; 0x80
 8005b0e:	0049      	lsls	r1, r1, #1
 8005b10:	430a      	orrs	r2, r1
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1a:	f383 8810 	msr	PRIMASK, r3
}
 8005b1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b20:	f3ef 8310 	mrs	r3, PRIMASK
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b28:	657b      	str	r3, [r7, #84]	; 0x54
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	f383 8810 	msr	PRIMASK, r3
}
 8005b34:	46c0      	nop			; (mov r8, r8)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2180      	movs	r1, #128	; 0x80
 8005b42:	0549      	lsls	r1, r1, #21
 8005b44:	430a      	orrs	r2, r1
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	f383 8810 	msr	PRIMASK, r3
}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	e04b      	b.n	8005bee <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	015b      	lsls	r3, r3, #5
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d107      	bne.n	8005b72 <UART_Start_Receive_IT+0x1be>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <UART_Start_Receive_IT+0x250>)
 8005b6e:	671a      	str	r2, [r3, #112]	; 0x70
 8005b70:	e002      	b.n	8005b78 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4a24      	ldr	r2, [pc, #144]	; (8005c08 <UART_Start_Receive_IT+0x254>)
 8005b76:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d019      	beq.n	8005bbc <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b88:	f3ef 8310 	mrs	r3, PRIMASK
 8005b8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b8e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b92:	2301      	movs	r3, #1
 8005b94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	f383 8810 	msr	PRIMASK, r3
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2190      	movs	r1, #144	; 0x90
 8005baa:	0049      	lsls	r1, r1, #1
 8005bac:	430a      	orrs	r2, r1
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	f383 8810 	msr	PRIMASK, r3
}
 8005bba:	e018      	b.n	8005bee <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc0:	613b      	str	r3, [r7, #16]
  return(result);
 8005bc2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f383 8810 	msr	PRIMASK, r3
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2120      	movs	r1, #32
 8005bde:	430a      	orrs	r2, r1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f383 8810 	msr	PRIMASK, r3
}
 8005bec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b018      	add	sp, #96	; 0x60
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	000001ff 	.word	0x000001ff
 8005bfc:	0800631d 	.word	0x0800631d
 8005c00:	08006039 	.word	0x08006039
 8005c04:	08005ecd 	.word	0x08005ecd
 8005c08:	08005d61 	.word	0x08005d61

08005c0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	; 0x38
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c14:	f3ef 8310 	mrs	r3, PRIMASK
 8005c18:	617b      	str	r3, [r7, #20]
  return(result);
 8005c1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1e:	2301      	movs	r3, #1
 8005c20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	f383 8810 	msr	PRIMASK, r3
}
 8005c28:	46c0      	nop			; (mov r8, r8)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4926      	ldr	r1, [pc, #152]	; (8005cd0 <UART_EndRxTransfer+0xc4>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f383 8810 	msr	PRIMASK, r3
}
 8005c44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c46:	f3ef 8310 	mrs	r3, PRIMASK
 8005c4a:	623b      	str	r3, [r7, #32]
  return(result);
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c50:	2301      	movs	r3, #1
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	f383 8810 	msr	PRIMASK, r3
}
 8005c5a:	46c0      	nop			; (mov r8, r8)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	491b      	ldr	r1, [pc, #108]	; (8005cd4 <UART_EndRxTransfer+0xc8>)
 8005c68:	400a      	ands	r2, r1
 8005c6a:	609a      	str	r2, [r3, #8]
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	f383 8810 	msr	PRIMASK, r3
}
 8005c76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d118      	bne.n	8005cb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c80:	f3ef 8310 	mrs	r3, PRIMASK
 8005c84:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			; (mov r8, r8)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2110      	movs	r1, #16
 8005ca2:	438a      	bics	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f383 8810 	msr	PRIMASK, r3
}
 8005cb0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2288      	movs	r2, #136	; 0x88
 8005cb6:	2120      	movs	r1, #32
 8005cb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	b00e      	add	sp, #56	; 0x38
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	fffffedf 	.word	0xfffffedf
 8005cd4:	effffffe 	.word	0xeffffffe

08005cd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	225e      	movs	r2, #94	; 0x5e
 8005cea:	2100      	movs	r1, #0
 8005cec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2256      	movs	r2, #86	; 0x56
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f7ff f92b 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b004      	add	sp, #16
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d14:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	2301      	movs	r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f383 8810 	msr	PRIMASK, r3
}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2140      	movs	r1, #64	; 0x40
 8005d30:	438a      	bics	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f383 8810 	msr	PRIMASK, r3
}
 8005d3e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2284      	movs	r2, #132	; 0x84
 8005d44:	2120      	movs	r1, #32
 8005d46:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7ff f8f7 	bl	8004f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b006      	add	sp, #24
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b090      	sub	sp, #64	; 0x40
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d68:	203e      	movs	r0, #62	; 0x3e
 8005d6a:	183b      	adds	r3, r7, r0
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	2160      	movs	r1, #96	; 0x60
 8005d70:	5a52      	ldrh	r2, [r2, r1]
 8005d72:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2288      	movs	r2, #136	; 0x88
 8005d78:	589b      	ldr	r3, [r3, r2]
 8005d7a:	2b22      	cmp	r3, #34	; 0x22
 8005d7c:	d000      	beq.n	8005d80 <UART_RxISR_8BIT+0x20>
 8005d7e:	e097      	b.n	8005eb0 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d86:	213c      	movs	r1, #60	; 0x3c
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d8c:	187b      	adds	r3, r7, r1
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	183b      	adds	r3, r7, r0
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b2d9      	uxtb	r1, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	400a      	ands	r2, r1
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	225e      	movs	r2, #94	; 0x5e
 8005db0:	5a9b      	ldrh	r3, [r3, r2]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b299      	uxth	r1, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	225e      	movs	r2, #94	; 0x5e
 8005dbc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	225e      	movs	r2, #94	; 0x5e
 8005dc2:	5a9b      	ldrh	r3, [r3, r2]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d000      	beq.n	8005dcc <UART_RxISR_8BIT+0x6c>
 8005dca:	e079      	b.n	8005ec0 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	f383 8810 	msr	PRIMASK, r3
}
 8005de0:	46c0      	nop			; (mov r8, r8)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4936      	ldr	r1, [pc, #216]	; (8005ec8 <UART_RxISR_8BIT+0x168>)
 8005dee:	400a      	ands	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f383 8810 	msr	PRIMASK, r3
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e06:	637b      	str	r3, [r7, #52]	; 0x34
 8005e08:	2301      	movs	r3, #1
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	f383 8810 	msr	PRIMASK, r3
}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2101      	movs	r1, #1
 8005e20:	438a      	bics	r2, r1
 8005e22:	609a      	str	r2, [r3, #8]
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	f383 8810 	msr	PRIMASK, r3
}
 8005e2e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2288      	movs	r2, #136	; 0x88
 8005e34:	2120      	movs	r1, #32
 8005e36:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d12f      	bne.n	8005ea6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e52:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e54:	633b      	str	r3, [r7, #48]	; 0x30
 8005e56:	2301      	movs	r3, #1
 8005e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f383 8810 	msr	PRIMASK, r3
}
 8005e60:	46c0      	nop			; (mov r8, r8)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2110      	movs	r1, #16
 8005e6e:	438a      	bics	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f383 8810 	msr	PRIMASK, r3
}
 8005e7c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	2210      	movs	r2, #16
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d103      	bne.n	8005e94 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2210      	movs	r2, #16
 8005e92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	225c      	movs	r2, #92	; 0x5c
 8005e98:	5a9a      	ldrh	r2, [r3, r2]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0011      	movs	r1, r2
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7ff f860 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ea4:	e00c      	b.n	8005ec0 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f7fb ff7d 	bl	8001da8 <HAL_UART_RxCpltCallback>
}
 8005eae:	e007      	b.n	8005ec0 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2108      	movs	r1, #8
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	619a      	str	r2, [r3, #24]
}
 8005ec0:	46c0      	nop			; (mov r8, r8)
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b010      	add	sp, #64	; 0x40
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	fffffedf 	.word	0xfffffedf

08005ecc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b090      	sub	sp, #64	; 0x40
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ed4:	203e      	movs	r0, #62	; 0x3e
 8005ed6:	183b      	adds	r3, r7, r0
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	2160      	movs	r1, #96	; 0x60
 8005edc:	5a52      	ldrh	r2, [r2, r1]
 8005ede:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2288      	movs	r2, #136	; 0x88
 8005ee4:	589b      	ldr	r3, [r3, r2]
 8005ee6:	2b22      	cmp	r3, #34	; 0x22
 8005ee8:	d000      	beq.n	8005eec <UART_RxISR_16BIT+0x20>
 8005eea:	e097      	b.n	800601c <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ef2:	213c      	movs	r1, #60	; 0x3c
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efc:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005efe:	187b      	adds	r3, r7, r1
 8005f00:	183a      	adds	r2, r7, r0
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	8812      	ldrh	r2, [r2, #0]
 8005f06:	4013      	ands	r3, r2
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	1c9a      	adds	r2, r3, #2
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	225e      	movs	r2, #94	; 0x5e
 8005f1c:	5a9b      	ldrh	r3, [r3, r2]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b299      	uxth	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	225e      	movs	r2, #94	; 0x5e
 8005f28:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	225e      	movs	r2, #94	; 0x5e
 8005f2e:	5a9b      	ldrh	r3, [r3, r2]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d000      	beq.n	8005f38 <UART_RxISR_16BIT+0x6c>
 8005f36:	e079      	b.n	800602c <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f38:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3c:	617b      	str	r3, [r7, #20]
  return(result);
 8005f3e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
 8005f42:	2301      	movs	r3, #1
 8005f44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f383 8810 	msr	PRIMASK, r3
}
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4936      	ldr	r1, [pc, #216]	; (8006034 <UART_RxISR_16BIT+0x168>)
 8005f5a:	400a      	ands	r2, r1
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f383 8810 	msr	PRIMASK, r3
}
 8005f68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6e:	623b      	str	r3, [r7, #32]
  return(result);
 8005f70:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	633b      	str	r3, [r7, #48]	; 0x30
 8005f74:	2301      	movs	r3, #1
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	f383 8810 	msr	PRIMASK, r3
}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	438a      	bics	r2, r1
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	f383 8810 	msr	PRIMASK, r3
}
 8005f9a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2288      	movs	r2, #136	; 0x88
 8005fa0:	2120      	movs	r1, #32
 8005fa2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d12f      	bne.n	8006012 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fbe:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f383 8810 	msr	PRIMASK, r3
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2110      	movs	r1, #16
 8005fda:	438a      	bics	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f383 8810 	msr	PRIMASK, r3
}
 8005fe8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d103      	bne.n	8006000 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	225c      	movs	r2, #92	; 0x5c
 8006004:	5a9a      	ldrh	r2, [r3, r2]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f7fe ffaa 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006010:	e00c      	b.n	800602c <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	0018      	movs	r0, r3
 8006016:	f7fb fec7 	bl	8001da8 <HAL_UART_RxCpltCallback>
}
 800601a:	e007      	b.n	800602c <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2108      	movs	r1, #8
 8006028:	430a      	orrs	r2, r1
 800602a:	619a      	str	r2, [r3, #24]
}
 800602c:	46c0      	nop			; (mov r8, r8)
 800602e:	46bd      	mov	sp, r7
 8006030:	b010      	add	sp, #64	; 0x40
 8006032:	bd80      	pop	{r7, pc}
 8006034:	fffffedf 	.word	0xfffffedf

08006038 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b09c      	sub	sp, #112	; 0x70
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006040:	236a      	movs	r3, #106	; 0x6a
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	2160      	movs	r1, #96	; 0x60
 8006048:	5a52      	ldrh	r2, [r2, r1]
 800604a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2288      	movs	r2, #136	; 0x88
 8006068:	589b      	ldr	r3, [r3, r2]
 800606a:	2b22      	cmp	r3, #34	; 0x22
 800606c:	d000      	beq.n	8006070 <UART_RxISR_8BIT_FIFOEN+0x38>
 800606e:	e141      	b.n	80062f4 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006070:	235e      	movs	r3, #94	; 0x5e
 8006072:	18fb      	adds	r3, r7, r3
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	2168      	movs	r1, #104	; 0x68
 8006078:	5a52      	ldrh	r2, [r2, r1]
 800607a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800607c:	e0e8      	b.n	8006250 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006084:	215c      	movs	r1, #92	; 0x5c
 8006086:	187b      	adds	r3, r7, r1
 8006088:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800608a:	187b      	adds	r3, r7, r1
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	236a      	movs	r3, #106	; 0x6a
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b2d9      	uxtb	r1, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609c:	400a      	ands	r2, r1
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	225e      	movs	r2, #94	; 0x5e
 80060b0:	5a9b      	ldrh	r3, [r3, r2]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b299      	uxth	r1, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	225e      	movs	r2, #94	; 0x5e
 80060bc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80060c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c8:	2207      	movs	r2, #7
 80060ca:	4013      	ands	r3, r2
 80060cc:	d049      	beq.n	8006162 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d0:	2201      	movs	r2, #1
 80060d2:	4013      	ands	r3, r2
 80060d4:	d010      	beq.n	80060f8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80060d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060d8:	2380      	movs	r3, #128	; 0x80
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4013      	ands	r3, r2
 80060de:	d00b      	beq.n	80060f8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2201      	movs	r2, #1
 80060e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	228c      	movs	r2, #140	; 0x8c
 80060ec:	589b      	ldr	r3, [r3, r2]
 80060ee:	2201      	movs	r2, #1
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	218c      	movs	r1, #140	; 0x8c
 80060f6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fa:	2202      	movs	r2, #2
 80060fc:	4013      	ands	r3, r2
 80060fe:	d00f      	beq.n	8006120 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006102:	2201      	movs	r2, #1
 8006104:	4013      	ands	r3, r2
 8006106:	d00b      	beq.n	8006120 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2202      	movs	r2, #2
 800610e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	228c      	movs	r2, #140	; 0x8c
 8006114:	589b      	ldr	r3, [r3, r2]
 8006116:	2204      	movs	r2, #4
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	218c      	movs	r1, #140	; 0x8c
 800611e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006122:	2204      	movs	r2, #4
 8006124:	4013      	ands	r3, r2
 8006126:	d00f      	beq.n	8006148 <UART_RxISR_8BIT_FIFOEN+0x110>
 8006128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800612a:	2201      	movs	r2, #1
 800612c:	4013      	ands	r3, r2
 800612e:	d00b      	beq.n	8006148 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2204      	movs	r2, #4
 8006136:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	228c      	movs	r2, #140	; 0x8c
 800613c:	589b      	ldr	r3, [r3, r2]
 800613e:	2202      	movs	r2, #2
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	218c      	movs	r1, #140	; 0x8c
 8006146:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	228c      	movs	r2, #140	; 0x8c
 800614c:	589b      	ldr	r3, [r3, r2]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	0018      	movs	r0, r3
 8006156:	f7fe fefd 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	228c      	movs	r2, #140	; 0x8c
 800615e:	2100      	movs	r1, #0
 8006160:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	225e      	movs	r2, #94	; 0x5e
 8006166:	5a9b      	ldrh	r3, [r3, r2]
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d170      	bne.n	8006250 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800616e:	f3ef 8310 	mrs	r3, PRIMASK
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006176:	65bb      	str	r3, [r7, #88]	; 0x58
 8006178:	2301      	movs	r3, #1
 800617a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	f383 8810 	msr	PRIMASK, r3
}
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	495f      	ldr	r1, [pc, #380]	; (800630c <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8006190:	400a      	ands	r2, r1
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	f383 8810 	msr	PRIMASK, r3
}
 800619e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a0:	f3ef 8310 	mrs	r3, PRIMASK
 80061a4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061a8:	657b      	str	r3, [r7, #84]	; 0x54
 80061aa:	2301      	movs	r3, #1
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b0:	f383 8810 	msr	PRIMASK, r3
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4953      	ldr	r1, [pc, #332]	; (8006310 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 80061c2:	400a      	ands	r2, r1
 80061c4:	609a      	str	r2, [r3, #8]
 80061c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061cc:	f383 8810 	msr	PRIMASK, r3
}
 80061d0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2288      	movs	r2, #136	; 0x88
 80061d6:	2120      	movs	r1, #32
 80061d8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d12f      	bne.n	8006248 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ee:	f3ef 8310 	mrs	r3, PRIMASK
 80061f2:	623b      	str	r3, [r7, #32]
  return(result);
 80061f4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f6:	653b      	str	r3, [r7, #80]	; 0x50
 80061f8:	2301      	movs	r3, #1
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	f383 8810 	msr	PRIMASK, r3
}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2110      	movs	r1, #16
 8006210:	438a      	bics	r2, r1
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	f383 8810 	msr	PRIMASK, r3
}
 800621e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	2210      	movs	r2, #16
 8006228:	4013      	ands	r3, r2
 800622a:	2b10      	cmp	r3, #16
 800622c:	d103      	bne.n	8006236 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2210      	movs	r2, #16
 8006234:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	225c      	movs	r2, #92	; 0x5c
 800623a:	5a9a      	ldrh	r2, [r3, r2]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	0011      	movs	r1, r2
 8006240:	0018      	movs	r0, r3
 8006242:	f7fe fe8f 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
 8006246:	e003      	b.n	8006250 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	0018      	movs	r0, r3
 800624c:	f7fb fdac 	bl	8001da8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006250:	235e      	movs	r3, #94	; 0x5e
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d004      	beq.n	8006264 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800625a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625c:	2220      	movs	r2, #32
 800625e:	4013      	ands	r3, r2
 8006260:	d000      	beq.n	8006264 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8006262:	e70c      	b.n	800607e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006264:	204e      	movs	r0, #78	; 0x4e
 8006266:	183b      	adds	r3, r7, r0
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	215e      	movs	r1, #94	; 0x5e
 800626c:	5a52      	ldrh	r2, [r2, r1]
 800626e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006270:	0001      	movs	r1, r0
 8006272:	187b      	adds	r3, r7, r1
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d044      	beq.n	8006304 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2268      	movs	r2, #104	; 0x68
 800627e:	5a9b      	ldrh	r3, [r3, r2]
 8006280:	187a      	adds	r2, r7, r1
 8006282:	8812      	ldrh	r2, [r2, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d23d      	bcs.n	8006304 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006288:	f3ef 8310 	mrs	r3, PRIMASK
 800628c:	60bb      	str	r3, [r7, #8]
  return(result);
 800628e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006290:	64bb      	str	r3, [r7, #72]	; 0x48
 8006292:	2301      	movs	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f383 8810 	msr	PRIMASK, r3
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	491a      	ldr	r1, [pc, #104]	; (8006314 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80062aa:	400a      	ands	r2, r1
 80062ac:	609a      	str	r2, [r3, #8]
 80062ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f383 8810 	msr	PRIMASK, r3
}
 80062b8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a16      	ldr	r2, [pc, #88]	; (8006318 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80062be:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c0:	f3ef 8310 	mrs	r3, PRIMASK
 80062c4:	617b      	str	r3, [r7, #20]
  return(result);
 80062c6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062c8:	647b      	str	r3, [r7, #68]	; 0x44
 80062ca:	2301      	movs	r3, #1
 80062cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f383 8810 	msr	PRIMASK, r3
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2120      	movs	r1, #32
 80062e2:	430a      	orrs	r2, r1
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f383 8810 	msr	PRIMASK, r3
}
 80062f0:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062f2:	e007      	b.n	8006304 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2108      	movs	r1, #8
 8006300:	430a      	orrs	r2, r1
 8006302:	619a      	str	r2, [r3, #24]
}
 8006304:	46c0      	nop			; (mov r8, r8)
 8006306:	46bd      	mov	sp, r7
 8006308:	b01c      	add	sp, #112	; 0x70
 800630a:	bd80      	pop	{r7, pc}
 800630c:	fffffeff 	.word	0xfffffeff
 8006310:	effffffe 	.word	0xeffffffe
 8006314:	efffffff 	.word	0xefffffff
 8006318:	08005d61 	.word	0x08005d61

0800631c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b09e      	sub	sp, #120	; 0x78
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006324:	2372      	movs	r3, #114	; 0x72
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	2160      	movs	r1, #96	; 0x60
 800632c:	5a52      	ldrh	r2, [r2, r1]
 800632e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2288      	movs	r2, #136	; 0x88
 800634c:	589b      	ldr	r3, [r3, r2]
 800634e:	2b22      	cmp	r3, #34	; 0x22
 8006350:	d000      	beq.n	8006354 <UART_RxISR_16BIT_FIFOEN+0x38>
 8006352:	e141      	b.n	80065d8 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006354:	2366      	movs	r3, #102	; 0x66
 8006356:	18fb      	adds	r3, r7, r3
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	2168      	movs	r1, #104	; 0x68
 800635c:	5a52      	ldrh	r2, [r2, r1]
 800635e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006360:	e0e8      	b.n	8006534 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006368:	2164      	movs	r1, #100	; 0x64
 800636a:	187b      	adds	r3, r7, r1
 800636c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8006374:	187b      	adds	r3, r7, r1
 8006376:	2272      	movs	r2, #114	; 0x72
 8006378:	18ba      	adds	r2, r7, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	8812      	ldrh	r2, [r2, #0]
 800637e:	4013      	ands	r3, r2
 8006380:	b29a      	uxth	r2, r3
 8006382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006384:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638a:	1c9a      	adds	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	225e      	movs	r2, #94	; 0x5e
 8006394:	5a9b      	ldrh	r3, [r3, r2]
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b299      	uxth	r1, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	225e      	movs	r2, #94	; 0x5e
 80063a0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80063aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ac:	2207      	movs	r2, #7
 80063ae:	4013      	ands	r3, r2
 80063b0:	d049      	beq.n	8006446 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b4:	2201      	movs	r2, #1
 80063b6:	4013      	ands	r3, r2
 80063b8:	d010      	beq.n	80063dc <UART_RxISR_16BIT_FIFOEN+0xc0>
 80063ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063bc:	2380      	movs	r3, #128	; 0x80
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4013      	ands	r3, r2
 80063c2:	d00b      	beq.n	80063dc <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2201      	movs	r2, #1
 80063ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	228c      	movs	r2, #140	; 0x8c
 80063d0:	589b      	ldr	r3, [r3, r2]
 80063d2:	2201      	movs	r2, #1
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	218c      	movs	r1, #140	; 0x8c
 80063da:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063de:	2202      	movs	r2, #2
 80063e0:	4013      	ands	r3, r2
 80063e2:	d00f      	beq.n	8006404 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80063e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e6:	2201      	movs	r2, #1
 80063e8:	4013      	ands	r3, r2
 80063ea:	d00b      	beq.n	8006404 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2202      	movs	r2, #2
 80063f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	228c      	movs	r2, #140	; 0x8c
 80063f8:	589b      	ldr	r3, [r3, r2]
 80063fa:	2204      	movs	r2, #4
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	218c      	movs	r1, #140	; 0x8c
 8006402:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006406:	2204      	movs	r2, #4
 8006408:	4013      	ands	r3, r2
 800640a:	d00f      	beq.n	800642c <UART_RxISR_16BIT_FIFOEN+0x110>
 800640c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800640e:	2201      	movs	r2, #1
 8006410:	4013      	ands	r3, r2
 8006412:	d00b      	beq.n	800642c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2204      	movs	r2, #4
 800641a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	228c      	movs	r2, #140	; 0x8c
 8006420:	589b      	ldr	r3, [r3, r2]
 8006422:	2202      	movs	r2, #2
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	218c      	movs	r1, #140	; 0x8c
 800642a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	228c      	movs	r2, #140	; 0x8c
 8006430:	589b      	ldr	r3, [r3, r2]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	0018      	movs	r0, r3
 800643a:	f7fe fd8b 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	228c      	movs	r2, #140	; 0x8c
 8006442:	2100      	movs	r1, #0
 8006444:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	225e      	movs	r2, #94	; 0x5e
 800644a:	5a9b      	ldrh	r3, [r3, r2]
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d170      	bne.n	8006534 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006452:	f3ef 8310 	mrs	r3, PRIMASK
 8006456:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800645a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800645c:	2301      	movs	r3, #1
 800645e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	f383 8810 	msr	PRIMASK, r3
}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	495f      	ldr	r1, [pc, #380]	; (80065f0 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8006474:	400a      	ands	r2, r1
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	f383 8810 	msr	PRIMASK, r3
}
 8006482:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006484:	f3ef 8310 	mrs	r3, PRIMASK
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800648a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800648c:	65bb      	str	r3, [r7, #88]	; 0x58
 800648e:	2301      	movs	r3, #1
 8006490:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006494:	f383 8810 	msr	PRIMASK, r3
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4953      	ldr	r1, [pc, #332]	; (80065f4 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80064a6:	400a      	ands	r2, r1
 80064a8:	609a      	str	r2, [r3, #8]
 80064aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b0:	f383 8810 	msr	PRIMASK, r3
}
 80064b4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2288      	movs	r2, #136	; 0x88
 80064ba:	2120      	movs	r1, #32
 80064bc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d12f      	bne.n	800652c <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d2:	f3ef 8310 	mrs	r3, PRIMASK
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064da:	657b      	str	r3, [r7, #84]	; 0x54
 80064dc:	2301      	movs	r3, #1
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	f383 8810 	msr	PRIMASK, r3
}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2110      	movs	r1, #16
 80064f4:	438a      	bics	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	f383 8810 	msr	PRIMASK, r3
}
 8006502:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	2210      	movs	r2, #16
 800650c:	4013      	ands	r3, r2
 800650e:	2b10      	cmp	r3, #16
 8006510:	d103      	bne.n	800651a <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2210      	movs	r2, #16
 8006518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	225c      	movs	r2, #92	; 0x5c
 800651e:	5a9a      	ldrh	r2, [r3, r2]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	0011      	movs	r1, r2
 8006524:	0018      	movs	r0, r3
 8006526:	f7fe fd1d 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
 800652a:	e003      	b.n	8006534 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	0018      	movs	r0, r3
 8006530:	f7fb fc3a 	bl	8001da8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006534:	2366      	movs	r3, #102	; 0x66
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800653e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006540:	2220      	movs	r2, #32
 8006542:	4013      	ands	r3, r2
 8006544:	d000      	beq.n	8006548 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8006546:	e70c      	b.n	8006362 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006548:	2052      	movs	r0, #82	; 0x52
 800654a:	183b      	adds	r3, r7, r0
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	215e      	movs	r1, #94	; 0x5e
 8006550:	5a52      	ldrh	r2, [r2, r1]
 8006552:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006554:	0001      	movs	r1, r0
 8006556:	187b      	adds	r3, r7, r1
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d044      	beq.n	80065e8 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2268      	movs	r2, #104	; 0x68
 8006562:	5a9b      	ldrh	r3, [r3, r2]
 8006564:	187a      	adds	r2, r7, r1
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d23d      	bcs.n	80065e8 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800656c:	f3ef 8310 	mrs	r3, PRIMASK
 8006570:	60fb      	str	r3, [r7, #12]
  return(result);
 8006572:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006574:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006576:	2301      	movs	r3, #1
 8006578:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f383 8810 	msr	PRIMASK, r3
}
 8006580:	46c0      	nop			; (mov r8, r8)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	491a      	ldr	r1, [pc, #104]	; (80065f8 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800658e:	400a      	ands	r2, r1
 8006590:	609a      	str	r2, [r3, #8]
 8006592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f383 8810 	msr	PRIMASK, r3
}
 800659c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a16      	ldr	r2, [pc, #88]	; (80065fc <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80065a2:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a4:	f3ef 8310 	mrs	r3, PRIMASK
 80065a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80065aa:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80065ae:	2301      	movs	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f383 8810 	msr	PRIMASK, r3
}
 80065b8:	46c0      	nop			; (mov r8, r8)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2120      	movs	r1, #32
 80065c6:	430a      	orrs	r2, r1
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f383 8810 	msr	PRIMASK, r3
}
 80065d4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065d6:	e007      	b.n	80065e8 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2108      	movs	r1, #8
 80065e4:	430a      	orrs	r2, r1
 80065e6:	619a      	str	r2, [r3, #24]
}
 80065e8:	46c0      	nop			; (mov r8, r8)
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b01e      	add	sp, #120	; 0x78
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	fffffeff 	.word	0xfffffeff
 80065f4:	effffffe 	.word	0xeffffffe
 80065f8:	efffffff 	.word	0xefffffff
 80065fc:	08005ecd 	.word	0x08005ecd

08006600 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006608:	46c0      	nop			; (mov r8, r8)
 800660a:	46bd      	mov	sp, r7
 800660c:	b002      	add	sp, #8
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006618:	46c0      	nop			; (mov r8, r8)
 800661a:	46bd      	mov	sp, r7
 800661c:	b002      	add	sp, #8
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006628:	46c0      	nop			; (mov r8, r8)
 800662a:	46bd      	mov	sp, r7
 800662c:	b002      	add	sp, #8
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2280      	movs	r2, #128	; 0x80
 800663c:	5c9b      	ldrb	r3, [r3, r2]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_UARTEx_DisableFifoMode+0x16>
 8006642:	2302      	movs	r3, #2
 8006644:	e027      	b.n	8006696 <HAL_UARTEx_DisableFifoMode+0x66>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2280      	movs	r2, #128	; 0x80
 800664a:	2101      	movs	r1, #1
 800664c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2284      	movs	r2, #132	; 0x84
 8006652:	2124      	movs	r1, #36	; 0x24
 8006654:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2101      	movs	r1, #1
 800666a:	438a      	bics	r2, r1
 800666c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a0b      	ldr	r2, [pc, #44]	; (80066a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006672:	4013      	ands	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2284      	movs	r2, #132	; 0x84
 8006688:	2120      	movs	r1, #32
 800668a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2280      	movs	r2, #128	; 0x80
 8006690:	2100      	movs	r1, #0
 8006692:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	0018      	movs	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	b004      	add	sp, #16
 800669c:	bd80      	pop	{r7, pc}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	dfffffff 	.word	0xdfffffff

080066a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2280      	movs	r2, #128	; 0x80
 80066b2:	5c9b      	ldrb	r3, [r3, r2]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e02e      	b.n	800671a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2280      	movs	r2, #128	; 0x80
 80066c0:	2101      	movs	r1, #1
 80066c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2284      	movs	r2, #132	; 0x84
 80066c8:	2124      	movs	r1, #36	; 0x24
 80066ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2101      	movs	r1, #1
 80066e0:	438a      	bics	r2, r1
 80066e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	08d9      	lsrs	r1, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	0018      	movs	r0, r3
 80066fc:	f000 f854 	bl	80067a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2284      	movs	r2, #132	; 0x84
 800670c:	2120      	movs	r1, #32
 800670e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	2100      	movs	r1, #0
 8006716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b004      	add	sp, #16
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2280      	movs	r2, #128	; 0x80
 8006732:	5c9b      	ldrb	r3, [r3, r2]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006738:	2302      	movs	r3, #2
 800673a:	e02f      	b.n	800679c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2280      	movs	r2, #128	; 0x80
 8006740:	2101      	movs	r1, #1
 8006742:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2284      	movs	r2, #132	; 0x84
 8006748:	2124      	movs	r1, #36	; 0x24
 800674a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2101      	movs	r1, #1
 8006760:	438a      	bics	r2, r1
 8006762:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	4a0e      	ldr	r2, [pc, #56]	; (80067a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800676c:	4013      	ands	r3, r2
 800676e:	0019      	movs	r1, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	0018      	movs	r0, r3
 800677e:	f000 f813 	bl	80067a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2284      	movs	r2, #132	; 0x84
 800678e:	2120      	movs	r1, #32
 8006790:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2280      	movs	r2, #128	; 0x80
 8006796:	2100      	movs	r1, #0
 8006798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	0018      	movs	r0, r3
 800679e:	46bd      	mov	sp, r7
 80067a0:	b004      	add	sp, #16
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	f1ffffff 	.word	0xf1ffffff

080067a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d108      	bne.n	80067ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	226a      	movs	r2, #106	; 0x6a
 80067bc:	2101      	movs	r1, #1
 80067be:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2268      	movs	r2, #104	; 0x68
 80067c4:	2101      	movs	r1, #1
 80067c6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067c8:	e043      	b.n	8006852 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067ca:	260f      	movs	r6, #15
 80067cc:	19bb      	adds	r3, r7, r6
 80067ce:	2208      	movs	r2, #8
 80067d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067d2:	200e      	movs	r0, #14
 80067d4:	183b      	adds	r3, r7, r0
 80067d6:	2208      	movs	r2, #8
 80067d8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	0e5b      	lsrs	r3, r3, #25
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	240d      	movs	r4, #13
 80067e6:	193b      	adds	r3, r7, r4
 80067e8:	2107      	movs	r1, #7
 80067ea:	400a      	ands	r2, r1
 80067ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	0f5b      	lsrs	r3, r3, #29
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	250c      	movs	r5, #12
 80067fa:	197b      	adds	r3, r7, r5
 80067fc:	2107      	movs	r1, #7
 80067fe:	400a      	ands	r2, r1
 8006800:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006802:	183b      	adds	r3, r7, r0
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	197a      	adds	r2, r7, r5
 8006808:	7812      	ldrb	r2, [r2, #0]
 800680a:	4914      	ldr	r1, [pc, #80]	; (800685c <UARTEx_SetNbDataToProcess+0xb4>)
 800680c:	5c8a      	ldrb	r2, [r1, r2]
 800680e:	435a      	muls	r2, r3
 8006810:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006812:	197b      	adds	r3, r7, r5
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	4a12      	ldr	r2, [pc, #72]	; (8006860 <UARTEx_SetNbDataToProcess+0xb8>)
 8006818:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800681a:	0019      	movs	r1, r3
 800681c:	f7f9 fd0e 	bl	800023c <__divsi3>
 8006820:	0003      	movs	r3, r0
 8006822:	b299      	uxth	r1, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	226a      	movs	r2, #106	; 0x6a
 8006828:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800682a:	19bb      	adds	r3, r7, r6
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	193a      	adds	r2, r7, r4
 8006830:	7812      	ldrb	r2, [r2, #0]
 8006832:	490a      	ldr	r1, [pc, #40]	; (800685c <UARTEx_SetNbDataToProcess+0xb4>)
 8006834:	5c8a      	ldrb	r2, [r1, r2]
 8006836:	435a      	muls	r2, r3
 8006838:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800683a:	193b      	adds	r3, r7, r4
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	4a08      	ldr	r2, [pc, #32]	; (8006860 <UARTEx_SetNbDataToProcess+0xb8>)
 8006840:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006842:	0019      	movs	r1, r3
 8006844:	f7f9 fcfa 	bl	800023c <__divsi3>
 8006848:	0003      	movs	r3, r0
 800684a:	b299      	uxth	r1, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2268      	movs	r2, #104	; 0x68
 8006850:	5299      	strh	r1, [r3, r2]
}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	46bd      	mov	sp, r7
 8006856:	b005      	add	sp, #20
 8006858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685a:	46c0      	nop			; (mov r8, r8)
 800685c:	08007790 	.word	0x08007790
 8006860:	08007798 	.word	0x08007798

08006864 <__errno>:
 8006864:	4b01      	ldr	r3, [pc, #4]	; (800686c <__errno+0x8>)
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	4770      	bx	lr
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	20000014 	.word	0x20000014

08006870 <__libc_init_array>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	2600      	movs	r6, #0
 8006874:	4d0c      	ldr	r5, [pc, #48]	; (80068a8 <__libc_init_array+0x38>)
 8006876:	4c0d      	ldr	r4, [pc, #52]	; (80068ac <__libc_init_array+0x3c>)
 8006878:	1b64      	subs	r4, r4, r5
 800687a:	10a4      	asrs	r4, r4, #2
 800687c:	42a6      	cmp	r6, r4
 800687e:	d109      	bne.n	8006894 <__libc_init_array+0x24>
 8006880:	2600      	movs	r6, #0
 8006882:	f000 fc8b 	bl	800719c <_init>
 8006886:	4d0a      	ldr	r5, [pc, #40]	; (80068b0 <__libc_init_array+0x40>)
 8006888:	4c0a      	ldr	r4, [pc, #40]	; (80068b4 <__libc_init_array+0x44>)
 800688a:	1b64      	subs	r4, r4, r5
 800688c:	10a4      	asrs	r4, r4, #2
 800688e:	42a6      	cmp	r6, r4
 8006890:	d105      	bne.n	800689e <__libc_init_array+0x2e>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	00b3      	lsls	r3, r6, #2
 8006896:	58eb      	ldr	r3, [r5, r3]
 8006898:	4798      	blx	r3
 800689a:	3601      	adds	r6, #1
 800689c:	e7ee      	b.n	800687c <__libc_init_array+0xc>
 800689e:	00b3      	lsls	r3, r6, #2
 80068a0:	58eb      	ldr	r3, [r5, r3]
 80068a2:	4798      	blx	r3
 80068a4:	3601      	adds	r6, #1
 80068a6:	e7f2      	b.n	800688e <__libc_init_array+0x1e>
 80068a8:	080077dc 	.word	0x080077dc
 80068ac:	080077dc 	.word	0x080077dc
 80068b0:	080077dc 	.word	0x080077dc
 80068b4:	080077e0 	.word	0x080077e0

080068b8 <memcpy>:
 80068b8:	2300      	movs	r3, #0
 80068ba:	b510      	push	{r4, lr}
 80068bc:	429a      	cmp	r2, r3
 80068be:	d100      	bne.n	80068c2 <memcpy+0xa>
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	5ccc      	ldrb	r4, [r1, r3]
 80068c4:	54c4      	strb	r4, [r0, r3]
 80068c6:	3301      	adds	r3, #1
 80068c8:	e7f8      	b.n	80068bc <memcpy+0x4>

080068ca <memset>:
 80068ca:	0003      	movs	r3, r0
 80068cc:	1882      	adds	r2, r0, r2
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d100      	bne.n	80068d4 <memset+0xa>
 80068d2:	4770      	bx	lr
 80068d4:	7019      	strb	r1, [r3, #0]
 80068d6:	3301      	adds	r3, #1
 80068d8:	e7f9      	b.n	80068ce <memset+0x4>
	...

080068dc <siprintf>:
 80068dc:	b40e      	push	{r1, r2, r3}
 80068de:	b500      	push	{lr}
 80068e0:	490b      	ldr	r1, [pc, #44]	; (8006910 <siprintf+0x34>)
 80068e2:	b09c      	sub	sp, #112	; 0x70
 80068e4:	ab1d      	add	r3, sp, #116	; 0x74
 80068e6:	9002      	str	r0, [sp, #8]
 80068e8:	9006      	str	r0, [sp, #24]
 80068ea:	9107      	str	r1, [sp, #28]
 80068ec:	9104      	str	r1, [sp, #16]
 80068ee:	4809      	ldr	r0, [pc, #36]	; (8006914 <siprintf+0x38>)
 80068f0:	4909      	ldr	r1, [pc, #36]	; (8006918 <siprintf+0x3c>)
 80068f2:	cb04      	ldmia	r3!, {r2}
 80068f4:	9105      	str	r1, [sp, #20]
 80068f6:	6800      	ldr	r0, [r0, #0]
 80068f8:	a902      	add	r1, sp, #8
 80068fa:	9301      	str	r3, [sp, #4]
 80068fc:	f000 f870 	bl	80069e0 <_svfiprintf_r>
 8006900:	2300      	movs	r3, #0
 8006902:	9a02      	ldr	r2, [sp, #8]
 8006904:	7013      	strb	r3, [r2, #0]
 8006906:	b01c      	add	sp, #112	; 0x70
 8006908:	bc08      	pop	{r3}
 800690a:	b003      	add	sp, #12
 800690c:	4718      	bx	r3
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	7fffffff 	.word	0x7fffffff
 8006914:	20000014 	.word	0x20000014
 8006918:	ffff0208 	.word	0xffff0208

0800691c <__ssputs_r>:
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	688e      	ldr	r6, [r1, #8]
 8006920:	b085      	sub	sp, #20
 8006922:	0007      	movs	r7, r0
 8006924:	000c      	movs	r4, r1
 8006926:	9203      	str	r2, [sp, #12]
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	429e      	cmp	r6, r3
 800692c:	d83c      	bhi.n	80069a8 <__ssputs_r+0x8c>
 800692e:	2390      	movs	r3, #144	; 0x90
 8006930:	898a      	ldrh	r2, [r1, #12]
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	421a      	tst	r2, r3
 8006936:	d034      	beq.n	80069a2 <__ssputs_r+0x86>
 8006938:	6909      	ldr	r1, [r1, #16]
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	6960      	ldr	r0, [r4, #20]
 800693e:	1a5b      	subs	r3, r3, r1
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	2303      	movs	r3, #3
 8006944:	4343      	muls	r3, r0
 8006946:	0fdd      	lsrs	r5, r3, #31
 8006948:	18ed      	adds	r5, r5, r3
 800694a:	9b01      	ldr	r3, [sp, #4]
 800694c:	9802      	ldr	r0, [sp, #8]
 800694e:	3301      	adds	r3, #1
 8006950:	181b      	adds	r3, r3, r0
 8006952:	106d      	asrs	r5, r5, #1
 8006954:	42ab      	cmp	r3, r5
 8006956:	d900      	bls.n	800695a <__ssputs_r+0x3e>
 8006958:	001d      	movs	r5, r3
 800695a:	0553      	lsls	r3, r2, #21
 800695c:	d532      	bpl.n	80069c4 <__ssputs_r+0xa8>
 800695e:	0029      	movs	r1, r5
 8006960:	0038      	movs	r0, r7
 8006962:	f000 fb49 	bl	8006ff8 <_malloc_r>
 8006966:	1e06      	subs	r6, r0, #0
 8006968:	d109      	bne.n	800697e <__ssputs_r+0x62>
 800696a:	230c      	movs	r3, #12
 800696c:	603b      	str	r3, [r7, #0]
 800696e:	2340      	movs	r3, #64	; 0x40
 8006970:	2001      	movs	r0, #1
 8006972:	89a2      	ldrh	r2, [r4, #12]
 8006974:	4240      	negs	r0, r0
 8006976:	4313      	orrs	r3, r2
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	b005      	add	sp, #20
 800697c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800697e:	9a02      	ldr	r2, [sp, #8]
 8006980:	6921      	ldr	r1, [r4, #16]
 8006982:	f7ff ff99 	bl	80068b8 <memcpy>
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	4a14      	ldr	r2, [pc, #80]	; (80069dc <__ssputs_r+0xc0>)
 800698a:	401a      	ands	r2, r3
 800698c:	2380      	movs	r3, #128	; 0x80
 800698e:	4313      	orrs	r3, r2
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	9b02      	ldr	r3, [sp, #8]
 8006994:	6126      	str	r6, [r4, #16]
 8006996:	18f6      	adds	r6, r6, r3
 8006998:	6026      	str	r6, [r4, #0]
 800699a:	6165      	str	r5, [r4, #20]
 800699c:	9e01      	ldr	r6, [sp, #4]
 800699e:	1aed      	subs	r5, r5, r3
 80069a0:	60a5      	str	r5, [r4, #8]
 80069a2:	9b01      	ldr	r3, [sp, #4]
 80069a4:	429e      	cmp	r6, r3
 80069a6:	d900      	bls.n	80069aa <__ssputs_r+0x8e>
 80069a8:	9e01      	ldr	r6, [sp, #4]
 80069aa:	0032      	movs	r2, r6
 80069ac:	9903      	ldr	r1, [sp, #12]
 80069ae:	6820      	ldr	r0, [r4, #0]
 80069b0:	f000 faa3 	bl	8006efa <memmove>
 80069b4:	68a3      	ldr	r3, [r4, #8]
 80069b6:	2000      	movs	r0, #0
 80069b8:	1b9b      	subs	r3, r3, r6
 80069ba:	60a3      	str	r3, [r4, #8]
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	199e      	adds	r6, r3, r6
 80069c0:	6026      	str	r6, [r4, #0]
 80069c2:	e7da      	b.n	800697a <__ssputs_r+0x5e>
 80069c4:	002a      	movs	r2, r5
 80069c6:	0038      	movs	r0, r7
 80069c8:	f000 fb8c 	bl	80070e4 <_realloc_r>
 80069cc:	1e06      	subs	r6, r0, #0
 80069ce:	d1e0      	bne.n	8006992 <__ssputs_r+0x76>
 80069d0:	0038      	movs	r0, r7
 80069d2:	6921      	ldr	r1, [r4, #16]
 80069d4:	f000 faa4 	bl	8006f20 <_free_r>
 80069d8:	e7c7      	b.n	800696a <__ssputs_r+0x4e>
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	fffffb7f 	.word	0xfffffb7f

080069e0 <_svfiprintf_r>:
 80069e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e2:	b0a1      	sub	sp, #132	; 0x84
 80069e4:	9003      	str	r0, [sp, #12]
 80069e6:	001d      	movs	r5, r3
 80069e8:	898b      	ldrh	r3, [r1, #12]
 80069ea:	000f      	movs	r7, r1
 80069ec:	0016      	movs	r6, r2
 80069ee:	061b      	lsls	r3, r3, #24
 80069f0:	d511      	bpl.n	8006a16 <_svfiprintf_r+0x36>
 80069f2:	690b      	ldr	r3, [r1, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10e      	bne.n	8006a16 <_svfiprintf_r+0x36>
 80069f8:	2140      	movs	r1, #64	; 0x40
 80069fa:	f000 fafd 	bl	8006ff8 <_malloc_r>
 80069fe:	6038      	str	r0, [r7, #0]
 8006a00:	6138      	str	r0, [r7, #16]
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d105      	bne.n	8006a12 <_svfiprintf_r+0x32>
 8006a06:	230c      	movs	r3, #12
 8006a08:	9a03      	ldr	r2, [sp, #12]
 8006a0a:	3801      	subs	r0, #1
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	b021      	add	sp, #132	; 0x84
 8006a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a12:	2340      	movs	r3, #64	; 0x40
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	2300      	movs	r3, #0
 8006a18:	ac08      	add	r4, sp, #32
 8006a1a:	6163      	str	r3, [r4, #20]
 8006a1c:	3320      	adds	r3, #32
 8006a1e:	7663      	strb	r3, [r4, #25]
 8006a20:	3310      	adds	r3, #16
 8006a22:	76a3      	strb	r3, [r4, #26]
 8006a24:	9507      	str	r5, [sp, #28]
 8006a26:	0035      	movs	r5, r6
 8006a28:	782b      	ldrb	r3, [r5, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <_svfiprintf_r+0x52>
 8006a2e:	2b25      	cmp	r3, #37	; 0x25
 8006a30:	d147      	bne.n	8006ac2 <_svfiprintf_r+0xe2>
 8006a32:	1bab      	subs	r3, r5, r6
 8006a34:	9305      	str	r3, [sp, #20]
 8006a36:	42b5      	cmp	r5, r6
 8006a38:	d00c      	beq.n	8006a54 <_svfiprintf_r+0x74>
 8006a3a:	0032      	movs	r2, r6
 8006a3c:	0039      	movs	r1, r7
 8006a3e:	9803      	ldr	r0, [sp, #12]
 8006a40:	f7ff ff6c 	bl	800691c <__ssputs_r>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d100      	bne.n	8006a4a <_svfiprintf_r+0x6a>
 8006a48:	e0ae      	b.n	8006ba8 <_svfiprintf_r+0x1c8>
 8006a4a:	6962      	ldr	r2, [r4, #20]
 8006a4c:	9b05      	ldr	r3, [sp, #20]
 8006a4e:	4694      	mov	ip, r2
 8006a50:	4463      	add	r3, ip
 8006a52:	6163      	str	r3, [r4, #20]
 8006a54:	782b      	ldrb	r3, [r5, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d100      	bne.n	8006a5c <_svfiprintf_r+0x7c>
 8006a5a:	e0a5      	b.n	8006ba8 <_svfiprintf_r+0x1c8>
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	2300      	movs	r3, #0
 8006a60:	4252      	negs	r2, r2
 8006a62:	6062      	str	r2, [r4, #4]
 8006a64:	a904      	add	r1, sp, #16
 8006a66:	3254      	adds	r2, #84	; 0x54
 8006a68:	1852      	adds	r2, r2, r1
 8006a6a:	1c6e      	adds	r6, r5, #1
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	60e3      	str	r3, [r4, #12]
 8006a70:	60a3      	str	r3, [r4, #8]
 8006a72:	7013      	strb	r3, [r2, #0]
 8006a74:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a76:	2205      	movs	r2, #5
 8006a78:	7831      	ldrb	r1, [r6, #0]
 8006a7a:	4854      	ldr	r0, [pc, #336]	; (8006bcc <_svfiprintf_r+0x1ec>)
 8006a7c:	f000 fa32 	bl	8006ee4 <memchr>
 8006a80:	1c75      	adds	r5, r6, #1
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d11f      	bne.n	8006ac6 <_svfiprintf_r+0xe6>
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	06d3      	lsls	r3, r2, #27
 8006a8a:	d504      	bpl.n	8006a96 <_svfiprintf_r+0xb6>
 8006a8c:	2353      	movs	r3, #83	; 0x53
 8006a8e:	a904      	add	r1, sp, #16
 8006a90:	185b      	adds	r3, r3, r1
 8006a92:	2120      	movs	r1, #32
 8006a94:	7019      	strb	r1, [r3, #0]
 8006a96:	0713      	lsls	r3, r2, #28
 8006a98:	d504      	bpl.n	8006aa4 <_svfiprintf_r+0xc4>
 8006a9a:	2353      	movs	r3, #83	; 0x53
 8006a9c:	a904      	add	r1, sp, #16
 8006a9e:	185b      	adds	r3, r3, r1
 8006aa0:	212b      	movs	r1, #43	; 0x2b
 8006aa2:	7019      	strb	r1, [r3, #0]
 8006aa4:	7833      	ldrb	r3, [r6, #0]
 8006aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa8:	d016      	beq.n	8006ad8 <_svfiprintf_r+0xf8>
 8006aaa:	0035      	movs	r5, r6
 8006aac:	2100      	movs	r1, #0
 8006aae:	200a      	movs	r0, #10
 8006ab0:	68e3      	ldr	r3, [r4, #12]
 8006ab2:	782a      	ldrb	r2, [r5, #0]
 8006ab4:	1c6e      	adds	r6, r5, #1
 8006ab6:	3a30      	subs	r2, #48	; 0x30
 8006ab8:	2a09      	cmp	r2, #9
 8006aba:	d94e      	bls.n	8006b5a <_svfiprintf_r+0x17a>
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d111      	bne.n	8006ae4 <_svfiprintf_r+0x104>
 8006ac0:	e017      	b.n	8006af2 <_svfiprintf_r+0x112>
 8006ac2:	3501      	adds	r5, #1
 8006ac4:	e7b0      	b.n	8006a28 <_svfiprintf_r+0x48>
 8006ac6:	4b41      	ldr	r3, [pc, #260]	; (8006bcc <_svfiprintf_r+0x1ec>)
 8006ac8:	6822      	ldr	r2, [r4, #0]
 8006aca:	1ac0      	subs	r0, r0, r3
 8006acc:	2301      	movs	r3, #1
 8006ace:	4083      	lsls	r3, r0
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	002e      	movs	r6, r5
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	e7ce      	b.n	8006a76 <_svfiprintf_r+0x96>
 8006ad8:	9b07      	ldr	r3, [sp, #28]
 8006ada:	1d19      	adds	r1, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	9107      	str	r1, [sp, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	db01      	blt.n	8006ae8 <_svfiprintf_r+0x108>
 8006ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ae6:	e004      	b.n	8006af2 <_svfiprintf_r+0x112>
 8006ae8:	425b      	negs	r3, r3
 8006aea:	60e3      	str	r3, [r4, #12]
 8006aec:	2302      	movs	r3, #2
 8006aee:	4313      	orrs	r3, r2
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	782b      	ldrb	r3, [r5, #0]
 8006af4:	2b2e      	cmp	r3, #46	; 0x2e
 8006af6:	d10a      	bne.n	8006b0e <_svfiprintf_r+0x12e>
 8006af8:	786b      	ldrb	r3, [r5, #1]
 8006afa:	2b2a      	cmp	r3, #42	; 0x2a
 8006afc:	d135      	bne.n	8006b6a <_svfiprintf_r+0x18a>
 8006afe:	9b07      	ldr	r3, [sp, #28]
 8006b00:	3502      	adds	r5, #2
 8006b02:	1d1a      	adds	r2, r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	9207      	str	r2, [sp, #28]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	db2b      	blt.n	8006b64 <_svfiprintf_r+0x184>
 8006b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0e:	4e30      	ldr	r6, [pc, #192]	; (8006bd0 <_svfiprintf_r+0x1f0>)
 8006b10:	2203      	movs	r2, #3
 8006b12:	0030      	movs	r0, r6
 8006b14:	7829      	ldrb	r1, [r5, #0]
 8006b16:	f000 f9e5 	bl	8006ee4 <memchr>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d006      	beq.n	8006b2c <_svfiprintf_r+0x14c>
 8006b1e:	2340      	movs	r3, #64	; 0x40
 8006b20:	1b80      	subs	r0, r0, r6
 8006b22:	4083      	lsls	r3, r0
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	3501      	adds	r5, #1
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	7829      	ldrb	r1, [r5, #0]
 8006b2e:	2206      	movs	r2, #6
 8006b30:	4828      	ldr	r0, [pc, #160]	; (8006bd4 <_svfiprintf_r+0x1f4>)
 8006b32:	1c6e      	adds	r6, r5, #1
 8006b34:	7621      	strb	r1, [r4, #24]
 8006b36:	f000 f9d5 	bl	8006ee4 <memchr>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d03c      	beq.n	8006bb8 <_svfiprintf_r+0x1d8>
 8006b3e:	4b26      	ldr	r3, [pc, #152]	; (8006bd8 <_svfiprintf_r+0x1f8>)
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d125      	bne.n	8006b90 <_svfiprintf_r+0x1b0>
 8006b44:	2207      	movs	r2, #7
 8006b46:	9b07      	ldr	r3, [sp, #28]
 8006b48:	3307      	adds	r3, #7
 8006b4a:	4393      	bics	r3, r2
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	9307      	str	r3, [sp, #28]
 8006b50:	6963      	ldr	r3, [r4, #20]
 8006b52:	9a04      	ldr	r2, [sp, #16]
 8006b54:	189b      	adds	r3, r3, r2
 8006b56:	6163      	str	r3, [r4, #20]
 8006b58:	e765      	b.n	8006a26 <_svfiprintf_r+0x46>
 8006b5a:	4343      	muls	r3, r0
 8006b5c:	0035      	movs	r5, r6
 8006b5e:	2101      	movs	r1, #1
 8006b60:	189b      	adds	r3, r3, r2
 8006b62:	e7a6      	b.n	8006ab2 <_svfiprintf_r+0xd2>
 8006b64:	2301      	movs	r3, #1
 8006b66:	425b      	negs	r3, r3
 8006b68:	e7d0      	b.n	8006b0c <_svfiprintf_r+0x12c>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	200a      	movs	r0, #10
 8006b6e:	001a      	movs	r2, r3
 8006b70:	3501      	adds	r5, #1
 8006b72:	6063      	str	r3, [r4, #4]
 8006b74:	7829      	ldrb	r1, [r5, #0]
 8006b76:	1c6e      	adds	r6, r5, #1
 8006b78:	3930      	subs	r1, #48	; 0x30
 8006b7a:	2909      	cmp	r1, #9
 8006b7c:	d903      	bls.n	8006b86 <_svfiprintf_r+0x1a6>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0c5      	beq.n	8006b0e <_svfiprintf_r+0x12e>
 8006b82:	9209      	str	r2, [sp, #36]	; 0x24
 8006b84:	e7c3      	b.n	8006b0e <_svfiprintf_r+0x12e>
 8006b86:	4342      	muls	r2, r0
 8006b88:	0035      	movs	r5, r6
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	1852      	adds	r2, r2, r1
 8006b8e:	e7f1      	b.n	8006b74 <_svfiprintf_r+0x194>
 8006b90:	ab07      	add	r3, sp, #28
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	003a      	movs	r2, r7
 8006b96:	0021      	movs	r1, r4
 8006b98:	4b10      	ldr	r3, [pc, #64]	; (8006bdc <_svfiprintf_r+0x1fc>)
 8006b9a:	9803      	ldr	r0, [sp, #12]
 8006b9c:	e000      	b.n	8006ba0 <_svfiprintf_r+0x1c0>
 8006b9e:	bf00      	nop
 8006ba0:	9004      	str	r0, [sp, #16]
 8006ba2:	9b04      	ldr	r3, [sp, #16]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	d1d3      	bne.n	8006b50 <_svfiprintf_r+0x170>
 8006ba8:	89bb      	ldrh	r3, [r7, #12]
 8006baa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006bac:	065b      	lsls	r3, r3, #25
 8006bae:	d400      	bmi.n	8006bb2 <_svfiprintf_r+0x1d2>
 8006bb0:	e72d      	b.n	8006a0e <_svfiprintf_r+0x2e>
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	4240      	negs	r0, r0
 8006bb6:	e72a      	b.n	8006a0e <_svfiprintf_r+0x2e>
 8006bb8:	ab07      	add	r3, sp, #28
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	003a      	movs	r2, r7
 8006bbe:	0021      	movs	r1, r4
 8006bc0:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <_svfiprintf_r+0x1fc>)
 8006bc2:	9803      	ldr	r0, [sp, #12]
 8006bc4:	f000 f87c 	bl	8006cc0 <_printf_i>
 8006bc8:	e7ea      	b.n	8006ba0 <_svfiprintf_r+0x1c0>
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	080077a0 	.word	0x080077a0
 8006bd0:	080077a6 	.word	0x080077a6
 8006bd4:	080077aa 	.word	0x080077aa
 8006bd8:	00000000 	.word	0x00000000
 8006bdc:	0800691d 	.word	0x0800691d

08006be0 <_printf_common>:
 8006be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006be2:	0015      	movs	r5, r2
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	688a      	ldr	r2, [r1, #8]
 8006be8:	690b      	ldr	r3, [r1, #16]
 8006bea:	000c      	movs	r4, r1
 8006bec:	9000      	str	r0, [sp, #0]
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	da00      	bge.n	8006bf4 <_printf_common+0x14>
 8006bf2:	0013      	movs	r3, r2
 8006bf4:	0022      	movs	r2, r4
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	3243      	adds	r2, #67	; 0x43
 8006bfa:	7812      	ldrb	r2, [r2, #0]
 8006bfc:	2a00      	cmp	r2, #0
 8006bfe:	d001      	beq.n	8006c04 <_printf_common+0x24>
 8006c00:	3301      	adds	r3, #1
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	069b      	lsls	r3, r3, #26
 8006c08:	d502      	bpl.n	8006c10 <_printf_common+0x30>
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	3302      	adds	r3, #2
 8006c0e:	602b      	str	r3, [r5, #0]
 8006c10:	6822      	ldr	r2, [r4, #0]
 8006c12:	2306      	movs	r3, #6
 8006c14:	0017      	movs	r7, r2
 8006c16:	401f      	ands	r7, r3
 8006c18:	421a      	tst	r2, r3
 8006c1a:	d027      	beq.n	8006c6c <_printf_common+0x8c>
 8006c1c:	0023      	movs	r3, r4
 8006c1e:	3343      	adds	r3, #67	; 0x43
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	1e5a      	subs	r2, r3, #1
 8006c24:	4193      	sbcs	r3, r2
 8006c26:	6822      	ldr	r2, [r4, #0]
 8006c28:	0692      	lsls	r2, r2, #26
 8006c2a:	d430      	bmi.n	8006c8e <_printf_common+0xae>
 8006c2c:	0022      	movs	r2, r4
 8006c2e:	9901      	ldr	r1, [sp, #4]
 8006c30:	9800      	ldr	r0, [sp, #0]
 8006c32:	9e08      	ldr	r6, [sp, #32]
 8006c34:	3243      	adds	r2, #67	; 0x43
 8006c36:	47b0      	blx	r6
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d025      	beq.n	8006c88 <_printf_common+0xa8>
 8006c3c:	2306      	movs	r3, #6
 8006c3e:	6820      	ldr	r0, [r4, #0]
 8006c40:	682a      	ldr	r2, [r5, #0]
 8006c42:	68e1      	ldr	r1, [r4, #12]
 8006c44:	2500      	movs	r5, #0
 8006c46:	4003      	ands	r3, r0
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d103      	bne.n	8006c54 <_printf_common+0x74>
 8006c4c:	1a8d      	subs	r5, r1, r2
 8006c4e:	43eb      	mvns	r3, r5
 8006c50:	17db      	asrs	r3, r3, #31
 8006c52:	401d      	ands	r5, r3
 8006c54:	68a3      	ldr	r3, [r4, #8]
 8006c56:	6922      	ldr	r2, [r4, #16]
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	dd01      	ble.n	8006c60 <_printf_common+0x80>
 8006c5c:	1a9b      	subs	r3, r3, r2
 8006c5e:	18ed      	adds	r5, r5, r3
 8006c60:	2700      	movs	r7, #0
 8006c62:	42bd      	cmp	r5, r7
 8006c64:	d120      	bne.n	8006ca8 <_printf_common+0xc8>
 8006c66:	2000      	movs	r0, #0
 8006c68:	e010      	b.n	8006c8c <_printf_common+0xac>
 8006c6a:	3701      	adds	r7, #1
 8006c6c:	68e3      	ldr	r3, [r4, #12]
 8006c6e:	682a      	ldr	r2, [r5, #0]
 8006c70:	1a9b      	subs	r3, r3, r2
 8006c72:	42bb      	cmp	r3, r7
 8006c74:	ddd2      	ble.n	8006c1c <_printf_common+0x3c>
 8006c76:	0022      	movs	r2, r4
 8006c78:	2301      	movs	r3, #1
 8006c7a:	9901      	ldr	r1, [sp, #4]
 8006c7c:	9800      	ldr	r0, [sp, #0]
 8006c7e:	9e08      	ldr	r6, [sp, #32]
 8006c80:	3219      	adds	r2, #25
 8006c82:	47b0      	blx	r6
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d1f0      	bne.n	8006c6a <_printf_common+0x8a>
 8006c88:	2001      	movs	r0, #1
 8006c8a:	4240      	negs	r0, r0
 8006c8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c8e:	2030      	movs	r0, #48	; 0x30
 8006c90:	18e1      	adds	r1, r4, r3
 8006c92:	3143      	adds	r1, #67	; 0x43
 8006c94:	7008      	strb	r0, [r1, #0]
 8006c96:	0021      	movs	r1, r4
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	3145      	adds	r1, #69	; 0x45
 8006c9c:	7809      	ldrb	r1, [r1, #0]
 8006c9e:	18a2      	adds	r2, r4, r2
 8006ca0:	3243      	adds	r2, #67	; 0x43
 8006ca2:	3302      	adds	r3, #2
 8006ca4:	7011      	strb	r1, [r2, #0]
 8006ca6:	e7c1      	b.n	8006c2c <_printf_common+0x4c>
 8006ca8:	0022      	movs	r2, r4
 8006caa:	2301      	movs	r3, #1
 8006cac:	9901      	ldr	r1, [sp, #4]
 8006cae:	9800      	ldr	r0, [sp, #0]
 8006cb0:	9e08      	ldr	r6, [sp, #32]
 8006cb2:	321a      	adds	r2, #26
 8006cb4:	47b0      	blx	r6
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	d0e6      	beq.n	8006c88 <_printf_common+0xa8>
 8006cba:	3701      	adds	r7, #1
 8006cbc:	e7d1      	b.n	8006c62 <_printf_common+0x82>
	...

08006cc0 <_printf_i>:
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	b08b      	sub	sp, #44	; 0x2c
 8006cc4:	9206      	str	r2, [sp, #24]
 8006cc6:	000a      	movs	r2, r1
 8006cc8:	3243      	adds	r2, #67	; 0x43
 8006cca:	9307      	str	r3, [sp, #28]
 8006ccc:	9005      	str	r0, [sp, #20]
 8006cce:	9204      	str	r2, [sp, #16]
 8006cd0:	7e0a      	ldrb	r2, [r1, #24]
 8006cd2:	000c      	movs	r4, r1
 8006cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cd6:	2a78      	cmp	r2, #120	; 0x78
 8006cd8:	d807      	bhi.n	8006cea <_printf_i+0x2a>
 8006cda:	2a62      	cmp	r2, #98	; 0x62
 8006cdc:	d809      	bhi.n	8006cf2 <_printf_i+0x32>
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	d100      	bne.n	8006ce4 <_printf_i+0x24>
 8006ce2:	e0c1      	b.n	8006e68 <_printf_i+0x1a8>
 8006ce4:	2a58      	cmp	r2, #88	; 0x58
 8006ce6:	d100      	bne.n	8006cea <_printf_i+0x2a>
 8006ce8:	e08c      	b.n	8006e04 <_printf_i+0x144>
 8006cea:	0026      	movs	r6, r4
 8006cec:	3642      	adds	r6, #66	; 0x42
 8006cee:	7032      	strb	r2, [r6, #0]
 8006cf0:	e022      	b.n	8006d38 <_printf_i+0x78>
 8006cf2:	0010      	movs	r0, r2
 8006cf4:	3863      	subs	r0, #99	; 0x63
 8006cf6:	2815      	cmp	r0, #21
 8006cf8:	d8f7      	bhi.n	8006cea <_printf_i+0x2a>
 8006cfa:	f7f9 fa0b 	bl	8000114 <__gnu_thumb1_case_shi>
 8006cfe:	0016      	.short	0x0016
 8006d00:	fff6001f 	.word	0xfff6001f
 8006d04:	fff6fff6 	.word	0xfff6fff6
 8006d08:	001ffff6 	.word	0x001ffff6
 8006d0c:	fff6fff6 	.word	0xfff6fff6
 8006d10:	fff6fff6 	.word	0xfff6fff6
 8006d14:	003600a8 	.word	0x003600a8
 8006d18:	fff6009a 	.word	0xfff6009a
 8006d1c:	00b9fff6 	.word	0x00b9fff6
 8006d20:	0036fff6 	.word	0x0036fff6
 8006d24:	fff6fff6 	.word	0xfff6fff6
 8006d28:	009e      	.short	0x009e
 8006d2a:	0026      	movs	r6, r4
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	3642      	adds	r6, #66	; 0x42
 8006d30:	1d11      	adds	r1, r2, #4
 8006d32:	6019      	str	r1, [r3, #0]
 8006d34:	6813      	ldr	r3, [r2, #0]
 8006d36:	7033      	strb	r3, [r6, #0]
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0a7      	b.n	8006e8c <_printf_i+0x1cc>
 8006d3c:	6808      	ldr	r0, [r1, #0]
 8006d3e:	6819      	ldr	r1, [r3, #0]
 8006d40:	1d0a      	adds	r2, r1, #4
 8006d42:	0605      	lsls	r5, r0, #24
 8006d44:	d50b      	bpl.n	8006d5e <_printf_i+0x9e>
 8006d46:	680d      	ldr	r5, [r1, #0]
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	da03      	bge.n	8006d56 <_printf_i+0x96>
 8006d4e:	232d      	movs	r3, #45	; 0x2d
 8006d50:	9a04      	ldr	r2, [sp, #16]
 8006d52:	426d      	negs	r5, r5
 8006d54:	7013      	strb	r3, [r2, #0]
 8006d56:	4b61      	ldr	r3, [pc, #388]	; (8006edc <_printf_i+0x21c>)
 8006d58:	270a      	movs	r7, #10
 8006d5a:	9303      	str	r3, [sp, #12]
 8006d5c:	e01b      	b.n	8006d96 <_printf_i+0xd6>
 8006d5e:	680d      	ldr	r5, [r1, #0]
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	0641      	lsls	r1, r0, #25
 8006d64:	d5f1      	bpl.n	8006d4a <_printf_i+0x8a>
 8006d66:	b22d      	sxth	r5, r5
 8006d68:	e7ef      	b.n	8006d4a <_printf_i+0x8a>
 8006d6a:	680d      	ldr	r5, [r1, #0]
 8006d6c:	6819      	ldr	r1, [r3, #0]
 8006d6e:	1d08      	adds	r0, r1, #4
 8006d70:	6018      	str	r0, [r3, #0]
 8006d72:	062e      	lsls	r6, r5, #24
 8006d74:	d501      	bpl.n	8006d7a <_printf_i+0xba>
 8006d76:	680d      	ldr	r5, [r1, #0]
 8006d78:	e003      	b.n	8006d82 <_printf_i+0xc2>
 8006d7a:	066d      	lsls	r5, r5, #25
 8006d7c:	d5fb      	bpl.n	8006d76 <_printf_i+0xb6>
 8006d7e:	680d      	ldr	r5, [r1, #0]
 8006d80:	b2ad      	uxth	r5, r5
 8006d82:	4b56      	ldr	r3, [pc, #344]	; (8006edc <_printf_i+0x21c>)
 8006d84:	2708      	movs	r7, #8
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	2a6f      	cmp	r2, #111	; 0x6f
 8006d8a:	d000      	beq.n	8006d8e <_printf_i+0xce>
 8006d8c:	3702      	adds	r7, #2
 8006d8e:	0023      	movs	r3, r4
 8006d90:	2200      	movs	r2, #0
 8006d92:	3343      	adds	r3, #67	; 0x43
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	6863      	ldr	r3, [r4, #4]
 8006d98:	60a3      	str	r3, [r4, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	db03      	blt.n	8006da6 <_printf_i+0xe6>
 8006d9e:	2204      	movs	r2, #4
 8006da0:	6821      	ldr	r1, [r4, #0]
 8006da2:	4391      	bics	r1, r2
 8006da4:	6021      	str	r1, [r4, #0]
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	d102      	bne.n	8006db0 <_printf_i+0xf0>
 8006daa:	9e04      	ldr	r6, [sp, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00c      	beq.n	8006dca <_printf_i+0x10a>
 8006db0:	9e04      	ldr	r6, [sp, #16]
 8006db2:	0028      	movs	r0, r5
 8006db4:	0039      	movs	r1, r7
 8006db6:	f7f9 fa3d 	bl	8000234 <__aeabi_uidivmod>
 8006dba:	9b03      	ldr	r3, [sp, #12]
 8006dbc:	3e01      	subs	r6, #1
 8006dbe:	5c5b      	ldrb	r3, [r3, r1]
 8006dc0:	7033      	strb	r3, [r6, #0]
 8006dc2:	002b      	movs	r3, r5
 8006dc4:	0005      	movs	r5, r0
 8006dc6:	429f      	cmp	r7, r3
 8006dc8:	d9f3      	bls.n	8006db2 <_printf_i+0xf2>
 8006dca:	2f08      	cmp	r7, #8
 8006dcc:	d109      	bne.n	8006de2 <_printf_i+0x122>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	07db      	lsls	r3, r3, #31
 8006dd2:	d506      	bpl.n	8006de2 <_printf_i+0x122>
 8006dd4:	6863      	ldr	r3, [r4, #4]
 8006dd6:	6922      	ldr	r2, [r4, #16]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	dc02      	bgt.n	8006de2 <_printf_i+0x122>
 8006ddc:	2330      	movs	r3, #48	; 0x30
 8006dde:	3e01      	subs	r6, #1
 8006de0:	7033      	strb	r3, [r6, #0]
 8006de2:	9b04      	ldr	r3, [sp, #16]
 8006de4:	1b9b      	subs	r3, r3, r6
 8006de6:	6123      	str	r3, [r4, #16]
 8006de8:	9b07      	ldr	r3, [sp, #28]
 8006dea:	0021      	movs	r1, r4
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	9805      	ldr	r0, [sp, #20]
 8006df0:	9b06      	ldr	r3, [sp, #24]
 8006df2:	aa09      	add	r2, sp, #36	; 0x24
 8006df4:	f7ff fef4 	bl	8006be0 <_printf_common>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d14c      	bne.n	8006e96 <_printf_i+0x1d6>
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	4240      	negs	r0, r0
 8006e00:	b00b      	add	sp, #44	; 0x2c
 8006e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e04:	3145      	adds	r1, #69	; 0x45
 8006e06:	700a      	strb	r2, [r1, #0]
 8006e08:	4a34      	ldr	r2, [pc, #208]	; (8006edc <_printf_i+0x21c>)
 8006e0a:	9203      	str	r2, [sp, #12]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	6821      	ldr	r1, [r4, #0]
 8006e10:	ca20      	ldmia	r2!, {r5}
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	0608      	lsls	r0, r1, #24
 8006e16:	d516      	bpl.n	8006e46 <_printf_i+0x186>
 8006e18:	07cb      	lsls	r3, r1, #31
 8006e1a:	d502      	bpl.n	8006e22 <_printf_i+0x162>
 8006e1c:	2320      	movs	r3, #32
 8006e1e:	4319      	orrs	r1, r3
 8006e20:	6021      	str	r1, [r4, #0]
 8006e22:	2710      	movs	r7, #16
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	d1b2      	bne.n	8006d8e <_printf_i+0xce>
 8006e28:	2320      	movs	r3, #32
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	439a      	bics	r2, r3
 8006e2e:	6022      	str	r2, [r4, #0]
 8006e30:	e7ad      	b.n	8006d8e <_printf_i+0xce>
 8006e32:	2220      	movs	r2, #32
 8006e34:	6809      	ldr	r1, [r1, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	6022      	str	r2, [r4, #0]
 8006e3a:	0022      	movs	r2, r4
 8006e3c:	2178      	movs	r1, #120	; 0x78
 8006e3e:	3245      	adds	r2, #69	; 0x45
 8006e40:	7011      	strb	r1, [r2, #0]
 8006e42:	4a27      	ldr	r2, [pc, #156]	; (8006ee0 <_printf_i+0x220>)
 8006e44:	e7e1      	b.n	8006e0a <_printf_i+0x14a>
 8006e46:	0648      	lsls	r0, r1, #25
 8006e48:	d5e6      	bpl.n	8006e18 <_printf_i+0x158>
 8006e4a:	b2ad      	uxth	r5, r5
 8006e4c:	e7e4      	b.n	8006e18 <_printf_i+0x158>
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	680d      	ldr	r5, [r1, #0]
 8006e52:	1d10      	adds	r0, r2, #4
 8006e54:	6949      	ldr	r1, [r1, #20]
 8006e56:	6018      	str	r0, [r3, #0]
 8006e58:	6813      	ldr	r3, [r2, #0]
 8006e5a:	062e      	lsls	r6, r5, #24
 8006e5c:	d501      	bpl.n	8006e62 <_printf_i+0x1a2>
 8006e5e:	6019      	str	r1, [r3, #0]
 8006e60:	e002      	b.n	8006e68 <_printf_i+0x1a8>
 8006e62:	066d      	lsls	r5, r5, #25
 8006e64:	d5fb      	bpl.n	8006e5e <_printf_i+0x19e>
 8006e66:	8019      	strh	r1, [r3, #0]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9e04      	ldr	r6, [sp, #16]
 8006e6c:	6123      	str	r3, [r4, #16]
 8006e6e:	e7bb      	b.n	8006de8 <_printf_i+0x128>
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	1d11      	adds	r1, r2, #4
 8006e74:	6019      	str	r1, [r3, #0]
 8006e76:	6816      	ldr	r6, [r2, #0]
 8006e78:	2100      	movs	r1, #0
 8006e7a:	0030      	movs	r0, r6
 8006e7c:	6862      	ldr	r2, [r4, #4]
 8006e7e:	f000 f831 	bl	8006ee4 <memchr>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d001      	beq.n	8006e8a <_printf_i+0x1ca>
 8006e86:	1b80      	subs	r0, r0, r6
 8006e88:	6060      	str	r0, [r4, #4]
 8006e8a:	6863      	ldr	r3, [r4, #4]
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9a04      	ldr	r2, [sp, #16]
 8006e92:	7013      	strb	r3, [r2, #0]
 8006e94:	e7a8      	b.n	8006de8 <_printf_i+0x128>
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	0032      	movs	r2, r6
 8006e9a:	9906      	ldr	r1, [sp, #24]
 8006e9c:	9805      	ldr	r0, [sp, #20]
 8006e9e:	9d07      	ldr	r5, [sp, #28]
 8006ea0:	47a8      	blx	r5
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	d0aa      	beq.n	8006dfc <_printf_i+0x13c>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	079b      	lsls	r3, r3, #30
 8006eaa:	d415      	bmi.n	8006ed8 <_printf_i+0x218>
 8006eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eae:	68e0      	ldr	r0, [r4, #12]
 8006eb0:	4298      	cmp	r0, r3
 8006eb2:	daa5      	bge.n	8006e00 <_printf_i+0x140>
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	e7a3      	b.n	8006e00 <_printf_i+0x140>
 8006eb8:	0022      	movs	r2, r4
 8006eba:	2301      	movs	r3, #1
 8006ebc:	9906      	ldr	r1, [sp, #24]
 8006ebe:	9805      	ldr	r0, [sp, #20]
 8006ec0:	9e07      	ldr	r6, [sp, #28]
 8006ec2:	3219      	adds	r2, #25
 8006ec4:	47b0      	blx	r6
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	d098      	beq.n	8006dfc <_printf_i+0x13c>
 8006eca:	3501      	adds	r5, #1
 8006ecc:	68e3      	ldr	r3, [r4, #12]
 8006ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	42ab      	cmp	r3, r5
 8006ed4:	dcf0      	bgt.n	8006eb8 <_printf_i+0x1f8>
 8006ed6:	e7e9      	b.n	8006eac <_printf_i+0x1ec>
 8006ed8:	2500      	movs	r5, #0
 8006eda:	e7f7      	b.n	8006ecc <_printf_i+0x20c>
 8006edc:	080077b1 	.word	0x080077b1
 8006ee0:	080077c2 	.word	0x080077c2

08006ee4 <memchr>:
 8006ee4:	b2c9      	uxtb	r1, r1
 8006ee6:	1882      	adds	r2, r0, r2
 8006ee8:	4290      	cmp	r0, r2
 8006eea:	d101      	bne.n	8006ef0 <memchr+0xc>
 8006eec:	2000      	movs	r0, #0
 8006eee:	4770      	bx	lr
 8006ef0:	7803      	ldrb	r3, [r0, #0]
 8006ef2:	428b      	cmp	r3, r1
 8006ef4:	d0fb      	beq.n	8006eee <memchr+0xa>
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	e7f6      	b.n	8006ee8 <memchr+0x4>

08006efa <memmove>:
 8006efa:	b510      	push	{r4, lr}
 8006efc:	4288      	cmp	r0, r1
 8006efe:	d902      	bls.n	8006f06 <memmove+0xc>
 8006f00:	188b      	adds	r3, r1, r2
 8006f02:	4298      	cmp	r0, r3
 8006f04:	d303      	bcc.n	8006f0e <memmove+0x14>
 8006f06:	2300      	movs	r3, #0
 8006f08:	e007      	b.n	8006f1a <memmove+0x20>
 8006f0a:	5c8b      	ldrb	r3, [r1, r2]
 8006f0c:	5483      	strb	r3, [r0, r2]
 8006f0e:	3a01      	subs	r2, #1
 8006f10:	d2fb      	bcs.n	8006f0a <memmove+0x10>
 8006f12:	bd10      	pop	{r4, pc}
 8006f14:	5ccc      	ldrb	r4, [r1, r3]
 8006f16:	54c4      	strb	r4, [r0, r3]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d1fa      	bne.n	8006f14 <memmove+0x1a>
 8006f1e:	e7f8      	b.n	8006f12 <memmove+0x18>

08006f20 <_free_r>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	0005      	movs	r5, r0
 8006f24:	2900      	cmp	r1, #0
 8006f26:	d010      	beq.n	8006f4a <_free_r+0x2a>
 8006f28:	1f0c      	subs	r4, r1, #4
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	da00      	bge.n	8006f32 <_free_r+0x12>
 8006f30:	18e4      	adds	r4, r4, r3
 8006f32:	0028      	movs	r0, r5
 8006f34:	f000 f918 	bl	8007168 <__malloc_lock>
 8006f38:	4a1d      	ldr	r2, [pc, #116]	; (8006fb0 <_free_r+0x90>)
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d105      	bne.n	8006f4c <_free_r+0x2c>
 8006f40:	6063      	str	r3, [r4, #4]
 8006f42:	6014      	str	r4, [r2, #0]
 8006f44:	0028      	movs	r0, r5
 8006f46:	f000 f917 	bl	8007178 <__malloc_unlock>
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d908      	bls.n	8006f62 <_free_r+0x42>
 8006f50:	6821      	ldr	r1, [r4, #0]
 8006f52:	1860      	adds	r0, r4, r1
 8006f54:	4283      	cmp	r3, r0
 8006f56:	d1f3      	bne.n	8006f40 <_free_r+0x20>
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	1841      	adds	r1, r0, r1
 8006f5e:	6021      	str	r1, [r4, #0]
 8006f60:	e7ee      	b.n	8006f40 <_free_r+0x20>
 8006f62:	001a      	movs	r2, r3
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <_free_r+0x4e>
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	d9f9      	bls.n	8006f62 <_free_r+0x42>
 8006f6e:	6811      	ldr	r1, [r2, #0]
 8006f70:	1850      	adds	r0, r2, r1
 8006f72:	42a0      	cmp	r0, r4
 8006f74:	d10b      	bne.n	8006f8e <_free_r+0x6e>
 8006f76:	6820      	ldr	r0, [r4, #0]
 8006f78:	1809      	adds	r1, r1, r0
 8006f7a:	1850      	adds	r0, r2, r1
 8006f7c:	6011      	str	r1, [r2, #0]
 8006f7e:	4283      	cmp	r3, r0
 8006f80:	d1e0      	bne.n	8006f44 <_free_r+0x24>
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	1841      	adds	r1, r0, r1
 8006f88:	6011      	str	r1, [r2, #0]
 8006f8a:	6053      	str	r3, [r2, #4]
 8006f8c:	e7da      	b.n	8006f44 <_free_r+0x24>
 8006f8e:	42a0      	cmp	r0, r4
 8006f90:	d902      	bls.n	8006f98 <_free_r+0x78>
 8006f92:	230c      	movs	r3, #12
 8006f94:	602b      	str	r3, [r5, #0]
 8006f96:	e7d5      	b.n	8006f44 <_free_r+0x24>
 8006f98:	6821      	ldr	r1, [r4, #0]
 8006f9a:	1860      	adds	r0, r4, r1
 8006f9c:	4283      	cmp	r3, r0
 8006f9e:	d103      	bne.n	8006fa8 <_free_r+0x88>
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	1841      	adds	r1, r0, r1
 8006fa6:	6021      	str	r1, [r4, #0]
 8006fa8:	6063      	str	r3, [r4, #4]
 8006faa:	6054      	str	r4, [r2, #4]
 8006fac:	e7ca      	b.n	8006f44 <_free_r+0x24>
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	200004b8 	.word	0x200004b8

08006fb4 <sbrk_aligned>:
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	4e0f      	ldr	r6, [pc, #60]	; (8006ff4 <sbrk_aligned+0x40>)
 8006fb8:	000d      	movs	r5, r1
 8006fba:	6831      	ldr	r1, [r6, #0]
 8006fbc:	0004      	movs	r4, r0
 8006fbe:	2900      	cmp	r1, #0
 8006fc0:	d102      	bne.n	8006fc8 <sbrk_aligned+0x14>
 8006fc2:	f000 f8bf 	bl	8007144 <_sbrk_r>
 8006fc6:	6030      	str	r0, [r6, #0]
 8006fc8:	0029      	movs	r1, r5
 8006fca:	0020      	movs	r0, r4
 8006fcc:	f000 f8ba 	bl	8007144 <_sbrk_r>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d00a      	beq.n	8006fea <sbrk_aligned+0x36>
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	1cc5      	adds	r5, r0, #3
 8006fd8:	439d      	bics	r5, r3
 8006fda:	42a8      	cmp	r0, r5
 8006fdc:	d007      	beq.n	8006fee <sbrk_aligned+0x3a>
 8006fde:	1a29      	subs	r1, r5, r0
 8006fe0:	0020      	movs	r0, r4
 8006fe2:	f000 f8af 	bl	8007144 <_sbrk_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	d101      	bne.n	8006fee <sbrk_aligned+0x3a>
 8006fea:	2501      	movs	r5, #1
 8006fec:	426d      	negs	r5, r5
 8006fee:	0028      	movs	r0, r5
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	200004bc 	.word	0x200004bc

08006ff8 <_malloc_r>:
 8006ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	1ccb      	adds	r3, r1, #3
 8006ffe:	4393      	bics	r3, r2
 8007000:	3308      	adds	r3, #8
 8007002:	0006      	movs	r6, r0
 8007004:	001f      	movs	r7, r3
 8007006:	2b0c      	cmp	r3, #12
 8007008:	d232      	bcs.n	8007070 <_malloc_r+0x78>
 800700a:	270c      	movs	r7, #12
 800700c:	42b9      	cmp	r1, r7
 800700e:	d831      	bhi.n	8007074 <_malloc_r+0x7c>
 8007010:	0030      	movs	r0, r6
 8007012:	f000 f8a9 	bl	8007168 <__malloc_lock>
 8007016:	4d32      	ldr	r5, [pc, #200]	; (80070e0 <_malloc_r+0xe8>)
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	001c      	movs	r4, r3
 800701c:	2c00      	cmp	r4, #0
 800701e:	d12e      	bne.n	800707e <_malloc_r+0x86>
 8007020:	0039      	movs	r1, r7
 8007022:	0030      	movs	r0, r6
 8007024:	f7ff ffc6 	bl	8006fb4 <sbrk_aligned>
 8007028:	0004      	movs	r4, r0
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	d11e      	bne.n	800706c <_malloc_r+0x74>
 800702e:	682c      	ldr	r4, [r5, #0]
 8007030:	0025      	movs	r5, r4
 8007032:	2d00      	cmp	r5, #0
 8007034:	d14a      	bne.n	80070cc <_malloc_r+0xd4>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	0029      	movs	r1, r5
 800703a:	18e3      	adds	r3, r4, r3
 800703c:	0030      	movs	r0, r6
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	f000 f880 	bl	8007144 <_sbrk_r>
 8007044:	9b01      	ldr	r3, [sp, #4]
 8007046:	4283      	cmp	r3, r0
 8007048:	d143      	bne.n	80070d2 <_malloc_r+0xda>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	3703      	adds	r7, #3
 800704e:	1aff      	subs	r7, r7, r3
 8007050:	2303      	movs	r3, #3
 8007052:	439f      	bics	r7, r3
 8007054:	3708      	adds	r7, #8
 8007056:	2f0c      	cmp	r7, #12
 8007058:	d200      	bcs.n	800705c <_malloc_r+0x64>
 800705a:	270c      	movs	r7, #12
 800705c:	0039      	movs	r1, r7
 800705e:	0030      	movs	r0, r6
 8007060:	f7ff ffa8 	bl	8006fb4 <sbrk_aligned>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d034      	beq.n	80070d2 <_malloc_r+0xda>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	19df      	adds	r7, r3, r7
 800706c:	6027      	str	r7, [r4, #0]
 800706e:	e013      	b.n	8007098 <_malloc_r+0xa0>
 8007070:	2b00      	cmp	r3, #0
 8007072:	dacb      	bge.n	800700c <_malloc_r+0x14>
 8007074:	230c      	movs	r3, #12
 8007076:	2500      	movs	r5, #0
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	0028      	movs	r0, r5
 800707c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	1bd1      	subs	r1, r2, r7
 8007082:	d420      	bmi.n	80070c6 <_malloc_r+0xce>
 8007084:	290b      	cmp	r1, #11
 8007086:	d917      	bls.n	80070b8 <_malloc_r+0xc0>
 8007088:	19e2      	adds	r2, r4, r7
 800708a:	6027      	str	r7, [r4, #0]
 800708c:	42a3      	cmp	r3, r4
 800708e:	d111      	bne.n	80070b4 <_malloc_r+0xbc>
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	6863      	ldr	r3, [r4, #4]
 8007094:	6011      	str	r1, [r2, #0]
 8007096:	6053      	str	r3, [r2, #4]
 8007098:	0030      	movs	r0, r6
 800709a:	0025      	movs	r5, r4
 800709c:	f000 f86c 	bl	8007178 <__malloc_unlock>
 80070a0:	2207      	movs	r2, #7
 80070a2:	350b      	adds	r5, #11
 80070a4:	1d23      	adds	r3, r4, #4
 80070a6:	4395      	bics	r5, r2
 80070a8:	1aea      	subs	r2, r5, r3
 80070aa:	429d      	cmp	r5, r3
 80070ac:	d0e5      	beq.n	800707a <_malloc_r+0x82>
 80070ae:	1b5b      	subs	r3, r3, r5
 80070b0:	50a3      	str	r3, [r4, r2]
 80070b2:	e7e2      	b.n	800707a <_malloc_r+0x82>
 80070b4:	605a      	str	r2, [r3, #4]
 80070b6:	e7ec      	b.n	8007092 <_malloc_r+0x9a>
 80070b8:	6862      	ldr	r2, [r4, #4]
 80070ba:	42a3      	cmp	r3, r4
 80070bc:	d101      	bne.n	80070c2 <_malloc_r+0xca>
 80070be:	602a      	str	r2, [r5, #0]
 80070c0:	e7ea      	b.n	8007098 <_malloc_r+0xa0>
 80070c2:	605a      	str	r2, [r3, #4]
 80070c4:	e7e8      	b.n	8007098 <_malloc_r+0xa0>
 80070c6:	0023      	movs	r3, r4
 80070c8:	6864      	ldr	r4, [r4, #4]
 80070ca:	e7a7      	b.n	800701c <_malloc_r+0x24>
 80070cc:	002c      	movs	r4, r5
 80070ce:	686d      	ldr	r5, [r5, #4]
 80070d0:	e7af      	b.n	8007032 <_malloc_r+0x3a>
 80070d2:	230c      	movs	r3, #12
 80070d4:	0030      	movs	r0, r6
 80070d6:	6033      	str	r3, [r6, #0]
 80070d8:	f000 f84e 	bl	8007178 <__malloc_unlock>
 80070dc:	e7cd      	b.n	800707a <_malloc_r+0x82>
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	200004b8 	.word	0x200004b8

080070e4 <_realloc_r>:
 80070e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070e6:	0007      	movs	r7, r0
 80070e8:	000e      	movs	r6, r1
 80070ea:	0014      	movs	r4, r2
 80070ec:	2900      	cmp	r1, #0
 80070ee:	d105      	bne.n	80070fc <_realloc_r+0x18>
 80070f0:	0011      	movs	r1, r2
 80070f2:	f7ff ff81 	bl	8006ff8 <_malloc_r>
 80070f6:	0005      	movs	r5, r0
 80070f8:	0028      	movs	r0, r5
 80070fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070fc:	2a00      	cmp	r2, #0
 80070fe:	d103      	bne.n	8007108 <_realloc_r+0x24>
 8007100:	f7ff ff0e 	bl	8006f20 <_free_r>
 8007104:	0025      	movs	r5, r4
 8007106:	e7f7      	b.n	80070f8 <_realloc_r+0x14>
 8007108:	f000 f83e 	bl	8007188 <_malloc_usable_size_r>
 800710c:	9001      	str	r0, [sp, #4]
 800710e:	4284      	cmp	r4, r0
 8007110:	d803      	bhi.n	800711a <_realloc_r+0x36>
 8007112:	0035      	movs	r5, r6
 8007114:	0843      	lsrs	r3, r0, #1
 8007116:	42a3      	cmp	r3, r4
 8007118:	d3ee      	bcc.n	80070f8 <_realloc_r+0x14>
 800711a:	0021      	movs	r1, r4
 800711c:	0038      	movs	r0, r7
 800711e:	f7ff ff6b 	bl	8006ff8 <_malloc_r>
 8007122:	1e05      	subs	r5, r0, #0
 8007124:	d0e8      	beq.n	80070f8 <_realloc_r+0x14>
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	0022      	movs	r2, r4
 800712a:	429c      	cmp	r4, r3
 800712c:	d900      	bls.n	8007130 <_realloc_r+0x4c>
 800712e:	001a      	movs	r2, r3
 8007130:	0031      	movs	r1, r6
 8007132:	0028      	movs	r0, r5
 8007134:	f7ff fbc0 	bl	80068b8 <memcpy>
 8007138:	0031      	movs	r1, r6
 800713a:	0038      	movs	r0, r7
 800713c:	f7ff fef0 	bl	8006f20 <_free_r>
 8007140:	e7da      	b.n	80070f8 <_realloc_r+0x14>
	...

08007144 <_sbrk_r>:
 8007144:	2300      	movs	r3, #0
 8007146:	b570      	push	{r4, r5, r6, lr}
 8007148:	4d06      	ldr	r5, [pc, #24]	; (8007164 <_sbrk_r+0x20>)
 800714a:	0004      	movs	r4, r0
 800714c:	0008      	movs	r0, r1
 800714e:	602b      	str	r3, [r5, #0]
 8007150:	f7fa ff82 	bl	8002058 <_sbrk>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d103      	bne.n	8007160 <_sbrk_r+0x1c>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d000      	beq.n	8007160 <_sbrk_r+0x1c>
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	bd70      	pop	{r4, r5, r6, pc}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	200004c0 	.word	0x200004c0

08007168 <__malloc_lock>:
 8007168:	b510      	push	{r4, lr}
 800716a:	4802      	ldr	r0, [pc, #8]	; (8007174 <__malloc_lock+0xc>)
 800716c:	f000 f814 	bl	8007198 <__retarget_lock_acquire_recursive>
 8007170:	bd10      	pop	{r4, pc}
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	200004c4 	.word	0x200004c4

08007178 <__malloc_unlock>:
 8007178:	b510      	push	{r4, lr}
 800717a:	4802      	ldr	r0, [pc, #8]	; (8007184 <__malloc_unlock+0xc>)
 800717c:	f000 f80d 	bl	800719a <__retarget_lock_release_recursive>
 8007180:	bd10      	pop	{r4, pc}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	200004c4 	.word	0x200004c4

08007188 <_malloc_usable_size_r>:
 8007188:	1f0b      	subs	r3, r1, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	1f18      	subs	r0, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	da01      	bge.n	8007196 <_malloc_usable_size_r+0xe>
 8007192:	580b      	ldr	r3, [r1, r0]
 8007194:	18c0      	adds	r0, r0, r3
 8007196:	4770      	bx	lr

08007198 <__retarget_lock_acquire_recursive>:
 8007198:	4770      	bx	lr

0800719a <__retarget_lock_release_recursive>:
 800719a:	4770      	bx	lr

0800719c <_init>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr

080071a8 <_fini>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr
