
reciever2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b0  080077b0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080077b0  080077b0  000177b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b8  080077b8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080077c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000078  08007838  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200004c8  08007838  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010416  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f5  00000000  00000000  000304b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000328b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  000335f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c403  00000000  00000000  00034258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f893  00000000  00000000  0005065b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3ca4  00000000  00000000  0005feee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113b92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003308  00000000  00000000  00113be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007178 	.word	0x08007178

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08007178 	.word	0x08007178

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <NRF24_DelayMicroSeconds+0x38>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	490a      	ldr	r1, [pc, #40]	; (800067c <NRF24_DelayMicroSeconds+0x3c>)
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff fd68 	bl	8000128 <__udivsi3>
 8000658:	0003      	movs	r3, r0
 800065a:	001a      	movs	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4353      	muls	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	1e5a      	subs	r2, r3, #1
 8000668:	60fa      	str	r2, [r7, #12]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1fa      	bne.n	8000664 <NRF24_DelayMicroSeconds+0x24>
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b004      	add	sp, #16
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000008 	.word	0x20000008
 800067c:	002dc6c0 	.word	0x002dc6c0

08000680 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d008      	beq.n	80006a0 <NRF24_csn+0x20>
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <NRF24_csn+0x38>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <NRF24_csn+0x3c>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	2201      	movs	r2, #1
 8000698:	0019      	movs	r1, r3
 800069a:	f002 f903 	bl	80028a4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800069e:	e007      	b.n	80006b0 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <NRF24_csn+0x38>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <NRF24_csn+0x3c>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	0019      	movs	r1, r3
 80006ac:	f002 f8fa 	bl	80028a4 <HAL_GPIO_WritePin>
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b002      	add	sp, #8
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000009c 	.word	0x2000009c
 80006bc:	200000a0 	.word	0x200000a0

080006c0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d008      	beq.n	80006e0 <NRF24_ce+0x20>
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <NRF24_ce+0x38>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <NRF24_ce+0x3c>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	2201      	movs	r2, #1
 80006d8:	0019      	movs	r1, r3
 80006da:	f002 f8e3 	bl	80028a4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80006de:	e007      	b.n	80006f0 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <NRF24_ce+0x38>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <NRF24_ce+0x3c>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	2200      	movs	r2, #0
 80006ea:	0019      	movs	r1, r3
 80006ec:	f002 f8da 	bl	80028a4 <HAL_GPIO_WritePin>
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000009c 	.word	0x2000009c
 80006fc:	200000a2 	.word	0x200000a2

08000700 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	0002      	movs	r2, r0
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ffb7 	bl	8000680 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	221f      	movs	r2, #31
 8000718:	4013      	ands	r3, r2
 800071a:	b2da      	uxtb	r2, r3
 800071c:	240c      	movs	r4, #12
 800071e:	193b      	adds	r3, r7, r4
 8000720:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000722:	1939      	adds	r1, r7, r4
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <NRF24_read_register+0x58>)
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	2201      	movs	r2, #1
 800072a:	f003 f923 	bl	8003974 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800072e:	193b      	adds	r3, r7, r4
 8000730:	1c59      	adds	r1, r3, #1
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <NRF24_read_register+0x58>)
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	2201      	movs	r2, #1
 8000738:	f003 fa74 	bl	8003c24 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800073c:	250f      	movs	r5, #15
 800073e:	197b      	adds	r3, r7, r5
 8000740:	193a      	adds	r2, r7, r4
 8000742:	7852      	ldrb	r2, [r2, #1]
 8000744:	701a      	strb	r2, [r3, #0]
	//Bring CSN high
	NRF24_csn(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ff9a 	bl	8000680 <NRF24_csn>
	return retData;
 800074c:	197b      	adds	r3, r7, r5
 800074e:	781b      	ldrb	r3, [r3, #0]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b004      	add	sp, #16
 8000756:	bdb0      	pop	{r4, r5, r7, pc}
 8000758:	200000a4 	.word	0x200000a4

0800075c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6039      	str	r1, [r7, #0]
 8000764:	0011      	movs	r1, r2
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	1c02      	adds	r2, r0, #0
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	1c0a      	adds	r2, r1, #0
 8000770:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff ff84 	bl	8000680 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	221f      	movs	r2, #31
 800077e:	4013      	ands	r3, r2
 8000780:	b2da      	uxtb	r2, r3
 8000782:	210c      	movs	r1, #12
 8000784:	187b      	adds	r3, r7, r1
 8000786:	701a      	strb	r2, [r3, #0]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000788:	1879      	adds	r1, r7, r1
 800078a:	480a      	ldr	r0, [pc, #40]	; (80007b4 <NRF24_read_registerN+0x58>)
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2201      	movs	r2, #1
 8000790:	f003 f8f0 	bl	8003974 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000794:	1dbb      	adds	r3, r7, #6
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b29a      	uxth	r2, r3
 800079a:	6839      	ldr	r1, [r7, #0]
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <NRF24_read_registerN+0x58>)
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	f003 fa40 	bl	8003c24 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff ff6b 	bl	8000680 <NRF24_csn>
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b004      	add	sp, #16
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	200000a4 	.word	0x200000a4

080007b8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	1c0a      	adds	r2, r1, #0
 80007c8:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ff58 	bl	8000680 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2220      	movs	r2, #32
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	210c      	movs	r1, #12
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = value;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	1dba      	adds	r2, r7, #6
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80007e8:	1879      	adds	r1, r7, r1
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <NRF24_write_register+0x4c>)
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	2202      	movs	r2, #2
 80007f0:	f003 f8c0 	bl	8003974 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff ff43 	bl	8000680 <NRF24_csn>
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b004      	add	sp, #16
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	200000a4 	.word	0x200000a4

08000808 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6039      	str	r1, [r7, #0]
 8000810:	0011      	movs	r1, r2
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	1c02      	adds	r2, r0, #0
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	1dbb      	adds	r3, r7, #6
 800081a:	1c0a      	adds	r2, r1, #0
 800081c:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff ff2e 	bl	8000680 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2220      	movs	r2, #32
 800082a:	4313      	orrs	r3, r2
 800082c:	b2da      	uxtb	r2, r3
 800082e:	210c      	movs	r1, #12
 8000830:	187b      	adds	r3, r7, r1
 8000832:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000834:	1879      	adds	r1, r7, r1
 8000836:	480a      	ldr	r0, [pc, #40]	; (8000860 <NRF24_write_registerN+0x58>)
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	2201      	movs	r2, #1
 800083c:	f003 f89a 	bl	8003974 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	6839      	ldr	r1, [r7, #0]
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <NRF24_write_registerN+0x58>)
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	f003 f892 	bl	8003974 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff ff15 	bl	8000680 <NRF24_csn>
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	200000a4 	.word	0x200000a4

08000864 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	000a      	movs	r2, r1
 800086e:	1cfb      	adds	r3, r7, #3
 8000870:	701a      	strb	r2, [r3, #0]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff ff04 	bl	8000680 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000878:	210f      	movs	r1, #15
 800087a:	187b      	adds	r3, r7, r1
 800087c:	22a0      	movs	r2, #160	; 0xa0
 800087e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000880:	1879      	adds	r1, r7, r1
 8000882:	480a      	ldr	r0, [pc, #40]	; (80008ac <NRF24_write_payload+0x48>)
 8000884:	2364      	movs	r3, #100	; 0x64
 8000886:	2201      	movs	r2, #1
 8000888:	f003 f874 	bl	8003974 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800088c:	1cfb      	adds	r3, r7, #3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <NRF24_write_payload+0x48>)
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	f003 f86c 	bl	8003974 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff feef 	bl	8000680 <NRF24_csn>
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	200000a4 	.word	0x200000a4

080008b0 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80008b4:	21ff      	movs	r1, #255	; 0xff
 80008b6:	20e1      	movs	r0, #225	; 0xe1
 80008b8:	f7ff ff7e 	bl	80007b8 <NRF24_write_register>
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80008c6:	21ff      	movs	r1, #255	; 0xff
 80008c8:	20e2      	movs	r0, #226	; 0xe2
 80008ca:	f7ff ff75 	bl	80007b8 <NRF24_write_register>
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80008da:	1dfc      	adds	r4, r7, #7
 80008dc:	2007      	movs	r0, #7
 80008de:	f7ff ff0f 	bl	8000700 <NRF24_read_register>
 80008e2:	0003      	movs	r3, r0
 80008e4:	7023      	strb	r3, [r4, #0]
	return statReg;
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b003      	add	sp, #12
 80008f0:	bd90      	pop	{r4, r7, pc}
	...

080008f4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80008f4:	b082      	sub	sp, #8
 80008f6:	b5b0      	push	{r4, r5, r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	0008      	movs	r0, r1
 8000900:	0011      	movs	r1, r2
 8000902:	2204      	movs	r2, #4
 8000904:	2418      	movs	r4, #24
 8000906:	1912      	adds	r2, r2, r4
 8000908:	2508      	movs	r5, #8
 800090a:	46ac      	mov	ip, r5
 800090c:	44bc      	add	ip, r7
 800090e:	4462      	add	r2, ip
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	1cbb      	adds	r3, r7, #2
 8000914:	1c02      	adds	r2, r0, #0
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	003b      	movs	r3, r7
 800091a:	1c0a      	adds	r2, r1, #0
 800091c:	801a      	strh	r2, [r3, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800091e:	4a72      	ldr	r2, [pc, #456]	; (8000ae8 <NRF24_begin+0x1f4>)
 8000920:	2304      	movs	r3, #4
 8000922:	191b      	adds	r3, r3, r4
 8000924:	2108      	movs	r1, #8
 8000926:	468c      	mov	ip, r1
 8000928:	44bc      	add	ip, r7
 800092a:	4463      	add	r3, ip
 800092c:	0010      	movs	r0, r2
 800092e:	0019      	movs	r1, r3
 8000930:	2364      	movs	r3, #100	; 0x64
 8000932:	001a      	movs	r2, r3
 8000934:	f005 ffae 	bl	8006894 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000938:	4b6c      	ldr	r3, [pc, #432]	; (8000aec <NRF24_begin+0x1f8>)
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800093e:	4b6c      	ldr	r3, [pc, #432]	; (8000af0 <NRF24_begin+0x1fc>)
 8000940:	1cba      	adds	r2, r7, #2
 8000942:	8812      	ldrh	r2, [r2, #0]
 8000944:	801a      	strh	r2, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000946:	4b6b      	ldr	r3, [pc, #428]	; (8000af4 <NRF24_begin+0x200>)
 8000948:	003a      	movs	r2, r7
 800094a:	8812      	ldrh	r2, [r2, #0]
 800094c:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff fe96 	bl	8000680 <NRF24_csn>
	NRF24_ce(0);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff feb3 	bl	80006c0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800095a:	2005      	movs	r0, #5
 800095c:	f001 fc56 	bl	800220c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000960:	2108      	movs	r1, #8
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff ff28 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000968:	213f      	movs	r1, #63	; 0x3f
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff ff24 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000970:	2103      	movs	r1, #3
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff ff20 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000978:	2103      	movs	r1, #3
 800097a:	2003      	movs	r0, #3
 800097c:	f7ff ff1c 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000980:	2103      	movs	r1, #3
 8000982:	2004      	movs	r0, #4
 8000984:	f7ff ff18 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000988:	2102      	movs	r1, #2
 800098a:	2005      	movs	r0, #5
 800098c:	f7ff ff14 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000990:	210f      	movs	r1, #15
 8000992:	2006      	movs	r0, #6
 8000994:	f7ff ff10 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000998:	210e      	movs	r1, #14
 800099a:	2007      	movs	r0, #7
 800099c:	f7ff ff0c 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80009a0:	2100      	movs	r1, #0
 80009a2:	2008      	movs	r0, #8
 80009a4:	f7ff ff08 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80009a8:	2100      	movs	r1, #0
 80009aa:	2009      	movs	r0, #9
 80009ac:	f7ff ff04 	bl	80007b8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80009b0:	2108      	movs	r1, #8
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	22e7      	movs	r2, #231	; 0xe7
 80009b6:	711a      	strb	r2, [r3, #4]
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	22e7      	movs	r2, #231	; 0xe7
 80009bc:	70da      	strb	r2, [r3, #3]
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	22e7      	movs	r2, #231	; 0xe7
 80009c2:	709a      	strb	r2, [r3, #2]
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	22e7      	movs	r2, #231	; 0xe7
 80009c8:	705a      	strb	r2, [r3, #1]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	22e7      	movs	r2, #231	; 0xe7
 80009ce:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80009d0:	000c      	movs	r4, r1
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2205      	movs	r2, #5
 80009d6:	0019      	movs	r1, r3
 80009d8:	200a      	movs	r0, #10
 80009da:	f7ff ff15 	bl	8000808 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	22c2      	movs	r2, #194	; 0xc2
 80009e4:	711a      	strb	r2, [r3, #4]
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	22c2      	movs	r2, #194	; 0xc2
 80009ea:	70da      	strb	r2, [r3, #3]
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	22c2      	movs	r2, #194	; 0xc2
 80009f0:	709a      	strb	r2, [r3, #2]
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	22c2      	movs	r2, #194	; 0xc2
 80009f6:	705a      	strb	r2, [r3, #1]
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	22c2      	movs	r2, #194	; 0xc2
 80009fc:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80009fe:	000c      	movs	r4, r1
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2205      	movs	r2, #5
 8000a04:	0019      	movs	r1, r3
 8000a06:	200b      	movs	r0, #11
 8000a08:	f7ff fefe 	bl	8000808 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000a0c:	21c3      	movs	r1, #195	; 0xc3
 8000a0e:	200c      	movs	r0, #12
 8000a10:	f7ff fed2 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000a14:	21c4      	movs	r1, #196	; 0xc4
 8000a16:	200d      	movs	r0, #13
 8000a18:	f7ff fece 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000a1c:	21c5      	movs	r1, #197	; 0xc5
 8000a1e:	200e      	movs	r0, #14
 8000a20:	f7ff feca 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000a24:	21c6      	movs	r1, #198	; 0xc6
 8000a26:	200f      	movs	r0, #15
 8000a28:	f7ff fec6 	bl	80007b8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000a2c:	0021      	movs	r1, r4
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	22e7      	movs	r2, #231	; 0xe7
 8000a32:	711a      	strb	r2, [r3, #4]
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	22e7      	movs	r2, #231	; 0xe7
 8000a38:	70da      	strb	r2, [r3, #3]
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	22e7      	movs	r2, #231	; 0xe7
 8000a3e:	709a      	strb	r2, [r3, #2]
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	22e7      	movs	r2, #231	; 0xe7
 8000a44:	705a      	strb	r2, [r3, #1]
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	22e7      	movs	r2, #231	; 0xe7
 8000a4a:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2205      	movs	r2, #5
 8000a50:	0019      	movs	r1, r3
 8000a52:	2010      	movs	r0, #16
 8000a54:	f7ff fed8 	bl	8000808 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2011      	movs	r0, #17
 8000a5c:	f7ff feac 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2012      	movs	r0, #18
 8000a64:	f7ff fea8 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2013      	movs	r0, #19
 8000a6c:	f7ff fea4 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000a70:	2100      	movs	r1, #0
 8000a72:	2014      	movs	r0, #20
 8000a74:	f7ff fea0 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2015      	movs	r0, #21
 8000a7c:	f7ff fe9c 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000a80:	2100      	movs	r1, #0
 8000a82:	2016      	movs	r0, #22
 8000a84:	f7ff fe98 	bl	80007b8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000a88:	f000 faf8 	bl	800107c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	201c      	movs	r0, #28
 8000a90:	f7ff fe92 	bl	80007b8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000a94:	2100      	movs	r1, #0
 8000a96:	201d      	movs	r0, #29
 8000a98:	f7ff fe8e 	bl	80007b8 <NRF24_write_register>
	printRadioSettings();
 8000a9c:	f000 fb0a 	bl	80010b4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f8be 	bl	8000c24 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f94e 	bl	8000d4a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f000 f99c 	bl	8000dec <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f000 f9f5 	bl	8000ea4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000aba:	f000 f913 	bl	8000ce4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000abe:	2020      	movs	r0, #32
 8000ac0:	f000 f8ea 	bl	8000c98 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000ac4:	f000 fad1 	bl	800106a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000ac8:	204c      	movs	r0, #76	; 0x4c
 8000aca:	f000 f8c9 	bl	8000c60 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000ace:	f7ff feef 	bl	80008b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000ad2:	f7ff fef6 	bl	80008c2 <NRF24_flush_rx>

	NRF24_powerDown();
 8000ad6:	f000 fa1d 	bl	8000f14 <NRF24_powerDown>

}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b004      	add	sp, #16
 8000ae0:	bcb0      	pop	{r4, r5, r7}
 8000ae2:	bc08      	pop	{r3}
 8000ae4:	b002      	add	sp, #8
 8000ae6:	4718      	bx	r3
 8000ae8:	200000a4 	.word	0x200000a4
 8000aec:	2000009c 	.word	0x2000009c
 8000af0:	200000a0 	.word	0x200000a0
 8000af4:	200000a2 	.word	0x200000a2

08000af8 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fddf 	bl	80006c0 <NRF24_ce>
	NRF24_flush_tx();
 8000b02:	f7ff fed5 	bl	80008b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000b06:	f7ff fedc 	bl	80008c2 <NRF24_flush_rx>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	000a      	movs	r2, r1
 8000b1a:	1cfb      	adds	r3, r7, #3
 8000b1c:	701a      	strb	r2, [r3, #0]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000b1e:	f000 faa4 	bl	800106a <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000b22:	1cfb      	adds	r3, r7, #3
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	0011      	movs	r1, r2
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fa3d 	bl	8000faa <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000b30:	f001 fb62 	bl	80021f8 <HAL_GetTick>
 8000b34:	0003      	movs	r3, r0
 8000b36:	617b      	str	r3, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000b38:	230a      	movs	r3, #10
 8000b3a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000b3c:	230d      	movs	r3, #13
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	2201      	movs	r2, #1
 8000b42:	0019      	movs	r1, r3
 8000b44:	2008      	movs	r0, #8
 8000b46:	f7ff fe09 	bl	800075c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000b4a:	250f      	movs	r5, #15
 8000b4c:	197c      	adds	r4, r7, r5
 8000b4e:	f7ff fec1 	bl	80008d4 <NRF24_get_status>
 8000b52:	0003      	movs	r3, r0
 8000b54:	7023      	strb	r3, [r4, #0]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000b56:	197b      	adds	r3, r7, r5
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2230      	movs	r2, #48	; 0x30
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	d107      	bne.n	8000b70 <NRF24_write+0x60>
 8000b60:	f001 fb4a 	bl	80021f8 <HAL_GetTick>
 8000b64:	0002      	movs	r2, r0
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8e5      	bhi.n	8000b3c <NRF24_write+0x2c>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000b70:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <NRF24_write+0xa4>)
 8000b72:	230b      	movs	r3, #11
 8000b74:	18f9      	adds	r1, r7, r3
 8000b76:	240c      	movs	r4, #12
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fa42 	bl	8001004 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000b80:	230e      	movs	r3, #14
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	193a      	adds	r2, r7, r4
 8000b86:	7812      	ldrb	r2, [r2, #0]
 8000b88:	701a      	strb	r2, [r3, #0]
	if ( ack_payload_available )
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <NRF24_write+0xa4>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d005      	beq.n	8000b9e <NRF24_write+0x8e>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000b92:	f000 f89d 	bl	8000cd0 <NRF24_getDynamicPayloadSize>
 8000b96:	0003      	movs	r3, r0
 8000b98:	001a      	movs	r2, r3
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <NRF24_write+0xa8>)
 8000b9c:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8000b9e:	f000 f80d 	bl	8000bbc <NRF24_available>
	NRF24_flush_tx();
 8000ba2:	f7ff fe85 	bl	80008b0 <NRF24_flush_tx>
	return retStatus;
 8000ba6:	230e      	movs	r3, #14
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	781b      	ldrb	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b006      	add	sp, #24
 8000bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb4:	20000094 	.word	0x20000094
 8000bb8:	20000095 	.word	0x20000095

08000bbc <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 f9b9 	bl	8000f38 <NRF24_availablePipe>
 8000bc6:	0003      	movs	r3, r0
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6038      	str	r0, [r7, #0]
 8000bd8:	6079      	str	r1, [r7, #4]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000bda:	003b      	movs	r3, r7
 8000bdc:	2205      	movs	r2, #5
 8000bde:	0019      	movs	r1, r3
 8000be0:	200a      	movs	r0, #10
 8000be2:	f7ff fe11 	bl	8000808 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000be6:	003b      	movs	r3, r7
 8000be8:	2205      	movs	r2, #5
 8000bea:	0019      	movs	r1, r3
 8000bec:	2010      	movs	r0, #16
 8000bee:	f7ff fe0b 	bl	8000808 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <NRF24_openWritingPipe+0x50>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	1c10      	adds	r0, r2, #0
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2d9      	uxtb	r1, r3
 8000c06:	b2c2      	uxtb	r2, r0
 8000c08:	4291      	cmp	r1, r2
 8000c0a:	d900      	bls.n	8000c0e <NRF24_openWritingPipe+0x3e>
 8000c0c:	1c03      	adds	r3, r0, #0
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	0019      	movs	r1, r3
 8000c12:	2011      	movs	r0, #17
 8000c14:	f7ff fdd0 	bl	80007b8 <NRF24_write_register>
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b004      	add	sp, #16
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000096 	.word	0x20000096

08000c24 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	1dbb      	adds	r3, r7, #6
 8000c32:	1c0a      	adds	r2, r1, #0
 8000c34:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	b25a      	sxtb	r2, r3
 8000c3e:	1dbb      	adds	r3, r7, #6
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	210f      	movs	r1, #15
 8000c46:	400b      	ands	r3, r1
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	0019      	movs	r1, r3
 8000c52:	2004      	movs	r0, #4
 8000c54:	f7ff fdb0 	bl	80007b8 <NRF24_write_register>
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	701a      	strb	r2, [r3, #0]
	const uint8_t max_channel = 127;
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	227f      	movs	r2, #127	; 0x7f
 8000c72:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	1dfa      	adds	r2, r7, #7
 8000c78:	7810      	ldrb	r0, [r2, #0]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2d9      	uxtb	r1, r3
 8000c7e:	b2c2      	uxtb	r2, r0
 8000c80:	4291      	cmp	r1, r2
 8000c82:	d900      	bls.n	8000c86 <NRF24_setChannel+0x26>
 8000c84:	1c03      	adds	r3, r0, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	0019      	movs	r1, r3
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	f7ff fd94 	bl	80007b8 <NRF24_write_register>
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b004      	add	sp, #16
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	701a      	strb	r2, [r3, #0]
	const uint8_t max_payload_size = 32;
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2220      	movs	r2, #32
 8000caa:	701a      	strb	r2, [r3, #0]
  payload_size = MIN(size,max_payload_size);
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	1dfa      	adds	r2, r7, #7
 8000cb0:	7810      	ldrb	r0, [r2, #0]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2d9      	uxtb	r1, r3
 8000cb6:	b2c2      	uxtb	r2, r0
 8000cb8:	4291      	cmp	r1, r2
 8000cba:	d900      	bls.n	8000cbe <NRF24_setPayloadSize+0x26>
 8000cbc:	1c03      	adds	r3, r0, #0
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <NRF24_setPayloadSize+0x34>)
 8000cc2:	701a      	strb	r2, [r3, #0]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b004      	add	sp, #16
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000096 	.word	0x20000096

08000cd0 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000cd4:	2060      	movs	r0, #96	; 0x60
 8000cd6:	f7ff fd13 	bl	8000700 <NRF24_read_register>
 8000cda:	0003      	movs	r3, r0
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ce8:	201d      	movs	r0, #29
 8000cea:	f7ff fd09 	bl	8000700 <NRF24_read_register>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	439a      	bics	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	201d      	movs	r0, #29
 8000cfe:	f7ff fd5b 	bl	80007b8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000d02:	2100      	movs	r1, #0
 8000d04:	201c      	movs	r0, #28
 8000d06:	f7ff fd57 	bl	80007b8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d0a:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <NRF24_disableDynamicPayloads+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	20000097 	.word	0x20000097

08000d1c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	701a      	strb	r2, [r3, #0]
	if ( enable )
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d004      	beq.n	8000d3a <NRF24_setAutoAck+0x1e>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000d30:	213f      	movs	r1, #63	; 0x3f
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fd40 	bl	80007b8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000d38:	e003      	b.n	8000d42 <NRF24_setAutoAck+0x26>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f7ff fd3b 	bl	80007b8 <NRF24_write_register>
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000d4a:	b5b0      	push	{r4, r5, r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	0002      	movs	r2, r0
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	701a      	strb	r2, [r3, #0]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d56:	250f      	movs	r5, #15
 8000d58:	197c      	adds	r4, r7, r5
 8000d5a:	2006      	movs	r0, #6
 8000d5c:	f7ff fcd0 	bl	8000700 <NRF24_read_register>
 8000d60:	0003      	movs	r3, r0
 8000d62:	7023      	strb	r3, [r4, #0]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d64:	0028      	movs	r0, r5
 8000d66:	183b      	adds	r3, r7, r0
 8000d68:	183a      	adds	r2, r7, r0
 8000d6a:	7812      	ldrb	r2, [r2, #0]
 8000d6c:	2106      	movs	r1, #6
 8000d6e:	438a      	bics	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d106      	bne.n	8000d88 <NRF24_setPALevel+0x3e>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d7a:	183b      	adds	r3, r7, r0
 8000d7c:	183a      	adds	r2, r7, r0
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	2106      	movs	r1, #6
 8000d82:	430a      	orrs	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e026      	b.n	8000dd6 <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m6dB )
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d107      	bne.n	8000da0 <NRF24_setPALevel+0x56>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000d90:	220f      	movs	r2, #15
 8000d92:	18bb      	adds	r3, r7, r2
 8000d94:	18ba      	adds	r2, r7, r2
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	2104      	movs	r1, #4
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e01a      	b.n	8000dd6 <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m12dB )
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d107      	bne.n	8000db8 <NRF24_setPALevel+0x6e>
  {
    setup |= _BV(RF_PWR_LOW);
 8000da8:	220f      	movs	r2, #15
 8000daa:	18bb      	adds	r3, r7, r2
 8000dac:	18ba      	adds	r2, r7, r2
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	2102      	movs	r1, #2
 8000db2:	430a      	orrs	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e00e      	b.n	8000dd6 <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m18dB )
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00a      	beq.n	8000dd6 <NRF24_setPALevel+0x8c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d106      	bne.n	8000dd6 <NRF24_setPALevel+0x8c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000dc8:	220f      	movs	r2, #15
 8000dca:	18bb      	adds	r3, r7, r2
 8000dcc:	18ba      	adds	r2, r7, r2
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	2106      	movs	r1, #6
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	2006      	movs	r0, #6
 8000de0:	f7ff fcea 	bl	80007b8 <NRF24_write_register>
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b004      	add	sp, #16
 8000dea:	bdb0      	pop	{r4, r5, r7, pc}

08000dec <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	0002      	movs	r2, r0
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e00:	250e      	movs	r5, #14
 8000e02:	197c      	adds	r4, r7, r5
 8000e04:	2006      	movs	r0, #6
 8000e06:	f7ff fc7b 	bl	8000700 <NRF24_read_register>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	7023      	strb	r3, [r4, #0]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000e14:	0028      	movs	r0, r5
 8000e16:	183b      	adds	r3, r7, r0
 8000e18:	183a      	adds	r2, r7, r0
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	2128      	movs	r1, #40	; 0x28
 8000e1e:	438a      	bics	r2, r1
 8000e20:	701a      	strb	r2, [r3, #0]
  if( speed == RF24_250KBPS )
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d109      	bne.n	8000e3e <NRF24_setDataRate+0x52>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e30:	183b      	adds	r3, r7, r0
 8000e32:	183a      	adds	r2, r7, r0
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	2120      	movs	r1, #32
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e011      	b.n	8000e62 <NRF24_setDataRate+0x76>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10a      	bne.n	8000e5c <NRF24_setDataRate+0x70>
    {
      wide_band = true ;
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e4c:	220e      	movs	r2, #14
 8000e4e:	18bb      	adds	r3, r7, r2
 8000e50:	18ba      	adds	r2, r7, r2
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	2108      	movs	r1, #8
 8000e56:	430a      	orrs	r2, r1
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e002      	b.n	8000e62 <NRF24_setDataRate+0x76>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e62:	240e      	movs	r4, #14
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	0019      	movs	r1, r3
 8000e6a:	2006      	movs	r0, #6
 8000e6c:	f7ff fca4 	bl	80007b8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e70:	2006      	movs	r0, #6
 8000e72:	f7ff fc45 	bl	8000700 <NRF24_read_register>
 8000e76:	0003      	movs	r3, r0
 8000e78:	001a      	movs	r2, r3
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d104      	bne.n	8000e8c <NRF24_setDataRate+0xa0>
  {
    result = true;
 8000e82:	230f      	movs	r3, #15
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e002      	b.n	8000e92 <NRF24_setDataRate+0xa6>
  }
  else
  {
    wide_band = false;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <NRF24_setDataRate+0xb4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000e92:	230f      	movs	r3, #15
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	781b      	ldrb	r3, [r3, #0]
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b004      	add	sp, #16
 8000e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea0:	20000098 	.word	0x20000098

08000ea4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	0002      	movs	r2, r0
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	701a      	strb	r2, [r3, #0]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fc25 	bl	8000700 <NRF24_read_register>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	0019      	movs	r1, r3
 8000eba:	200f      	movs	r0, #15
 8000ebc:	183b      	adds	r3, r7, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	4391      	bics	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d017      	beq.n	8000efe <NRF24_setCRCLength+0x5a>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d106      	bne.n	8000ee4 <NRF24_setCRCLength+0x40>
  {
    config |= _BV(BIT_EN_CRC);
 8000ed6:	183b      	adds	r3, r7, r0
 8000ed8:	183a      	adds	r2, r7, r0
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	2108      	movs	r1, #8
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e00c      	b.n	8000efe <NRF24_setCRCLength+0x5a>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000ee4:	200f      	movs	r0, #15
 8000ee6:	183b      	adds	r3, r7, r0
 8000ee8:	183a      	adds	r2, r7, r0
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	2108      	movs	r1, #8
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	701a      	strb	r2, [r3, #0]
    config |= _BV( BIT_CRCO );
 8000ef2:	183b      	adds	r3, r7, r0
 8000ef4:	183a      	adds	r2, r7, r0
 8000ef6:	7812      	ldrb	r2, [r2, #0]
 8000ef8:	2104      	movs	r1, #4
 8000efa:	430a      	orrs	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000efe:	230f      	movs	r3, #15
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	0019      	movs	r1, r3
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fc56 	bl	80007b8 <NRF24_write_register>
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b004      	add	sp, #16
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fbf1 	bl	8000700 <NRF24_read_register>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	001a      	movs	r2, r3
 8000f22:	2302      	movs	r3, #2
 8000f24:	439a      	bics	r2, r3
 8000f26:	0013      	movs	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fc43 	bl	80007b8 <NRF24_write_register>
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000f40:	250f      	movs	r5, #15
 8000f42:	197c      	adds	r4, r7, r5
 8000f44:	f7ff fcc6 	bl	80008d4 <NRF24_get_status>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	7023      	strb	r3, [r4, #0]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000f4c:	0028      	movs	r0, r5
 8000f4e:	183b      	adds	r3, r7, r0
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2240      	movs	r2, #64	; 0x40
 8000f54:	401a      	ands	r2, r3
 8000f56:	240e      	movs	r4, #14
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	1e51      	subs	r1, r2, #1
 8000f5c:	418a      	sbcs	r2, r1
 8000f5e:	701a      	strb	r2, [r3, #0]

  if (result)
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d019      	beq.n	8000f9c <NRF24_availablePipe+0x64>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <NRF24_availablePipe+0x48>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000f6e:	183b      	adds	r3, r7, r0
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	085b      	lsrs	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2207      	movs	r2, #7
 8000f78:	4013      	ands	r3, r2
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	2007      	movs	r0, #7
 8000f84:	f7ff fc18 	bl	80007b8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2220      	movs	r2, #32
 8000f90:	4013      	ands	r3, r2
 8000f92:	d003      	beq.n	8000f9c <NRF24_availablePipe+0x64>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000f94:	2120      	movs	r1, #32
 8000f96:	2007      	movs	r0, #7
 8000f98:	f7ff fc0e 	bl	80007b8 <NRF24_write_register>
    }
  }
  return result;
 8000f9c:	230e      	movs	r3, #14
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bdb0      	pop	{r4, r5, r7, pc}

08000faa <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	1cfb      	adds	r3, r7, #3
 8000fb6:	701a      	strb	r2, [r3, #0]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fba1 	bl	8000700 <NRF24_read_register>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4393      	bics	r3, r2
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	0019      	movs	r1, r3
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fbf1 	bl	80007b8 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8000fd6:	2096      	movs	r0, #150	; 0x96
 8000fd8:	f7ff fb32 	bl	8000640 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000fdc:	1cfb      	adds	r3, r7, #3
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fc3d 	bl	8000864 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff fb68 	bl	80006c0 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	f7ff fb25 	bl	8000640 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fb62 	bl	80006c0 <NRF24_ce>
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001010:	2517      	movs	r5, #23
 8001012:	197c      	adds	r4, r7, r5
 8001014:	f7ff fc5e 	bl	80008d4 <NRF24_get_status>
 8001018:	0003      	movs	r3, r0
 800101a:	7023      	strb	r3, [r4, #0]
	*tx_ok = 0;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001022:	2170      	movs	r1, #112	; 0x70
 8001024:	2007      	movs	r0, #7
 8001026:	f7ff fbc7 	bl	80007b8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800102a:	0029      	movs	r1, r5
 800102c:	187b      	adds	r3, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2220      	movs	r2, #32
 8001032:	4013      	ands	r3, r2
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	4193      	sbcs	r3, r2
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800103e:	187b      	adds	r3, r7, r1
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2210      	movs	r2, #16
 8001044:	4013      	ands	r3, r2
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	4193      	sbcs	r3, r2
 800104a:	b2da      	uxtb	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001050:	187b      	adds	r3, r7, r1
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2240      	movs	r2, #64	; 0x40
 8001056:	4013      	ands	r3, r2
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	4193      	sbcs	r3, r2
 800105c:	b2da      	uxtb	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	701a      	strb	r2, [r3, #0]
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b006      	add	sp, #24
 8001068:	bdb0      	pop	{r4, r5, r7, pc}

0800106a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800106e:	2170      	movs	r1, #112	; 0x70
 8001070:	2007      	movs	r0, #7
 8001072:	f7ff fba1 	bl	80007b8 <NRF24_write_register>
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fafc 	bl	8000680 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2250      	movs	r2, #80	; 0x50
 800108c:	701a      	strb	r2, [r3, #0]
	cmdRxBuf[1] = 0x73;
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2273      	movs	r2, #115	; 0x73
 8001092:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001094:	1d39      	adds	r1, r7, #4
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <NRF24_ACTIVATE_cmd+0x34>)
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	2202      	movs	r2, #2
 800109c:	f002 fc6a 	bl	8003974 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff faed 	bl	8000680 <NRF24_csn>
}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	200000a4 	.word	0x200000a4

080010b4 <printRadioSettings>:
}



void printRadioSettings(void)
{
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	46c6      	mov	lr, r8
 80010b8:	b500      	push	{lr}
 80010ba:	b0a0      	sub	sp, #128	; 0x80
 80010bc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010be:	4ac2      	ldr	r2, [pc, #776]	; (80013c8 <printRadioSettings+0x314>)
 80010c0:	2508      	movs	r5, #8
 80010c2:	197b      	adds	r3, r7, r5
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f005 fbf6 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010cc:	197b      	adds	r3, r7, r5
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff f818 	bl	8000104 <strlen>
 80010d4:	0003      	movs	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	1979      	adds	r1, r7, r5
 80010da:	48bc      	ldr	r0, [pc, #752]	; (80013cc <printRadioSettings+0x318>)
 80010dc:	230a      	movs	r3, #10
 80010de:	f003 fae9 	bl	80046b4 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80010e2:	266f      	movs	r6, #111	; 0x6f
 80010e4:	19bc      	adds	r4, r7, r6
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff fb0a 	bl	8000700 <NRF24_read_register>
 80010ec:	0003      	movs	r3, r0
 80010ee:	7023      	strb	r3, [r4, #0]
	if(reg8Val & (1 << 3))
 80010f0:	0031      	movs	r1, r6
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2208      	movs	r2, #8
 80010f8:	4013      	ands	r3, r2
 80010fa:	d013      	beq.n	8001124 <printRadioSettings+0x70>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2204      	movs	r2, #4
 8001102:	4013      	ands	r3, r2
 8001104:	d006      	beq.n	8001114 <printRadioSettings+0x60>
 8001106:	4ab2      	ldr	r2, [pc, #712]	; (80013d0 <printRadioSettings+0x31c>)
 8001108:	197b      	adds	r3, r7, r5
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f005 fbd3 	bl	80068b8 <siprintf>
 8001112:	e00e      	b.n	8001132 <printRadioSettings+0x7e>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001114:	4aaf      	ldr	r2, [pc, #700]	; (80013d4 <printRadioSettings+0x320>)
 8001116:	2308      	movs	r3, #8
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f005 fbcb 	bl	80068b8 <siprintf>
 8001122:	e006      	b.n	8001132 <printRadioSettings+0x7e>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001124:	4aac      	ldr	r2, [pc, #688]	; (80013d8 <printRadioSettings+0x324>)
 8001126:	2308      	movs	r3, #8
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f005 fbc3 	bl	80068b8 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001132:	2408      	movs	r4, #8
 8001134:	193b      	adds	r3, r7, r4
 8001136:	0018      	movs	r0, r3
 8001138:	f7fe ffe4 	bl	8000104 <strlen>
 800113c:	0003      	movs	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	1939      	adds	r1, r7, r4
 8001142:	48a2      	ldr	r0, [pc, #648]	; (80013cc <printRadioSettings+0x318>)
 8001144:	230a      	movs	r3, #10
 8001146:	f003 fab5 	bl	80046b4 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800114a:	256f      	movs	r5, #111	; 0x6f
 800114c:	197c      	adds	r4, r7, r5
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff fad6 	bl	8000700 <NRF24_read_register>
 8001154:	0003      	movs	r3, r0
 8001156:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001158:	0029      	movs	r1, r5
 800115a:	187b      	adds	r3, r7, r1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001162:	17da      	asrs	r2, r3, #31
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	0fdb      	lsrs	r3, r3, #31
 8001168:	b2db      	uxtb	r3, r3
 800116a:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800116c:	187b      	adds	r3, r7, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2202      	movs	r2, #2
 8001172:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001174:	17da      	asrs	r2, r3, #31
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	0fdb      	lsrs	r3, r3, #31
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800117e:	187b      	adds	r3, r7, r1
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2204      	movs	r2, #4
 8001184:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001186:	17da      	asrs	r2, r3, #31
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	0fdb      	lsrs	r3, r3, #31
 800118c:	b2db      	uxtb	r3, r3
 800118e:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001190:	187b      	adds	r3, r7, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2208      	movs	r2, #8
 8001196:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001198:	17da      	asrs	r2, r3, #31
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	0fdb      	lsrs	r3, r3, #31
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2210      	movs	r2, #16
 80011a8:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011aa:	17da      	asrs	r2, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	0fdb      	lsrs	r3, r3, #31
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2220      	movs	r2, #32
 80011ba:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011bc:	17da      	asrs	r2, r3, #31
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	0fdb      	lsrs	r3, r3, #31
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4985      	ldr	r1, [pc, #532]	; (80013dc <printRadioSettings+0x328>)
 80011c6:	2208      	movs	r2, #8
 80011c8:	18b8      	adds	r0, r7, r2
 80011ca:	9303      	str	r3, [sp, #12]
 80011cc:	9602      	str	r6, [sp, #8]
 80011ce:	9501      	str	r5, [sp, #4]
 80011d0:	9400      	str	r4, [sp, #0]
 80011d2:	4643      	mov	r3, r8
 80011d4:	4662      	mov	r2, ip
 80011d6:	f005 fb6f 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011da:	2408      	movs	r4, #8
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	0018      	movs	r0, r3
 80011e0:	f7fe ff90 	bl	8000104 <strlen>
 80011e4:	0003      	movs	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	1939      	adds	r1, r7, r4
 80011ea:	4878      	ldr	r0, [pc, #480]	; (80013cc <printRadioSettings+0x318>)
 80011ec:	230a      	movs	r3, #10
 80011ee:	f003 fa61 	bl	80046b4 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011f2:	216f      	movs	r1, #111	; 0x6f
 80011f4:	000d      	movs	r5, r1
 80011f6:	187c      	adds	r4, r7, r1
 80011f8:	2002      	movs	r0, #2
 80011fa:	f7ff fa81 	bl	8000700 <NRF24_read_register>
 80011fe:	0003      	movs	r3, r0
 8001200:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001202:	0029      	movs	r1, r5
 8001204:	187b      	adds	r3, r7, r1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2201      	movs	r2, #1
 800120a:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800120c:	17da      	asrs	r2, r3, #31
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	0fdb      	lsrs	r3, r3, #31
 8001212:	b2db      	uxtb	r3, r3
 8001214:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001216:	187b      	adds	r3, r7, r1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2202      	movs	r2, #2
 800121c:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800121e:	17da      	asrs	r2, r3, #31
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	0fdb      	lsrs	r3, r3, #31
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001228:	187b      	adds	r3, r7, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2204      	movs	r2, #4
 800122e:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001230:	17da      	asrs	r2, r3, #31
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	b2db      	uxtb	r3, r3
 8001238:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800123a:	187b      	adds	r3, r7, r1
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2208      	movs	r2, #8
 8001240:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001242:	17da      	asrs	r2, r3, #31
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	0fdb      	lsrs	r3, r3, #31
 8001248:	b2db      	uxtb	r3, r3
 800124a:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2210      	movs	r2, #16
 8001252:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	17da      	asrs	r2, r3, #31
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	0fdb      	lsrs	r3, r3, #31
 800125a:	b2db      	uxtb	r3, r3
 800125c:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800125e:	187b      	adds	r3, r7, r1
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2220      	movs	r2, #32
 8001264:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001266:	17da      	asrs	r2, r3, #31
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	0fdb      	lsrs	r3, r3, #31
 800126c:	b2db      	uxtb	r3, r3
 800126e:	495c      	ldr	r1, [pc, #368]	; (80013e0 <printRadioSettings+0x32c>)
 8001270:	2208      	movs	r2, #8
 8001272:	18b8      	adds	r0, r7, r2
 8001274:	9303      	str	r3, [sp, #12]
 8001276:	9602      	str	r6, [sp, #8]
 8001278:	9501      	str	r5, [sp, #4]
 800127a:	9400      	str	r4, [sp, #0]
 800127c:	4643      	mov	r3, r8
 800127e:	4662      	mov	r2, ip
 8001280:	f005 fb1a 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001284:	2508      	movs	r5, #8
 8001286:	197b      	adds	r3, r7, r5
 8001288:	0018      	movs	r0, r3
 800128a:	f7fe ff3b 	bl	8000104 <strlen>
 800128e:	0003      	movs	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	1979      	adds	r1, r7, r5
 8001294:	484d      	ldr	r0, [pc, #308]	; (80013cc <printRadioSettings+0x318>)
 8001296:	230a      	movs	r3, #10
 8001298:	f003 fa0c 	bl	80046b4 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800129c:	2003      	movs	r0, #3
 800129e:	f7ff fa2f 	bl	8000700 <NRF24_read_register>
 80012a2:	0003      	movs	r3, r0
 80012a4:	0019      	movs	r1, r3
 80012a6:	246f      	movs	r4, #111	; 0x6f
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	2203      	movs	r2, #3
 80012ac:	400a      	ands	r2, r1
 80012ae:	701a      	strb	r2, [r3, #0]
	reg8Val +=2;
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	193a      	adds	r2, r7, r4
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	3202      	adds	r2, #2
 80012b8:	701a      	strb	r2, [r3, #0]
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	4949      	ldr	r1, [pc, #292]	; (80013e4 <printRadioSettings+0x330>)
 80012c0:	002e      	movs	r6, r5
 80012c2:	19bb      	adds	r3, r7, r6
 80012c4:	0018      	movs	r0, r3
 80012c6:	f005 faf7 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ca:	19bb      	adds	r3, r7, r6
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7fe ff19 	bl	8000104 <strlen>
 80012d2:	0003      	movs	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	19b9      	adds	r1, r7, r6
 80012d8:	483c      	ldr	r0, [pc, #240]	; (80013cc <printRadioSettings+0x318>)
 80012da:	230a      	movs	r3, #10
 80012dc:	f003 f9ea 	bl	80046b4 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012e0:	0025      	movs	r5, r4
 80012e2:	193c      	adds	r4, r7, r4
 80012e4:	2005      	movs	r0, #5
 80012e6:	f7ff fa0b 	bl	8000700 <NRF24_read_register>
 80012ea:	0003      	movs	r3, r0
 80012ec:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012ee:	002c      	movs	r4, r5
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	227f      	movs	r2, #127	; 0x7f
 80012f6:	401a      	ands	r2, r3
 80012f8:	493b      	ldr	r1, [pc, #236]	; (80013e8 <printRadioSettings+0x334>)
 80012fa:	19bb      	adds	r3, r7, r6
 80012fc:	0018      	movs	r0, r3
 80012fe:	f005 fadb 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001302:	19bb      	adds	r3, r7, r6
 8001304:	0018      	movs	r0, r3
 8001306:	f7fe fefd 	bl	8000104 <strlen>
 800130a:	0003      	movs	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	19b9      	adds	r1, r7, r6
 8001310:	482e      	ldr	r0, [pc, #184]	; (80013cc <printRadioSettings+0x318>)
 8001312:	230a      	movs	r3, #10
 8001314:	f003 f9ce 	bl	80046b4 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001318:	0025      	movs	r5, r4
 800131a:	193c      	adds	r4, r7, r4
 800131c:	2006      	movs	r0, #6
 800131e:	f7ff f9ef 	bl	8000700 <NRF24_read_register>
 8001322:	0003      	movs	r3, r0
 8001324:	7023      	strb	r3, [r4, #0]
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001326:	197b      	adds	r3, r7, r5
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2208      	movs	r2, #8
 800132c:	4013      	ands	r3, r2
 800132e:	d006      	beq.n	800133e <printRadioSettings+0x28a>
 8001330:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <printRadioSettings+0x338>)
 8001332:	19bb      	adds	r3, r7, r6
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f005 fabe 	bl	80068b8 <siprintf>
 800133c:	e006      	b.n	800134c <printRadioSettings+0x298>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800133e:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <printRadioSettings+0x33c>)
 8001340:	2308      	movs	r3, #8
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f005 fab6 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800134c:	2408      	movs	r4, #8
 800134e:	193b      	adds	r3, r7, r4
 8001350:	0018      	movs	r0, r3
 8001352:	f7fe fed7 	bl	8000104 <strlen>
 8001356:	0003      	movs	r3, r0
 8001358:	b29a      	uxth	r2, r3
 800135a:	1939      	adds	r1, r7, r4
 800135c:	481b      	ldr	r0, [pc, #108]	; (80013cc <printRadioSettings+0x318>)
 800135e:	230a      	movs	r3, #10
 8001360:	f003 f9a8 	bl	80046b4 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001364:	206f      	movs	r0, #111	; 0x6f
 8001366:	183b      	adds	r3, r7, r0
 8001368:	183a      	adds	r2, r7, r0
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	2106      	movs	r1, #6
 800136e:	400a      	ands	r2, r1
 8001370:	701a      	strb	r2, [r3, #0]
	reg8Val = (reg8Val>>1);
 8001372:	0001      	movs	r1, r0
 8001374:	187b      	adds	r3, r7, r1
 8001376:	187a      	adds	r2, r7, r1
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	0852      	lsrs	r2, r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800137e:	187b      	adds	r3, r7, r1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <printRadioSettings+0x2e0>
 8001386:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <printRadioSettings+0x340>)
 8001388:	193b      	adds	r3, r7, r4
 800138a:	0011      	movs	r1, r2
 800138c:	0018      	movs	r0, r3
 800138e:	f005 fa93 	bl	80068b8 <siprintf>
 8001392:	e041      	b.n	8001418 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001394:	236f      	movs	r3, #111	; 0x6f
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d107      	bne.n	80013ae <printRadioSettings+0x2fa>
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <printRadioSettings+0x344>)
 80013a0:	2308      	movs	r3, #8
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f005 fa86 	bl	80068b8 <siprintf>
 80013ac:	e034      	b.n	8001418 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013ae:	236f      	movs	r3, #111	; 0x6f
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <printRadioSettings+0x34c>
 80013b8:	4a10      	ldr	r2, [pc, #64]	; (80013fc <printRadioSettings+0x348>)
 80013ba:	2308      	movs	r3, #8
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f005 fa79 	bl	80068b8 <siprintf>
 80013c6:	e027      	b.n	8001418 <printRadioSettings+0x364>
 80013c8:	08007190 	.word	0x08007190
 80013cc:	20000108 	.word	0x20000108
 80013d0:	080071c4 	.word	0x080071c4
 80013d4:	080071e0 	.word	0x080071e0
 80013d8:	080071fc 	.word	0x080071fc
 80013dc:	08007210 	.word	0x08007210
 80013e0:	08007254 	.word	0x08007254
 80013e4:	080072a0 	.word	0x080072a0
 80013e8:	080072bc 	.word	0x080072bc
 80013ec:	080072d0 	.word	0x080072d0
 80013f0:	080072e8 	.word	0x080072e8
 80013f4:	08007300 	.word	0x08007300
 80013f8:	08007314 	.word	0x08007314
 80013fc:	08007328 	.word	0x08007328
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001400:	236f      	movs	r3, #111	; 0x6f
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d106      	bne.n	8001418 <printRadioSettings+0x364>
 800140a:	4afe      	ldr	r2, [pc, #1016]	; (8001804 <printRadioSettings+0x750>)
 800140c:	2308      	movs	r3, #8
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	0011      	movs	r1, r2
 8001412:	0018      	movs	r0, r3
 8001414:	f005 fa50 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001418:	2408      	movs	r4, #8
 800141a:	193b      	adds	r3, r7, r4
 800141c:	0018      	movs	r0, r3
 800141e:	f7fe fe71 	bl	8000104 <strlen>
 8001422:	0003      	movs	r3, r0
 8001424:	b29a      	uxth	r2, r3
 8001426:	1939      	adds	r1, r7, r4
 8001428:	48f7      	ldr	r0, [pc, #988]	; (8001808 <printRadioSettings+0x754>)
 800142a:	230a      	movs	r3, #10
 800142c:	f003 f942 	bl	80046b4 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001430:	003b      	movs	r3, r7
 8001432:	2205      	movs	r2, #5
 8001434:	0019      	movs	r1, r3
 8001436:	200a      	movs	r0, #10
 8001438:	f7ff f990 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800143c:	003b      	movs	r3, r7
 800143e:	791b      	ldrb	r3, [r3, #4]
 8001440:	001d      	movs	r5, r3
 8001442:	003b      	movs	r3, r7
 8001444:	78db      	ldrb	r3, [r3, #3]
 8001446:	001e      	movs	r6, r3
 8001448:	003b      	movs	r3, r7
 800144a:	789b      	ldrb	r3, [r3, #2]
 800144c:	001a      	movs	r2, r3
 800144e:	003b      	movs	r3, r7
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	001c      	movs	r4, r3
 8001454:	003b      	movs	r3, r7
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	49ec      	ldr	r1, [pc, #944]	; (800180c <printRadioSettings+0x758>)
 800145a:	2008      	movs	r0, #8
 800145c:	1838      	adds	r0, r7, r0
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	9401      	str	r4, [sp, #4]
 8001462:	9200      	str	r2, [sp, #0]
 8001464:	0033      	movs	r3, r6
 8001466:	002a      	movs	r2, r5
 8001468:	f005 fa26 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800146c:	2408      	movs	r4, #8
 800146e:	193b      	adds	r3, r7, r4
 8001470:	0018      	movs	r0, r3
 8001472:	f7fe fe47 	bl	8000104 <strlen>
 8001476:	0003      	movs	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	1939      	adds	r1, r7, r4
 800147c:	48e2      	ldr	r0, [pc, #904]	; (8001808 <printRadioSettings+0x754>)
 800147e:	230a      	movs	r3, #10
 8001480:	f003 f918 	bl	80046b4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001484:	003b      	movs	r3, r7
 8001486:	2205      	movs	r2, #5
 8001488:	0019      	movs	r1, r3
 800148a:	200b      	movs	r0, #11
 800148c:	f7ff f966 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001490:	003b      	movs	r3, r7
 8001492:	791b      	ldrb	r3, [r3, #4]
 8001494:	001d      	movs	r5, r3
 8001496:	003b      	movs	r3, r7
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	001e      	movs	r6, r3
 800149c:	003b      	movs	r3, r7
 800149e:	789b      	ldrb	r3, [r3, #2]
 80014a0:	001a      	movs	r2, r3
 80014a2:	003b      	movs	r3, r7
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	001c      	movs	r4, r3
 80014a8:	003b      	movs	r3, r7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	49d8      	ldr	r1, [pc, #864]	; (8001810 <printRadioSettings+0x75c>)
 80014ae:	2008      	movs	r0, #8
 80014b0:	1838      	adds	r0, r7, r0
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	9401      	str	r4, [sp, #4]
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	0033      	movs	r3, r6
 80014ba:	002a      	movs	r2, r5
 80014bc:	f005 f9fc 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c0:	2408      	movs	r4, #8
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7fe fe1d 	bl	8000104 <strlen>
 80014ca:	0003      	movs	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	1939      	adds	r1, r7, r4
 80014d0:	48cd      	ldr	r0, [pc, #820]	; (8001808 <printRadioSettings+0x754>)
 80014d2:	230a      	movs	r3, #10
 80014d4:	f003 f8ee 	bl	80046b4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014d8:	003b      	movs	r3, r7
 80014da:	2201      	movs	r2, #1
 80014dc:	0019      	movs	r1, r3
 80014de:	200c      	movs	r0, #12
 80014e0:	f7ff f93c 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014e4:	003b      	movs	r3, r7
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	001a      	movs	r2, r3
 80014ea:	49ca      	ldr	r1, [pc, #808]	; (8001814 <printRadioSettings+0x760>)
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	0018      	movs	r0, r3
 80014f0:	f005 f9e2 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7fe fe04 	bl	8000104 <strlen>
 80014fc:	0003      	movs	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	1939      	adds	r1, r7, r4
 8001502:	48c1      	ldr	r0, [pc, #772]	; (8001808 <printRadioSettings+0x754>)
 8001504:	230a      	movs	r3, #10
 8001506:	f003 f8d5 	bl	80046b4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800150a:	003b      	movs	r3, r7
 800150c:	2201      	movs	r2, #1
 800150e:	0019      	movs	r1, r3
 8001510:	200d      	movs	r0, #13
 8001512:	f7ff f923 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001516:	003b      	movs	r3, r7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	001a      	movs	r2, r3
 800151c:	49be      	ldr	r1, [pc, #760]	; (8001818 <printRadioSettings+0x764>)
 800151e:	193b      	adds	r3, r7, r4
 8001520:	0018      	movs	r0, r3
 8001522:	f005 f9c9 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001526:	193b      	adds	r3, r7, r4
 8001528:	0018      	movs	r0, r3
 800152a:	f7fe fdeb 	bl	8000104 <strlen>
 800152e:	0003      	movs	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	1939      	adds	r1, r7, r4
 8001534:	48b4      	ldr	r0, [pc, #720]	; (8001808 <printRadioSettings+0x754>)
 8001536:	230a      	movs	r3, #10
 8001538:	f003 f8bc 	bl	80046b4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800153c:	003b      	movs	r3, r7
 800153e:	2201      	movs	r2, #1
 8001540:	0019      	movs	r1, r3
 8001542:	200e      	movs	r0, #14
 8001544:	f7ff f90a 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001548:	003b      	movs	r3, r7
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	001a      	movs	r2, r3
 800154e:	49b3      	ldr	r1, [pc, #716]	; (800181c <printRadioSettings+0x768>)
 8001550:	193b      	adds	r3, r7, r4
 8001552:	0018      	movs	r0, r3
 8001554:	f005 f9b0 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001558:	193b      	adds	r3, r7, r4
 800155a:	0018      	movs	r0, r3
 800155c:	f7fe fdd2 	bl	8000104 <strlen>
 8001560:	0003      	movs	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	1939      	adds	r1, r7, r4
 8001566:	48a8      	ldr	r0, [pc, #672]	; (8001808 <printRadioSettings+0x754>)
 8001568:	230a      	movs	r3, #10
 800156a:	f003 f8a3 	bl	80046b4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800156e:	003b      	movs	r3, r7
 8001570:	2201      	movs	r2, #1
 8001572:	0019      	movs	r1, r3
 8001574:	200f      	movs	r0, #15
 8001576:	f7ff f8f1 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800157a:	003b      	movs	r3, r7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	001a      	movs	r2, r3
 8001580:	49a7      	ldr	r1, [pc, #668]	; (8001820 <printRadioSettings+0x76c>)
 8001582:	193b      	adds	r3, r7, r4
 8001584:	0018      	movs	r0, r3
 8001586:	f005 f997 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800158a:	193b      	adds	r3, r7, r4
 800158c:	0018      	movs	r0, r3
 800158e:	f7fe fdb9 	bl	8000104 <strlen>
 8001592:	0003      	movs	r3, r0
 8001594:	b29a      	uxth	r2, r3
 8001596:	1939      	adds	r1, r7, r4
 8001598:	489b      	ldr	r0, [pc, #620]	; (8001808 <printRadioSettings+0x754>)
 800159a:	230a      	movs	r3, #10
 800159c:	f003 f88a 	bl	80046b4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015a0:	003b      	movs	r3, r7
 80015a2:	2205      	movs	r2, #5
 80015a4:	0019      	movs	r1, r3
 80015a6:	2010      	movs	r0, #16
 80015a8:	f7ff f8d8 	bl	800075c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015ac:	003b      	movs	r3, r7
 80015ae:	791b      	ldrb	r3, [r3, #4]
 80015b0:	001d      	movs	r5, r3
 80015b2:	003b      	movs	r3, r7
 80015b4:	78db      	ldrb	r3, [r3, #3]
 80015b6:	001e      	movs	r6, r3
 80015b8:	003b      	movs	r3, r7
 80015ba:	789b      	ldrb	r3, [r3, #2]
 80015bc:	001a      	movs	r2, r3
 80015be:	003b      	movs	r3, r7
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	001c      	movs	r4, r3
 80015c4:	003b      	movs	r3, r7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4996      	ldr	r1, [pc, #600]	; (8001824 <printRadioSettings+0x770>)
 80015ca:	2008      	movs	r0, #8
 80015cc:	1838      	adds	r0, r7, r0
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	9401      	str	r4, [sp, #4]
 80015d2:	9200      	str	r2, [sp, #0]
 80015d4:	0033      	movs	r3, r6
 80015d6:	002a      	movs	r2, r5
 80015d8:	f005 f96e 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015dc:	2508      	movs	r5, #8
 80015de:	197b      	adds	r3, r7, r5
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7fe fd8f 	bl	8000104 <strlen>
 80015e6:	0003      	movs	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	1979      	adds	r1, r7, r5
 80015ec:	4886      	ldr	r0, [pc, #536]	; (8001808 <printRadioSettings+0x754>)
 80015ee:	230a      	movs	r3, #10
 80015f0:	f003 f860 	bl	80046b4 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80015f4:	266f      	movs	r6, #111	; 0x6f
 80015f6:	19bc      	adds	r4, r7, r6
 80015f8:	2011      	movs	r0, #17
 80015fa:	f7ff f881 	bl	8000700 <NRF24_read_register>
 80015fe:	0003      	movs	r3, r0
 8001600:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001602:	0034      	movs	r4, r6
 8001604:	193b      	adds	r3, r7, r4
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	223f      	movs	r2, #63	; 0x3f
 800160a:	401a      	ands	r2, r3
 800160c:	4986      	ldr	r1, [pc, #536]	; (8001828 <printRadioSettings+0x774>)
 800160e:	197b      	adds	r3, r7, r5
 8001610:	0018      	movs	r0, r3
 8001612:	f005 f951 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001616:	197b      	adds	r3, r7, r5
 8001618:	0018      	movs	r0, r3
 800161a:	f7fe fd73 	bl	8000104 <strlen>
 800161e:	0003      	movs	r3, r0
 8001620:	b29a      	uxth	r2, r3
 8001622:	1979      	adds	r1, r7, r5
 8001624:	4878      	ldr	r0, [pc, #480]	; (8001808 <printRadioSettings+0x754>)
 8001626:	230a      	movs	r3, #10
 8001628:	f003 f844 	bl	80046b4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800162c:	0026      	movs	r6, r4
 800162e:	193c      	adds	r4, r7, r4
 8001630:	2012      	movs	r0, #18
 8001632:	f7ff f865 	bl	8000700 <NRF24_read_register>
 8001636:	0003      	movs	r3, r0
 8001638:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800163a:	0034      	movs	r4, r6
 800163c:	193b      	adds	r3, r7, r4
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	223f      	movs	r2, #63	; 0x3f
 8001642:	401a      	ands	r2, r3
 8001644:	4979      	ldr	r1, [pc, #484]	; (800182c <printRadioSettings+0x778>)
 8001646:	197b      	adds	r3, r7, r5
 8001648:	0018      	movs	r0, r3
 800164a:	f005 f935 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800164e:	197b      	adds	r3, r7, r5
 8001650:	0018      	movs	r0, r3
 8001652:	f7fe fd57 	bl	8000104 <strlen>
 8001656:	0003      	movs	r3, r0
 8001658:	b29a      	uxth	r2, r3
 800165a:	1979      	adds	r1, r7, r5
 800165c:	486a      	ldr	r0, [pc, #424]	; (8001808 <printRadioSettings+0x754>)
 800165e:	230a      	movs	r3, #10
 8001660:	f003 f828 	bl	80046b4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001664:	0026      	movs	r6, r4
 8001666:	193c      	adds	r4, r7, r4
 8001668:	2013      	movs	r0, #19
 800166a:	f7ff f849 	bl	8000700 <NRF24_read_register>
 800166e:	0003      	movs	r3, r0
 8001670:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001672:	0034      	movs	r4, r6
 8001674:	193b      	adds	r3, r7, r4
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	223f      	movs	r2, #63	; 0x3f
 800167a:	401a      	ands	r2, r3
 800167c:	496c      	ldr	r1, [pc, #432]	; (8001830 <printRadioSettings+0x77c>)
 800167e:	197b      	adds	r3, r7, r5
 8001680:	0018      	movs	r0, r3
 8001682:	f005 f919 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001686:	197b      	adds	r3, r7, r5
 8001688:	0018      	movs	r0, r3
 800168a:	f7fe fd3b 	bl	8000104 <strlen>
 800168e:	0003      	movs	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	1979      	adds	r1, r7, r5
 8001694:	485c      	ldr	r0, [pc, #368]	; (8001808 <printRadioSettings+0x754>)
 8001696:	230a      	movs	r3, #10
 8001698:	f003 f80c 	bl	80046b4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800169c:	0026      	movs	r6, r4
 800169e:	193c      	adds	r4, r7, r4
 80016a0:	2014      	movs	r0, #20
 80016a2:	f7ff f82d 	bl	8000700 <NRF24_read_register>
 80016a6:	0003      	movs	r3, r0
 80016a8:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016aa:	0034      	movs	r4, r6
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	223f      	movs	r2, #63	; 0x3f
 80016b2:	401a      	ands	r2, r3
 80016b4:	495f      	ldr	r1, [pc, #380]	; (8001834 <printRadioSettings+0x780>)
 80016b6:	197b      	adds	r3, r7, r5
 80016b8:	0018      	movs	r0, r3
 80016ba:	f005 f8fd 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016be:	197b      	adds	r3, r7, r5
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7fe fd1f 	bl	8000104 <strlen>
 80016c6:	0003      	movs	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	1979      	adds	r1, r7, r5
 80016cc:	484e      	ldr	r0, [pc, #312]	; (8001808 <printRadioSettings+0x754>)
 80016ce:	230a      	movs	r3, #10
 80016d0:	f002 fff0 	bl	80046b4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016d4:	0026      	movs	r6, r4
 80016d6:	193c      	adds	r4, r7, r4
 80016d8:	2015      	movs	r0, #21
 80016da:	f7ff f811 	bl	8000700 <NRF24_read_register>
 80016de:	0003      	movs	r3, r0
 80016e0:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016e2:	0034      	movs	r4, r6
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	223f      	movs	r2, #63	; 0x3f
 80016ea:	401a      	ands	r2, r3
 80016ec:	4952      	ldr	r1, [pc, #328]	; (8001838 <printRadioSettings+0x784>)
 80016ee:	197b      	adds	r3, r7, r5
 80016f0:	0018      	movs	r0, r3
 80016f2:	f005 f8e1 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016f6:	197b      	adds	r3, r7, r5
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7fe fd03 	bl	8000104 <strlen>
 80016fe:	0003      	movs	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	1979      	adds	r1, r7, r5
 8001704:	4840      	ldr	r0, [pc, #256]	; (8001808 <printRadioSettings+0x754>)
 8001706:	230a      	movs	r3, #10
 8001708:	f002 ffd4 	bl	80046b4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800170c:	0026      	movs	r6, r4
 800170e:	193c      	adds	r4, r7, r4
 8001710:	2016      	movs	r0, #22
 8001712:	f7fe fff5 	bl	8000700 <NRF24_read_register>
 8001716:	0003      	movs	r3, r0
 8001718:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800171a:	0034      	movs	r4, r6
 800171c:	193b      	adds	r3, r7, r4
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	223f      	movs	r2, #63	; 0x3f
 8001722:	401a      	ands	r2, r3
 8001724:	4945      	ldr	r1, [pc, #276]	; (800183c <printRadioSettings+0x788>)
 8001726:	197b      	adds	r3, r7, r5
 8001728:	0018      	movs	r0, r3
 800172a:	f005 f8c5 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172e:	197b      	adds	r3, r7, r5
 8001730:	0018      	movs	r0, r3
 8001732:	f7fe fce7 	bl	8000104 <strlen>
 8001736:	0003      	movs	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	1979      	adds	r1, r7, r5
 800173c:	4832      	ldr	r0, [pc, #200]	; (8001808 <printRadioSettings+0x754>)
 800173e:	230a      	movs	r3, #10
 8001740:	f002 ffb8 	bl	80046b4 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001744:	0026      	movs	r6, r4
 8001746:	193c      	adds	r4, r7, r4
 8001748:	201c      	movs	r0, #28
 800174a:	f7fe ffd9 	bl	8000700 <NRF24_read_register>
 800174e:	0003      	movs	r3, r0
 8001750:	7023      	strb	r3, [r4, #0]
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001752:	0031      	movs	r1, r6
 8001754:	187b      	adds	r3, r7, r1
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800175c:	17da      	asrs	r2, r3, #31
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	0fdb      	lsrs	r3, r3, #31
 8001762:	b2db      	uxtb	r3, r3
 8001764:	469c      	mov	ip, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001766:	187b      	adds	r3, r7, r1
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800176e:	17da      	asrs	r2, r3, #31
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	0fdb      	lsrs	r3, r3, #31
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4698      	mov	r8, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001778:	187b      	adds	r3, r7, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2204      	movs	r2, #4
 800177e:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	0fdb      	lsrs	r3, r3, #31
 8001786:	b2db      	uxtb	r3, r3
 8001788:	001c      	movs	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800178a:	187b      	adds	r3, r7, r1
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2208      	movs	r2, #8
 8001790:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001792:	17da      	asrs	r2, r3, #31
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	0fdb      	lsrs	r3, r3, #31
 8001798:	b2db      	uxtb	r3, r3
 800179a:	001d      	movs	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800179c:	187b      	adds	r3, r7, r1
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2210      	movs	r2, #16
 80017a2:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017a4:	17da      	asrs	r2, r3, #31
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	0fdb      	lsrs	r3, r3, #31
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	001e      	movs	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2220      	movs	r2, #32
 80017b4:	4013      	ands	r3, r2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017b6:	17da      	asrs	r2, r3, #31
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4920      	ldr	r1, [pc, #128]	; (8001840 <printRadioSettings+0x78c>)
 80017c0:	2208      	movs	r2, #8
 80017c2:	18b8      	adds	r0, r7, r2
 80017c4:	9303      	str	r3, [sp, #12]
 80017c6:	9602      	str	r6, [sp, #8]
 80017c8:	9501      	str	r5, [sp, #4]
 80017ca:	9400      	str	r4, [sp, #0]
 80017cc:	4643      	mov	r3, r8
 80017ce:	4662      	mov	r2, ip
 80017d0:	f005 f872 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017d4:	2508      	movs	r5, #8
 80017d6:	197b      	adds	r3, r7, r5
 80017d8:	0018      	movs	r0, r3
 80017da:	f7fe fc93 	bl	8000104 <strlen>
 80017de:	0003      	movs	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	1979      	adds	r1, r7, r5
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <printRadioSettings+0x754>)
 80017e6:	230a      	movs	r3, #10
 80017e8:	f002 ff64 	bl	80046b4 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80017ec:	266f      	movs	r6, #111	; 0x6f
 80017ee:	19bc      	adds	r4, r7, r6
 80017f0:	201d      	movs	r0, #29
 80017f2:	f7fe ff85 	bl	8000700 <NRF24_read_register>
 80017f6:	0003      	movs	r3, r0
 80017f8:	7023      	strb	r3, [r4, #0]
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80017fa:	19bb      	adds	r3, r7, r6
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2204      	movs	r2, #4
 8001800:	4013      	ands	r3, r2
 8001802:	e01f      	b.n	8001844 <printRadioSettings+0x790>
 8001804:	0800733c 	.word	0x0800733c
 8001808:	20000108 	.word	0x20000108
 800180c:	08007350 	.word	0x08007350
 8001810:	08007380 	.word	0x08007380
 8001814:	080073b0 	.word	0x080073b0
 8001818:	080073d8 	.word	0x080073d8
 800181c:	08007400 	.word	0x08007400
 8001820:	08007428 	.word	0x08007428
 8001824:	08007450 	.word	0x08007450
 8001828:	0800747c 	.word	0x0800747c
 800182c:	08007498 	.word	0x08007498
 8001830:	080074b4 	.word	0x080074b4
 8001834:	080074d0 	.word	0x080074d0
 8001838:	080074ec 	.word	0x080074ec
 800183c:	08007508 	.word	0x08007508
 8001840:	08007524 	.word	0x08007524
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <printRadioSettings+0x7a2>
 8001848:	4a28      	ldr	r2, [pc, #160]	; (80018ec <printRadioSettings+0x838>)
 800184a:	197b      	adds	r3, r7, r5
 800184c:	0011      	movs	r1, r2
 800184e:	0018      	movs	r0, r3
 8001850:	f005 f832 	bl	80068b8 <siprintf>
 8001854:	e006      	b.n	8001864 <printRadioSettings+0x7b0>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001856:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <printRadioSettings+0x83c>)
 8001858:	2308      	movs	r3, #8
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f005 f82a 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001864:	2408      	movs	r4, #8
 8001866:	193b      	adds	r3, r7, r4
 8001868:	0018      	movs	r0, r3
 800186a:	f7fe fc4b 	bl	8000104 <strlen>
 800186e:	0003      	movs	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	1939      	adds	r1, r7, r4
 8001874:	481f      	ldr	r0, [pc, #124]	; (80018f4 <printRadioSettings+0x840>)
 8001876:	230a      	movs	r3, #10
 8001878:	f002 ff1c 	bl	80046b4 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800187c:	236f      	movs	r3, #111	; 0x6f
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d006      	beq.n	8001896 <printRadioSettings+0x7e2>
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <printRadioSettings+0x844>)
 800188a:	193b      	adds	r3, r7, r4
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f005 f812 	bl	80068b8 <siprintf>
 8001894:	e006      	b.n	80018a4 <printRadioSettings+0x7f0>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001896:	4a19      	ldr	r2, [pc, #100]	; (80018fc <printRadioSettings+0x848>)
 8001898:	2308      	movs	r3, #8
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f005 f80a 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018a4:	2408      	movs	r4, #8
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7fe fc2b 	bl	8000104 <strlen>
 80018ae:	0003      	movs	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	1939      	adds	r1, r7, r4
 80018b4:	480f      	ldr	r0, [pc, #60]	; (80018f4 <printRadioSettings+0x840>)
 80018b6:	230a      	movs	r3, #10
 80018b8:	f002 fefc 	bl	80046b4 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018bc:	4a10      	ldr	r2, [pc, #64]	; (8001900 <printRadioSettings+0x84c>)
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	0011      	movs	r1, r2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f004 fff8 	bl	80068b8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7fe fc1a 	bl	8000104 <strlen>
 80018d0:	0003      	movs	r3, r0
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	1939      	adds	r1, r7, r4
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <printRadioSettings+0x840>)
 80018d8:	230a      	movs	r3, #10
 80018da:	f002 feeb 	bl	80046b4 <HAL_UART_Transmit>
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b01c      	add	sp, #112	; 0x70
 80018e4:	bc80      	pop	{r7}
 80018e6:	46b8      	mov	r8, r7
 80018e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	08007570 	.word	0x08007570
 80018f0:	08007588 	.word	0x08007588
 80018f4:	20000108 	.word	0x20000108
 80018f8:	080075a0 	.word	0x080075a0
 80018fc:	080075bc 	.word	0x080075bc
 8001900:	08007190 	.word	0x08007190

08001904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	46c6      	mov	lr, r8
 8001908:	b500      	push	{lr}
 800190a:	b09a      	sub	sp, #104	; 0x68
 800190c:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190e:	f000 fbf7 	bl	8002100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001912:	f000 f8ad 	bl	8001a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001916:	f000 f97f 	bl	8001c18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800191a:	f000 f92f 	bl	8001b7c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800191e:	f000 f8ef 	bl	8001b00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //UART
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8001922:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <main+0x14c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <main+0x14c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2140      	movs	r1, #64	; 0x40
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <main+0x14c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b45      	ldr	r3, [pc, #276]	; (8001a50 <main+0x14c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2120      	movs	r1, #32
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
  	HAL_UART_Receive_IT(&huart2, &RxSingleByte, 1);
 8001942:	4944      	ldr	r1, [pc, #272]	; (8001a54 <main+0x150>)
 8001944:	4b42      	ldr	r3, [pc, #264]	; (8001a50 <main+0x14c>)
 8001946:	2201      	movs	r2, #1
 8001948:	0018      	movs	r0, r3
 800194a:	f002 ff5f 	bl	800480c <HAL_UART_Receive_IT>
  	serialWrite("Gateway running");
 800194e:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <main+0x154>)
 8001950:	0018      	movs	r0, r3
 8001952:	f000 f9b3 	bl	8001cbc <serialWrite>
  //**** TRANSMITTER ****//

    NRF24_begin(GPIOA, NRF_CSN_Pin, NRF_CE_Pin, hspi1);
 8001956:	4c41      	ldr	r4, [pc, #260]	; (8001a5c <main+0x158>)
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4698      	mov	r8, r3
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	005e      	lsls	r6, r3, #1
 8001962:	23a0      	movs	r3, #160	; 0xa0
 8001964:	05dd      	lsls	r5, r3, #23
 8001966:	466b      	mov	r3, sp
 8001968:	0018      	movs	r0, r3
 800196a:	1d23      	adds	r3, r4, #4
 800196c:	2260      	movs	r2, #96	; 0x60
 800196e:	0019      	movs	r1, r3
 8001970:	f004 ff90 	bl	8006894 <memcpy>
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	4642      	mov	r2, r8
 8001978:	0031      	movs	r1, r6
 800197a:	0028      	movs	r0, r5
 800197c:	f7fe ffba 	bl	80008f4 <NRF24_begin>
   // nrf24_DebugUART_Init(huart2);
   // printRadioSettings();

    NRF24_stopListening();
 8001980:	f7ff f8ba 	bl	8000af8 <NRF24_stopListening>

    NRF24_openWritingPipe(TxAddress);
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <main+0x15c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0010      	movs	r0, r2
 800198c:	0019      	movs	r1, r3
 800198e:	f7ff f91f 	bl	8000bd0 <NRF24_openWritingPipe>

    NRF24_setAutoAck(false);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff f9c2 	bl	8000d1c <NRF24_setAutoAck>
    NRF24_setChannel(0);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff f961 	bl	8000c60 <NRF24_setChannel>
    NRF24_setPayloadSize(PAYLOAD_SIZE);
 800199e:	2020      	movs	r0, #32
 80019a0:	f7ff f97a 	bl	8000c98 <NRF24_setPayloadSize>
    NRF24_setPALevel(RF24_PA_m6dB);
 80019a4:	2002      	movs	r0, #2
 80019a6:	f7ff f9d0 	bl	8000d4a <NRF24_setPALevel>
  /* USER CODE END 2 */

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  uint8_t buffer_index =0;
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  if (dataFlag == 1) {
 80019b0:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <main+0x160>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d1fb      	bne.n	80019b0 <main+0xac>
		  buffer_index = 0;
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i< UART_BUFFER; i++) {
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	e034      	b.n	8001a2e <main+0x12a>

			  TxBuffer[buffer_index++] = Txdata[i];
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	1dfa      	adds	r2, r7, #7
 80019ca:	1c59      	adds	r1, r3, #1
 80019cc:	7011      	strb	r1, [r2, #0]
 80019ce:	0019      	movs	r1, r3
 80019d0:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <main+0x164>)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	18d3      	adds	r3, r2, r3
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <main+0x168>)
 80019da:	545a      	strb	r2, [r3, r1]

			  if (Txdata[i]=='\0' || Txdata[i]==';' || buffer_index == PAYLOAD_SIZE ||i == (UART_BUFFER-1)) {
 80019dc:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <main+0x164>)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	18d3      	adds	r3, r2, r3
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00c      	beq.n	8001a02 <main+0xfe>
 80019e8:	4a1f      	ldr	r2, [pc, #124]	; (8001a68 <main+0x164>)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b3b      	cmp	r3, #59	; 0x3b
 80019f2:	d006      	beq.n	8001a02 <main+0xfe>
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d002      	beq.n	8001a02 <main+0xfe>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d112      	bne.n	8001a28 <main+0x124>

				  NRF24_write(TxBuffer, PAYLOAD_SIZE);
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <main+0x168>)
 8001a04:	2120      	movs	r1, #32
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7ff f882 	bl	8000b10 <NRF24_write>

				  clearString(TxBuffer, PAYLOAD_SIZE);
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <main+0x168>)
 8001a0e:	2120      	movs	r1, #32
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 f9e7 	bl	8001de4 <clearString>
				  buffer_index = 0;
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
				  if (Txdata[i]=='\0') break;
 8001a1c:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <main+0x164>)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	18d3      	adds	r3, r2, r3
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <main+0x132>
		  for (int i = 0; i< UART_BUFFER; i++) {
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2bff      	cmp	r3, #255	; 0xff
 8001a32:	ddc7      	ble.n	80019c4 <main+0xc0>
 8001a34:	e000      	b.n	8001a38 <main+0x134>
				  if (Txdata[i]=='\0') break;
 8001a36:	46c0      	nop			; (mov r8, r8)
			  }

		  }


		  clearString(Txdata, UART_BUFFER);
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	005a      	lsls	r2, r3, #1
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <main+0x164>)
 8001a3e:	0011      	movs	r1, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 f9cf 	bl	8001de4 <clearString>
		  dataFlag = 0;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <main+0x160>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
	  if (dataFlag == 1) {
 8001a4c:	e7b0      	b.n	80019b0 <main+0xac>
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	200001fc 	.word	0x200001fc
 8001a54:	200004ae 	.word	0x200004ae
 8001a58:	080076d4 	.word	0x080076d4
 8001a5c:	20000198 	.word	0x20000198
 8001a60:	20000000 	.word	0x20000000
 8001a64:	200004ac 	.word	0x200004ac
 8001a68:	2000038c 	.word	0x2000038c
 8001a6c:	2000048c 	.word	0x2000048c

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b095      	sub	sp, #84	; 0x54
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	2414      	movs	r4, #20
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	233c      	movs	r3, #60	; 0x3c
 8001a7e:	001a      	movs	r2, r3
 8001a80:	2100      	movs	r1, #0
 8001a82:	f004 ff10 	bl	80068a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	0018      	movs	r0, r3
 8001a8a:	2310      	movs	r3, #16
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	2100      	movs	r1, #0
 8001a90:	f004 ff09 	bl	80068a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 ff21 	bl	80028e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001aac:	193b      	adds	r3, r7, r4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	2240      	movs	r2, #64	; 0x40
 8001ab6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ab8:	193b      	adds	r3, r7, r4
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 ff59 	bl	8002978 <HAL_RCC_OscConfig>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001aca:	f000 f9a5 	bl	8001e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2100      	movs	r1, #0
 8001aea:	0018      	movs	r0, r3
 8001aec:	f001 faa4 	bl	8003038 <HAL_RCC_ClockConfig>
 8001af0:	1e03      	subs	r3, r0, #0
 8001af2:	d001      	beq.n	8001af8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001af4:	f000 f990 	bl	8001e18 <Error_Handler>
  }
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b015      	add	sp, #84	; 0x54
 8001afe:	bd90      	pop	{r4, r7, pc}

08001b00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b06:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <MX_SPI1_Init+0x78>)
 8001b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b0c:	2282      	movs	r2, #130	; 0x82
 8001b0e:	0052      	lsls	r2, r2, #1
 8001b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b1a:	22e0      	movs	r2, #224	; 0xe0
 8001b1c:	00d2      	lsls	r2, r2, #3
 8001b1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b36:	2208      	movs	r2, #8
 8001b38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b4e:	2207      	movs	r2, #7
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <MX_SPI1_Init+0x74>)
 8001b60:	0018      	movs	r0, r3
 8001b62:	f001 fe4f 	bl	8003804 <HAL_SPI_Init>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d001      	beq.n	8001b6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b6a:	f000 f955 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000198 	.word	0x20000198
 8001b78:	40013000 	.word	0x40013000

08001b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001b82:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <MX_USART2_UART_Init+0x98>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001b88:	22e1      	movs	r2, #225	; 0xe1
 8001b8a:	0252      	lsls	r2, r2, #9
 8001b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f002 fd1e 	bl	8004608 <HAL_UART_Init>
 8001bcc:	1e03      	subs	r3, r0, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bd0:	f000 f922 	bl	8001e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f004 fd51 	bl	8006680 <HAL_UARTEx_SetTxFifoThreshold>
 8001bde:	1e03      	subs	r3, r0, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001be2:	f000 f919 	bl	8001e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001be8:	2100      	movs	r1, #0
 8001bea:	0018      	movs	r0, r3
 8001bec:	f004 fd88 	bl	8006700 <HAL_UARTEx_SetRxFifoThreshold>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bf4:	f000 f910 	bl	8001e18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <MX_USART2_UART_Init+0x94>)
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f004 fd06 	bl	800660c <HAL_UARTEx_DisableFifoMode>
 8001c00:	1e03      	subs	r3, r0, #0
 8001c02:	d001      	beq.n	8001c08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c04:	f000 f908 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	200001fc 	.word	0x200001fc
 8001c14:	40004400 	.word	0x40004400

08001c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1e:	240c      	movs	r4, #12
 8001c20:	193b      	adds	r3, r7, r4
 8001c22:	0018      	movs	r0, r3
 8001c24:	2314      	movs	r3, #20
 8001c26:	001a      	movs	r2, r3
 8001c28:	2100      	movs	r1, #0
 8001c2a:	f004 fe3c 	bl	80068a6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <MX_GPIO_Init+0xa0>)
 8001c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_GPIO_Init+0xa0>)
 8001c34:	2104      	movs	r1, #4
 8001c36:	430a      	orrs	r2, r1
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <MX_GPIO_Init+0xa0>)
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_GPIO_Init+0xa0>)
 8001c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_GPIO_Init+0xa0>)
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_GPIO_Init+0xa0>)
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	2220      	movs	r2, #32
 8001c58:	4013      	ands	r3, r2
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_GPIO_Init+0xa0>)
 8001c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_GPIO_Init+0xa0>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <MX_GPIO_Init+0xa0>)
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CSN_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	0099      	lsls	r1, r3, #2
 8001c7a:	23a0      	movs	r3, #160	; 0xa0
 8001c7c:	05db      	lsls	r3, r3, #23
 8001c7e:	2200      	movs	r2, #0
 8001c80:	0018      	movs	r0, r3
 8001c82:	f000 fe0f 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRF_CSN_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_CE_Pin;
 8001c86:	193b      	adds	r3, r7, r4
 8001c88:	22c0      	movs	r2, #192	; 0xc0
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	2201      	movs	r2, #1
 8001c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	193a      	adds	r2, r7, r4
 8001ca2:	23a0      	movs	r3, #160	; 0xa0
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 fc8f 	bl	80025cc <HAL_GPIO_Init>

}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b009      	add	sp, #36	; 0x24
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	40021000 	.word	0x40021000

08001cbc <serialWrite>:

/* USER CODE BEGIN 4 */
void serialWrite(char data[]){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) data, strlen(data), 10);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7fe fa1c 	bl	8000104 <strlen>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <serialWrite+0x34>)
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	f002 fced 	bl	80046b4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)"\n",1,10);
 8001cda:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <serialWrite+0x38>)
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <serialWrite+0x34>)
 8001cde:	230a      	movs	r3, #10
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f002 fce7 	bl	80046b4 <HAL_UART_Transmit>
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	200001fc 	.word	0x200001fc
 8001cf4:	080076e4 	.word	0x080076e4

08001cf8 <serialProcessRxData>:

void serialProcessRxData(){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0

	if(dataFlag == 0) {
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <serialProcessRxData+0x74>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d120      	bne.n	8001d48 <serialProcessRxData+0x50>
		for (int i = 0; i < RxUARTLength; i++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	e00b      	b.n	8001d24 <serialProcessRxData+0x2c>
			Txdata[i] = RxUARTBuffer[i];
 8001d0c:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <serialProcessRxData+0x78>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	18d3      	adds	r3, r2, r3
 8001d12:	7819      	ldrb	r1, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <serialProcessRxData+0x7c>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	18d3      	adds	r3, r2, r3
 8001d1a:	1c0a      	adds	r2, r1, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < RxUARTLength; i++)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3301      	adds	r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <serialProcessRxData+0x80>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	001a      	movs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	dbed      	blt.n	8001d0c <serialProcessRxData+0x14>
		dataFlag = 1;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <serialProcessRxData+0x74>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
		serialWrite(Txdata);
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <serialProcessRxData+0x7c>)
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7ff ffbf 	bl	8001cbc <serialWrite>
		serialWrite("OK");
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <serialProcessRxData+0x84>)
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff ffbb 	bl	8001cbc <serialWrite>
 8001d46:	e003      	b.n	8001d50 <serialProcessRxData+0x58>
	}
	else serialWrite("NOK");
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <serialProcessRxData+0x88>)
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff ffb6 	bl	8001cbc <serialWrite>

	clearString(RxUARTBuffer, UART_BUFFER);
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	005a      	lsls	r2, r3, #1
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <serialProcessRxData+0x78>)
 8001d56:	0011      	movs	r1, r2
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 f843 	bl	8001de4 <clearString>

	RxUARTLength = 0;
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <serialProcessRxData+0x80>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200004ac 	.word	0x200004ac
 8001d70:	2000028c 	.word	0x2000028c
 8001d74:	2000038c 	.word	0x2000038c
 8001d78:	200004ad 	.word	0x200004ad
 8001d7c:	080076e8 	.word	0x080076e8
 8001d80:	080076ec 	.word	0x080076ec

08001d84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <HAL_UART_RxCpltCallback+0x4c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d117      	bne.n	8001dc6 <HAL_UART_RxCpltCallback+0x42>
		if(RxSingleByte == '\n')
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_UART_RxCpltCallback+0x50>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b0a      	cmp	r3, #10
 8001d9c:	d102      	bne.n	8001da4 <HAL_UART_RxCpltCallback+0x20>
			serialProcessRxData();
 8001d9e:	f7ff ffab 	bl	8001cf8 <serialProcessRxData>
 8001da2:	e00a      	b.n	8001dba <HAL_UART_RxCpltCallback+0x36>
		else RxUARTBuffer[RxUARTLength++] = RxSingleByte;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_UART_RxCpltCallback+0x54>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	b2d1      	uxtb	r1, r2
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_UART_RxCpltCallback+0x54>)
 8001dae:	7011      	strb	r1, [r2, #0]
 8001db0:	001a      	movs	r2, r3
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_UART_RxCpltCallback+0x50>)
 8001db4:	7819      	ldrb	r1, [r3, #0]
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_UART_RxCpltCallback+0x58>)
 8001db8:	5499      	strb	r1, [r3, r2]

		if (RxUARTLength == UART_BUFFER)
			serialProcessRxData();

		HAL_UART_Receive_IT(&huart2, &RxSingleByte, 1);
 8001dba:	4906      	ldr	r1, [pc, #24]	; (8001dd4 <HAL_UART_RxCpltCallback+0x50>)
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_UART_RxCpltCallback+0x5c>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f002 fd23 	bl	800480c <HAL_UART_Receive_IT>
	}
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40004400 	.word	0x40004400
 8001dd4:	200004ae 	.word	0x200004ae
 8001dd8:	200004ad 	.word	0x200004ad
 8001ddc:	2000028c 	.word	0x2000028c
 8001de0:	200001fc 	.word	0x200001fc

08001de4 <clearString>:

void clearString(char * str, int len) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	for(int i = 0; i< len; i++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e007      	b.n	8001e04 <clearString+0x20>
		str[i] = '\0';
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	18d3      	adds	r3, r2, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< len; i++)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3301      	adds	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbf3      	blt.n	8001df4 <clearString+0x10>
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b004      	add	sp, #16
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  serialWrite("err");
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <Error_Handler+0x1c>)
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff ff4a 	bl	8001cbc <serialWrite>
	  HAL_Delay(1000);
 8001e28:	23fa      	movs	r3, #250	; 0xfa
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 f9ed 	bl	800220c <HAL_Delay>
	  serialWrite("err");
 8001e32:	e7f5      	b.n	8001e20 <Error_Handler+0x8>
 8001e34:	080076f0 	.word	0x080076f0

08001e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	0549      	lsls	r1, r1, #21
 8001e60:	430a      	orrs	r2, r1
 8001e62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	055b      	lsls	r3, r3, #21
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001e72:	23c0      	movs	r3, #192	; 0xc0
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	0018      	movs	r0, r3
 8001e78:	f000 f9ec 	bl	8002254 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b08b      	sub	sp, #44	; 0x2c
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	2414      	movs	r4, #20
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	0018      	movs	r0, r3
 8001e96:	2314      	movs	r3, #20
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f004 fd03 	bl	80068a6 <memset>
  if(hspi->Instance==SPI1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_SPI_MspInit+0x8c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d130      	bne.n	8001f0c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_SPI_MspInit+0x90>)
 8001eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_SPI_MspInit+0x90>)
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	0149      	lsls	r1, r1, #5
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_SPI_MspInit+0x90>)
 8001eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	015b      	lsls	r3, r3, #5
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_SPI_MspInit+0x90>)
 8001ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_SPI_MspInit+0x90>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_SPI_MspInit+0x90>)
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ede:	0021      	movs	r1, r4
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	22e0      	movs	r2, #224	; 0xe0
 8001ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2202      	movs	r2, #2
 8001eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	187a      	adds	r2, r7, r1
 8001f00:	23a0      	movs	r3, #160	; 0xa0
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	0011      	movs	r1, r2
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fb60 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b00b      	add	sp, #44	; 0x2c
 8001f12:	bd90      	pop	{r4, r7, pc}
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b09d      	sub	sp, #116	; 0x74
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	235c      	movs	r3, #92	; 0x5c
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	0018      	movs	r0, r3
 8001f2a:	2314      	movs	r3, #20
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	2100      	movs	r1, #0
 8001f30:	f004 fcb9 	bl	80068a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f34:	2410      	movs	r4, #16
 8001f36:	193b      	adds	r3, r7, r4
 8001f38:	0018      	movs	r0, r3
 8001f3a:	234c      	movs	r3, #76	; 0x4c
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	2100      	movs	r1, #0
 8001f40:	f004 fcb1 	bl	80068a6 <memset>
  if(huart->Instance==USART2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <HAL_UART_MspInit+0xc8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d146      	bne.n	8001fdc <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f4e:	193b      	adds	r3, r7, r4
 8001f50:	2202      	movs	r2, #2
 8001f52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f54:	193b      	adds	r3, r7, r4
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f001 fa15 	bl	800338c <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	1e03      	subs	r3, r0, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f66:	f7ff ff57 	bl	8001e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <HAL_UART_MspInit+0xcc>)
 8001f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_UART_MspInit+0xcc>)
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0289      	lsls	r1, r1, #10
 8001f74:	430a      	orrs	r2, r1
 8001f76:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_UART_MspInit+0xcc>)
 8001f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_UART_MspInit+0xcc>)
 8001f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_UART_MspInit+0xcc>)
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_UART_MspInit+0xcc>)
 8001f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f96:	2201      	movs	r2, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001f9e:	215c      	movs	r1, #92	; 0x5c
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	187b      	adds	r3, r7, r1
 8001fa8:	2202      	movs	r2, #2
 8001faa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	187b      	adds	r3, r7, r1
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001fb8:	187b      	adds	r3, r7, r1
 8001fba:	2201      	movs	r2, #1
 8001fbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	187a      	adds	r2, r7, r1
 8001fc0:	23a0      	movs	r3, #160	; 0xa0
 8001fc2:	05db      	lsls	r3, r3, #23
 8001fc4:	0011      	movs	r1, r2
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 fb00 	bl	80025cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2100      	movs	r1, #0
 8001fd0:	201c      	movs	r0, #28
 8001fd2:	f000 fa01 	bl	80023d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8001fd6:	201c      	movs	r0, #28
 8001fd8:	f000 fa13 	bl	8002402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b01d      	add	sp, #116	; 0x74
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40021000 	.word	0x40021000

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <HardFault_Handler+0x4>

08001ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002010:	f000 f8e0 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <USART2_LPUART2_IRQHandler+0x14>)
 8002022:	0018      	movs	r0, r3
 8002024:	f002 fc62 	bl	80048ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	200001fc 	.word	0x200001fc

08002034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <_sbrk+0x5c>)
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <_sbrk+0x60>)
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <_sbrk+0x64>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <_sbrk+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d207      	bcs.n	8002074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002064:	f004 fbec 	bl	8006840 <__errno>
 8002068:	0003      	movs	r3, r0
 800206a:	220c      	movs	r2, #12
 800206c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206e:	2301      	movs	r3, #1
 8002070:	425b      	negs	r3, r3
 8002072:	e009      	b.n	8002088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	18d2      	adds	r2, r2, r3
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <_sbrk+0x64>)
 8002084:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b006      	add	sp, #24
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20024000 	.word	0x20024000
 8002094:	00004000 	.word	0x00004000
 8002098:	200004b0 	.word	0x200004b0
 800209c:	200004c8 	.word	0x200004c8

080020a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020b0:	f7ff fff6 	bl	80020a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020b6:	490d      	ldr	r1, [pc, #52]	; (80020ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <LoopForever+0xe>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020cc:	4c0a      	ldr	r4, [pc, #40]	; (80020f8 <LoopForever+0x16>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020da:	f004 fbb7 	bl	800684c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020de:	f7ff fc11 	bl	8001904 <main>

080020e2 <LoopForever>:

LoopForever:
  b LoopForever
 80020e2:	e7fe      	b.n	80020e2 <LoopForever>
  ldr   r0, =_estack
 80020e4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80020f0:	080077c0 	.word	0x080077c0
  ldr r2, =_sbss
 80020f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80020f8:	200004c8 	.word	0x200004c8

080020fc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC1_COMP_IRQHandler>
	...

08002100 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002106:	1dfb      	adds	r3, r7, #7
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_Init+0x3c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_Init+0x3c>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0049      	lsls	r1, r1, #1
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800211a:	2000      	movs	r0, #0
 800211c:	f000 f810 	bl	8002140 <HAL_InitTick>
 8002120:	1e03      	subs	r3, r0, #0
 8002122:	d003      	beq.n	800212c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e001      	b.n	8002130 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800212c:	f7ff fe84 	bl	8001e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002130:	1dfb      	adds	r3, r7, #7
 8002132:	781b      	ldrb	r3, [r3, #0]
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40022000 	.word	0x40022000

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002148:	230f      	movs	r3, #15
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_InitTick+0x88>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d02b      	beq.n	80021b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002158:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <HAL_InitTick+0x8c>)
 800215a:	681c      	ldr	r4, [r3, #0]
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <HAL_InitTick+0x88>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	0019      	movs	r1, r3
 8002162:	23fa      	movs	r3, #250	; 0xfa
 8002164:	0098      	lsls	r0, r3, #2
 8002166:	f7fd ffdf 	bl	8000128 <__udivsi3>
 800216a:	0003      	movs	r3, r0
 800216c:	0019      	movs	r1, r3
 800216e:	0020      	movs	r0, r4
 8002170:	f7fd ffda 	bl	8000128 <__udivsi3>
 8002174:	0003      	movs	r3, r0
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f953 	bl	8002422 <HAL_SYSTICK_Config>
 800217c:	1e03      	subs	r3, r0, #0
 800217e:	d112      	bne.n	80021a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d80a      	bhi.n	800219c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	2301      	movs	r3, #1
 800218a:	425b      	negs	r3, r3
 800218c:	2200      	movs	r2, #0
 800218e:	0018      	movs	r0, r3
 8002190:	f000 f922 	bl	80023d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_InitTick+0x90>)
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e00d      	b.n	80021b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800219c:	230f      	movs	r3, #15
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e008      	b.n	80021b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021a6:	230f      	movs	r3, #15
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e003      	b.n	80021b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021b0:	230f      	movs	r3, #15
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80021b8:	230f      	movs	r3, #15
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	781b      	ldrb	r3, [r3, #0]
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b005      	add	sp, #20
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	20000010 	.word	0x20000010
 80021cc:	20000008 	.word	0x20000008
 80021d0:	2000000c 	.word	0x2000000c

080021d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_IncTick+0x1c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	001a      	movs	r2, r3
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_IncTick+0x20>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	18d2      	adds	r2, r2, r3
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_IncTick+0x20>)
 80021e6:	601a      	str	r2, [r3, #0]
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	20000010 	.word	0x20000010
 80021f4:	200004b4 	.word	0x200004b4

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b02      	ldr	r3, [pc, #8]	; (8002208 <HAL_GetTick+0x10>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	200004b4 	.word	0x200004b4

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff fff0 	bl	80021f8 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3301      	adds	r3, #1
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	001a      	movs	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	189b      	adds	r3, r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	f7ff ffe0 	bl	80021f8 <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	b004      	add	sp, #16
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	20000010 	.word	0x20000010

08002254 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a06      	ldr	r2, [pc, #24]	; (800227c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	40010000 	.word	0x40010000
 800227c:	fffff9ff 	.word	0xfffff9ff

08002280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	0002      	movs	r2, r0
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b7f      	cmp	r3, #127	; 0x7f
 8002292:	d809      	bhi.n	80022a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	001a      	movs	r2, r3
 800229a:	231f      	movs	r3, #31
 800229c:	401a      	ands	r2, r3
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <__NVIC_EnableIRQ+0x30>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	4091      	lsls	r1, r2
 80022a4:	000a      	movs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b002      	add	sp, #8
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	0002      	movs	r2, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b7f      	cmp	r3, #127	; 0x7f
 80022c8:	d828      	bhi.n	800231c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ca:	4a2f      	ldr	r2, [pc, #188]	; (8002388 <__NVIC_SetPriority+0xd4>)
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	33c0      	adds	r3, #192	; 0xc0
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	589b      	ldr	r3, [r3, r2]
 80022da:	1dfa      	adds	r2, r7, #7
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	0011      	movs	r1, r2
 80022e0:	2203      	movs	r2, #3
 80022e2:	400a      	ands	r2, r1
 80022e4:	00d2      	lsls	r2, r2, #3
 80022e6:	21ff      	movs	r1, #255	; 0xff
 80022e8:	4091      	lsls	r1, r2
 80022ea:	000a      	movs	r2, r1
 80022ec:	43d2      	mvns	r2, r2
 80022ee:	401a      	ands	r2, r3
 80022f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	22ff      	movs	r2, #255	; 0xff
 80022f8:	401a      	ands	r2, r3
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	0018      	movs	r0, r3
 8002300:	2303      	movs	r3, #3
 8002302:	4003      	ands	r3, r0
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002308:	481f      	ldr	r0, [pc, #124]	; (8002388 <__NVIC_SetPriority+0xd4>)
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b25b      	sxtb	r3, r3
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	430a      	orrs	r2, r1
 8002314:	33c0      	adds	r3, #192	; 0xc0
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800231a:	e031      	b.n	8002380 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800231c:	4a1b      	ldr	r2, [pc, #108]	; (800238c <__NVIC_SetPriority+0xd8>)
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	0019      	movs	r1, r3
 8002324:	230f      	movs	r3, #15
 8002326:	400b      	ands	r3, r1
 8002328:	3b08      	subs	r3, #8
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3306      	adds	r3, #6
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	18d3      	adds	r3, r2, r3
 8002332:	3304      	adds	r3, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1dfa      	adds	r2, r7, #7
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	0011      	movs	r1, r2
 800233c:	2203      	movs	r2, #3
 800233e:	400a      	ands	r2, r1
 8002340:	00d2      	lsls	r2, r2, #3
 8002342:	21ff      	movs	r1, #255	; 0xff
 8002344:	4091      	lsls	r1, r2
 8002346:	000a      	movs	r2, r1
 8002348:	43d2      	mvns	r2, r2
 800234a:	401a      	ands	r2, r3
 800234c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	019b      	lsls	r3, r3, #6
 8002352:	22ff      	movs	r2, #255	; 0xff
 8002354:	401a      	ands	r2, r3
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	0018      	movs	r0, r3
 800235c:	2303      	movs	r3, #3
 800235e:	4003      	ands	r3, r0
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002364:	4809      	ldr	r0, [pc, #36]	; (800238c <__NVIC_SetPriority+0xd8>)
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	001c      	movs	r4, r3
 800236c:	230f      	movs	r3, #15
 800236e:	4023      	ands	r3, r4
 8002370:	3b08      	subs	r3, #8
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	430a      	orrs	r2, r1
 8002376:	3306      	adds	r3, #6
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	18c3      	adds	r3, r0, r3
 800237c:	3304      	adds	r3, #4
 800237e:	601a      	str	r2, [r3, #0]
}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b003      	add	sp, #12
 8002386:	bd90      	pop	{r4, r7, pc}
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	1e5a      	subs	r2, r3, #1
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	045b      	lsls	r3, r3, #17
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d301      	bcc.n	80023a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a4:	2301      	movs	r3, #1
 80023a6:	e010      	b.n	80023ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <SysTick_Config+0x44>)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	3a01      	subs	r2, #1
 80023ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b0:	2301      	movs	r3, #1
 80023b2:	425b      	negs	r3, r3
 80023b4:	2103      	movs	r1, #3
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff ff7c 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x44>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x44>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	210f      	movs	r1, #15
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	1c02      	adds	r2, r0, #0
 80023e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b25b      	sxtb	r3, r3
 80023f2:	0011      	movs	r1, r2
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff ff5d 	bl	80022b4 <__NVIC_SetPriority>
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	0002      	movs	r2, r0
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b25b      	sxtb	r3, r3
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff ff33 	bl	8002280 <__NVIC_EnableIRQ>
}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	0018      	movs	r0, r3
 800242e:	f7ff ffaf 	bl	8002390 <SysTick_Config>
 8002432:	0003      	movs	r3, r0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e04f      	b.n	80024ee <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2225      	movs	r2, #37	; 0x25
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d008      	beq.n	800246c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2204      	movs	r2, #4
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2224      	movs	r2, #36	; 0x24
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e040      	b.n	80024ee <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	210e      	movs	r1, #14
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002486:	491c      	ldr	r1, [pc, #112]	; (80024f8 <HAL_DMA_Abort+0xbc>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	438a      	bics	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	221c      	movs	r2, #28
 80024a2:	401a      	ands	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2101      	movs	r1, #1
 80024aa:	4091      	lsls	r1, r2
 80024ac:	000a      	movs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00c      	beq.n	80024dc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	490a      	ldr	r1, [pc, #40]	; (80024f8 <HAL_DMA_Abort+0xbc>)
 80024ce:	400a      	ands	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2225      	movs	r2, #37	; 0x25
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	2100      	movs	r1, #0
 80024ea:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	fffffeff 	.word	0xfffffeff

080024fc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002504:	210f      	movs	r1, #15
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2225      	movs	r2, #37	; 0x25
 8002510:	5c9b      	ldrb	r3, [r3, r2]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d006      	beq.n	8002526 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e048      	b.n	80025b8 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	210e      	movs	r1, #14
 8002532:	438a      	bics	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	438a      	bics	r2, r1
 8002544:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002550:	491d      	ldr	r1, [pc, #116]	; (80025c8 <HAL_DMA_Abort_IT+0xcc>)
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	221c      	movs	r2, #28
 800255c:	401a      	ands	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2101      	movs	r1, #1
 8002564:	4091      	lsls	r1, r2
 8002566:	000a      	movs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002572:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00c      	beq.n	8002596 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	4910      	ldr	r1, [pc, #64]	; (80025c8 <HAL_DMA_Abort_IT+0xcc>)
 8002588:	400a      	ands	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002594:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2225      	movs	r2, #37	; 0x25
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2224      	movs	r2, #36	; 0x24
 80025a2:	2100      	movs	r1, #0
 80025a4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	0010      	movs	r0, r2
 80025b6:	4798      	blx	r3
    }
  }
  return status;
 80025b8:	230f      	movs	r3, #15
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	781b      	ldrb	r3, [r3, #0]
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b004      	add	sp, #16
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	fffffeff 	.word	0xfffffeff

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025da:	e14d      	b.n	8002878 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4091      	lsls	r1, r2
 80025e6:	000a      	movs	r2, r1
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d100      	bne.n	80025f4 <HAL_GPIO_Init+0x28>
 80025f2:	e13e      	b.n	8002872 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d005      	beq.n	800260c <HAL_GPIO_Init+0x40>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	4013      	ands	r3, r2
 8002608:	2b02      	cmp	r3, #2
 800260a:	d130      	bne.n	800266e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	409a      	lsls	r2, r3
 800261a:	0013      	movs	r3, r2
 800261c:	43da      	mvns	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	409a      	lsls	r2, r3
 800262e:	0013      	movs	r3, r2
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002642:	2201      	movs	r2, #1
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
 8002648:	0013      	movs	r3, r2
 800264a:	43da      	mvns	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	2201      	movs	r2, #1
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2203      	movs	r2, #3
 8002674:	4013      	ands	r3, r2
 8002676:	2b03      	cmp	r3, #3
 8002678:	d017      	beq.n	80026aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	43da      	mvns	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	409a      	lsls	r2, r3
 800269c:	0013      	movs	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2203      	movs	r2, #3
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d123      	bne.n	80026fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	58d3      	ldr	r3, [r2, r3]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2207      	movs	r2, #7
 80026c8:	4013      	ands	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	43da      	mvns	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2107      	movs	r1, #7
 80026e2:	400b      	ands	r3, r1
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	409a      	lsls	r2, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	6939      	ldr	r1, [r7, #16]
 80026fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	43da      	mvns	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2203      	movs	r2, #3
 800271c:	401a      	ands	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	0013      	movs	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	23c0      	movs	r3, #192	; 0xc0
 8002738:	029b      	lsls	r3, r3, #10
 800273a:	4013      	ands	r3, r2
 800273c:	d100      	bne.n	8002740 <HAL_GPIO_Init+0x174>
 800273e:	e098      	b.n	8002872 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002740:	4a53      	ldr	r2, [pc, #332]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3318      	adds	r3, #24
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	589b      	ldr	r3, [r3, r2]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2203      	movs	r2, #3
 8002752:	4013      	ands	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	220f      	movs	r2, #15
 8002758:	409a      	lsls	r2, r3
 800275a:	0013      	movs	r3, r2
 800275c:	43da      	mvns	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	23a0      	movs	r3, #160	; 0xa0
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	429a      	cmp	r2, r3
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0x1d6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a48      	ldr	r2, [pc, #288]	; (8002894 <HAL_GPIO_Init+0x2c8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x1d2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a47      	ldr	r2, [pc, #284]	; (8002898 <HAL_GPIO_Init+0x2cc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00d      	beq.n	800279a <HAL_GPIO_Init+0x1ce>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a46      	ldr	r2, [pc, #280]	; (800289c <HAL_GPIO_Init+0x2d0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x1ca>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a45      	ldr	r2, [pc, #276]	; (80028a0 <HAL_GPIO_Init+0x2d4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_GPIO_Init+0x1c6>
 800278e:	2304      	movs	r3, #4
 8002790:	e008      	b.n	80027a4 <HAL_GPIO_Init+0x1d8>
 8002792:	2305      	movs	r3, #5
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x1d8>
 8002796:	2303      	movs	r3, #3
 8002798:	e004      	b.n	80027a4 <HAL_GPIO_Init+0x1d8>
 800279a:	2302      	movs	r3, #2
 800279c:	e002      	b.n	80027a4 <HAL_GPIO_Init+0x1d8>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_GPIO_Init+0x1d8>
 80027a2:	2300      	movs	r3, #0
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	2103      	movs	r1, #3
 80027a8:	400a      	ands	r2, r1
 80027aa:	00d2      	lsls	r2, r2, #3
 80027ac:	4093      	lsls	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027b4:	4936      	ldr	r1, [pc, #216]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	3318      	adds	r3, #24
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c2:	4b33      	ldr	r3, [pc, #204]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43da      	mvns	r2, r3
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	035b      	lsls	r3, r3, #13
 80027da:	4013      	ands	r3, r2
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43da      	mvns	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	039b      	lsls	r3, r3, #14
 8002804:	4013      	ands	r3, r2
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002816:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 8002818:	2384      	movs	r3, #132	; 0x84
 800281a:	58d3      	ldr	r3, [r2, r3]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43da      	mvns	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	4013      	ands	r3, r2
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800283c:	4914      	ldr	r1, [pc, #80]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 800283e:	2284      	movs	r2, #132	; 0x84
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	58d3      	ldr	r3, [r2, r3]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	43da      	mvns	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	4013      	ands	r3, r2
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800286a:	4909      	ldr	r1, [pc, #36]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	40da      	lsrs	r2, r3
 8002880:	1e13      	subs	r3, r2, #0
 8002882:	d000      	beq.n	8002886 <HAL_GPIO_Init+0x2ba>
 8002884:	e6aa      	b.n	80025dc <HAL_GPIO_Init+0x10>
  }
}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b006      	add	sp, #24
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021800 	.word	0x40021800
 8002894:	50000400 	.word	0x50000400
 8002898:	50000800 	.word	0x50000800
 800289c:	50000c00 	.word	0x50000c00
 80028a0:	50001000 	.word	0x50001000

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	0008      	movs	r0, r1
 80028ae:	0011      	movs	r1, r2
 80028b0:	1cbb      	adds	r3, r7, #2
 80028b2:	1c02      	adds	r2, r0, #0
 80028b4:	801a      	strh	r2, [r3, #0]
 80028b6:	1c7b      	adds	r3, r7, #1
 80028b8:	1c0a      	adds	r2, r1, #0
 80028ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028bc:	1c7b      	adds	r3, r7, #1
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028c4:	1cbb      	adds	r3, r7, #2
 80028c6:	881a      	ldrh	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028cc:	e003      	b.n	80028d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ce:	1cbb      	adds	r3, r7, #2
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b002      	add	sp, #8
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d11f      	bne.n	8002944 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	0013      	movs	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	189b      	adds	r3, r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4912      	ldr	r1, [pc, #72]	; (800295c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002912:	0018      	movs	r0, r3
 8002914:	f7fd fc08 	bl	8000128 <__udivsi3>
 8002918:	0003      	movs	r3, r0
 800291a:	3301      	adds	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800291e:	e008      	b.n	8002932 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3b01      	subs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e001      	b.n	8002932 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e009      	b.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	401a      	ands	r2, r3
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	429a      	cmp	r2, r3
 8002942:	d0ed      	beq.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40007000 	.word	0x40007000
 8002954:	fffff9ff 	.word	0xfffff9ff
 8002958:	20000008 	.word	0x20000008
 800295c:	000f4240 	.word	0x000f4240

08002960 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	23e0      	movs	r3, #224	; 0xe0
 800296a:	01db      	lsls	r3, r3, #7
 800296c:	4013      	ands	r3, r2
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f000 fb50 	bl	800302c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	4013      	ands	r3, r2
 8002994:	d100      	bne.n	8002998 <HAL_RCC_OscConfig+0x20>
 8002996:	e07c      	b.n	8002a92 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002998:	4bc3      	ldr	r3, [pc, #780]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2238      	movs	r2, #56	; 0x38
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a2:	4bc1      	ldr	r3, [pc, #772]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2203      	movs	r2, #3
 80029a8:	4013      	ands	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d102      	bne.n	80029b8 <HAL_RCC_OscConfig+0x40>
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d002      	beq.n	80029be <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d10b      	bne.n	80029d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029be:	4bba      	ldr	r3, [pc, #744]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	029b      	lsls	r3, r3, #10
 80029c6:	4013      	ands	r3, r2
 80029c8:	d062      	beq.n	8002a90 <HAL_RCC_OscConfig+0x118>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d15e      	bne.n	8002a90 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e32a      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	025b      	lsls	r3, r3, #9
 80029de:	429a      	cmp	r2, r3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_OscConfig+0x7a>
 80029e2:	4bb1      	ldr	r3, [pc, #708]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4bb0      	ldr	r3, [pc, #704]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	0249      	lsls	r1, r1, #9
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e020      	b.n	8002a34 <HAL_RCC_OscConfig+0xbc>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	23a0      	movs	r3, #160	; 0xa0
 80029f8:	02db      	lsls	r3, r3, #11
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d10e      	bne.n	8002a1c <HAL_RCC_OscConfig+0xa4>
 80029fe:	4baa      	ldr	r3, [pc, #680]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4ba9      	ldr	r3, [pc, #676]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	02c9      	lsls	r1, r1, #11
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	4ba6      	ldr	r3, [pc, #664]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4ba5      	ldr	r3, [pc, #660]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	0249      	lsls	r1, r1, #9
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xbc>
 8002a1c:	4ba2      	ldr	r3, [pc, #648]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4ba1      	ldr	r3, [pc, #644]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a22:	49a2      	ldr	r1, [pc, #648]	; (8002cac <HAL_RCC_OscConfig+0x334>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	4b9f      	ldr	r3, [pc, #636]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b9e      	ldr	r3, [pc, #632]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a2e:	49a0      	ldr	r1, [pc, #640]	; (8002cb0 <HAL_RCC_OscConfig+0x338>)
 8002a30:	400a      	ands	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d014      	beq.n	8002a66 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7ff fbdc 	bl	80021f8 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a46:	f7ff fbd7 	bl	80021f8 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b64      	cmp	r3, #100	; 0x64
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e2e9      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a58:	4b93      	ldr	r3, [pc, #588]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	029b      	lsls	r3, r3, #10
 8002a60:	4013      	ands	r3, r2
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0xce>
 8002a64:	e015      	b.n	8002a92 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7ff fbc7 	bl	80021f8 <HAL_GetTick>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a70:	f7ff fbc2 	bl	80021f8 <HAL_GetTick>
 8002a74:	0002      	movs	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e2d4      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a82:	4b89      	ldr	r3, [pc, #548]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	029b      	lsls	r3, r3, #10
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0xf8>
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2202      	movs	r2, #2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d100      	bne.n	8002a9e <HAL_RCC_OscConfig+0x126>
 8002a9c:	e099      	b.n	8002bd2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9e:	4b82      	ldr	r3, [pc, #520]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2238      	movs	r2, #56	; 0x38
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa8:	4b7f      	ldr	r3, [pc, #508]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2203      	movs	r2, #3
 8002aae:	4013      	ands	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d102      	bne.n	8002abe <HAL_RCC_OscConfig+0x146>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d135      	bne.n	8002b30 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac4:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4013      	ands	r3, r2
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_OscConfig+0x164>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e2a7      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b72      	ldr	r3, [pc, #456]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a74      	ldr	r2, [pc, #464]	; (8002cb4 <HAL_RCC_OscConfig+0x33c>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	021a      	lsls	r2, r3, #8
 8002aec:	4b6e      	ldr	r3, [pc, #440]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d112      	bne.n	8002b1e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002af8:	4b6b      	ldr	r3, [pc, #428]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <HAL_RCC_OscConfig+0x340>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	4b68      	ldr	r3, [pc, #416]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b0c:	4b66      	ldr	r3, [pc, #408]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0adb      	lsrs	r3, r3, #11
 8002b12:	2207      	movs	r2, #7
 8002b14:	4013      	ands	r3, r2
 8002b16:	4a69      	ldr	r2, [pc, #420]	; (8002cbc <HAL_RCC_OscConfig+0x344>)
 8002b18:	40da      	lsrs	r2, r3
 8002b1a:	4b69      	ldr	r3, [pc, #420]	; (8002cc0 <HAL_RCC_OscConfig+0x348>)
 8002b1c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b1e:	4b69      	ldr	r3, [pc, #420]	; (8002cc4 <HAL_RCC_OscConfig+0x34c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7ff fb0c 	bl	8002140 <HAL_InitTick>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d051      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e27d      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d030      	beq.n	8002b9a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b38:	4b5b      	ldr	r3, [pc, #364]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5e      	ldr	r2, [pc, #376]	; (8002cb8 <HAL_RCC_OscConfig+0x340>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	4b58      	ldr	r3, [pc, #352]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002b4c:	4b56      	ldr	r3, [pc, #344]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b55      	ldr	r3, [pc, #340]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b52:	2180      	movs	r1, #128	; 0x80
 8002b54:	0049      	lsls	r1, r1, #1
 8002b56:	430a      	orrs	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7ff fb4d 	bl	80021f8 <HAL_GetTick>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7ff fb48 	bl	80021f8 <HAL_GetTick>
 8002b68:	0002      	movs	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e25a      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b76:	4b4c      	ldr	r3, [pc, #304]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <HAL_RCC_OscConfig+0x33c>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	4b45      	ldr	r3, [pc, #276]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	e01b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002ba0:	4949      	ldr	r1, [pc, #292]	; (8002cc8 <HAL_RCC_OscConfig+0x350>)
 8002ba2:	400a      	ands	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7ff fb27 	bl	80021f8 <HAL_GetTick>
 8002baa:	0003      	movs	r3, r0
 8002bac:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fb22 	bl	80021f8 <HAL_GetTick>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e234      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc2:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x238>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d047      	beq.n	8002c6c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bdc:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2238      	movs	r2, #56	; 0x38
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b18      	cmp	r3, #24
 8002be6:	d10a      	bne.n	8002bfe <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002be8:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bec:	2202      	movs	r2, #2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d03c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x2f4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d138      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e216      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d019      	beq.n	8002c3a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c06:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c0a:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7ff faf1 	bl	80021f8 <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7ff faec 	bl	80021f8 <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1fe      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	d0f1      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2a4>
 8002c38:	e018      	b.n	8002c6c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c40:	2101      	movs	r1, #1
 8002c42:	438a      	bics	r2, r1
 8002c44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7ff fad7 	bl	80021f8 <HAL_GetTick>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7ff fad2 	bl	80021f8 <HAL_GetTick>
 8002c54:	0002      	movs	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1e4      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	2202      	movs	r2, #2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d1f1      	bne.n	8002c50 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2204      	movs	r2, #4
 8002c72:	4013      	ands	r3, r2
 8002c74:	d100      	bne.n	8002c78 <HAL_RCC_OscConfig+0x300>
 8002c76:	e0c7      	b.n	8002e08 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c78:	231f      	movs	r3, #31
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2238      	movs	r2, #56	; 0x38
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d11f      	bne.n	8002ccc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_OscConfig+0x330>)
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	2202      	movs	r2, #2
 8002c92:	4013      	ands	r3, r2
 8002c94:	d100      	bne.n	8002c98 <HAL_RCC_OscConfig+0x320>
 8002c96:	e0b7      	b.n	8002e08 <HAL_RCC_OscConfig+0x490>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d000      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x32a>
 8002ca0:	e0b2      	b.n	8002e08 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1c2      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	fffeffff 	.word	0xfffeffff
 8002cb0:	fffbffff 	.word	0xfffbffff
 8002cb4:	ffff80ff 	.word	0xffff80ff
 8002cb8:	ffffc7ff 	.word	0xffffc7ff
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	20000008 	.word	0x20000008
 8002cc4:	2000000c 	.word	0x2000000c
 8002cc8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ccc:	4bb5      	ldr	r3, [pc, #724]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	055b      	lsls	r3, r3, #21
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_OscConfig+0x364>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x366>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d011      	beq.n	8002d06 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	4bb0      	ldr	r3, [pc, #704]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce6:	4baf      	ldr	r3, [pc, #700]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0549      	lsls	r1, r1, #21
 8002cec:	430a      	orrs	r2, r1
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cf0:	4bac      	ldr	r3, [pc, #688]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	055b      	lsls	r3, r3, #21
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002cfe:	231f      	movs	r3, #31
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d06:	4ba8      	ldr	r3, [pc, #672]	; (8002fa8 <HAL_RCC_OscConfig+0x630>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d11a      	bne.n	8002d48 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d12:	4ba5      	ldr	r3, [pc, #660]	; (8002fa8 <HAL_RCC_OscConfig+0x630>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4ba4      	ldr	r3, [pc, #656]	; (8002fa8 <HAL_RCC_OscConfig+0x630>)
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	0049      	lsls	r1, r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d20:	f7ff fa6a 	bl	80021f8 <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2a:	f7ff fa65 	bl	80021f8 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e177      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3c:	4b9a      	ldr	r3, [pc, #616]	; (8002fa8 <HAL_RCC_OscConfig+0x630>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d106      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3e6>
 8002d50:	4b94      	ldr	r3, [pc, #592]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d54:	4b93      	ldr	r3, [pc, #588]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d56:	2101      	movs	r1, #1
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d5c:	e01c      	b.n	8002d98 <HAL_RCC_OscConfig+0x420>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x408>
 8002d66:	4b8f      	ldr	r3, [pc, #572]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d6a:	4b8e      	ldr	r3, [pc, #568]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d6c:	2104      	movs	r1, #4
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d72:	4b8c      	ldr	r3, [pc, #560]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0x420>
 8002d80:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d84:	4b87      	ldr	r3, [pc, #540]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	438a      	bics	r2, r1
 8002d8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d8c:	4b85      	ldr	r3, [pc, #532]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d90:	4b84      	ldr	r3, [pc, #528]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002d92:	2104      	movs	r1, #4
 8002d94:	438a      	bics	r2, r1
 8002d96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d014      	beq.n	8002dca <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7ff fa2a 	bl	80021f8 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da8:	e009      	b.n	8002dbe <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7ff fa25 	bl	80021f8 <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	4a7d      	ldr	r2, [pc, #500]	; (8002fac <HAL_RCC_OscConfig+0x634>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e136      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbe:	4b79      	ldr	r3, [pc, #484]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x432>
 8002dc8:	e013      	b.n	8002df2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7ff fa15 	bl	80021f8 <HAL_GetTick>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd2:	e009      	b.n	8002de8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7ff fa10 	bl	80021f8 <HAL_GetTick>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	4a73      	ldr	r2, [pc, #460]	; (8002fac <HAL_RCC_OscConfig+0x634>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e121      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de8:	4b6e      	ldr	r3, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002df2:	231f      	movs	r3, #31
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b69      	ldr	r3, [pc, #420]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e00:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002e02:	496b      	ldr	r1, [pc, #428]	; (8002fb0 <HAL_RCC_OscConfig+0x638>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d039      	beq.n	8002e86 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01b      	beq.n	8002e52 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e1a:	4b62      	ldr	r3, [pc, #392]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	03c9      	lsls	r1, r1, #15
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7ff f9e6 	bl	80021f8 <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e32:	f7ff f9e1 	bl	80021f8 <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0f3      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e44:	4b57      	ldr	r3, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x4ba>
 8002e50:	e019      	b.n	8002e86 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e52:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002e58:	4956      	ldr	r1, [pc, #344]	; (8002fb4 <HAL_RCC_OscConfig+0x63c>)
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7ff f9cb 	bl	80021f8 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e68:	f7ff f9c6 	bl	80021f8 <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0d8      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	4013      	ands	r3, r2
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d100      	bne.n	8002e90 <HAL_RCC_OscConfig+0x518>
 8002e8e:	e0cc      	b.n	800302a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e90:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2238      	movs	r2, #56	; 0x38
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d100      	bne.n	8002e9e <HAL_RCC_OscConfig+0x526>
 8002e9c:	e07b      	b.n	8002f96 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d156      	bne.n	8002f54 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002eac:	4942      	ldr	r1, [pc, #264]	; (8002fb8 <HAL_RCC_OscConfig+0x640>)
 8002eae:	400a      	ands	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7ff f9a1 	bl	80021f8 <HAL_GetTick>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7ff f99c 	bl	80021f8 <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e0ae      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ece:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	049b      	lsls	r3, r3, #18
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eda:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4a37      	ldr	r2, [pc, #220]	; (8002fbc <HAL_RCC_OscConfig+0x644>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	431a      	orrs	r2, r3
 8002f08:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0e:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	0449      	lsls	r1, r1, #17
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	0549      	lsls	r1, r1, #21
 8002f26:	430a      	orrs	r2, r1
 8002f28:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7ff f965 	bl	80021f8 <HAL_GetTick>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7ff f960 	bl	80021f8 <HAL_GetTick>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e072      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	049b      	lsls	r3, r3, #18
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x5bc>
 8002f52:	e06a      	b.n	800302a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f5a:	4917      	ldr	r1, [pc, #92]	; (8002fb8 <HAL_RCC_OscConfig+0x640>)
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7ff f94a 	bl	80021f8 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7ff f945 	bl	80021f8 <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e057      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	049b      	lsls	r3, r3, #18
 8002f84:	4013      	ands	r3, r2
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_OscConfig+0x62c>)
 8002f8e:	490c      	ldr	r1, [pc, #48]	; (8002fc0 <HAL_RCC_OscConfig+0x648>)
 8002f90:	400a      	ands	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	e049      	b.n	800302a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d112      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e044      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	00001388 	.word	0x00001388
 8002fb0:	efffffff 	.word	0xefffffff
 8002fb4:	ffbfffff 	.word	0xffbfffff
 8002fb8:	feffffff 	.word	0xfeffffff
 8002fbc:	11c1808c 	.word	0x11c1808c
 8002fc0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x6bc>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2203      	movs	r2, #3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d126      	bne.n	8003026 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2270      	movs	r2, #112	; 0x70
 8002fdc:	401a      	ands	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11f      	bne.n	8003026 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	23fe      	movs	r3, #254	; 0xfe
 8002fea:	01db      	lsls	r3, r3, #7
 8002fec:	401a      	ands	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d116      	bne.n	8003026 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	23f8      	movs	r3, #248	; 0xf8
 8002ffc:	039b      	lsls	r3, r3, #14
 8002ffe:	401a      	ands	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d10e      	bne.n	8003026 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	23e0      	movs	r3, #224	; 0xe0
 800300c:	051b      	lsls	r3, r3, #20
 800300e:	401a      	ands	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	0f5b      	lsrs	r3, r3, #29
 800301c:	075a      	lsls	r2, r3, #29
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b008      	add	sp, #32
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000

08003038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0e9      	b.n	8003220 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800304c:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCC_ClockConfig+0x1f0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2207      	movs	r2, #7
 8003052:	4013      	ands	r3, r2
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d91e      	bls.n	8003098 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b73      	ldr	r3, [pc, #460]	; (8003228 <HAL_RCC_ClockConfig+0x1f0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2207      	movs	r2, #7
 8003060:	4393      	bics	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	4b70      	ldr	r3, [pc, #448]	; (8003228 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800306c:	f7ff f8c4 	bl	80021f8 <HAL_GetTick>
 8003070:	0003      	movs	r3, r0
 8003072:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003074:	e009      	b.n	800308a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003076:	f7ff f8bf 	bl	80021f8 <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	4a6a      	ldr	r2, [pc, #424]	; (800322c <HAL_RCC_ClockConfig+0x1f4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0ca      	b.n	8003220 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800308a:	4b67      	ldr	r3, [pc, #412]	; (8003228 <HAL_RCC_ClockConfig+0x1f0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2207      	movs	r2, #7
 8003090:	4013      	ands	r3, r2
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d1ee      	bne.n	8003076 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2202      	movs	r2, #2
 800309e:	4013      	ands	r3, r2
 80030a0:	d015      	beq.n	80030ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2204      	movs	r2, #4
 80030a8:	4013      	ands	r3, r2
 80030aa:	d006      	beq.n	80030ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030ac:	4b60      	ldr	r3, [pc, #384]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 80030b2:	21e0      	movs	r1, #224	; 0xe0
 80030b4:	01c9      	lsls	r1, r1, #7
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ba:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	4a5d      	ldr	r2, [pc, #372]	; (8003234 <HAL_RCC_ClockConfig+0x1fc>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 80030ca:	430a      	orrs	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2201      	movs	r2, #1
 80030d4:	4013      	ands	r3, r2
 80030d6:	d057      	beq.n	8003188 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	029b      	lsls	r3, r3, #10
 80030e8:	4013      	ands	r3, r2
 80030ea:	d12b      	bne.n	8003144 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e097      	b.n	8003220 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f8:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	049b      	lsls	r3, r3, #18
 8003100:	4013      	ands	r3, r2
 8003102:	d11f      	bne.n	8003144 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e08b      	b.n	8003220 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003110:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4013      	ands	r3, r2
 800311a:	d113      	bne.n	8003144 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e07f      	b.n	8003220 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d106      	bne.n	8003136 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003128:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 800312a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312c:	2202      	movs	r2, #2
 800312e:	4013      	ands	r3, r2
 8003130:	d108      	bne.n	8003144 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e074      	b.n	8003220 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003136:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	2202      	movs	r2, #2
 800313c:	4013      	ands	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e06d      	b.n	8003220 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003144:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2207      	movs	r2, #7
 800314a:	4393      	bics	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4b37      	ldr	r3, [pc, #220]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 8003154:	430a      	orrs	r2, r1
 8003156:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003158:	f7ff f84e 	bl	80021f8 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003160:	e009      	b.n	8003176 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003162:	f7ff f849 	bl	80021f8 <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	4a2f      	ldr	r2, [pc, #188]	; (800322c <HAL_RCC_ClockConfig+0x1f4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e054      	b.n	8003220 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2238      	movs	r2, #56	; 0x38
 800317c:	401a      	ands	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	429a      	cmp	r2, r3
 8003186:	d1ec      	bne.n	8003162 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_RCC_ClockConfig+0x1f0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2207      	movs	r2, #7
 800318e:	4013      	ands	r3, r2
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d21e      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003196:	4b24      	ldr	r3, [pc, #144]	; (8003228 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2207      	movs	r2, #7
 800319c:	4393      	bics	r3, r2
 800319e:	0019      	movs	r1, r3
 80031a0:	4b21      	ldr	r3, [pc, #132]	; (8003228 <HAL_RCC_ClockConfig+0x1f0>)
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031a8:	f7ff f826 	bl	80021f8 <HAL_GetTick>
 80031ac:	0003      	movs	r3, r0
 80031ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031b0:	e009      	b.n	80031c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b2:	f7ff f821 	bl	80021f8 <HAL_GetTick>
 80031b6:	0002      	movs	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_RCC_ClockConfig+0x1f4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e02c      	b.n	8003220 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c6:	4b18      	ldr	r3, [pc, #96]	; (8003228 <HAL_RCC_ClockConfig+0x1f0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2207      	movs	r2, #7
 80031cc:	4013      	ands	r3, r2
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d1ee      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2204      	movs	r2, #4
 80031da:	4013      	ands	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_RCC_ClockConfig+0x200>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031f2:	f000 f829 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 80031f6:	0001      	movs	r1, r0
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_RCC_ClockConfig+0x1f8>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	220f      	movs	r2, #15
 8003200:	401a      	ands	r2, r3
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_RCC_ClockConfig+0x204>)
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	58d3      	ldr	r3, [r2, r3]
 8003208:	221f      	movs	r2, #31
 800320a:	4013      	ands	r3, r2
 800320c:	000a      	movs	r2, r1
 800320e:	40da      	lsrs	r2, r3
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x208>)
 8003212:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_ClockConfig+0x20c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0018      	movs	r0, r3
 800321a:	f7fe ff91 	bl	8002140 <HAL_InitTick>
 800321e:	0003      	movs	r3, r0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b004      	add	sp, #16
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40022000 	.word	0x40022000
 800322c:	00001388 	.word	0x00001388
 8003230:	40021000 	.word	0x40021000
 8003234:	fffff0ff 	.word	0xfffff0ff
 8003238:	ffff8fff 	.word	0xffff8fff
 800323c:	080076f4 	.word	0x080076f4
 8003240:	20000008 	.word	0x20000008
 8003244:	2000000c 	.word	0x2000000c

08003248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800324e:	4b3c      	ldr	r3, [pc, #240]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2238      	movs	r2, #56	; 0x38
 8003254:	4013      	ands	r3, r2
 8003256:	d10f      	bne.n	8003278 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003258:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0adb      	lsrs	r3, r3, #11
 800325e:	2207      	movs	r2, #7
 8003260:	4013      	ands	r3, r2
 8003262:	2201      	movs	r2, #1
 8003264:	409a      	lsls	r2, r3
 8003266:	0013      	movs	r3, r2
 8003268:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	4835      	ldr	r0, [pc, #212]	; (8003344 <HAL_RCC_GetSysClockFreq+0xfc>)
 800326e:	f7fc ff5b 	bl	8000128 <__udivsi3>
 8003272:	0003      	movs	r3, r0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	e05d      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003278:	4b31      	ldr	r3, [pc, #196]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2238      	movs	r2, #56	; 0x38
 800327e:	4013      	ands	r3, r2
 8003280:	2b08      	cmp	r3, #8
 8003282:	d102      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003284:	4b30      	ldr	r3, [pc, #192]	; (8003348 <HAL_RCC_GetSysClockFreq+0x100>)
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	e054      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328a:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2238      	movs	r2, #56	; 0x38
 8003290:	4013      	ands	r3, r2
 8003292:	2b10      	cmp	r3, #16
 8003294:	d138      	bne.n	8003308 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2203      	movs	r2, #3
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	2207      	movs	r2, #7
 80032a8:	4013      	ands	r3, r2
 80032aa:	3301      	adds	r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d10d      	bne.n	80032d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	4824      	ldr	r0, [pc, #144]	; (8003348 <HAL_RCC_GetSysClockFreq+0x100>)
 80032b8:	f7fc ff36 	bl	8000128 <__udivsi3>
 80032bc:	0003      	movs	r3, r0
 80032be:	0019      	movs	r1, r3
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	227f      	movs	r2, #127	; 0x7f
 80032c8:	4013      	ands	r3, r2
 80032ca:	434b      	muls	r3, r1
 80032cc:	617b      	str	r3, [r7, #20]
        break;
 80032ce:	e00d      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	481c      	ldr	r0, [pc, #112]	; (8003344 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032d4:	f7fc ff28 	bl	8000128 <__udivsi3>
 80032d8:	0003      	movs	r3, r0
 80032da:	0019      	movs	r1, r3
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	227f      	movs	r2, #127	; 0x7f
 80032e4:	4013      	ands	r3, r2
 80032e6:	434b      	muls	r3, r1
 80032e8:	617b      	str	r3, [r7, #20]
        break;
 80032ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	0f5b      	lsrs	r3, r3, #29
 80032f2:	2207      	movs	r2, #7
 80032f4:	4013      	ands	r3, r2
 80032f6:	3301      	adds	r3, #1
 80032f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	6978      	ldr	r0, [r7, #20]
 80032fe:	f7fc ff13 	bl	8000128 <__udivsi3>
 8003302:	0003      	movs	r3, r0
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	e015      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2238      	movs	r2, #56	; 0x38
 800330e:	4013      	ands	r3, r2
 8003310:	2b20      	cmp	r3, #32
 8003312:	d103      	bne.n	800331c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_RCC_GetSysClockFreq+0xf8>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2238      	movs	r2, #56	; 0x38
 8003322:	4013      	ands	r3, r2
 8003324:	2b18      	cmp	r3, #24
 8003326:	d103      	bne.n	8003330 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003328:	23fa      	movs	r3, #250	; 0xfa
 800332a:	01db      	lsls	r3, r3, #7
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	e001      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003334:	693b      	ldr	r3, [r7, #16]
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b006      	add	sp, #24
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	40021000 	.word	0x40021000
 8003344:	00f42400 	.word	0x00f42400
 8003348:	007a1200 	.word	0x007a1200

0800334c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003350:	4b02      	ldr	r3, [pc, #8]	; (800335c <HAL_RCC_GetHCLKFreq+0x10>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	20000008 	.word	0x20000008

08003360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003364:	f7ff fff2 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8003368:	0004      	movs	r4, r0
 800336a:	f7ff faf9 	bl	8002960 <LL_RCC_GetAPB1Prescaler>
 800336e:	0003      	movs	r3, r0
 8003370:	0b1a      	lsrs	r2, r3, #12
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003374:	0092      	lsls	r2, r2, #2
 8003376:	58d3      	ldr	r3, [r2, r3]
 8003378:	221f      	movs	r2, #31
 800337a:	4013      	ands	r3, r2
 800337c:	40dc      	lsrs	r4, r3
 800337e:	0023      	movs	r3, r4
}
 8003380:	0018      	movs	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	bdb0      	pop	{r4, r5, r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	08007734 	.word	0x08007734

0800338c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003394:	2313      	movs	r3, #19
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800339c:	2312      	movs	r3, #18
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	029b      	lsls	r3, r3, #10
 80033ac:	4013      	ands	r3, r2
 80033ae:	d100      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80033b0:	e0ad      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2011      	movs	r0, #17
 80033b4:	183b      	adds	r3, r7, r0
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	055b      	lsls	r3, r3, #21
 80033c2:	4013      	ands	r3, r2
 80033c4:	d110      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	0549      	lsls	r1, r1, #21
 80033d0:	430a      	orrs	r2, r1
 80033d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033d4:	4b40      	ldr	r3, [pc, #256]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	055b      	lsls	r3, r3, #21
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e2:	183b      	adds	r3, r7, r0
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e8:	4b3c      	ldr	r3, [pc, #240]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	0049      	lsls	r1, r1, #1
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033f6:	f7fe feff 	bl	80021f8 <HAL_GetTick>
 80033fa:	0003      	movs	r3, r0
 80033fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033fe:	e00b      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003400:	f7fe fefa 	bl	80021f8 <HAL_GetTick>
 8003404:	0002      	movs	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d904      	bls.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800340e:	2313      	movs	r3, #19
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2203      	movs	r2, #3
 8003414:	701a      	strb	r2, [r3, #0]
        break;
 8003416:	e005      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4013      	ands	r3, r2
 8003422:	d0ed      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003424:	2313      	movs	r3, #19
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d15e      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800342e:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003430:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003432:	23c0      	movs	r3, #192	; 0xc0
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4013      	ands	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d019      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	429a      	cmp	r2, r3
 8003448:	d014      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800344a:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003450:	4013      	ands	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003454:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003458:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	0249      	lsls	r1, r1, #9
 800345e:	430a      	orrs	r2, r1
 8003460:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003464:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003468:	491e      	ldr	r1, [pc, #120]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800346a:	400a      	ands	r2, r1
 800346c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2201      	movs	r2, #1
 8003478:	4013      	ands	r3, r2
 800347a:	d016      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe febc 	bl	80021f8 <HAL_GetTick>
 8003480:	0003      	movs	r3, r0
 8003482:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003484:	e00c      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe feb7 	bl	80021f8 <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d904      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003496:	2313      	movs	r3, #19
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2203      	movs	r2, #3
 800349c:	701a      	strb	r2, [r3, #0]
            break;
 800349e:	e004      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	2202      	movs	r2, #2
 80034a6:	4013      	ands	r3, r2
 80034a8:	d0ed      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80034aa:	2313      	movs	r3, #19
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b4:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	4a09      	ldr	r2, [pc, #36]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	0019      	movs	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034c4:	430a      	orrs	r2, r1
 80034c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80034c8:	e016      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ca:	2312      	movs	r3, #18
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2213      	movs	r2, #19
 80034d0:	18ba      	adds	r2, r7, r2
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e00f      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
 80034e0:	fffffcff 	.word	0xfffffcff
 80034e4:	fffeffff 	.word	0xfffeffff
 80034e8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	2312      	movs	r3, #18
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	2213      	movs	r2, #19
 80034f2:	18ba      	adds	r2, r7, r2
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034f8:	2311      	movs	r3, #17
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d105      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003502:	4bb6      	ldr	r3, [pc, #728]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003506:	4bb5      	ldr	r3, [pc, #724]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003508:	49b5      	ldr	r1, [pc, #724]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800350a:	400a      	ands	r2, r1
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2201      	movs	r2, #1
 8003514:	4013      	ands	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003518:	4bb0      	ldr	r3, [pc, #704]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	2203      	movs	r2, #3
 800351e:	4393      	bics	r3, r2
 8003520:	0019      	movs	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4bad      	ldr	r3, [pc, #692]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003528:	430a      	orrs	r2, r1
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2202      	movs	r2, #2
 8003532:	4013      	ands	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003536:	4ba9      	ldr	r3, [pc, #676]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	220c      	movs	r2, #12
 800353c:	4393      	bics	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	4ba5      	ldr	r3, [pc, #660]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003546:	430a      	orrs	r2, r1
 8003548:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2204      	movs	r2, #4
 8003550:	4013      	ands	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003554:	4ba1      	ldr	r3, [pc, #644]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	2230      	movs	r2, #48	; 0x30
 800355a:	4393      	bics	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	4b9e      	ldr	r3, [pc, #632]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003564:	430a      	orrs	r2, r1
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2210      	movs	r2, #16
 800356e:	4013      	ands	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003572:	4b9a      	ldr	r3, [pc, #616]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	4a9b      	ldr	r2, [pc, #620]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003578:	4013      	ands	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	4b96      	ldr	r3, [pc, #600]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003582:	430a      	orrs	r2, r1
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	015b      	lsls	r3, r3, #5
 800358e:	4013      	ands	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003592:	4b92      	ldr	r3, [pc, #584]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	4a94      	ldr	r2, [pc, #592]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003598:	4013      	ands	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	4b8e      	ldr	r3, [pc, #568]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035a2:	430a      	orrs	r2, r1
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4013      	ands	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035b2:	4b8a      	ldr	r3, [pc, #552]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	4a8d      	ldr	r2, [pc, #564]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c0:	4b86      	ldr	r3, [pc, #536]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035c2:	430a      	orrs	r2, r1
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4013      	ands	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035d2:	4b82      	ldr	r3, [pc, #520]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	4a86      	ldr	r2, [pc, #536]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80035d8:	4013      	ands	r3, r2
 80035da:	0019      	movs	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	4b7e      	ldr	r3, [pc, #504]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e2:	430a      	orrs	r2, r1
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2220      	movs	r2, #32
 80035ec:	4013      	ands	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f0:	4b7a      	ldr	r3, [pc, #488]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	4a7f      	ldr	r2, [pc, #508]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	0019      	movs	r1, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	4b77      	ldr	r3, [pc, #476]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003600:	430a      	orrs	r2, r1
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2240      	movs	r2, #64	; 0x40
 800360a:	4013      	ands	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800360e:	4b73      	ldr	r3, [pc, #460]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	4a79      	ldr	r2, [pc, #484]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003614:	4013      	ands	r3, r2
 8003616:	0019      	movs	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800361e:	430a      	orrs	r2, r1
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	01db      	lsls	r3, r3, #7
 800362a:	4013      	ands	r3, r2
 800362c:	d015      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800362e:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	0899      	lsrs	r1, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363a:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800363c:	430a      	orrs	r2, r1
 800363e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	05db      	lsls	r3, r3, #23
 8003648:	429a      	cmp	r2, r3
 800364a:	d106      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800364c:	4b63      	ldr	r3, [pc, #396]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	4b62      	ldr	r3, [pc, #392]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	0249      	lsls	r1, r1, #9
 8003656:	430a      	orrs	r2, r1
 8003658:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	031b      	lsls	r3, r3, #12
 8003662:	4013      	ands	r3, r2
 8003664:	d009      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003666:	4b5d      	ldr	r3, [pc, #372]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	2240      	movs	r2, #64	; 0x40
 800366c:	4393      	bics	r3, r2
 800366e:	0019      	movs	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003674:	4b59      	ldr	r3, [pc, #356]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003676:	430a      	orrs	r2, r1
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	039b      	lsls	r3, r3, #14
 8003682:	4013      	ands	r3, r2
 8003684:	d016      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003686:	4b55      	ldr	r3, [pc, #340]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	4a5c      	ldr	r2, [pc, #368]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800368c:	4013      	ands	r3, r2
 800368e:	0019      	movs	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003694:	4b51      	ldr	r3, [pc, #324]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003696:	430a      	orrs	r2, r1
 8003698:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	03db      	lsls	r3, r3, #15
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d106      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036a6:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	0449      	lsls	r1, r1, #17
 80036b0:	430a      	orrs	r2, r1
 80036b2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	03db      	lsls	r3, r3, #15
 80036bc:	4013      	ands	r3, r2
 80036be:	d016      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036c0:	4b46      	ldr	r3, [pc, #280]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	4a4e      	ldr	r2, [pc, #312]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ce:	4b43      	ldr	r3, [pc, #268]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036d0:	430a      	orrs	r2, r1
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	045b      	lsls	r3, r3, #17
 80036dc:	429a      	cmp	r2, r3
 80036de:	d106      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036e0:	4b3e      	ldr	r3, [pc, #248]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036e6:	2180      	movs	r1, #128	; 0x80
 80036e8:	0449      	lsls	r1, r1, #17
 80036ea:	430a      	orrs	r2, r1
 80036ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4013      	ands	r3, r2
 80036f8:	d014      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80036fa:	4b38      	ldr	r3, [pc, #224]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	2203      	movs	r2, #3
 8003700:	4393      	bics	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	4b34      	ldr	r3, [pc, #208]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800370a:	430a      	orrs	r2, r1
 800370c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003716:	4b31      	ldr	r3, [pc, #196]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	0249      	lsls	r1, r1, #9
 8003720:	430a      	orrs	r2, r1
 8003722:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	019b      	lsls	r3, r3, #6
 800372c:	4013      	ands	r3, r2
 800372e:	d014      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003730:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	220c      	movs	r2, #12
 8003736:	4393      	bics	r3, r2
 8003738:	0019      	movs	r1, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800373e:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003740:	430a      	orrs	r2, r1
 8003742:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	2b04      	cmp	r3, #4
 800374a:	d106      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800374c:	4b23      	ldr	r3, [pc, #140]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	0249      	lsls	r1, r1, #9
 8003756:	430a      	orrs	r2, r1
 8003758:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	045b      	lsls	r3, r3, #17
 8003762:	4013      	ands	r3, r2
 8003764:	d016      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800376c:	4013      	ands	r3, r2
 800376e:	0019      	movs	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003776:	430a      	orrs	r2, r1
 8003778:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	429a      	cmp	r2, r3
 8003784:	d106      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003786:	4b15      	ldr	r3, [pc, #84]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	0449      	lsls	r1, r1, #17
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	049b      	lsls	r3, r3, #18
 800379c:	4013      	ands	r3, r2
 800379e:	d016      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	4a10      	ldr	r2, [pc, #64]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	429a      	cmp	r2, r3
 80037be:	d106      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037c6:	2180      	movs	r1, #128	; 0x80
 80037c8:	0449      	lsls	r1, r1, #17
 80037ca:	430a      	orrs	r2, r1
 80037cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80037ce:	2312      	movs	r3, #18
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	781b      	ldrb	r3, [r3, #0]
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b006      	add	sp, #24
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	efffffff 	.word	0xefffffff
 80037e4:	fffff3ff 	.word	0xfffff3ff
 80037e8:	fffffcff 	.word	0xfffffcff
 80037ec:	fff3ffff 	.word	0xfff3ffff
 80037f0:	ffcfffff 	.word	0xffcfffff
 80037f4:	ffffcfff 	.word	0xffffcfff
 80037f8:	ffff3fff 	.word	0xffff3fff
 80037fc:	ffbfffff 	.word	0xffbfffff
 8003800:	feffffff 	.word	0xfeffffff

08003804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0a8      	b.n	8003968 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	2382      	movs	r3, #130	; 0x82
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	429a      	cmp	r2, r3
 8003828:	d009      	beq.n	800383e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	61da      	str	r2, [r3, #28]
 8003830:	e005      	b.n	800383e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	225d      	movs	r2, #93	; 0x5d
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	225c      	movs	r2, #92	; 0x5c
 8003854:	2100      	movs	r1, #0
 8003856:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0018      	movs	r0, r3
 800385c:	f7fe fb14 	bl	8001e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	225d      	movs	r2, #93	; 0x5d
 8003864:	2102      	movs	r1, #2
 8003866:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2140      	movs	r1, #64	; 0x40
 8003874:	438a      	bics	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	23e0      	movs	r3, #224	; 0xe0
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	429a      	cmp	r2, r3
 8003882:	d902      	bls.n	800388a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e002      	b.n	8003890 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	015b      	lsls	r3, r3, #5
 800388e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	23f0      	movs	r3, #240	; 0xf0
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	429a      	cmp	r2, r3
 800389a:	d008      	beq.n	80038ae <HAL_SPI_Init+0xaa>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	23e0      	movs	r3, #224	; 0xe0
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d002      	beq.n	80038ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	2382      	movs	r3, #130	; 0x82
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	401a      	ands	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6899      	ldr	r1, [r3, #8]
 80038bc:	2384      	movs	r3, #132	; 0x84
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	400b      	ands	r3, r1
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2102      	movs	r1, #2
 80038ca:	400b      	ands	r3, r1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2101      	movs	r1, #1
 80038d4:	400b      	ands	r3, r1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6999      	ldr	r1, [r3, #24]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	400b      	ands	r3, r1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2138      	movs	r1, #56	; 0x38
 80038ea:	400b      	ands	r3, r1
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	400b      	ands	r3, r1
 80038f6:	431a      	orrs	r2, r3
 80038f8:	0011      	movs	r1, r2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	401a      	ands	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	2204      	movs	r2, #4
 8003914:	401a      	ands	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2110      	movs	r1, #16
 800391c:	400b      	ands	r3, r1
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	2108      	movs	r1, #8
 8003926:	400b      	ands	r3, r1
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68d9      	ldr	r1, [r3, #12]
 800392e:	23f0      	movs	r3, #240	; 0xf0
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	400b      	ands	r3, r1
 8003934:	431a      	orrs	r2, r3
 8003936:	0011      	movs	r1, r2
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	015b      	lsls	r3, r3, #5
 800393e:	401a      	ands	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4907      	ldr	r1, [pc, #28]	; (8003970 <HAL_SPI_Init+0x16c>)
 8003954:	400a      	ands	r2, r1
 8003956:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	225d      	movs	r2, #93	; 0x5d
 8003962:	2101      	movs	r1, #1
 8003964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}
 8003970:	fffff7ff 	.word	0xfffff7ff

08003974 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	1dbb      	adds	r3, r7, #6
 8003982:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003984:	231f      	movs	r3, #31
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	225c      	movs	r2, #92	; 0x5c
 8003990:	5c9b      	ldrb	r3, [r3, r2]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_SPI_Transmit+0x26>
 8003996:	2302      	movs	r3, #2
 8003998:	e140      	b.n	8003c1c <HAL_SPI_Transmit+0x2a8>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	225c      	movs	r2, #92	; 0x5c
 800399e:	2101      	movs	r1, #1
 80039a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039a2:	f7fe fc29 	bl	80021f8 <HAL_GetTick>
 80039a6:	0003      	movs	r3, r0
 80039a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80039aa:	2316      	movs	r3, #22
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	1dba      	adds	r2, r7, #6
 80039b0:	8812      	ldrh	r2, [r2, #0]
 80039b2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	225d      	movs	r2, #93	; 0x5d
 80039b8:	5c9b      	ldrb	r3, [r3, r2]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d004      	beq.n	80039ca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80039c0:	231f      	movs	r3, #31
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	2202      	movs	r2, #2
 80039c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80039c8:	e11d      	b.n	8003c06 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_SPI_Transmit+0x64>
 80039d0:	1dbb      	adds	r3, r7, #6
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80039d8:	231f      	movs	r3, #31
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
    goto error;
 80039e0:	e111      	b.n	8003c06 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	225d      	movs	r2, #93	; 0x5d
 80039e6:	2103      	movs	r1, #3
 80039e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1dba      	adds	r2, r7, #6
 80039fa:	8812      	ldrh	r2, [r2, #0]
 80039fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1dba      	adds	r2, r7, #6
 8003a02:	8812      	ldrh	r2, [r2, #0]
 8003a04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2244      	movs	r2, #68	; 0x44
 8003a10:	2100      	movs	r1, #0
 8003a12:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2246      	movs	r2, #70	; 0x46
 8003a18:	2100      	movs	r1, #0
 8003a1a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d110      	bne.n	8003a56 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2140      	movs	r1, #64	; 0x40
 8003a40:	438a      	bics	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	01c9      	lsls	r1, r1, #7
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2240      	movs	r2, #64	; 0x40
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d007      	beq.n	8003a74 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2140      	movs	r1, #64	; 0x40
 8003a70:	430a      	orrs	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	23e0      	movs	r3, #224	; 0xe0
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d94e      	bls.n	8003b1e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <HAL_SPI_Transmit+0x11e>
 8003a88:	2316      	movs	r3, #22
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d13f      	bne.n	8003b12 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	881a      	ldrh	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	1c9a      	adds	r2, r3, #2
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ab6:	e02c      	b.n	8003b12 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d112      	bne.n	8003aec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	1c9a      	adds	r2, r3, #2
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aea:	e012      	b.n	8003b12 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aec:	f7fe fb84 	bl	80021f8 <HAL_GetTick>
 8003af0:	0002      	movs	r2, r0
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d802      	bhi.n	8003b02 <HAL_SPI_Transmit+0x18e>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	d102      	bne.n	8003b08 <HAL_SPI_Transmit+0x194>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003b08:	231f      	movs	r3, #31
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003b10:	e079      	b.n	8003c06 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1cd      	bne.n	8003ab8 <HAL_SPI_Transmit+0x144>
 8003b1c:	e04f      	b.n	8003bbe <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <HAL_SPI_Transmit+0x1bc>
 8003b26:	2316      	movs	r3, #22
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d141      	bne.n	8003bb4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	7812      	ldrb	r2, [r2, #0]
 8003b3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003b56:	e02d      	b.n	8003bb4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d113      	bne.n	8003b8e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	7812      	ldrb	r2, [r2, #0]
 8003b72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b8c:	e012      	b.n	8003bb4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b8e:	f7fe fb33 	bl	80021f8 <HAL_GetTick>
 8003b92:	0002      	movs	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d802      	bhi.n	8003ba4 <HAL_SPI_Transmit+0x230>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HAL_SPI_Transmit+0x236>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003baa:	231f      	movs	r3, #31
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	2203      	movs	r2, #3
 8003bb0:	701a      	strb	r2, [r3, #0]
          goto error;
 8003bb2:	e028      	b.n	8003c06 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1cc      	bne.n	8003b58 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	6839      	ldr	r1, [r7, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 fcd9 	bl	800457c <SPI_EndRxTxTransaction>
 8003bca:	1e03      	subs	r3, r0, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003bfa:	231f      	movs	r3, #31
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e000      	b.n	8003c06 <HAL_SPI_Transmit+0x292>
  }

error:
 8003c04:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	225d      	movs	r2, #93	; 0x5d
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	225c      	movs	r2, #92	; 0x5c
 8003c12:	2100      	movs	r1, #0
 8003c14:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003c16:	231f      	movs	r3, #31
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	781b      	ldrb	r3, [r3, #0]
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b008      	add	sp, #32
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	1dbb      	adds	r3, r7, #6
 8003c32:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c34:	2317      	movs	r3, #23
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	2382      	movs	r3, #130	; 0x82
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d113      	bne.n	8003c70 <HAL_SPI_Receive+0x4c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10f      	bne.n	8003c70 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	225d      	movs	r2, #93	; 0x5d
 8003c54:	2104      	movs	r1, #4
 8003c56:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c58:	1dbb      	adds	r3, r7, #6
 8003c5a:	881c      	ldrh	r4, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	0023      	movs	r3, r4
 8003c68:	f000 f928 	bl	8003ebc <HAL_SPI_TransmitReceive>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	e11c      	b.n	8003eaa <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	225c      	movs	r2, #92	; 0x5c
 8003c74:	5c9b      	ldrb	r3, [r3, r2]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_SPI_Receive+0x5a>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e115      	b.n	8003eaa <HAL_SPI_Receive+0x286>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	225c      	movs	r2, #92	; 0x5c
 8003c82:	2101      	movs	r1, #1
 8003c84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c86:	f7fe fab7 	bl	80021f8 <HAL_GetTick>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	225d      	movs	r2, #93	; 0x5d
 8003c92:	5c9b      	ldrb	r3, [r3, r2]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d004      	beq.n	8003ca4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003c9a:	2317      	movs	r3, #23
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ca2:	e0f7      	b.n	8003e94 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_SPI_Receive+0x8e>
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003cb2:	2317      	movs	r3, #23
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cba:	e0eb      	b.n	8003e94 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	225d      	movs	r2, #93	; 0x5d
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1dba      	adds	r2, r7, #6
 8003cd4:	2144      	movs	r1, #68	; 0x44
 8003cd6:	8812      	ldrh	r2, [r2, #0]
 8003cd8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1dba      	adds	r2, r7, #6
 8003cde:	2146      	movs	r1, #70	; 0x46
 8003ce0:	8812      	ldrh	r2, [r2, #0]
 8003ce2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	23e0      	movs	r3, #224	; 0xe0
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d908      	bls.n	8003d20 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4966      	ldr	r1, [pc, #408]	; (8003eb4 <HAL_SPI_Receive+0x290>)
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	e008      	b.n	8003d32 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	0149      	lsls	r1, r1, #5
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d10f      	bne.n	8003d5e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2140      	movs	r1, #64	; 0x40
 8003d4a:	438a      	bics	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4957      	ldr	r1, [pc, #348]	; (8003eb8 <HAL_SPI_Receive+0x294>)
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2240      	movs	r2, #64	; 0x40
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d007      	beq.n	8003d7c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2140      	movs	r1, #64	; 0x40
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	23e0      	movs	r3, #224	; 0xe0
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d900      	bls.n	8003d8a <HAL_SPI_Receive+0x166>
 8003d88:	e069      	b.n	8003e5e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d8a:	e031      	b.n	8003df0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2201      	movs	r2, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d117      	bne.n	8003dca <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	001a      	movs	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2246      	movs	r2, #70	; 0x46
 8003dba:	5a9b      	ldrh	r3, [r3, r2]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b299      	uxth	r1, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2246      	movs	r2, #70	; 0x46
 8003dc6:	5299      	strh	r1, [r3, r2]
 8003dc8:	e012      	b.n	8003df0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dca:	f7fe fa15 	bl	80021f8 <HAL_GetTick>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d802      	bhi.n	8003de0 <HAL_SPI_Receive+0x1bc>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	d102      	bne.n	8003de6 <HAL_SPI_Receive+0x1c2>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8003de6:	2317      	movs	r3, #23
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	2203      	movs	r2, #3
 8003dec:	701a      	strb	r2, [r3, #0]
          goto error;
 8003dee:	e051      	b.n	8003e94 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2246      	movs	r2, #70	; 0x46
 8003df4:	5a9b      	ldrh	r3, [r3, r2]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1c7      	bne.n	8003d8c <HAL_SPI_Receive+0x168>
 8003dfc:	e035      	b.n	8003e6a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2201      	movs	r2, #1
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d115      	bne.n	8003e38 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	b292      	uxth	r2, r2
 8003e18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2246      	movs	r2, #70	; 0x46
 8003e28:	5a9b      	ldrh	r3, [r3, r2]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b299      	uxth	r1, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2246      	movs	r2, #70	; 0x46
 8003e34:	5299      	strh	r1, [r3, r2]
 8003e36:	e012      	b.n	8003e5e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e38:	f7fe f9de 	bl	80021f8 <HAL_GetTick>
 8003e3c:	0002      	movs	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d802      	bhi.n	8003e4e <HAL_SPI_Receive+0x22a>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <HAL_SPI_Receive+0x230>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8003e54:	2317      	movs	r3, #23
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	2203      	movs	r2, #3
 8003e5a:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e5c:	e01a      	b.n	8003e94 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2246      	movs	r2, #70	; 0x46
 8003e62:	5a9b      	ldrh	r3, [r3, r2]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1c9      	bne.n	8003dfe <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	6839      	ldr	r1, [r7, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 fb25 	bl	80044c0 <SPI_EndRxTransaction>
 8003e76:	1e03      	subs	r3, r0, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8003e88:	2317      	movs	r3, #23
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e000      	b.n	8003e94 <HAL_SPI_Receive+0x270>
  }

error :
 8003e92:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	225d      	movs	r2, #93	; 0x5d
 8003e98:	2101      	movs	r1, #1
 8003e9a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	225c      	movs	r2, #92	; 0x5c
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ea4:	2317      	movs	r3, #23
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	781b      	ldrb	r3, [r3, #0]
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b007      	add	sp, #28
 8003eb0:	bd90      	pop	{r4, r7, pc}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	ffffefff 	.word	0xffffefff
 8003eb8:	ffffbfff 	.word	0xffffbfff

08003ebc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	001a      	movs	r2, r3
 8003eca:	1cbb      	adds	r3, r7, #2
 8003ecc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ed2:	2323      	movs	r3, #35	; 0x23
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	225c      	movs	r2, #92	; 0x5c
 8003ede:	5c9b      	ldrb	r3, [r3, r2]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x2c>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e1b5      	b.n	8004254 <HAL_SPI_TransmitReceive+0x398>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	225c      	movs	r2, #92	; 0x5c
 8003eec:	2101      	movs	r1, #1
 8003eee:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef0:	f7fe f982 	bl	80021f8 <HAL_GetTick>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ef8:	201b      	movs	r0, #27
 8003efa:	183b      	adds	r3, r7, r0
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	215d      	movs	r1, #93	; 0x5d
 8003f00:	5c52      	ldrb	r2, [r2, r1]
 8003f02:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f0a:	2312      	movs	r3, #18
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	1cba      	adds	r2, r7, #2
 8003f10:	8812      	ldrh	r2, [r2, #0]
 8003f12:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f14:	183b      	adds	r3, r7, r0
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d011      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x84>
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	2382      	movs	r3, #130	; 0x82
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d107      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x7a>
 8003f2e:	183b      	adds	r3, r7, r0
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d004      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003f36:	2323      	movs	r3, #35	; 0x23
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f3e:	e17e      	b.n	800423e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d006      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x98>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x98>
 8003f4c:	1cbb      	adds	r3, r7, #2
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003f54:	2323      	movs	r3, #35	; 0x23
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2201      	movs	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f5c:	e16f      	b.n	800423e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	225d      	movs	r2, #93	; 0x5d
 8003f62:	5c9b      	ldrb	r3, [r3, r2]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d003      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	225d      	movs	r2, #93	; 0x5d
 8003f6e:	2105      	movs	r1, #5
 8003f70:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1cba      	adds	r2, r7, #2
 8003f82:	2146      	movs	r1, #70	; 0x46
 8003f84:	8812      	ldrh	r2, [r2, #0]
 8003f86:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1cba      	adds	r2, r7, #2
 8003f8c:	2144      	movs	r1, #68	; 0x44
 8003f8e:	8812      	ldrh	r2, [r2, #0]
 8003f90:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1cba      	adds	r2, r7, #2
 8003f9c:	8812      	ldrh	r2, [r2, #0]
 8003f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1cba      	adds	r2, r7, #2
 8003fa4:	8812      	ldrh	r2, [r2, #0]
 8003fa6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	23e0      	movs	r3, #224	; 0xe0
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d908      	bls.n	8003fd2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	49a4      	ldr	r1, [pc, #656]	; (800425c <HAL_SPI_TransmitReceive+0x3a0>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	e008      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2180      	movs	r1, #128	; 0x80
 8003fde:	0149      	lsls	r1, r1, #5
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2240      	movs	r2, #64	; 0x40
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d007      	beq.n	8004002 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2140      	movs	r1, #64	; 0x40
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	23e0      	movs	r3, #224	; 0xe0
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	429a      	cmp	r2, r3
 800400c:	d800      	bhi.n	8004010 <HAL_SPI_TransmitReceive+0x154>
 800400e:	e07f      	b.n	8004110 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x168>
 8004018:	2312      	movs	r3, #18
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d000      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x168>
 8004022:	e069      	b.n	80040f8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	881a      	ldrh	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004048:	e056      	b.n	80040f8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2202      	movs	r2, #2
 8004052:	4013      	ands	r3, r2
 8004054:	2b02      	cmp	r3, #2
 8004056:	d11b      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x1d4>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <HAL_SPI_TransmitReceive+0x1d4>
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2b01      	cmp	r3, #1
 8004066:	d113      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2201      	movs	r2, #1
 8004098:	4013      	ands	r3, r2
 800409a:	2b01      	cmp	r3, #1
 800409c:	d11c      	bne.n	80040d8 <HAL_SPI_TransmitReceive+0x21c>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2246      	movs	r2, #70	; 0x46
 80040a2:	5a9b      	ldrh	r3, [r3, r2]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	b292      	uxth	r2, r2
 80040b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2246      	movs	r2, #70	; 0x46
 80040c6:	5a9b      	ldrh	r3, [r3, r2]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b299      	uxth	r1, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2246      	movs	r2, #70	; 0x46
 80040d2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040d4:	2301      	movs	r3, #1
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040d8:	f7fe f88e 	bl	80021f8 <HAL_GetTick>
 80040dc:	0002      	movs	r2, r0
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d807      	bhi.n	80040f8 <HAL_SPI_TransmitReceive+0x23c>
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	3301      	adds	r3, #1
 80040ec:	d004      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80040ee:	2323      	movs	r3, #35	; 0x23
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	2203      	movs	r2, #3
 80040f4:	701a      	strb	r2, [r3, #0]
        goto error;
 80040f6:	e0a2      	b.n	800423e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1a3      	bne.n	800404a <HAL_SPI_TransmitReceive+0x18e>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2246      	movs	r2, #70	; 0x46
 8004106:	5a9b      	ldrh	r3, [r3, r2]
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d19d      	bne.n	800404a <HAL_SPI_TransmitReceive+0x18e>
 800410e:	e085      	b.n	800421c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_SPI_TransmitReceive+0x268>
 8004118:	2312      	movs	r3, #18
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d000      	beq.n	8004124 <HAL_SPI_TransmitReceive+0x268>
 8004122:	e070      	b.n	8004206 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800414a:	e05c      	b.n	8004206 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2202      	movs	r2, #2
 8004154:	4013      	ands	r3, r2
 8004156:	2b02      	cmp	r3, #2
 8004158:	d11c      	bne.n	8004194 <HAL_SPI_TransmitReceive+0x2d8>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d017      	beq.n	8004194 <HAL_SPI_TransmitReceive+0x2d8>
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	2b01      	cmp	r3, #1
 8004168:	d114      	bne.n	8004194 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	7812      	ldrb	r2, [r2, #0]
 8004176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2201      	movs	r2, #1
 800419c:	4013      	ands	r3, r2
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d11e      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x324>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2246      	movs	r2, #70	; 0x46
 80041a6:	5a9b      	ldrh	r3, [r3, r2]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	001a      	movs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2246      	movs	r2, #70	; 0x46
 80041ce:	5a9b      	ldrh	r3, [r3, r2]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b299      	uxth	r1, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2246      	movs	r2, #70	; 0x46
 80041da:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041dc:	2301      	movs	r3, #1
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041e0:	f7fe f80a 	bl	80021f8 <HAL_GetTick>
 80041e4:	0002      	movs	r2, r0
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d802      	bhi.n	80041f6 <HAL_SPI_TransmitReceive+0x33a>
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	3301      	adds	r3, #1
 80041f4:	d102      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x340>
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d104      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80041fc:	2323      	movs	r3, #35	; 0x23
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	2203      	movs	r2, #3
 8004202:	701a      	strb	r2, [r3, #0]
        goto error;
 8004204:	e01b      	b.n	800423e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d19d      	bne.n	800414c <HAL_SPI_TransmitReceive+0x290>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2246      	movs	r2, #70	; 0x46
 8004214:	5a9b      	ldrh	r3, [r3, r2]
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d197      	bne.n	800414c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f9aa 	bl	800457c <SPI_EndRxTxTransaction>
 8004228:	1e03      	subs	r3, r0, #0
 800422a:	d007      	beq.n	800423c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800422c:	2323      	movs	r3, #35	; 0x23
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	661a      	str	r2, [r3, #96]	; 0x60
 800423a:	e000      	b.n	800423e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800423c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	225d      	movs	r2, #93	; 0x5d
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	225c      	movs	r2, #92	; 0x5c
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800424e:	2323      	movs	r3, #35	; 0x23
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	781b      	ldrb	r3, [r3, #0]
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b00a      	add	sp, #40	; 0x28
 800425a:	bd80      	pop	{r7, pc}
 800425c:	ffffefff 	.word	0xffffefff

08004260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	1dfb      	adds	r3, r7, #7
 800426e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004270:	f7fd ffc2 	bl	80021f8 <HAL_GetTick>
 8004274:	0002      	movs	r2, r0
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004280:	f7fd ffba 	bl	80021f8 <HAL_GetTick>
 8004284:	0003      	movs	r3, r0
 8004286:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004288:	4b3a      	ldr	r3, [pc, #232]	; (8004374 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	015b      	lsls	r3, r3, #5
 800428e:	0d1b      	lsrs	r3, r3, #20
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	4353      	muls	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004296:	e058      	b.n	800434a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	d055      	beq.n	800434a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800429e:	f7fd ffab 	bl	80021f8 <HAL_GetTick>
 80042a2:	0002      	movs	r2, r0
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d902      	bls.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d142      	bne.n	800433a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	21e0      	movs	r1, #224	; 0xe0
 80042c0:	438a      	bics	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	2382      	movs	r3, #130	; 0x82
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d113      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	429a      	cmp	r2, r3
 80042da:	d005      	beq.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d107      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2140      	movs	r1, #64	; 0x40
 80042f4:	438a      	bics	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	019b      	lsls	r3, r3, #6
 8004300:	429a      	cmp	r2, r3
 8004302:	d110      	bne.n	8004326 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	491a      	ldr	r1, [pc, #104]	; (8004378 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004310:	400a      	ands	r2, r1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	0189      	lsls	r1, r1, #6
 8004322:	430a      	orrs	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	225d      	movs	r2, #93	; 0x5d
 800432a:	2101      	movs	r1, #1
 800432c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	225c      	movs	r2, #92	; 0x5c
 8004332:	2100      	movs	r1, #0
 8004334:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e017      	b.n	800436a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	3b01      	subs	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	4013      	ands	r3, r2
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	425a      	negs	r2, r3
 800435a:	4153      	adcs	r3, r2
 800435c:	b2db      	uxtb	r3, r3
 800435e:	001a      	movs	r2, r3
 8004360:	1dfb      	adds	r3, r7, #7
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d197      	bne.n	8004298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b008      	add	sp, #32
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	20000008 	.word	0x20000008
 8004378:	ffffdfff 	.word	0xffffdfff

0800437c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800438a:	2317      	movs	r3, #23
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004392:	f7fd ff31 	bl	80021f8 <HAL_GetTick>
 8004396:	0002      	movs	r2, r0
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	18d3      	adds	r3, r2, r3
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043a2:	f7fd ff29 	bl	80021f8 <HAL_GetTick>
 80043a6:	0003      	movs	r3, r0
 80043a8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043b2:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	0013      	movs	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	00da      	lsls	r2, r3, #3
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	0d1b      	lsrs	r3, r3, #20
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	4353      	muls	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043c8:	e068      	b.n	800449c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	23c0      	movs	r3, #192	; 0xc0
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d10a      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0x6e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d107      	bne.n	80043ea <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	2117      	movs	r1, #23
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	d055      	beq.n	800449c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043f0:	f7fd ff02 	bl	80021f8 <HAL_GetTick>
 80043f4:	0002      	movs	r2, r0
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d902      	bls.n	8004406 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d142      	bne.n	800448c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	21e0      	movs	r1, #224	; 0xe0
 8004412:	438a      	bics	r2, r1
 8004414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	2382      	movs	r3, #130	; 0x82
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	429a      	cmp	r2, r3
 8004420:	d113      	bne.n	800444a <SPI_WaitFifoStateUntilTimeout+0xce>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	429a      	cmp	r2, r3
 800442c:	d005      	beq.n	800443a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	429a      	cmp	r2, r3
 8004438:	d107      	bne.n	800444a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	438a      	bics	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	019b      	lsls	r3, r3, #6
 8004452:	429a      	cmp	r2, r3
 8004454:	d110      	bne.n	8004478 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4916      	ldr	r1, [pc, #88]	; (80044bc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004462:	400a      	ands	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	0189      	lsls	r1, r1, #6
 8004474:	430a      	orrs	r2, r1
 8004476:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	225d      	movs	r2, #93	; 0x5d
 800447c:	2101      	movs	r1, #1
 800447e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	225c      	movs	r2, #92	; 0x5c
 8004484:	2100      	movs	r1, #0
 8004486:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e010      	b.n	80044ae <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3b01      	subs	r3, #1
 800449a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d18e      	bne.n	80043ca <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b00a      	add	sp, #40	; 0x28
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	20000008 	.word	0x20000008
 80044bc:	ffffdfff 	.word	0xffffdfff

080044c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	2382      	movs	r3, #130	; 0x82
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d113      	bne.n	8004500 <SPI_EndRxTransaction+0x40>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d005      	beq.n	80044f0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d107      	bne.n	8004500 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2140      	movs	r1, #64	; 0x40
 80044fc:	438a      	bics	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	0013      	movs	r3, r2
 800450a:	2200      	movs	r2, #0
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	f7ff fea7 	bl	8004260 <SPI_WaitFlagStateUntilTimeout>
 8004512:	1e03      	subs	r3, r0, #0
 8004514:	d007      	beq.n	8004526 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451a:	2220      	movs	r2, #32
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e026      	b.n	8004574 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	2382      	movs	r3, #130	; 0x82
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	429a      	cmp	r2, r3
 8004530:	d11f      	bne.n	8004572 <SPI_EndRxTransaction+0xb2>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	429a      	cmp	r2, r3
 800453c:	d005      	beq.n	800454a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	429a      	cmp	r2, r3
 8004548:	d113      	bne.n	8004572 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	23c0      	movs	r3, #192	; 0xc0
 800454e:	00d9      	lsls	r1, r3, #3
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	0013      	movs	r3, r2
 8004558:	2200      	movs	r2, #0
 800455a:	f7ff ff0f 	bl	800437c <SPI_WaitFifoStateUntilTimeout>
 800455e:	1e03      	subs	r3, r0, #0
 8004560:	d007      	beq.n	8004572 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004566:	2220      	movs	r2, #32
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e000      	b.n	8004574 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b004      	add	sp, #16
 800457a:	bd80      	pop	{r7, pc}

0800457c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	23c0      	movs	r3, #192	; 0xc0
 800458c:	0159      	lsls	r1, r3, #5
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	0013      	movs	r3, r2
 8004596:	2200      	movs	r2, #0
 8004598:	f7ff fef0 	bl	800437c <SPI_WaitFifoStateUntilTimeout>
 800459c:	1e03      	subs	r3, r0, #0
 800459e:	d007      	beq.n	80045b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a4:	2220      	movs	r2, #32
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e027      	b.n	8004600 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	0013      	movs	r3, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	2180      	movs	r1, #128	; 0x80
 80045be:	f7ff fe4f 	bl	8004260 <SPI_WaitFlagStateUntilTimeout>
 80045c2:	1e03      	subs	r3, r0, #0
 80045c4:	d007      	beq.n	80045d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ca:	2220      	movs	r2, #32
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e014      	b.n	8004600 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	23c0      	movs	r3, #192	; 0xc0
 80045da:	00d9      	lsls	r1, r3, #3
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	0013      	movs	r3, r2
 80045e4:	2200      	movs	r2, #0
 80045e6:	f7ff fec9 	bl	800437c <SPI_WaitFifoStateUntilTimeout>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d007      	beq.n	80045fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f2:	2220      	movs	r2, #32
 80045f4:	431a      	orrs	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e000      	b.n	8004600 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b004      	add	sp, #16
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e046      	b.n	80046a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2284      	movs	r2, #132	; 0x84
 800461e:	589b      	ldr	r3, [r3, r2]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2280      	movs	r2, #128	; 0x80
 8004628:	2100      	movs	r1, #0
 800462a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	0018      	movs	r0, r3
 8004630:	f7fd fc74 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2284      	movs	r2, #132	; 0x84
 8004638:	2124      	movs	r1, #36	; 0x24
 800463a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2101      	movs	r1, #1
 8004648:	438a      	bics	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fc82 	bl	8004f58 <UART_SetConfig>
 8004654:	0003      	movs	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e024      	b.n	80046a8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0018      	movs	r0, r3
 800466a:	f000 ffcb 	bl	8005604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	490d      	ldr	r1, [pc, #52]	; (80046b0 <HAL_UART_Init+0xa8>)
 800467a:	400a      	ands	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	212a      	movs	r1, #42	; 0x2a
 800468a:	438a      	bics	r2, r1
 800468c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2101      	movs	r1, #1
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f001 f863 	bl	800576c <UART_CheckIdleState>
 80046a6:	0003      	movs	r3, r0
}
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	ffffb7ff 	.word	0xffffb7ff

080046b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	; 0x28
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	1dbb      	adds	r3, r7, #6
 80046c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2284      	movs	r2, #132	; 0x84
 80046c8:	589b      	ldr	r3, [r3, r2]
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d000      	beq.n	80046d0 <HAL_UART_Transmit+0x1c>
 80046ce:	e097      	b.n	8004800 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_UART_Transmit+0x2a>
 80046d6:	1dbb      	adds	r3, r7, #6
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e08f      	b.n	8004802 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	015b      	lsls	r3, r3, #5
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d109      	bne.n	8004702 <HAL_UART_Transmit+0x4e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d105      	bne.n	8004702 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2201      	movs	r2, #1
 80046fa:	4013      	ands	r3, r2
 80046fc:	d001      	beq.n	8004702 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07f      	b.n	8004802 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	5c9b      	ldrb	r3, [r3, r2]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UART_Transmit+0x5c>
 800470c:	2302      	movs	r3, #2
 800470e:	e078      	b.n	8004802 <HAL_UART_Transmit+0x14e>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	2101      	movs	r1, #1
 8004716:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	228c      	movs	r2, #140	; 0x8c
 800471c:	2100      	movs	r1, #0
 800471e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2284      	movs	r2, #132	; 0x84
 8004724:	2121      	movs	r1, #33	; 0x21
 8004726:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004728:	f7fd fd66 	bl	80021f8 <HAL_GetTick>
 800472c:	0003      	movs	r3, r0
 800472e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1dba      	adds	r2, r7, #6
 8004734:	2154      	movs	r1, #84	; 0x54
 8004736:	8812      	ldrh	r2, [r2, #0]
 8004738:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1dba      	adds	r2, r7, #6
 800473e:	2156      	movs	r1, #86	; 0x56
 8004740:	8812      	ldrh	r2, [r2, #0]
 8004742:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	015b      	lsls	r3, r3, #5
 800474c:	429a      	cmp	r2, r3
 800474e:	d108      	bne.n	8004762 <HAL_UART_Transmit+0xae>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004758:	2300      	movs	r3, #0
 800475a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e003      	b.n	800476a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2280      	movs	r2, #128	; 0x80
 800476e:	2100      	movs	r1, #0
 8004770:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004772:	e02c      	b.n	80047ce <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	0013      	movs	r3, r2
 800477e:	2200      	movs	r2, #0
 8004780:	2180      	movs	r1, #128	; 0x80
 8004782:	f001 f83d 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 8004786:	1e03      	subs	r3, r0, #0
 8004788:	d001      	beq.n	800478e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e039      	b.n	8004802 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	001a      	movs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	05d2      	lsls	r2, r2, #23
 80047a0:	0dd2      	lsrs	r2, r2, #23
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	3302      	adds	r3, #2
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	e007      	b.n	80047bc <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3301      	adds	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2256      	movs	r2, #86	; 0x56
 80047c0:	5a9b      	ldrh	r3, [r3, r2]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b299      	uxth	r1, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2256      	movs	r2, #86	; 0x56
 80047cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2256      	movs	r2, #86	; 0x56
 80047d2:	5a9b      	ldrh	r3, [r3, r2]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1cc      	bne.n	8004774 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	0013      	movs	r3, r2
 80047e4:	2200      	movs	r2, #0
 80047e6:	2140      	movs	r1, #64	; 0x40
 80047e8:	f001 f80a 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e006      	b.n	8004802 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2284      	movs	r2, #132	; 0x84
 80047f8:	2120      	movs	r1, #32
 80047fa:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b008      	add	sp, #32
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	1dbb      	adds	r3, r7, #6
 8004818:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2288      	movs	r2, #136	; 0x88
 800481e:	589b      	ldr	r3, [r3, r2]
 8004820:	2b20      	cmp	r3, #32
 8004822:	d15a      	bne.n	80048da <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_UART_Receive_IT+0x26>
 800482a:	1dbb      	adds	r3, r7, #6
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e052      	b.n	80048dc <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	2380      	movs	r3, #128	; 0x80
 800483c:	015b      	lsls	r3, r3, #5
 800483e:	429a      	cmp	r2, r3
 8004840:	d109      	bne.n	8004856 <HAL_UART_Receive_IT+0x4a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2201      	movs	r2, #1
 800484e:	4013      	ands	r3, r2
 8004850:	d001      	beq.n	8004856 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e042      	b.n	80048dc <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2280      	movs	r2, #128	; 0x80
 800485a:	5c9b      	ldrb	r3, [r3, r2]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_UART_Receive_IT+0x58>
 8004860:	2302      	movs	r3, #2
 8004862:	e03b      	b.n	80048dc <HAL_UART_Receive_IT+0xd0>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2280      	movs	r2, #128	; 0x80
 8004868:	2101      	movs	r1, #1
 800486a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <HAL_UART_Receive_IT+0xd8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d025      	beq.n	80048c8 <HAL_UART_Receive_IT+0xbc>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <HAL_UART_Receive_IT+0xdc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d020      	beq.n	80048c8 <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	4013      	ands	r3, r2
 8004892:	d019      	beq.n	80048c8 <HAL_UART_Receive_IT+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004894:	f3ef 8310 	mrs	r3, PRIMASK
 8004898:	613b      	str	r3, [r7, #16]
  return(result);
 800489a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	2301      	movs	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f383 8810 	msr	PRIMASK, r3
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	04c9      	lsls	r1, r1, #19
 80048b8:	430a      	orrs	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f383 8810 	msr	PRIMASK, r3
}
 80048c6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048c8:	1dbb      	adds	r3, r7, #6
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f001 f85d 	bl	8005990 <UART_Start_Receive_IT>
 80048d6:	0003      	movs	r3, r0
 80048d8:	e000      	b.n	80048dc <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b008      	add	sp, #32
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40008000 	.word	0x40008000
 80048e8:	40008400 	.word	0x40008400

080048ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048ec:	b5b0      	push	{r4, r5, r7, lr}
 80048ee:	b0aa      	sub	sp, #168	; 0xa8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	22a4      	movs	r2, #164	; 0xa4
 80048fc:	18b9      	adds	r1, r7, r2
 80048fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	20a0      	movs	r0, #160	; 0xa0
 8004908:	1839      	adds	r1, r7, r0
 800490a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	249c      	movs	r4, #156	; 0x9c
 8004914:	1939      	adds	r1, r7, r4
 8004916:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004918:	0011      	movs	r1, r2
 800491a:	18bb      	adds	r3, r7, r2
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4aa0      	ldr	r2, [pc, #640]	; (8004ba0 <HAL_UART_IRQHandler+0x2b4>)
 8004920:	4013      	ands	r3, r2
 8004922:	2298      	movs	r2, #152	; 0x98
 8004924:	18bd      	adds	r5, r7, r2
 8004926:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004928:	18bb      	adds	r3, r7, r2
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11a      	bne.n	8004966 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004930:	187b      	adds	r3, r7, r1
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2220      	movs	r2, #32
 8004936:	4013      	ands	r3, r2
 8004938:	d015      	beq.n	8004966 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800493a:	183b      	adds	r3, r7, r0
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2220      	movs	r2, #32
 8004940:	4013      	ands	r3, r2
 8004942:	d105      	bne.n	8004950 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004944:	193b      	adds	r3, r7, r4
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	055b      	lsls	r3, r3, #21
 800494c:	4013      	ands	r3, r2
 800494e:	d00a      	beq.n	8004966 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	2b00      	cmp	r3, #0
 8004956:	d100      	bne.n	800495a <HAL_UART_IRQHandler+0x6e>
 8004958:	e2cf      	b.n	8004efa <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	0010      	movs	r0, r2
 8004962:	4798      	blx	r3
      }
      return;
 8004964:	e2c9      	b.n	8004efa <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004966:	2398      	movs	r3, #152	; 0x98
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d100      	bne.n	8004972 <HAL_UART_IRQHandler+0x86>
 8004970:	e11e      	b.n	8004bb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004972:	239c      	movs	r3, #156	; 0x9c
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a8a      	ldr	r2, [pc, #552]	; (8004ba4 <HAL_UART_IRQHandler+0x2b8>)
 800497a:	4013      	ands	r3, r2
 800497c:	d106      	bne.n	800498c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800497e:	23a0      	movs	r3, #160	; 0xa0
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a88      	ldr	r2, [pc, #544]	; (8004ba8 <HAL_UART_IRQHandler+0x2bc>)
 8004986:	4013      	ands	r3, r2
 8004988:	d100      	bne.n	800498c <HAL_UART_IRQHandler+0xa0>
 800498a:	e111      	b.n	8004bb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800498c:	23a4      	movs	r3, #164	; 0xa4
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2201      	movs	r2, #1
 8004994:	4013      	ands	r3, r2
 8004996:	d012      	beq.n	80049be <HAL_UART_IRQHandler+0xd2>
 8004998:	23a0      	movs	r3, #160	; 0xa0
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4013      	ands	r3, r2
 80049a4:	d00b      	beq.n	80049be <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2201      	movs	r2, #1
 80049ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	228c      	movs	r2, #140	; 0x8c
 80049b2:	589b      	ldr	r3, [r3, r2]
 80049b4:	2201      	movs	r2, #1
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	218c      	movs	r1, #140	; 0x8c
 80049bc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049be:	23a4      	movs	r3, #164	; 0xa4
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2202      	movs	r2, #2
 80049c6:	4013      	ands	r3, r2
 80049c8:	d011      	beq.n	80049ee <HAL_UART_IRQHandler+0x102>
 80049ca:	239c      	movs	r3, #156	; 0x9c
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2201      	movs	r2, #1
 80049d2:	4013      	ands	r3, r2
 80049d4:	d00b      	beq.n	80049ee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2202      	movs	r2, #2
 80049dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	228c      	movs	r2, #140	; 0x8c
 80049e2:	589b      	ldr	r3, [r3, r2]
 80049e4:	2204      	movs	r2, #4
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	218c      	movs	r1, #140	; 0x8c
 80049ec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ee:	23a4      	movs	r3, #164	; 0xa4
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2204      	movs	r2, #4
 80049f6:	4013      	ands	r3, r2
 80049f8:	d011      	beq.n	8004a1e <HAL_UART_IRQHandler+0x132>
 80049fa:	239c      	movs	r3, #156	; 0x9c
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2201      	movs	r2, #1
 8004a02:	4013      	ands	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	228c      	movs	r2, #140	; 0x8c
 8004a12:	589b      	ldr	r3, [r3, r2]
 8004a14:	2202      	movs	r2, #2
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	218c      	movs	r1, #140	; 0x8c
 8004a1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a1e:	23a4      	movs	r3, #164	; 0xa4
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2208      	movs	r2, #8
 8004a26:	4013      	ands	r3, r2
 8004a28:	d017      	beq.n	8004a5a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a2a:	23a0      	movs	r3, #160	; 0xa0
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2220      	movs	r2, #32
 8004a32:	4013      	ands	r3, r2
 8004a34:	d105      	bne.n	8004a42 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a36:	239c      	movs	r3, #156	; 0x9c
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a59      	ldr	r2, [pc, #356]	; (8004ba4 <HAL_UART_IRQHandler+0x2b8>)
 8004a3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a40:	d00b      	beq.n	8004a5a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2208      	movs	r2, #8
 8004a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	228c      	movs	r2, #140	; 0x8c
 8004a4e:	589b      	ldr	r3, [r3, r2]
 8004a50:	2208      	movs	r2, #8
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	218c      	movs	r1, #140	; 0x8c
 8004a58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a5a:	23a4      	movs	r3, #164	; 0xa4
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	4013      	ands	r3, r2
 8004a66:	d013      	beq.n	8004a90 <HAL_UART_IRQHandler+0x1a4>
 8004a68:	23a0      	movs	r3, #160	; 0xa0
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	04db      	lsls	r3, r3, #19
 8004a72:	4013      	ands	r3, r2
 8004a74:	d00c      	beq.n	8004a90 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2280      	movs	r2, #128	; 0x80
 8004a7c:	0112      	lsls	r2, r2, #4
 8004a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	228c      	movs	r2, #140	; 0x8c
 8004a84:	589b      	ldr	r3, [r3, r2]
 8004a86:	2220      	movs	r2, #32
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	218c      	movs	r1, #140	; 0x8c
 8004a8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	228c      	movs	r2, #140	; 0x8c
 8004a94:	589b      	ldr	r3, [r3, r2]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d100      	bne.n	8004a9c <HAL_UART_IRQHandler+0x1b0>
 8004a9a:	e230      	b.n	8004efe <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a9c:	23a4      	movs	r3, #164	; 0xa4
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d015      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004aa8:	23a0      	movs	r3, #160	; 0xa0
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d106      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ab4:	239c      	movs	r3, #156	; 0x9c
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	055b      	lsls	r3, r3, #21
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d008      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d004      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	0010      	movs	r0, r2
 8004ad2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	228c      	movs	r2, #140	; 0x8c
 8004ad8:	589b      	ldr	r3, [r3, r2]
 8004ada:	2194      	movs	r1, #148	; 0x94
 8004adc:	187a      	adds	r2, r7, r1
 8004ade:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d004      	beq.n	8004af8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004aee:	187b      	adds	r3, r7, r1
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2228      	movs	r2, #40	; 0x28
 8004af4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004af6:	d047      	beq.n	8004b88 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	0018      	movs	r0, r3
 8004afc:	f001 f874 	bl	8005be8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2240      	movs	r2, #64	; 0x40
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d137      	bne.n	8004b7e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b12:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b16:	2090      	movs	r0, #144	; 0x90
 8004b18:	183a      	adds	r2, r7, r0
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b22:	f383 8810 	msr	PRIMASK, r3
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2140      	movs	r1, #64	; 0x40
 8004b34:	438a      	bics	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	183b      	adds	r3, r7, r0
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d012      	beq.n	8004b74 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_UART_IRQHandler+0x2c0>)
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7fd fcce 	bl	80024fc <HAL_DMA_Abort_IT>
 8004b60:	1e03      	subs	r3, r0, #0
 8004b62:	d01a      	beq.n	8004b9a <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6e:	0018      	movs	r0, r3
 8004b70:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b72:	e012      	b.n	8004b9a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 f9da 	bl	8004f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	e00d      	b.n	8004b9a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f000 f9d5 	bl	8004f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b86:	e008      	b.n	8004b9a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f000 f9d0 	bl	8004f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	228c      	movs	r2, #140	; 0x8c
 8004b94:	2100      	movs	r1, #0
 8004b96:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004b98:	e1b1      	b.n	8004efe <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9a:	46c0      	nop			; (mov r8, r8)
    return;
 8004b9c:	e1af      	b.n	8004efe <HAL_UART_IRQHandler+0x612>
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	0000080f 	.word	0x0000080f
 8004ba4:	10000001 	.word	0x10000001
 8004ba8:	04000120 	.word	0x04000120
 8004bac:	08005cb5 	.word	0x08005cb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d000      	beq.n	8004bba <HAL_UART_IRQHandler+0x2ce>
 8004bb8:	e135      	b.n	8004e26 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bba:	23a4      	movs	r3, #164	; 0xa4
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d100      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x2dc>
 8004bc6:	e12e      	b.n	8004e26 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bc8:	23a0      	movs	r3, #160	; 0xa0
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2210      	movs	r2, #16
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d100      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x2ea>
 8004bd4:	e127      	b.n	8004e26 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2210      	movs	r2, #16
 8004bdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2240      	movs	r2, #64	; 0x40
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d000      	beq.n	8004bee <HAL_UART_IRQHandler+0x302>
 8004bec:	e09e      	b.n	8004d2c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	217e      	movs	r1, #126	; 0x7e
 8004bf8:	187b      	adds	r3, r7, r1
 8004bfa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004bfc:	187b      	adds	r3, r7, r1
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d100      	bne.n	8004c06 <HAL_UART_IRQHandler+0x31a>
 8004c04:	e17d      	b.n	8004f02 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	225c      	movs	r2, #92	; 0x5c
 8004c0a:	5a9b      	ldrh	r3, [r3, r2]
 8004c0c:	187a      	adds	r2, r7, r1
 8004c0e:	8812      	ldrh	r2, [r2, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d300      	bcc.n	8004c16 <HAL_UART_IRQHandler+0x32a>
 8004c14:	e175      	b.n	8004f02 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	187a      	adds	r2, r7, r1
 8004c1a:	215e      	movs	r1, #94	; 0x5e
 8004c1c:	8812      	ldrh	r2, [r2, #0]
 8004c1e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d16f      	bne.n	8004d0e <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c36:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c38:	2301      	movs	r3, #1
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3e:	f383 8810 	msr	PRIMASK, r3
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	49b1      	ldr	r1, [pc, #708]	; (8004f14 <HAL_UART_IRQHandler+0x628>)
 8004c50:	400a      	ands	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	f383 8810 	msr	PRIMASK, r3
}
 8004c5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c60:	f3ef 8310 	mrs	r3, PRIMASK
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c68:	677b      	str	r3, [r7, #116]	; 0x74
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c70:	f383 8810 	msr	PRIMASK, r3
}
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2101      	movs	r1, #1
 8004c82:	438a      	bics	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
 8004c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8c:	f383 8810 	msr	PRIMASK, r3
}
 8004c90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c92:	f3ef 8310 	mrs	r3, PRIMASK
 8004c96:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca2:	f383 8810 	msr	PRIMASK, r3
}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2140      	movs	r1, #64	; 0x40
 8004cb4:	438a      	bics	r2, r1
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cbe:	f383 8810 	msr	PRIMASK, r3
}
 8004cc2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2288      	movs	r2, #136	; 0x88
 8004cc8:	2120      	movs	r1, #32
 8004cca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cdc:	2301      	movs	r3, #1
 8004cde:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ce2:	f383 8810 	msr	PRIMASK, r3
}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2110      	movs	r1, #16
 8004cf4:	438a      	bics	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cfe:	f383 8810 	msr	PRIMASK, r3
}
 8004d02:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7fd fb97 	bl	800243c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	225c      	movs	r2, #92	; 0x5c
 8004d12:	5a9a      	ldrh	r2, [r3, r2]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	215e      	movs	r1, #94	; 0x5e
 8004d18:	5a5b      	ldrh	r3, [r3, r1]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	0011      	movs	r1, r2
 8004d24:	0018      	movs	r0, r3
 8004d26:	f000 f90b 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d2a:	e0ea      	b.n	8004f02 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	225c      	movs	r2, #92	; 0x5c
 8004d30:	5a99      	ldrh	r1, [r3, r2]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	225e      	movs	r2, #94	; 0x5e
 8004d36:	5a9b      	ldrh	r3, [r3, r2]
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	208e      	movs	r0, #142	; 0x8e
 8004d3c:	183b      	adds	r3, r7, r0
 8004d3e:	1a8a      	subs	r2, r1, r2
 8004d40:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	225e      	movs	r2, #94	; 0x5e
 8004d46:	5a9b      	ldrh	r3, [r3, r2]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d100      	bne.n	8004d50 <HAL_UART_IRQHandler+0x464>
 8004d4e:	e0da      	b.n	8004f06 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8004d50:	183b      	adds	r3, r7, r0
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d100      	bne.n	8004d5a <HAL_UART_IRQHandler+0x46e>
 8004d58:	e0d5      	b.n	8004f06 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d60:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d62:	2488      	movs	r4, #136	; 0x88
 8004d64:	193a      	adds	r2, r7, r4
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	2301      	movs	r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f383 8810 	msr	PRIMASK, r3
}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4966      	ldr	r1, [pc, #408]	; (8004f18 <HAL_UART_IRQHandler+0x62c>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	193b      	adds	r3, r7, r4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f383 8810 	msr	PRIMASK, r3
}
 8004d90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d92:	f3ef 8310 	mrs	r3, PRIMASK
 8004d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d98:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d9a:	2484      	movs	r4, #132	; 0x84
 8004d9c:	193a      	adds	r2, r7, r4
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	2301      	movs	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f383 8810 	msr	PRIMASK, r3
}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4959      	ldr	r1, [pc, #356]	; (8004f1c <HAL_UART_IRQHandler+0x630>)
 8004db8:	400a      	ands	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	193b      	adds	r3, r7, r4
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	f383 8810 	msr	PRIMASK, r3
}
 8004dc8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2288      	movs	r2, #136	; 0x88
 8004dce:	2120      	movs	r1, #32
 8004dd0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dde:	f3ef 8310 	mrs	r3, PRIMASK
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de6:	2480      	movs	r4, #128	; 0x80
 8004de8:	193a      	adds	r2, r7, r4
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	2301      	movs	r3, #1
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	f383 8810 	msr	PRIMASK, r3
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2110      	movs	r1, #16
 8004e04:	438a      	bics	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	193b      	adds	r3, r7, r4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	f383 8810 	msr	PRIMASK, r3
}
 8004e14:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e16:	183b      	adds	r3, r7, r0
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0011      	movs	r1, r2
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f000 f88e 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e24:	e06f      	b.n	8004f06 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e26:	23a4      	movs	r3, #164	; 0xa4
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	035b      	lsls	r3, r3, #13
 8004e30:	4013      	ands	r3, r2
 8004e32:	d010      	beq.n	8004e56 <HAL_UART_IRQHandler+0x56a>
 8004e34:	239c      	movs	r3, #156	; 0x9c
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	03db      	lsls	r3, r3, #15
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2280      	movs	r2, #128	; 0x80
 8004e48:	0352      	lsls	r2, r2, #13
 8004e4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f001 fbc4 	bl	80065dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e54:	e05a      	b.n	8004f0c <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e56:	23a4      	movs	r3, #164	; 0xa4
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2280      	movs	r2, #128	; 0x80
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d016      	beq.n	8004e90 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e62:	23a0      	movs	r3, #160	; 0xa0
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d106      	bne.n	8004e7c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e6e:	239c      	movs	r3, #156	; 0x9c
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d042      	beq.n	8004f0a <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	0010      	movs	r0, r2
 8004e8c:	4798      	blx	r3
    }
    return;
 8004e8e:	e03c      	b.n	8004f0a <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e90:	23a4      	movs	r3, #164	; 0xa4
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2240      	movs	r2, #64	; 0x40
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x5c6>
 8004e9c:	23a0      	movs	r3, #160	; 0xa0
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2240      	movs	r2, #64	; 0x40
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 ff19 	bl	8005ce2 <UART_EndTransmit_IT>
    return;
 8004eb0:	e02c      	b.n	8004f0c <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004eb2:	23a4      	movs	r3, #164	; 0xa4
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x5ec>
 8004ec0:	23a0      	movs	r3, #160	; 0xa0
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	05db      	lsls	r3, r3, #23
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f001 fb93 	bl	80065fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ed6:	e019      	b.n	8004f0c <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ed8:	23a4      	movs	r3, #164	; 0xa4
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	045b      	lsls	r3, r3, #17
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d012      	beq.n	8004f0c <HAL_UART_IRQHandler+0x620>
 8004ee6:	23a0      	movs	r3, #160	; 0xa0
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	da0d      	bge.n	8004f0c <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f001 fb7a 	bl	80065ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ef8:	e008      	b.n	8004f0c <HAL_UART_IRQHandler+0x620>
      return;
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	e006      	b.n	8004f0c <HAL_UART_IRQHandler+0x620>
    return;
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	e004      	b.n	8004f0c <HAL_UART_IRQHandler+0x620>
      return;
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	e002      	b.n	8004f0c <HAL_UART_IRQHandler+0x620>
      return;
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	e000      	b.n	8004f0c <HAL_UART_IRQHandler+0x620>
    return;
 8004f0a:	46c0      	nop			; (mov r8, r8)
  }
}
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b02a      	add	sp, #168	; 0xa8
 8004f10:	bdb0      	pop	{r4, r5, r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	fffffeff 	.word	0xfffffeff
 8004f18:	fffffedf 	.word	0xfffffedf
 8004f1c:	effffffe 	.word	0xeffffffe

08004f20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b002      	add	sp, #8
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b002      	add	sp, #8
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	000a      	movs	r2, r1
 8004f4a:	1cbb      	adds	r3, r7, #2
 8004f4c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b002      	add	sp, #8
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f58:	b5b0      	push	{r4, r5, r7, lr}
 8004f5a:	b090      	sub	sp, #64	; 0x40
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f60:	231a      	movs	r3, #26
 8004f62:	2220      	movs	r2, #32
 8004f64:	189b      	adds	r3, r3, r2
 8004f66:	19db      	adds	r3, r3, r7
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4ac1      	ldr	r2, [pc, #772]	; (8005290 <UART_SetConfig+0x338>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	0019      	movs	r1, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f96:	430b      	orrs	r3, r1
 8004f98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4abc      	ldr	r2, [pc, #752]	; (8005294 <UART_SetConfig+0x33c>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	68d9      	ldr	r1, [r3, #12]
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	0003      	movs	r3, r0
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4ab6      	ldr	r2, [pc, #728]	; (8005298 <UART_SetConfig+0x340>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d009      	beq.n	8004fd8 <UART_SetConfig+0x80>
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4ab4      	ldr	r2, [pc, #720]	; (800529c <UART_SetConfig+0x344>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	4ab0      	ldr	r2, [pc, #704]	; (80052a0 <UART_SetConfig+0x348>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	0019      	movs	r1, r3
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fea:	430b      	orrs	r3, r1
 8004fec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	4393      	bics	r3, r2
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	0003      	movs	r3, r0
 8005004:	430b      	orrs	r3, r1
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4aa5      	ldr	r2, [pc, #660]	; (80052a4 <UART_SetConfig+0x34c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d131      	bne.n	8005076 <UART_SetConfig+0x11e>
 8005012:	4ba5      	ldr	r3, [pc, #660]	; (80052a8 <UART_SetConfig+0x350>)
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	2203      	movs	r2, #3
 8005018:	4013      	ands	r3, r2
 800501a:	2b03      	cmp	r3, #3
 800501c:	d01d      	beq.n	800505a <UART_SetConfig+0x102>
 800501e:	d823      	bhi.n	8005068 <UART_SetConfig+0x110>
 8005020:	2b02      	cmp	r3, #2
 8005022:	d00c      	beq.n	800503e <UART_SetConfig+0xe6>
 8005024:	d820      	bhi.n	8005068 <UART_SetConfig+0x110>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <UART_SetConfig+0xd8>
 800502a:	2b01      	cmp	r3, #1
 800502c:	d00e      	beq.n	800504c <UART_SetConfig+0xf4>
 800502e:	e01b      	b.n	8005068 <UART_SetConfig+0x110>
 8005030:	231b      	movs	r3, #27
 8005032:	2220      	movs	r2, #32
 8005034:	189b      	adds	r3, r3, r2
 8005036:	19db      	adds	r3, r3, r7
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	e154      	b.n	80052e8 <UART_SetConfig+0x390>
 800503e:	231b      	movs	r3, #27
 8005040:	2220      	movs	r2, #32
 8005042:	189b      	adds	r3, r3, r2
 8005044:	19db      	adds	r3, r3, r7
 8005046:	2202      	movs	r2, #2
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e14d      	b.n	80052e8 <UART_SetConfig+0x390>
 800504c:	231b      	movs	r3, #27
 800504e:	2220      	movs	r2, #32
 8005050:	189b      	adds	r3, r3, r2
 8005052:	19db      	adds	r3, r3, r7
 8005054:	2204      	movs	r2, #4
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e146      	b.n	80052e8 <UART_SetConfig+0x390>
 800505a:	231b      	movs	r3, #27
 800505c:	2220      	movs	r2, #32
 800505e:	189b      	adds	r3, r3, r2
 8005060:	19db      	adds	r3, r3, r7
 8005062:	2208      	movs	r2, #8
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e13f      	b.n	80052e8 <UART_SetConfig+0x390>
 8005068:	231b      	movs	r3, #27
 800506a:	2220      	movs	r2, #32
 800506c:	189b      	adds	r3, r3, r2
 800506e:	19db      	adds	r3, r3, r7
 8005070:	2210      	movs	r2, #16
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e138      	b.n	80052e8 <UART_SetConfig+0x390>
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a8c      	ldr	r2, [pc, #560]	; (80052ac <UART_SetConfig+0x354>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d131      	bne.n	80050e4 <UART_SetConfig+0x18c>
 8005080:	4b89      	ldr	r3, [pc, #548]	; (80052a8 <UART_SetConfig+0x350>)
 8005082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005084:	220c      	movs	r2, #12
 8005086:	4013      	ands	r3, r2
 8005088:	2b0c      	cmp	r3, #12
 800508a:	d01d      	beq.n	80050c8 <UART_SetConfig+0x170>
 800508c:	d823      	bhi.n	80050d6 <UART_SetConfig+0x17e>
 800508e:	2b08      	cmp	r3, #8
 8005090:	d00c      	beq.n	80050ac <UART_SetConfig+0x154>
 8005092:	d820      	bhi.n	80050d6 <UART_SetConfig+0x17e>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <UART_SetConfig+0x146>
 8005098:	2b04      	cmp	r3, #4
 800509a:	d00e      	beq.n	80050ba <UART_SetConfig+0x162>
 800509c:	e01b      	b.n	80050d6 <UART_SetConfig+0x17e>
 800509e:	231b      	movs	r3, #27
 80050a0:	2220      	movs	r2, #32
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	19db      	adds	r3, r3, r7
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e11d      	b.n	80052e8 <UART_SetConfig+0x390>
 80050ac:	231b      	movs	r3, #27
 80050ae:	2220      	movs	r2, #32
 80050b0:	189b      	adds	r3, r3, r2
 80050b2:	19db      	adds	r3, r3, r7
 80050b4:	2202      	movs	r2, #2
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e116      	b.n	80052e8 <UART_SetConfig+0x390>
 80050ba:	231b      	movs	r3, #27
 80050bc:	2220      	movs	r2, #32
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	19db      	adds	r3, r3, r7
 80050c2:	2204      	movs	r2, #4
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e10f      	b.n	80052e8 <UART_SetConfig+0x390>
 80050c8:	231b      	movs	r3, #27
 80050ca:	2220      	movs	r2, #32
 80050cc:	189b      	adds	r3, r3, r2
 80050ce:	19db      	adds	r3, r3, r7
 80050d0:	2208      	movs	r2, #8
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e108      	b.n	80052e8 <UART_SetConfig+0x390>
 80050d6:	231b      	movs	r3, #27
 80050d8:	2220      	movs	r2, #32
 80050da:	189b      	adds	r3, r3, r2
 80050dc:	19db      	adds	r3, r3, r7
 80050de:	2210      	movs	r2, #16
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	e101      	b.n	80052e8 <UART_SetConfig+0x390>
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a71      	ldr	r2, [pc, #452]	; (80052b0 <UART_SetConfig+0x358>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d131      	bne.n	8005152 <UART_SetConfig+0x1fa>
 80050ee:	4b6e      	ldr	r3, [pc, #440]	; (80052a8 <UART_SetConfig+0x350>)
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	2230      	movs	r2, #48	; 0x30
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b30      	cmp	r3, #48	; 0x30
 80050f8:	d01d      	beq.n	8005136 <UART_SetConfig+0x1de>
 80050fa:	d823      	bhi.n	8005144 <UART_SetConfig+0x1ec>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d00c      	beq.n	800511a <UART_SetConfig+0x1c2>
 8005100:	d820      	bhi.n	8005144 <UART_SetConfig+0x1ec>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <UART_SetConfig+0x1b4>
 8005106:	2b10      	cmp	r3, #16
 8005108:	d00e      	beq.n	8005128 <UART_SetConfig+0x1d0>
 800510a:	e01b      	b.n	8005144 <UART_SetConfig+0x1ec>
 800510c:	231b      	movs	r3, #27
 800510e:	2220      	movs	r2, #32
 8005110:	189b      	adds	r3, r3, r2
 8005112:	19db      	adds	r3, r3, r7
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e0e6      	b.n	80052e8 <UART_SetConfig+0x390>
 800511a:	231b      	movs	r3, #27
 800511c:	2220      	movs	r2, #32
 800511e:	189b      	adds	r3, r3, r2
 8005120:	19db      	adds	r3, r3, r7
 8005122:	2202      	movs	r2, #2
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e0df      	b.n	80052e8 <UART_SetConfig+0x390>
 8005128:	231b      	movs	r3, #27
 800512a:	2220      	movs	r2, #32
 800512c:	189b      	adds	r3, r3, r2
 800512e:	19db      	adds	r3, r3, r7
 8005130:	2204      	movs	r2, #4
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e0d8      	b.n	80052e8 <UART_SetConfig+0x390>
 8005136:	231b      	movs	r3, #27
 8005138:	2220      	movs	r2, #32
 800513a:	189b      	adds	r3, r3, r2
 800513c:	19db      	adds	r3, r3, r7
 800513e:	2208      	movs	r2, #8
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e0d1      	b.n	80052e8 <UART_SetConfig+0x390>
 8005144:	231b      	movs	r3, #27
 8005146:	2220      	movs	r2, #32
 8005148:	189b      	adds	r3, r3, r2
 800514a:	19db      	adds	r3, r3, r7
 800514c:	2210      	movs	r2, #16
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e0ca      	b.n	80052e8 <UART_SetConfig+0x390>
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a57      	ldr	r2, [pc, #348]	; (80052b4 <UART_SetConfig+0x35c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d106      	bne.n	800516a <UART_SetConfig+0x212>
 800515c:	231b      	movs	r3, #27
 800515e:	2220      	movs	r2, #32
 8005160:	189b      	adds	r3, r3, r2
 8005162:	19db      	adds	r3, r3, r7
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e0be      	b.n	80052e8 <UART_SetConfig+0x390>
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a52      	ldr	r2, [pc, #328]	; (80052b8 <UART_SetConfig+0x360>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d106      	bne.n	8005182 <UART_SetConfig+0x22a>
 8005174:	231b      	movs	r3, #27
 8005176:	2220      	movs	r2, #32
 8005178:	189b      	adds	r3, r3, r2
 800517a:	19db      	adds	r3, r3, r7
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e0b2      	b.n	80052e8 <UART_SetConfig+0x390>
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a4d      	ldr	r2, [pc, #308]	; (80052bc <UART_SetConfig+0x364>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d106      	bne.n	800519a <UART_SetConfig+0x242>
 800518c:	231b      	movs	r3, #27
 800518e:	2220      	movs	r2, #32
 8005190:	189b      	adds	r3, r3, r2
 8005192:	19db      	adds	r3, r3, r7
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e0a6      	b.n	80052e8 <UART_SetConfig+0x390>
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a3e      	ldr	r2, [pc, #248]	; (8005298 <UART_SetConfig+0x340>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d13e      	bne.n	8005222 <UART_SetConfig+0x2ca>
 80051a4:	4b40      	ldr	r3, [pc, #256]	; (80052a8 <UART_SetConfig+0x350>)
 80051a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a8:	23c0      	movs	r3, #192	; 0xc0
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	4013      	ands	r3, r2
 80051ae:	22c0      	movs	r2, #192	; 0xc0
 80051b0:	0112      	lsls	r2, r2, #4
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d027      	beq.n	8005206 <UART_SetConfig+0x2ae>
 80051b6:	22c0      	movs	r2, #192	; 0xc0
 80051b8:	0112      	lsls	r2, r2, #4
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d82a      	bhi.n	8005214 <UART_SetConfig+0x2bc>
 80051be:	2280      	movs	r2, #128	; 0x80
 80051c0:	0112      	lsls	r2, r2, #4
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d011      	beq.n	80051ea <UART_SetConfig+0x292>
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	0112      	lsls	r2, r2, #4
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d822      	bhi.n	8005214 <UART_SetConfig+0x2bc>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <UART_SetConfig+0x284>
 80051d2:	2280      	movs	r2, #128	; 0x80
 80051d4:	00d2      	lsls	r2, r2, #3
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <UART_SetConfig+0x2a0>
 80051da:	e01b      	b.n	8005214 <UART_SetConfig+0x2bc>
 80051dc:	231b      	movs	r3, #27
 80051de:	2220      	movs	r2, #32
 80051e0:	189b      	adds	r3, r3, r2
 80051e2:	19db      	adds	r3, r3, r7
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e07e      	b.n	80052e8 <UART_SetConfig+0x390>
 80051ea:	231b      	movs	r3, #27
 80051ec:	2220      	movs	r2, #32
 80051ee:	189b      	adds	r3, r3, r2
 80051f0:	19db      	adds	r3, r3, r7
 80051f2:	2202      	movs	r2, #2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e077      	b.n	80052e8 <UART_SetConfig+0x390>
 80051f8:	231b      	movs	r3, #27
 80051fa:	2220      	movs	r2, #32
 80051fc:	189b      	adds	r3, r3, r2
 80051fe:	19db      	adds	r3, r3, r7
 8005200:	2204      	movs	r2, #4
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	e070      	b.n	80052e8 <UART_SetConfig+0x390>
 8005206:	231b      	movs	r3, #27
 8005208:	2220      	movs	r2, #32
 800520a:	189b      	adds	r3, r3, r2
 800520c:	19db      	adds	r3, r3, r7
 800520e:	2208      	movs	r2, #8
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e069      	b.n	80052e8 <UART_SetConfig+0x390>
 8005214:	231b      	movs	r3, #27
 8005216:	2220      	movs	r2, #32
 8005218:	189b      	adds	r3, r3, r2
 800521a:	19db      	adds	r3, r3, r7
 800521c:	2210      	movs	r2, #16
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e062      	b.n	80052e8 <UART_SetConfig+0x390>
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1d      	ldr	r2, [pc, #116]	; (800529c <UART_SetConfig+0x344>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d157      	bne.n	80052dc <UART_SetConfig+0x384>
 800522c:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <UART_SetConfig+0x350>)
 800522e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005230:	23c0      	movs	r3, #192	; 0xc0
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4013      	ands	r3, r2
 8005236:	22c0      	movs	r2, #192	; 0xc0
 8005238:	0092      	lsls	r2, r2, #2
 800523a:	4293      	cmp	r3, r2
 800523c:	d040      	beq.n	80052c0 <UART_SetConfig+0x368>
 800523e:	22c0      	movs	r2, #192	; 0xc0
 8005240:	0092      	lsls	r2, r2, #2
 8005242:	4293      	cmp	r3, r2
 8005244:	d843      	bhi.n	80052ce <UART_SetConfig+0x376>
 8005246:	2280      	movs	r2, #128	; 0x80
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	4293      	cmp	r3, r2
 800524c:	d011      	beq.n	8005272 <UART_SetConfig+0x31a>
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	0092      	lsls	r2, r2, #2
 8005252:	4293      	cmp	r3, r2
 8005254:	d83b      	bhi.n	80052ce <UART_SetConfig+0x376>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <UART_SetConfig+0x30c>
 800525a:	2280      	movs	r2, #128	; 0x80
 800525c:	0052      	lsls	r2, r2, #1
 800525e:	4293      	cmp	r3, r2
 8005260:	d00e      	beq.n	8005280 <UART_SetConfig+0x328>
 8005262:	e034      	b.n	80052ce <UART_SetConfig+0x376>
 8005264:	231b      	movs	r3, #27
 8005266:	2220      	movs	r2, #32
 8005268:	189b      	adds	r3, r3, r2
 800526a:	19db      	adds	r3, r3, r7
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e03a      	b.n	80052e8 <UART_SetConfig+0x390>
 8005272:	231b      	movs	r3, #27
 8005274:	2220      	movs	r2, #32
 8005276:	189b      	adds	r3, r3, r2
 8005278:	19db      	adds	r3, r3, r7
 800527a:	2202      	movs	r2, #2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	e033      	b.n	80052e8 <UART_SetConfig+0x390>
 8005280:	231b      	movs	r3, #27
 8005282:	2220      	movs	r2, #32
 8005284:	189b      	adds	r3, r3, r2
 8005286:	19db      	adds	r3, r3, r7
 8005288:	2204      	movs	r2, #4
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e02c      	b.n	80052e8 <UART_SetConfig+0x390>
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	cfff69f3 	.word	0xcfff69f3
 8005294:	ffffcfff 	.word	0xffffcfff
 8005298:	40008000 	.word	0x40008000
 800529c:	40008400 	.word	0x40008400
 80052a0:	11fff4ff 	.word	0x11fff4ff
 80052a4:	40013800 	.word	0x40013800
 80052a8:	40021000 	.word	0x40021000
 80052ac:	40004400 	.word	0x40004400
 80052b0:	40004800 	.word	0x40004800
 80052b4:	40004c00 	.word	0x40004c00
 80052b8:	40005000 	.word	0x40005000
 80052bc:	40013c00 	.word	0x40013c00
 80052c0:	231b      	movs	r3, #27
 80052c2:	2220      	movs	r2, #32
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	19db      	adds	r3, r3, r7
 80052c8:	2208      	movs	r2, #8
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	e00c      	b.n	80052e8 <UART_SetConfig+0x390>
 80052ce:	231b      	movs	r3, #27
 80052d0:	2220      	movs	r2, #32
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	19db      	adds	r3, r3, r7
 80052d6:	2210      	movs	r2, #16
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e005      	b.n	80052e8 <UART_SetConfig+0x390>
 80052dc:	231b      	movs	r3, #27
 80052de:	2220      	movs	r2, #32
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	19db      	adds	r3, r3, r7
 80052e4:	2210      	movs	r2, #16
 80052e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4ac1      	ldr	r2, [pc, #772]	; (80055f4 <UART_SetConfig+0x69c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d005      	beq.n	80052fe <UART_SetConfig+0x3a6>
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4ac0      	ldr	r2, [pc, #768]	; (80055f8 <UART_SetConfig+0x6a0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d000      	beq.n	80052fe <UART_SetConfig+0x3a6>
 80052fc:	e093      	b.n	8005426 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052fe:	231b      	movs	r3, #27
 8005300:	2220      	movs	r2, #32
 8005302:	189b      	adds	r3, r3, r2
 8005304:	19db      	adds	r3, r3, r7
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d015      	beq.n	8005338 <UART_SetConfig+0x3e0>
 800530c:	dc18      	bgt.n	8005340 <UART_SetConfig+0x3e8>
 800530e:	2b04      	cmp	r3, #4
 8005310:	d00d      	beq.n	800532e <UART_SetConfig+0x3d6>
 8005312:	dc15      	bgt.n	8005340 <UART_SetConfig+0x3e8>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <UART_SetConfig+0x3c6>
 8005318:	2b02      	cmp	r3, #2
 800531a:	d005      	beq.n	8005328 <UART_SetConfig+0x3d0>
 800531c:	e010      	b.n	8005340 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800531e:	f7fe f81f 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 8005322:	0003      	movs	r3, r0
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005326:	e014      	b.n	8005352 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005328:	4bb4      	ldr	r3, [pc, #720]	; (80055fc <UART_SetConfig+0x6a4>)
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800532c:	e011      	b.n	8005352 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532e:	f7fd ff8b 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8005332:	0003      	movs	r3, r0
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005336:	e00c      	b.n	8005352 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800533e:	e008      	b.n	8005352 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005344:	231a      	movs	r3, #26
 8005346:	2220      	movs	r2, #32
 8005348:	189b      	adds	r3, r3, r2
 800534a:	19db      	adds	r3, r3, r7
 800534c:	2201      	movs	r2, #1
 800534e:	701a      	strb	r2, [r3, #0]
        break;
 8005350:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	2b00      	cmp	r3, #0
 8005356:	d100      	bne.n	800535a <UART_SetConfig+0x402>
 8005358:	e135      	b.n	80055c6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800535e:	4ba8      	ldr	r3, [pc, #672]	; (8005600 <UART_SetConfig+0x6a8>)
 8005360:	0052      	lsls	r2, r2, #1
 8005362:	5ad3      	ldrh	r3, [r2, r3]
 8005364:	0019      	movs	r1, r3
 8005366:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005368:	f7fa fede 	bl	8000128 <__udivsi3>
 800536c:	0003      	movs	r3, r0
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	0013      	movs	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	189b      	adds	r3, r3, r2
 800537a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537c:	429a      	cmp	r2, r3
 800537e:	d305      	bcc.n	800538c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005388:	429a      	cmp	r2, r3
 800538a:	d906      	bls.n	800539a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800538c:	231a      	movs	r3, #26
 800538e:	2220      	movs	r2, #32
 8005390:	189b      	adds	r3, r3, r2
 8005392:	19db      	adds	r3, r3, r7
 8005394:	2201      	movs	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e044      	b.n	8005424 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a6:	4b96      	ldr	r3, [pc, #600]	; (8005600 <UART_SetConfig+0x6a8>)
 80053a8:	0052      	lsls	r2, r2, #1
 80053aa:	5ad3      	ldrh	r3, [r2, r3]
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	69b8      	ldr	r0, [r7, #24]
 80053b8:	69f9      	ldr	r1, [r7, #28]
 80053ba:	f7fb f82b 	bl	8000414 <__aeabi_uldivmod>
 80053be:	0002      	movs	r2, r0
 80053c0:	000b      	movs	r3, r1
 80053c2:	0e11      	lsrs	r1, r2, #24
 80053c4:	021d      	lsls	r5, r3, #8
 80053c6:	430d      	orrs	r5, r1
 80053c8:	0214      	lsls	r4, r2, #8
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	085b      	lsrs	r3, r3, #1
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68b8      	ldr	r0, [r7, #8]
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	1900      	adds	r0, r0, r4
 80053dc:	4169      	adcs	r1, r5
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	2300      	movs	r3, #0
 80053e6:	607b      	str	r3, [r7, #4]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f7fb f812 	bl	8000414 <__aeabi_uldivmod>
 80053f0:	0002      	movs	r2, r0
 80053f2:	000b      	movs	r3, r1
 80053f4:	0013      	movs	r3, r2
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fa:	23c0      	movs	r3, #192	; 0xc0
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	429a      	cmp	r2, r3
 8005400:	d309      	bcc.n	8005416 <UART_SetConfig+0x4be>
 8005402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	035b      	lsls	r3, r3, #13
 8005408:	429a      	cmp	r2, r3
 800540a:	d204      	bcs.n	8005416 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	60da      	str	r2, [r3, #12]
 8005414:	e006      	b.n	8005424 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005416:	231a      	movs	r3, #26
 8005418:	2220      	movs	r2, #32
 800541a:	189b      	adds	r3, r3, r2
 800541c:	19db      	adds	r3, r3, r7
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005422:	e0d0      	b.n	80055c6 <UART_SetConfig+0x66e>
 8005424:	e0cf      	b.n	80055c6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	69da      	ldr	r2, [r3, #28]
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	429a      	cmp	r2, r3
 8005430:	d000      	beq.n	8005434 <UART_SetConfig+0x4dc>
 8005432:	e070      	b.n	8005516 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005434:	231b      	movs	r3, #27
 8005436:	2220      	movs	r2, #32
 8005438:	189b      	adds	r3, r3, r2
 800543a:	19db      	adds	r3, r3, r7
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b08      	cmp	r3, #8
 8005440:	d015      	beq.n	800546e <UART_SetConfig+0x516>
 8005442:	dc18      	bgt.n	8005476 <UART_SetConfig+0x51e>
 8005444:	2b04      	cmp	r3, #4
 8005446:	d00d      	beq.n	8005464 <UART_SetConfig+0x50c>
 8005448:	dc15      	bgt.n	8005476 <UART_SetConfig+0x51e>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <UART_SetConfig+0x4fc>
 800544e:	2b02      	cmp	r3, #2
 8005450:	d005      	beq.n	800545e <UART_SetConfig+0x506>
 8005452:	e010      	b.n	8005476 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005454:	f7fd ff84 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 8005458:	0003      	movs	r3, r0
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800545c:	e014      	b.n	8005488 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800545e:	4b67      	ldr	r3, [pc, #412]	; (80055fc <UART_SetConfig+0x6a4>)
 8005460:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005462:	e011      	b.n	8005488 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005464:	f7fd fef0 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8005468:	0003      	movs	r3, r0
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800546c:	e00c      	b.n	8005488 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005474:	e008      	b.n	8005488 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800547a:	231a      	movs	r3, #26
 800547c:	2220      	movs	r2, #32
 800547e:	189b      	adds	r3, r3, r2
 8005480:	19db      	adds	r3, r3, r7
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
        break;
 8005486:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548a:	2b00      	cmp	r3, #0
 800548c:	d100      	bne.n	8005490 <UART_SetConfig+0x538>
 800548e:	e09a      	b.n	80055c6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005494:	4b5a      	ldr	r3, [pc, #360]	; (8005600 <UART_SetConfig+0x6a8>)
 8005496:	0052      	lsls	r2, r2, #1
 8005498:	5ad3      	ldrh	r3, [r2, r3]
 800549a:	0019      	movs	r1, r3
 800549c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800549e:	f7fa fe43 	bl	8000128 <__udivsi3>
 80054a2:	0003      	movs	r3, r0
 80054a4:	005a      	lsls	r2, r3, #1
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	18d2      	adds	r2, r2, r3
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	0019      	movs	r1, r3
 80054b4:	0010      	movs	r0, r2
 80054b6:	f7fa fe37 	bl	8000128 <__udivsi3>
 80054ba:	0003      	movs	r3, r0
 80054bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	2b0f      	cmp	r3, #15
 80054c2:	d921      	bls.n	8005508 <UART_SetConfig+0x5b0>
 80054c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	025b      	lsls	r3, r3, #9
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d21c      	bcs.n	8005508 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	200e      	movs	r0, #14
 80054d4:	2420      	movs	r4, #32
 80054d6:	1903      	adds	r3, r0, r4
 80054d8:	19db      	adds	r3, r3, r7
 80054da:	210f      	movs	r1, #15
 80054dc:	438a      	bics	r2, r1
 80054de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2207      	movs	r2, #7
 80054e8:	4013      	ands	r3, r2
 80054ea:	b299      	uxth	r1, r3
 80054ec:	1903      	adds	r3, r0, r4
 80054ee:	19db      	adds	r3, r3, r7
 80054f0:	1902      	adds	r2, r0, r4
 80054f2:	19d2      	adds	r2, r2, r7
 80054f4:	8812      	ldrh	r2, [r2, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1902      	adds	r2, r0, r4
 8005500:	19d2      	adds	r2, r2, r7
 8005502:	8812      	ldrh	r2, [r2, #0]
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	e05e      	b.n	80055c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005508:	231a      	movs	r3, #26
 800550a:	2220      	movs	r2, #32
 800550c:	189b      	adds	r3, r3, r2
 800550e:	19db      	adds	r3, r3, r7
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	e057      	b.n	80055c6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005516:	231b      	movs	r3, #27
 8005518:	2220      	movs	r2, #32
 800551a:	189b      	adds	r3, r3, r2
 800551c:	19db      	adds	r3, r3, r7
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b08      	cmp	r3, #8
 8005522:	d015      	beq.n	8005550 <UART_SetConfig+0x5f8>
 8005524:	dc18      	bgt.n	8005558 <UART_SetConfig+0x600>
 8005526:	2b04      	cmp	r3, #4
 8005528:	d00d      	beq.n	8005546 <UART_SetConfig+0x5ee>
 800552a:	dc15      	bgt.n	8005558 <UART_SetConfig+0x600>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <UART_SetConfig+0x5de>
 8005530:	2b02      	cmp	r3, #2
 8005532:	d005      	beq.n	8005540 <UART_SetConfig+0x5e8>
 8005534:	e010      	b.n	8005558 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005536:	f7fd ff13 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 800553a:	0003      	movs	r3, r0
 800553c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800553e:	e014      	b.n	800556a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005540:	4b2e      	ldr	r3, [pc, #184]	; (80055fc <UART_SetConfig+0x6a4>)
 8005542:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005544:	e011      	b.n	800556a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005546:	f7fd fe7f 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 800554a:	0003      	movs	r3, r0
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800554e:	e00c      	b.n	800556a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005556:	e008      	b.n	800556a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800555c:	231a      	movs	r3, #26
 800555e:	2220      	movs	r2, #32
 8005560:	189b      	adds	r3, r3, r2
 8005562:	19db      	adds	r3, r3, r7
 8005564:	2201      	movs	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]
        break;
 8005568:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	2b00      	cmp	r3, #0
 800556e:	d02a      	beq.n	80055c6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005574:	4b22      	ldr	r3, [pc, #136]	; (8005600 <UART_SetConfig+0x6a8>)
 8005576:	0052      	lsls	r2, r2, #1
 8005578:	5ad3      	ldrh	r3, [r2, r3]
 800557a:	0019      	movs	r1, r3
 800557c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800557e:	f7fa fdd3 	bl	8000128 <__udivsi3>
 8005582:	0003      	movs	r3, r0
 8005584:	001a      	movs	r2, r3
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	18d2      	adds	r2, r2, r3
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	0019      	movs	r1, r3
 8005594:	0010      	movs	r0, r2
 8005596:	f7fa fdc7 	bl	8000128 <__udivsi3>
 800559a:	0003      	movs	r3, r0
 800559c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	2b0f      	cmp	r3, #15
 80055a2:	d90a      	bls.n	80055ba <UART_SetConfig+0x662>
 80055a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a6:	2380      	movs	r3, #128	; 0x80
 80055a8:	025b      	lsls	r3, r3, #9
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d205      	bcs.n	80055ba <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60da      	str	r2, [r3, #12]
 80055b8:	e005      	b.n	80055c6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80055ba:	231a      	movs	r3, #26
 80055bc:	2220      	movs	r2, #32
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	19db      	adds	r3, r3, r7
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	226a      	movs	r2, #106	; 0x6a
 80055ca:	2101      	movs	r1, #1
 80055cc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	2268      	movs	r2, #104	; 0x68
 80055d2:	2101      	movs	r1, #1
 80055d4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	2200      	movs	r2, #0
 80055da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	2200      	movs	r2, #0
 80055e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055e2:	231a      	movs	r3, #26
 80055e4:	2220      	movs	r2, #32
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	19db      	adds	r3, r3, r7
 80055ea:	781b      	ldrb	r3, [r3, #0]
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b010      	add	sp, #64	; 0x40
 80055f2:	bdb0      	pop	{r4, r5, r7, pc}
 80055f4:	40008000 	.word	0x40008000
 80055f8:	40008400 	.word	0x40008400
 80055fc:	00f42400 	.word	0x00f42400
 8005600:	08007754 	.word	0x08007754

08005604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	2201      	movs	r2, #1
 8005612:	4013      	ands	r3, r2
 8005614:	d00b      	beq.n	800562e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4a4a      	ldr	r2, [pc, #296]	; (8005748 <UART_AdvFeatureConfig+0x144>)
 800561e:	4013      	ands	r3, r2
 8005620:	0019      	movs	r1, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	2202      	movs	r2, #2
 8005634:	4013      	ands	r3, r2
 8005636:	d00b      	beq.n	8005650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	4a43      	ldr	r2, [pc, #268]	; (800574c <UART_AdvFeatureConfig+0x148>)
 8005640:	4013      	ands	r3, r2
 8005642:	0019      	movs	r1, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	2204      	movs	r2, #4
 8005656:	4013      	ands	r3, r2
 8005658:	d00b      	beq.n	8005672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	4a3b      	ldr	r2, [pc, #236]	; (8005750 <UART_AdvFeatureConfig+0x14c>)
 8005662:	4013      	ands	r3, r2
 8005664:	0019      	movs	r1, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	2208      	movs	r2, #8
 8005678:	4013      	ands	r3, r2
 800567a:	d00b      	beq.n	8005694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4a34      	ldr	r2, [pc, #208]	; (8005754 <UART_AdvFeatureConfig+0x150>)
 8005684:	4013      	ands	r3, r2
 8005686:	0019      	movs	r1, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	2210      	movs	r2, #16
 800569a:	4013      	ands	r3, r2
 800569c:	d00b      	beq.n	80056b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	4a2c      	ldr	r2, [pc, #176]	; (8005758 <UART_AdvFeatureConfig+0x154>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	0019      	movs	r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	2220      	movs	r2, #32
 80056bc:	4013      	ands	r3, r2
 80056be:	d00b      	beq.n	80056d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	4a25      	ldr	r2, [pc, #148]	; (800575c <UART_AdvFeatureConfig+0x158>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	0019      	movs	r1, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	2240      	movs	r2, #64	; 0x40
 80056de:	4013      	ands	r3, r2
 80056e0:	d01d      	beq.n	800571e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <UART_AdvFeatureConfig+0x15c>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	0019      	movs	r1, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	035b      	lsls	r3, r3, #13
 8005702:	429a      	cmp	r2, r3
 8005704:	d10b      	bne.n	800571e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4a15      	ldr	r2, [pc, #84]	; (8005764 <UART_AdvFeatureConfig+0x160>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	4013      	ands	r3, r2
 8005726:	d00b      	beq.n	8005740 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4a0e      	ldr	r2, [pc, #56]	; (8005768 <UART_AdvFeatureConfig+0x164>)
 8005730:	4013      	ands	r3, r2
 8005732:	0019      	movs	r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }
}
 8005740:	46c0      	nop			; (mov r8, r8)
 8005742:	46bd      	mov	sp, r7
 8005744:	b002      	add	sp, #8
 8005746:	bd80      	pop	{r7, pc}
 8005748:	fffdffff 	.word	0xfffdffff
 800574c:	fffeffff 	.word	0xfffeffff
 8005750:	fffbffff 	.word	0xfffbffff
 8005754:	ffff7fff 	.word	0xffff7fff
 8005758:	ffffefff 	.word	0xffffefff
 800575c:	ffffdfff 	.word	0xffffdfff
 8005760:	ffefffff 	.word	0xffefffff
 8005764:	ff9fffff 	.word	0xff9fffff
 8005768:	fff7ffff 	.word	0xfff7ffff

0800576c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af02      	add	r7, sp, #8
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	228c      	movs	r2, #140	; 0x8c
 8005778:	2100      	movs	r1, #0
 800577a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800577c:	f7fc fd3c 	bl	80021f8 <HAL_GetTick>
 8005780:	0003      	movs	r3, r0
 8005782:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2208      	movs	r2, #8
 800578c:	4013      	ands	r3, r2
 800578e:	2b08      	cmp	r3, #8
 8005790:	d10c      	bne.n	80057ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2280      	movs	r2, #128	; 0x80
 8005796:	0391      	lsls	r1, r2, #14
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4a18      	ldr	r2, [pc, #96]	; (80057fc <UART_CheckIdleState+0x90>)
 800579c:	9200      	str	r2, [sp, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	f000 f82e 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 80057a4:	1e03      	subs	r3, r0, #0
 80057a6:	d001      	beq.n	80057ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e023      	b.n	80057f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2204      	movs	r2, #4
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d10c      	bne.n	80057d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2280      	movs	r2, #128	; 0x80
 80057be:	03d1      	lsls	r1, r2, #15
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	4a0e      	ldr	r2, [pc, #56]	; (80057fc <UART_CheckIdleState+0x90>)
 80057c4:	9200      	str	r2, [sp, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f000 f81a 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 80057cc:	1e03      	subs	r3, r0, #0
 80057ce:	d001      	beq.n	80057d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e00f      	b.n	80057f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2284      	movs	r2, #132	; 0x84
 80057d8:	2120      	movs	r1, #32
 80057da:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2288      	movs	r2, #136	; 0x88
 80057e0:	2120      	movs	r1, #32
 80057e2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	2100      	movs	r1, #0
 80057f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	0018      	movs	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b004      	add	sp, #16
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	01ffffff 	.word	0x01ffffff

08005800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b094      	sub	sp, #80	; 0x50
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	1dfb      	adds	r3, r7, #7
 800580e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005810:	e0a7      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005814:	3301      	adds	r3, #1
 8005816:	d100      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005818:	e0a3      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581a:	f7fc fced 	bl	80021f8 <HAL_GetTick>
 800581e:	0002      	movs	r2, r0
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005826:	429a      	cmp	r2, r3
 8005828:	d302      	bcc.n	8005830 <UART_WaitOnFlagUntilTimeout+0x30>
 800582a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800582c:	2b00      	cmp	r3, #0
 800582e:	d13f      	bne.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005830:	f3ef 8310 	mrs	r3, PRIMASK
 8005834:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
 800583a:	2301      	movs	r3, #1
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	494e      	ldr	r1, [pc, #312]	; (800598c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005852:	400a      	ands	r2, r1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	f383 8810 	msr	PRIMASK, r3
}
 8005860:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005862:	f3ef 8310 	mrs	r3, PRIMASK
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586a:	643b      	str	r3, [r7, #64]	; 0x40
 800586c:	2301      	movs	r3, #1
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	f383 8810 	msr	PRIMASK, r3
}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2101      	movs	r1, #1
 8005884:	438a      	bics	r2, r1
 8005886:	609a      	str	r2, [r3, #8]
 8005888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588e:	f383 8810 	msr	PRIMASK, r3
}
 8005892:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2284      	movs	r2, #132	; 0x84
 8005898:	2120      	movs	r1, #32
 800589a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2288      	movs	r2, #136	; 0x88
 80058a0:	2120      	movs	r1, #32
 80058a2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2280      	movs	r2, #128	; 0x80
 80058a8:	2100      	movs	r1, #0
 80058aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e069      	b.n	8005984 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2204      	movs	r2, #4
 80058b8:	4013      	ands	r3, r2
 80058ba:	d052      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69da      	ldr	r2, [r3, #28]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	401a      	ands	r2, r3
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d148      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2280      	movs	r2, #128	; 0x80
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058da:	f3ef 8310 	mrs	r3, PRIMASK
 80058de:	613b      	str	r3, [r7, #16]
  return(result);
 80058e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e4:	2301      	movs	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f383 8810 	msr	PRIMASK, r3
}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4924      	ldr	r1, [pc, #144]	; (800598c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80058fc:	400a      	ands	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005902:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f383 8810 	msr	PRIMASK, r3
}
 800590a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590c:	f3ef 8310 	mrs	r3, PRIMASK
 8005910:	61fb      	str	r3, [r7, #28]
  return(result);
 8005912:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005914:	64bb      	str	r3, [r7, #72]	; 0x48
 8005916:	2301      	movs	r3, #1
 8005918:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f383 8810 	msr	PRIMASK, r3
}
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2101      	movs	r1, #1
 800592e:	438a      	bics	r2, r1
 8005930:	609a      	str	r2, [r3, #8]
 8005932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	f383 8810 	msr	PRIMASK, r3
}
 800593c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2284      	movs	r2, #132	; 0x84
 8005942:	2120      	movs	r1, #32
 8005944:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2288      	movs	r2, #136	; 0x88
 800594a:	2120      	movs	r1, #32
 800594c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	228c      	movs	r2, #140	; 0x8c
 8005952:	2120      	movs	r1, #32
 8005954:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	2100      	movs	r1, #0
 800595c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e010      	b.n	8005984 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	425a      	negs	r2, r3
 8005972:	4153      	adcs	r3, r2
 8005974:	b2db      	uxtb	r3, r3
 8005976:	001a      	movs	r2, r3
 8005978:	1dfb      	adds	r3, r7, #7
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d100      	bne.n	8005982 <UART_WaitOnFlagUntilTimeout+0x182>
 8005980:	e747      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	b014      	add	sp, #80	; 0x50
 800598a:	bd80      	pop	{r7, pc}
 800598c:	fffffe5f 	.word	0xfffffe5f

08005990 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b098      	sub	sp, #96	; 0x60
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	1dbb      	adds	r3, r7, #6
 800599c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1dba      	adds	r2, r7, #6
 80059a8:	215c      	movs	r1, #92	; 0x5c
 80059aa:	8812      	ldrh	r2, [r2, #0]
 80059ac:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1dba      	adds	r2, r7, #6
 80059b2:	215e      	movs	r1, #94	; 0x5e
 80059b4:	8812      	ldrh	r2, [r2, #0]
 80059b6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	2380      	movs	r3, #128	; 0x80
 80059c4:	015b      	lsls	r3, r3, #5
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d10d      	bne.n	80059e6 <UART_Start_Receive_IT+0x56>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <UART_Start_Receive_IT+0x4c>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2260      	movs	r2, #96	; 0x60
 80059d6:	497f      	ldr	r1, [pc, #508]	; (8005bd4 <UART_Start_Receive_IT+0x244>)
 80059d8:	5299      	strh	r1, [r3, r2]
 80059da:	e02e      	b.n	8005a3a <UART_Start_Receive_IT+0xaa>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2260      	movs	r2, #96	; 0x60
 80059e0:	21ff      	movs	r1, #255	; 0xff
 80059e2:	5299      	strh	r1, [r3, r2]
 80059e4:	e029      	b.n	8005a3a <UART_Start_Receive_IT+0xaa>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10d      	bne.n	8005a0a <UART_Start_Receive_IT+0x7a>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <UART_Start_Receive_IT+0x70>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2260      	movs	r2, #96	; 0x60
 80059fa:	21ff      	movs	r1, #255	; 0xff
 80059fc:	5299      	strh	r1, [r3, r2]
 80059fe:	e01c      	b.n	8005a3a <UART_Start_Receive_IT+0xaa>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2260      	movs	r2, #96	; 0x60
 8005a04:	217f      	movs	r1, #127	; 0x7f
 8005a06:	5299      	strh	r1, [r3, r2]
 8005a08:	e017      	b.n	8005a3a <UART_Start_Receive_IT+0xaa>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	055b      	lsls	r3, r3, #21
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d10d      	bne.n	8005a32 <UART_Start_Receive_IT+0xa2>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <UART_Start_Receive_IT+0x98>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2260      	movs	r2, #96	; 0x60
 8005a22:	217f      	movs	r1, #127	; 0x7f
 8005a24:	5299      	strh	r1, [r3, r2]
 8005a26:	e008      	b.n	8005a3a <UART_Start_Receive_IT+0xaa>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2260      	movs	r2, #96	; 0x60
 8005a2c:	213f      	movs	r1, #63	; 0x3f
 8005a2e:	5299      	strh	r1, [r3, r2]
 8005a30:	e003      	b.n	8005a3a <UART_Start_Receive_IT+0xaa>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2260      	movs	r2, #96	; 0x60
 8005a36:	2100      	movs	r1, #0
 8005a38:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	228c      	movs	r2, #140	; 0x8c
 8005a3e:	2100      	movs	r1, #0
 8005a40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2288      	movs	r2, #136	; 0x88
 8005a46:	2122      	movs	r1, #34	; 0x22
 8005a48:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a54:	2301      	movs	r3, #1
 8005a56:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5a:	f383 8810 	msr	PRIMASK, r3
}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a72:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a76:	f383 8810 	msr	PRIMASK, r3
}
 8005a7a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	059b      	lsls	r3, r3, #22
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d154      	bne.n	8005b32 <UART_Start_Receive_IT+0x1a2>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2268      	movs	r2, #104	; 0x68
 8005a8c:	5a9b      	ldrh	r3, [r3, r2]
 8005a8e:	1dba      	adds	r2, r7, #6
 8005a90:	8812      	ldrh	r2, [r2, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d34d      	bcc.n	8005b32 <UART_Start_Receive_IT+0x1a2>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	015b      	lsls	r3, r3, #5
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d107      	bne.n	8005ab2 <UART_Start_Receive_IT+0x122>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a4a      	ldr	r2, [pc, #296]	; (8005bd8 <UART_Start_Receive_IT+0x248>)
 8005aae:	671a      	str	r2, [r3, #112]	; 0x70
 8005ab0:	e002      	b.n	8005ab8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a49      	ldr	r2, [pc, #292]	; (8005bdc <UART_Start_Receive_IT+0x24c>)
 8005ab6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2280      	movs	r2, #128	; 0x80
 8005abc:	2100      	movs	r1, #0
 8005abe:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d019      	beq.n	8005afc <UART_Start_Receive_IT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	f383 8810 	msr	PRIMASK, r3
}
 8005adc:	46c0      	nop			; (mov r8, r8)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2180      	movs	r1, #128	; 0x80
 8005aea:	0049      	lsls	r1, r1, #1
 8005aec:	430a      	orrs	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af6:	f383 8810 	msr	PRIMASK, r3
}
 8005afa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afc:	f3ef 8310 	mrs	r3, PRIMASK
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b04:	657b      	str	r3, [r7, #84]	; 0x54
 8005b06:	2301      	movs	r3, #1
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	f383 8810 	msr	PRIMASK, r3
}
 8005b10:	46c0      	nop			; (mov r8, r8)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2180      	movs	r1, #128	; 0x80
 8005b1e:	0549      	lsls	r1, r1, #21
 8005b20:	430a      	orrs	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	f383 8810 	msr	PRIMASK, r3
}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	e04b      	b.n	8005bca <UART_Start_Receive_IT+0x23a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	2380      	movs	r3, #128	; 0x80
 8005b38:	015b      	lsls	r3, r3, #5
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d107      	bne.n	8005b4e <UART_Start_Receive_IT+0x1be>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <UART_Start_Receive_IT+0x1be>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a25      	ldr	r2, [pc, #148]	; (8005be0 <UART_Start_Receive_IT+0x250>)
 8005b4a:	671a      	str	r2, [r3, #112]	; 0x70
 8005b4c:	e002      	b.n	8005b54 <UART_Start_Receive_IT+0x1c4>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a24      	ldr	r2, [pc, #144]	; (8005be4 <UART_Start_Receive_IT+0x254>)
 8005b52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	2100      	movs	r1, #0
 8005b5a:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d019      	beq.n	8005b98 <UART_Start_Receive_IT+0x208>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b64:	f3ef 8310 	mrs	r3, PRIMASK
 8005b68:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b6a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b6e:	2301      	movs	r3, #1
 8005b70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f383 8810 	msr	PRIMASK, r3
}
 8005b78:	46c0      	nop			; (mov r8, r8)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2190      	movs	r1, #144	; 0x90
 8005b86:	0049      	lsls	r1, r1, #1
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	f383 8810 	msr	PRIMASK, r3
}
 8005b96:	e018      	b.n	8005bca <UART_Start_Receive_IT+0x23a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b98:	f3ef 8310 	mrs	r3, PRIMASK
 8005b9c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b9e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ba0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f383 8810 	msr	PRIMASK, r3
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2120      	movs	r1, #32
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f383 8810 	msr	PRIMASK, r3
}
 8005bc8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b018      	add	sp, #96	; 0x60
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	000001ff 	.word	0x000001ff
 8005bd8:	080062f9 	.word	0x080062f9
 8005bdc:	08006015 	.word	0x08006015
 8005be0:	08005ea9 	.word	0x08005ea9
 8005be4:	08005d3d 	.word	0x08005d3d

08005be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08e      	sub	sp, #56	; 0x38
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8005bf6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f383 8810 	msr	PRIMASK, r3
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4926      	ldr	r1, [pc, #152]	; (8005cac <UART_EndRxTransfer+0xc4>)
 8005c12:	400a      	ands	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f383 8810 	msr	PRIMASK, r3
}
 8005c20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c22:	f3ef 8310 	mrs	r3, PRIMASK
 8005c26:	623b      	str	r3, [r7, #32]
  return(result);
 8005c28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	f383 8810 	msr	PRIMASK, r3
}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	491b      	ldr	r1, [pc, #108]	; (8005cb0 <UART_EndRxTransfer+0xc8>)
 8005c44:	400a      	ands	r2, r1
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	f383 8810 	msr	PRIMASK, r3
}
 8005c52:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d118      	bne.n	8005c8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c66:	2301      	movs	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f383 8810 	msr	PRIMASK, r3
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2110      	movs	r1, #16
 8005c7e:	438a      	bics	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f383 8810 	msr	PRIMASK, r3
}
 8005c8c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2288      	movs	r2, #136	; 0x88
 8005c92:	2120      	movs	r1, #32
 8005c94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	b00e      	add	sp, #56	; 0x38
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	fffffedf 	.word	0xfffffedf
 8005cb0:	effffffe 	.word	0xeffffffe

08005cb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	225e      	movs	r2, #94	; 0x5e
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2256      	movs	r2, #86	; 0x56
 8005cce:	2100      	movs	r1, #0
 8005cd0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f7ff f92b 	bl	8004f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b004      	add	sp, #16
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cea:	f3ef 8310 	mrs	r3, PRIMASK
 8005cee:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f383 8810 	msr	PRIMASK, r3
}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2140      	movs	r1, #64	; 0x40
 8005d0c:	438a      	bics	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f383 8810 	msr	PRIMASK, r3
}
 8005d1a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2284      	movs	r2, #132	; 0x84
 8005d20:	2120      	movs	r1, #32
 8005d22:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f7ff f8f7 	bl	8004f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b006      	add	sp, #24
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b090      	sub	sp, #64	; 0x40
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d44:	203e      	movs	r0, #62	; 0x3e
 8005d46:	183b      	adds	r3, r7, r0
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	2160      	movs	r1, #96	; 0x60
 8005d4c:	5a52      	ldrh	r2, [r2, r1]
 8005d4e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2288      	movs	r2, #136	; 0x88
 8005d54:	589b      	ldr	r3, [r3, r2]
 8005d56:	2b22      	cmp	r3, #34	; 0x22
 8005d58:	d000      	beq.n	8005d5c <UART_RxISR_8BIT+0x20>
 8005d5a:	e097      	b.n	8005e8c <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d62:	213c      	movs	r1, #60	; 0x3c
 8005d64:	187b      	adds	r3, r7, r1
 8005d66:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d68:	187b      	adds	r3, r7, r1
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	183b      	adds	r3, r7, r0
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b2d9      	uxtb	r1, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d78:	400a      	ands	r2, r1
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	225e      	movs	r2, #94	; 0x5e
 8005d8c:	5a9b      	ldrh	r3, [r3, r2]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b299      	uxth	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	225e      	movs	r2, #94	; 0x5e
 8005d98:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	225e      	movs	r2, #94	; 0x5e
 8005d9e:	5a9b      	ldrh	r3, [r3, r2]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d000      	beq.n	8005da8 <UART_RxISR_8BIT+0x6c>
 8005da6:	e079      	b.n	8005e9c <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dac:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dae:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db2:	2301      	movs	r3, #1
 8005db4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4936      	ldr	r1, [pc, #216]	; (8005ea4 <UART_RxISR_8BIT+0x168>)
 8005dca:	400a      	ands	r2, r1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	f383 8810 	msr	PRIMASK, r3
}
 8005dd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dda:	f3ef 8310 	mrs	r3, PRIMASK
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	637b      	str	r3, [r7, #52]	; 0x34
 8005de4:	2301      	movs	r3, #1
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	f383 8810 	msr	PRIMASK, r3
}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	438a      	bics	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	f383 8810 	msr	PRIMASK, r3
}
 8005e0a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2288      	movs	r2, #136	; 0x88
 8005e10:	2120      	movs	r1, #32
 8005e12:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d12f      	bne.n	8005e82 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e28:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e2e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e30:	633b      	str	r3, [r7, #48]	; 0x30
 8005e32:	2301      	movs	r3, #1
 8005e34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f383 8810 	msr	PRIMASK, r3
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2110      	movs	r1, #16
 8005e4a:	438a      	bics	r2, r1
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f383 8810 	msr	PRIMASK, r3
}
 8005e58:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	2210      	movs	r2, #16
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d103      	bne.n	8005e70 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	225c      	movs	r2, #92	; 0x5c
 8005e74:	5a9a      	ldrh	r2, [r3, r2]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	0011      	movs	r1, r2
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f7ff f860 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e80:	e00c      	b.n	8005e9c <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	0018      	movs	r0, r3
 8005e86:	f7fb ff7d 	bl	8001d84 <HAL_UART_RxCpltCallback>
}
 8005e8a:	e007      	b.n	8005e9c <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2108      	movs	r1, #8
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	619a      	str	r2, [r3, #24]
}
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b010      	add	sp, #64	; 0x40
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	fffffedf 	.word	0xfffffedf

08005ea8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b090      	sub	sp, #64	; 0x40
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005eb0:	203e      	movs	r0, #62	; 0x3e
 8005eb2:	183b      	adds	r3, r7, r0
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	2160      	movs	r1, #96	; 0x60
 8005eb8:	5a52      	ldrh	r2, [r2, r1]
 8005eba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2288      	movs	r2, #136	; 0x88
 8005ec0:	589b      	ldr	r3, [r3, r2]
 8005ec2:	2b22      	cmp	r3, #34	; 0x22
 8005ec4:	d000      	beq.n	8005ec8 <UART_RxISR_16BIT+0x20>
 8005ec6:	e097      	b.n	8005ff8 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ece:	213c      	movs	r1, #60	; 0x3c
 8005ed0:	187b      	adds	r3, r7, r1
 8005ed2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	183a      	adds	r2, r7, r0
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	8812      	ldrh	r2, [r2, #0]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	1c9a      	adds	r2, r3, #2
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	225e      	movs	r2, #94	; 0x5e
 8005ef8:	5a9b      	ldrh	r3, [r3, r2]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b299      	uxth	r1, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	225e      	movs	r2, #94	; 0x5e
 8005f04:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	225e      	movs	r2, #94	; 0x5e
 8005f0a:	5a9b      	ldrh	r3, [r3, r2]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d000      	beq.n	8005f14 <UART_RxISR_16BIT+0x6c>
 8005f12:	e079      	b.n	8006008 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f14:	f3ef 8310 	mrs	r3, PRIMASK
 8005f18:	617b      	str	r3, [r7, #20]
  return(result);
 8005f1a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1e:	2301      	movs	r3, #1
 8005f20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	f383 8810 	msr	PRIMASK, r3
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4936      	ldr	r1, [pc, #216]	; (8006010 <UART_RxISR_16BIT+0x168>)
 8005f36:	400a      	ands	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f383 8810 	msr	PRIMASK, r3
}
 8005f44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f46:	f3ef 8310 	mrs	r3, PRIMASK
 8005f4a:	623b      	str	r3, [r7, #32]
  return(result);
 8005f4c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f50:	2301      	movs	r3, #1
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	f383 8810 	msr	PRIMASK, r3
}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2101      	movs	r1, #1
 8005f68:	438a      	bics	r2, r1
 8005f6a:	609a      	str	r2, [r3, #8]
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	f383 8810 	msr	PRIMASK, r3
}
 8005f76:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2288      	movs	r2, #136	; 0x88
 8005f7c:	2120      	movs	r1, #32
 8005f7e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d12f      	bne.n	8005fee <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f94:	f3ef 8310 	mrs	r3, PRIMASK
 8005f98:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f9a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f383 8810 	msr	PRIMASK, r3
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2110      	movs	r1, #16
 8005fb6:	438a      	bics	r2, r1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f383 8810 	msr	PRIMASK, r3
}
 8005fc4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	2210      	movs	r2, #16
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d103      	bne.n	8005fdc <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2210      	movs	r2, #16
 8005fda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	225c      	movs	r2, #92	; 0x5c
 8005fe0:	5a9a      	ldrh	r2, [r3, r2]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	0011      	movs	r1, r2
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f7fe ffaa 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fec:	e00c      	b.n	8006008 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f7fb fec7 	bl	8001d84 <HAL_UART_RxCpltCallback>
}
 8005ff6:	e007      	b.n	8006008 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2108      	movs	r1, #8
 8006004:	430a      	orrs	r2, r1
 8006006:	619a      	str	r2, [r3, #24]
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b010      	add	sp, #64	; 0x40
 800600e:	bd80      	pop	{r7, pc}
 8006010:	fffffedf 	.word	0xfffffedf

08006014 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b09c      	sub	sp, #112	; 0x70
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800601c:	236a      	movs	r3, #106	; 0x6a
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	2160      	movs	r1, #96	; 0x60
 8006024:	5a52      	ldrh	r2, [r2, r1]
 8006026:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2288      	movs	r2, #136	; 0x88
 8006044:	589b      	ldr	r3, [r3, r2]
 8006046:	2b22      	cmp	r3, #34	; 0x22
 8006048:	d000      	beq.n	800604c <UART_RxISR_8BIT_FIFOEN+0x38>
 800604a:	e141      	b.n	80062d0 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800604c:	235e      	movs	r3, #94	; 0x5e
 800604e:	18fb      	adds	r3, r7, r3
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	2168      	movs	r1, #104	; 0x68
 8006054:	5a52      	ldrh	r2, [r2, r1]
 8006056:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006058:	e0e8      	b.n	800622c <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006060:	215c      	movs	r1, #92	; 0x5c
 8006062:	187b      	adds	r3, r7, r1
 8006064:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006066:	187b      	adds	r3, r7, r1
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	236a      	movs	r3, #106	; 0x6a
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b2d9      	uxtb	r1, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	400a      	ands	r2, r1
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	225e      	movs	r2, #94	; 0x5e
 800608c:	5a9b      	ldrh	r3, [r3, r2]
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b299      	uxth	r1, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	225e      	movs	r2, #94	; 0x5e
 8006098:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80060a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a4:	2207      	movs	r2, #7
 80060a6:	4013      	ands	r3, r2
 80060a8:	d049      	beq.n	800613e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ac:	2201      	movs	r2, #1
 80060ae:	4013      	ands	r3, r2
 80060b0:	d010      	beq.n	80060d4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80060b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	4013      	ands	r3, r2
 80060ba:	d00b      	beq.n	80060d4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	228c      	movs	r2, #140	; 0x8c
 80060c8:	589b      	ldr	r3, [r3, r2]
 80060ca:	2201      	movs	r2, #1
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	218c      	movs	r1, #140	; 0x8c
 80060d2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d6:	2202      	movs	r2, #2
 80060d8:	4013      	ands	r3, r2
 80060da:	d00f      	beq.n	80060fc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80060dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060de:	2201      	movs	r2, #1
 80060e0:	4013      	ands	r3, r2
 80060e2:	d00b      	beq.n	80060fc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2202      	movs	r2, #2
 80060ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	228c      	movs	r2, #140	; 0x8c
 80060f0:	589b      	ldr	r3, [r3, r2]
 80060f2:	2204      	movs	r2, #4
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	218c      	movs	r1, #140	; 0x8c
 80060fa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fe:	2204      	movs	r2, #4
 8006100:	4013      	ands	r3, r2
 8006102:	d00f      	beq.n	8006124 <UART_RxISR_8BIT_FIFOEN+0x110>
 8006104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006106:	2201      	movs	r2, #1
 8006108:	4013      	ands	r3, r2
 800610a:	d00b      	beq.n	8006124 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2204      	movs	r2, #4
 8006112:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	228c      	movs	r2, #140	; 0x8c
 8006118:	589b      	ldr	r3, [r3, r2]
 800611a:	2202      	movs	r2, #2
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	218c      	movs	r1, #140	; 0x8c
 8006122:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	228c      	movs	r2, #140	; 0x8c
 8006128:	589b      	ldr	r3, [r3, r2]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	0018      	movs	r0, r3
 8006132:	f7fe fefd 	bl	8004f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	228c      	movs	r2, #140	; 0x8c
 800613a:	2100      	movs	r1, #0
 800613c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	225e      	movs	r2, #94	; 0x5e
 8006142:	5a9b      	ldrh	r3, [r3, r2]
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d170      	bne.n	800622c <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614a:	f3ef 8310 	mrs	r3, PRIMASK
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006152:	65bb      	str	r3, [r7, #88]	; 0x58
 8006154:	2301      	movs	r3, #1
 8006156:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	f383 8810 	msr	PRIMASK, r3
}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	495f      	ldr	r1, [pc, #380]	; (80062e8 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 800616c:	400a      	ands	r2, r1
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	f383 8810 	msr	PRIMASK, r3
}
 800617a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617c:	f3ef 8310 	mrs	r3, PRIMASK
 8006180:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006184:	657b      	str	r3, [r7, #84]	; 0x54
 8006186:	2301      	movs	r3, #1
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618c:	f383 8810 	msr	PRIMASK, r3
}
 8006190:	46c0      	nop			; (mov r8, r8)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4953      	ldr	r1, [pc, #332]	; (80062ec <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800619e:	400a      	ands	r2, r1
 80061a0:	609a      	str	r2, [r3, #8]
 80061a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a8:	f383 8810 	msr	PRIMASK, r3
}
 80061ac:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2288      	movs	r2, #136	; 0x88
 80061b2:	2120      	movs	r1, #32
 80061b4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d12f      	bne.n	8006224 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ca:	f3ef 8310 	mrs	r3, PRIMASK
 80061ce:	623b      	str	r3, [r7, #32]
  return(result);
 80061d0:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d2:	653b      	str	r3, [r7, #80]	; 0x50
 80061d4:	2301      	movs	r3, #1
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	f383 8810 	msr	PRIMASK, r3
}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2110      	movs	r1, #16
 80061ec:	438a      	bics	r2, r1
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	f383 8810 	msr	PRIMASK, r3
}
 80061fa:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	2210      	movs	r2, #16
 8006204:	4013      	ands	r3, r2
 8006206:	2b10      	cmp	r3, #16
 8006208:	d103      	bne.n	8006212 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2210      	movs	r2, #16
 8006210:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	225c      	movs	r2, #92	; 0x5c
 8006216:	5a9a      	ldrh	r2, [r3, r2]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	0011      	movs	r1, r2
 800621c:	0018      	movs	r0, r3
 800621e:	f7fe fe8f 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
 8006222:	e003      	b.n	800622c <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	0018      	movs	r0, r3
 8006228:	f7fb fdac 	bl	8001d84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800622c:	235e      	movs	r3, #94	; 0x5e
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8006236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006238:	2220      	movs	r2, #32
 800623a:	4013      	ands	r3, r2
 800623c:	d000      	beq.n	8006240 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800623e:	e70c      	b.n	800605a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006240:	204e      	movs	r0, #78	; 0x4e
 8006242:	183b      	adds	r3, r7, r0
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	215e      	movs	r1, #94	; 0x5e
 8006248:	5a52      	ldrh	r2, [r2, r1]
 800624a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800624c:	0001      	movs	r1, r0
 800624e:	187b      	adds	r3, r7, r1
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d044      	beq.n	80062e0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2268      	movs	r2, #104	; 0x68
 800625a:	5a9b      	ldrh	r3, [r3, r2]
 800625c:	187a      	adds	r2, r7, r1
 800625e:	8812      	ldrh	r2, [r2, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d23d      	bcs.n	80062e0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006264:	f3ef 8310 	mrs	r3, PRIMASK
 8006268:	60bb      	str	r3, [r7, #8]
  return(result);
 800626a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800626c:	64bb      	str	r3, [r7, #72]	; 0x48
 800626e:	2301      	movs	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f383 8810 	msr	PRIMASK, r3
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	491a      	ldr	r1, [pc, #104]	; (80062f0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8006286:	400a      	ands	r2, r1
 8006288:	609a      	str	r2, [r3, #8]
 800628a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f383 8810 	msr	PRIMASK, r3
}
 8006294:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800629a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800629c:	f3ef 8310 	mrs	r3, PRIMASK
 80062a0:	617b      	str	r3, [r7, #20]
  return(result);
 80062a2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062a4:	647b      	str	r3, [r7, #68]	; 0x44
 80062a6:	2301      	movs	r3, #1
 80062a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f383 8810 	msr	PRIMASK, r3
}
 80062b0:	46c0      	nop			; (mov r8, r8)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2120      	movs	r1, #32
 80062be:	430a      	orrs	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f383 8810 	msr	PRIMASK, r3
}
 80062cc:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062ce:	e007      	b.n	80062e0 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2108      	movs	r1, #8
 80062dc:	430a      	orrs	r2, r1
 80062de:	619a      	str	r2, [r3, #24]
}
 80062e0:	46c0      	nop			; (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b01c      	add	sp, #112	; 0x70
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	fffffeff 	.word	0xfffffeff
 80062ec:	effffffe 	.word	0xeffffffe
 80062f0:	efffffff 	.word	0xefffffff
 80062f4:	08005d3d 	.word	0x08005d3d

080062f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b09e      	sub	sp, #120	; 0x78
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006300:	2372      	movs	r3, #114	; 0x72
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	2160      	movs	r1, #96	; 0x60
 8006308:	5a52      	ldrh	r2, [r2, r1]
 800630a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2288      	movs	r2, #136	; 0x88
 8006328:	589b      	ldr	r3, [r3, r2]
 800632a:	2b22      	cmp	r3, #34	; 0x22
 800632c:	d000      	beq.n	8006330 <UART_RxISR_16BIT_FIFOEN+0x38>
 800632e:	e141      	b.n	80065b4 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006330:	2366      	movs	r3, #102	; 0x66
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	2168      	movs	r1, #104	; 0x68
 8006338:	5a52      	ldrh	r2, [r2, r1]
 800633a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800633c:	e0e8      	b.n	8006510 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006344:	2164      	movs	r1, #100	; 0x64
 8006346:	187b      	adds	r3, r7, r1
 8006348:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8006350:	187b      	adds	r3, r7, r1
 8006352:	2272      	movs	r2, #114	; 0x72
 8006354:	18ba      	adds	r2, r7, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	8812      	ldrh	r2, [r2, #0]
 800635a:	4013      	ands	r3, r2
 800635c:	b29a      	uxth	r2, r3
 800635e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006366:	1c9a      	adds	r2, r3, #2
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	225e      	movs	r2, #94	; 0x5e
 8006370:	5a9b      	ldrh	r3, [r3, r2]
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b299      	uxth	r1, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	225e      	movs	r2, #94	; 0x5e
 800637c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006388:	2207      	movs	r2, #7
 800638a:	4013      	ands	r3, r2
 800638c:	d049      	beq.n	8006422 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800638e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006390:	2201      	movs	r2, #1
 8006392:	4013      	ands	r3, r2
 8006394:	d010      	beq.n	80063b8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8006396:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4013      	ands	r3, r2
 800639e:	d00b      	beq.n	80063b8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	228c      	movs	r2, #140	; 0x8c
 80063ac:	589b      	ldr	r3, [r3, r2]
 80063ae:	2201      	movs	r2, #1
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	218c      	movs	r1, #140	; 0x8c
 80063b6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ba:	2202      	movs	r2, #2
 80063bc:	4013      	ands	r3, r2
 80063be:	d00f      	beq.n	80063e0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80063c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063c2:	2201      	movs	r2, #1
 80063c4:	4013      	ands	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2202      	movs	r2, #2
 80063ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	228c      	movs	r2, #140	; 0x8c
 80063d4:	589b      	ldr	r3, [r3, r2]
 80063d6:	2204      	movs	r2, #4
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	218c      	movs	r1, #140	; 0x8c
 80063de:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e2:	2204      	movs	r2, #4
 80063e4:	4013      	ands	r3, r2
 80063e6:	d00f      	beq.n	8006408 <UART_RxISR_16BIT_FIFOEN+0x110>
 80063e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ea:	2201      	movs	r2, #1
 80063ec:	4013      	ands	r3, r2
 80063ee:	d00b      	beq.n	8006408 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2204      	movs	r2, #4
 80063f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	228c      	movs	r2, #140	; 0x8c
 80063fc:	589b      	ldr	r3, [r3, r2]
 80063fe:	2202      	movs	r2, #2
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	218c      	movs	r1, #140	; 0x8c
 8006406:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	228c      	movs	r2, #140	; 0x8c
 800640c:	589b      	ldr	r3, [r3, r2]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	0018      	movs	r0, r3
 8006416:	f7fe fd8b 	bl	8004f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	228c      	movs	r2, #140	; 0x8c
 800641e:	2100      	movs	r1, #0
 8006420:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	225e      	movs	r2, #94	; 0x5e
 8006426:	5a9b      	ldrh	r3, [r3, r2]
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d170      	bne.n	8006510 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642e:	f3ef 8310 	mrs	r3, PRIMASK
 8006432:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006438:	2301      	movs	r3, #1
 800643a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643e:	f383 8810 	msr	PRIMASK, r3
}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	495f      	ldr	r1, [pc, #380]	; (80065cc <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8006450:	400a      	ands	r2, r1
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006456:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	f383 8810 	msr	PRIMASK, r3
}
 800645e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006460:	f3ef 8310 	mrs	r3, PRIMASK
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006468:	65bb      	str	r3, [r7, #88]	; 0x58
 800646a:	2301      	movs	r3, #1
 800646c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006470:	f383 8810 	msr	PRIMASK, r3
}
 8006474:	46c0      	nop			; (mov r8, r8)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4953      	ldr	r1, [pc, #332]	; (80065d0 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8006482:	400a      	ands	r2, r1
 8006484:	609a      	str	r2, [r3, #8]
 8006486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006488:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648c:	f383 8810 	msr	PRIMASK, r3
}
 8006490:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2288      	movs	r2, #136	; 0x88
 8006496:	2120      	movs	r1, #32
 8006498:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d12f      	bne.n	8006508 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ae:	f3ef 8310 	mrs	r3, PRIMASK
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b6:	657b      	str	r3, [r7, #84]	; 0x54
 80064b8:	2301      	movs	r3, #1
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	f383 8810 	msr	PRIMASK, r3
}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2110      	movs	r1, #16
 80064d0:	438a      	bics	r2, r1
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	f383 8810 	msr	PRIMASK, r3
}
 80064de:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	2210      	movs	r2, #16
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d103      	bne.n	80064f6 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2210      	movs	r2, #16
 80064f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	225c      	movs	r2, #92	; 0x5c
 80064fa:	5a9a      	ldrh	r2, [r3, r2]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	0011      	movs	r1, r2
 8006500:	0018      	movs	r0, r3
 8006502:	f7fe fd1d 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
 8006506:	e003      	b.n	8006510 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	0018      	movs	r0, r3
 800650c:	f7fb fc3a 	bl	8001d84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006510:	2366      	movs	r3, #102	; 0x66
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800651a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800651c:	2220      	movs	r2, #32
 800651e:	4013      	ands	r3, r2
 8006520:	d000      	beq.n	8006524 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8006522:	e70c      	b.n	800633e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006524:	2052      	movs	r0, #82	; 0x52
 8006526:	183b      	adds	r3, r7, r0
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	215e      	movs	r1, #94	; 0x5e
 800652c:	5a52      	ldrh	r2, [r2, r1]
 800652e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006530:	0001      	movs	r1, r0
 8006532:	187b      	adds	r3, r7, r1
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d044      	beq.n	80065c4 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2268      	movs	r2, #104	; 0x68
 800653e:	5a9b      	ldrh	r3, [r3, r2]
 8006540:	187a      	adds	r2, r7, r1
 8006542:	8812      	ldrh	r2, [r2, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d23d      	bcs.n	80065c4 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006548:	f3ef 8310 	mrs	r3, PRIMASK
 800654c:	60fb      	str	r3, [r7, #12]
  return(result);
 800654e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006552:	2301      	movs	r3, #1
 8006554:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f383 8810 	msr	PRIMASK, r3
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	491a      	ldr	r1, [pc, #104]	; (80065d4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800656a:	400a      	ands	r2, r1
 800656c:	609a      	str	r2, [r3, #8]
 800656e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006570:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f383 8810 	msr	PRIMASK, r3
}
 8006578:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a16      	ldr	r2, [pc, #88]	; (80065d8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800657e:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006580:	f3ef 8310 	mrs	r3, PRIMASK
 8006584:	61bb      	str	r3, [r7, #24]
  return(result);
 8006586:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006588:	64bb      	str	r3, [r7, #72]	; 0x48
 800658a:	2301      	movs	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f383 8810 	msr	PRIMASK, r3
}
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2120      	movs	r1, #32
 80065a2:	430a      	orrs	r2, r1
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	f383 8810 	msr	PRIMASK, r3
}
 80065b0:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065b2:	e007      	b.n	80065c4 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2108      	movs	r1, #8
 80065c0:	430a      	orrs	r2, r1
 80065c2:	619a      	str	r2, [r3, #24]
}
 80065c4:	46c0      	nop			; (mov r8, r8)
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b01e      	add	sp, #120	; 0x78
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	fffffeff 	.word	0xfffffeff
 80065d0:	effffffe 	.word	0xeffffffe
 80065d4:	efffffff 	.word	0xefffffff
 80065d8:	08005ea9 	.word	0x08005ea9

080065dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065e4:	46c0      	nop			; (mov r8, r8)
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b002      	add	sp, #8
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80065f4:	46c0      	nop			; (mov r8, r8)
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b002      	add	sp, #8
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006604:	46c0      	nop			; (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b002      	add	sp, #8
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2280      	movs	r2, #128	; 0x80
 8006618:	5c9b      	ldrb	r3, [r3, r2]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_UARTEx_DisableFifoMode+0x16>
 800661e:	2302      	movs	r3, #2
 8006620:	e027      	b.n	8006672 <HAL_UARTEx_DisableFifoMode+0x66>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	2101      	movs	r1, #1
 8006628:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2284      	movs	r2, #132	; 0x84
 800662e:	2124      	movs	r1, #36	; 0x24
 8006630:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2101      	movs	r1, #1
 8006646:	438a      	bics	r2, r1
 8006648:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4a0b      	ldr	r2, [pc, #44]	; (800667c <HAL_UARTEx_DisableFifoMode+0x70>)
 800664e:	4013      	ands	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2284      	movs	r2, #132	; 0x84
 8006664:	2120      	movs	r1, #32
 8006666:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2280      	movs	r2, #128	; 0x80
 800666c:	2100      	movs	r1, #0
 800666e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	0018      	movs	r0, r3
 8006674:	46bd      	mov	sp, r7
 8006676:	b004      	add	sp, #16
 8006678:	bd80      	pop	{r7, pc}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	dfffffff 	.word	0xdfffffff

08006680 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2280      	movs	r2, #128	; 0x80
 800668e:	5c9b      	ldrb	r3, [r3, r2]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006694:	2302      	movs	r3, #2
 8006696:	e02e      	b.n	80066f6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	2101      	movs	r1, #1
 800669e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2284      	movs	r2, #132	; 0x84
 80066a4:	2124      	movs	r1, #36	; 0x24
 80066a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2101      	movs	r1, #1
 80066bc:	438a      	bics	r2, r1
 80066be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	08d9      	lsrs	r1, r3, #3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 f854 	bl	8006784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2284      	movs	r2, #132	; 0x84
 80066e8:	2120      	movs	r1, #32
 80066ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2280      	movs	r2, #128	; 0x80
 80066f0:	2100      	movs	r1, #0
 80066f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	0018      	movs	r0, r3
 80066f8:	46bd      	mov	sp, r7
 80066fa:	b004      	add	sp, #16
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2280      	movs	r2, #128	; 0x80
 800670e:	5c9b      	ldrb	r3, [r3, r2]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006714:	2302      	movs	r3, #2
 8006716:	e02f      	b.n	8006778 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2280      	movs	r2, #128	; 0x80
 800671c:	2101      	movs	r1, #1
 800671e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2284      	movs	r2, #132	; 0x84
 8006724:	2124      	movs	r1, #36	; 0x24
 8006726:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2101      	movs	r1, #1
 800673c:	438a      	bics	r2, r1
 800673e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	4a0e      	ldr	r2, [pc, #56]	; (8006780 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006748:	4013      	ands	r3, r2
 800674a:	0019      	movs	r1, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	0018      	movs	r0, r3
 800675a:	f000 f813 	bl	8006784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2284      	movs	r2, #132	; 0x84
 800676a:	2120      	movs	r1, #32
 800676c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2280      	movs	r2, #128	; 0x80
 8006772:	2100      	movs	r1, #0
 8006774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	0018      	movs	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	b004      	add	sp, #16
 800677e:	bd80      	pop	{r7, pc}
 8006780:	f1ffffff 	.word	0xf1ffffff

08006784 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006790:	2b00      	cmp	r3, #0
 8006792:	d108      	bne.n	80067a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	226a      	movs	r2, #106	; 0x6a
 8006798:	2101      	movs	r1, #1
 800679a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2268      	movs	r2, #104	; 0x68
 80067a0:	2101      	movs	r1, #1
 80067a2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067a4:	e043      	b.n	800682e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067a6:	260f      	movs	r6, #15
 80067a8:	19bb      	adds	r3, r7, r6
 80067aa:	2208      	movs	r2, #8
 80067ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067ae:	200e      	movs	r0, #14
 80067b0:	183b      	adds	r3, r7, r0
 80067b2:	2208      	movs	r2, #8
 80067b4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	0e5b      	lsrs	r3, r3, #25
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	240d      	movs	r4, #13
 80067c2:	193b      	adds	r3, r7, r4
 80067c4:	2107      	movs	r1, #7
 80067c6:	400a      	ands	r2, r1
 80067c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	0f5b      	lsrs	r3, r3, #29
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	250c      	movs	r5, #12
 80067d6:	197b      	adds	r3, r7, r5
 80067d8:	2107      	movs	r1, #7
 80067da:	400a      	ands	r2, r1
 80067dc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067de:	183b      	adds	r3, r7, r0
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	197a      	adds	r2, r7, r5
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	4914      	ldr	r1, [pc, #80]	; (8006838 <UARTEx_SetNbDataToProcess+0xb4>)
 80067e8:	5c8a      	ldrb	r2, [r1, r2]
 80067ea:	435a      	muls	r2, r3
 80067ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80067ee:	197b      	adds	r3, r7, r5
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	4a12      	ldr	r2, [pc, #72]	; (800683c <UARTEx_SetNbDataToProcess+0xb8>)
 80067f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067f6:	0019      	movs	r1, r3
 80067f8:	f7f9 fd20 	bl	800023c <__divsi3>
 80067fc:	0003      	movs	r3, r0
 80067fe:	b299      	uxth	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	226a      	movs	r2, #106	; 0x6a
 8006804:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006806:	19bb      	adds	r3, r7, r6
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	193a      	adds	r2, r7, r4
 800680c:	7812      	ldrb	r2, [r2, #0]
 800680e:	490a      	ldr	r1, [pc, #40]	; (8006838 <UARTEx_SetNbDataToProcess+0xb4>)
 8006810:	5c8a      	ldrb	r2, [r1, r2]
 8006812:	435a      	muls	r2, r3
 8006814:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006816:	193b      	adds	r3, r7, r4
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	4a08      	ldr	r2, [pc, #32]	; (800683c <UARTEx_SetNbDataToProcess+0xb8>)
 800681c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800681e:	0019      	movs	r1, r3
 8006820:	f7f9 fd0c 	bl	800023c <__divsi3>
 8006824:	0003      	movs	r3, r0
 8006826:	b299      	uxth	r1, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2268      	movs	r2, #104	; 0x68
 800682c:	5299      	strh	r1, [r3, r2]
}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	46bd      	mov	sp, r7
 8006832:	b005      	add	sp, #20
 8006834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	0800776c 	.word	0x0800776c
 800683c:	08007774 	.word	0x08007774

08006840 <__errno>:
 8006840:	4b01      	ldr	r3, [pc, #4]	; (8006848 <__errno+0x8>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	4770      	bx	lr
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	20000014 	.word	0x20000014

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	2600      	movs	r6, #0
 8006850:	4d0c      	ldr	r5, [pc, #48]	; (8006884 <__libc_init_array+0x38>)
 8006852:	4c0d      	ldr	r4, [pc, #52]	; (8006888 <__libc_init_array+0x3c>)
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	2600      	movs	r6, #0
 800685e:	f000 fc8b 	bl	8007178 <_init>
 8006862:	4d0a      	ldr	r5, [pc, #40]	; (800688c <__libc_init_array+0x40>)
 8006864:	4c0a      	ldr	r4, [pc, #40]	; (8006890 <__libc_init_array+0x44>)
 8006866:	1b64      	subs	r4, r4, r5
 8006868:	10a4      	asrs	r4, r4, #2
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	00b3      	lsls	r3, r6, #2
 8006872:	58eb      	ldr	r3, [r5, r3]
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	00b3      	lsls	r3, r6, #2
 800687c:	58eb      	ldr	r3, [r5, r3]
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	080077b8 	.word	0x080077b8
 8006888:	080077b8 	.word	0x080077b8
 800688c:	080077b8 	.word	0x080077b8
 8006890:	080077bc 	.word	0x080077bc

08006894 <memcpy>:
 8006894:	2300      	movs	r3, #0
 8006896:	b510      	push	{r4, lr}
 8006898:	429a      	cmp	r2, r3
 800689a:	d100      	bne.n	800689e <memcpy+0xa>
 800689c:	bd10      	pop	{r4, pc}
 800689e:	5ccc      	ldrb	r4, [r1, r3]
 80068a0:	54c4      	strb	r4, [r0, r3]
 80068a2:	3301      	adds	r3, #1
 80068a4:	e7f8      	b.n	8006898 <memcpy+0x4>

080068a6 <memset>:
 80068a6:	0003      	movs	r3, r0
 80068a8:	1882      	adds	r2, r0, r2
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d100      	bne.n	80068b0 <memset+0xa>
 80068ae:	4770      	bx	lr
 80068b0:	7019      	strb	r1, [r3, #0]
 80068b2:	3301      	adds	r3, #1
 80068b4:	e7f9      	b.n	80068aa <memset+0x4>
	...

080068b8 <siprintf>:
 80068b8:	b40e      	push	{r1, r2, r3}
 80068ba:	b500      	push	{lr}
 80068bc:	490b      	ldr	r1, [pc, #44]	; (80068ec <siprintf+0x34>)
 80068be:	b09c      	sub	sp, #112	; 0x70
 80068c0:	ab1d      	add	r3, sp, #116	; 0x74
 80068c2:	9002      	str	r0, [sp, #8]
 80068c4:	9006      	str	r0, [sp, #24]
 80068c6:	9107      	str	r1, [sp, #28]
 80068c8:	9104      	str	r1, [sp, #16]
 80068ca:	4809      	ldr	r0, [pc, #36]	; (80068f0 <siprintf+0x38>)
 80068cc:	4909      	ldr	r1, [pc, #36]	; (80068f4 <siprintf+0x3c>)
 80068ce:	cb04      	ldmia	r3!, {r2}
 80068d0:	9105      	str	r1, [sp, #20]
 80068d2:	6800      	ldr	r0, [r0, #0]
 80068d4:	a902      	add	r1, sp, #8
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	f000 f870 	bl	80069bc <_svfiprintf_r>
 80068dc:	2300      	movs	r3, #0
 80068de:	9a02      	ldr	r2, [sp, #8]
 80068e0:	7013      	strb	r3, [r2, #0]
 80068e2:	b01c      	add	sp, #112	; 0x70
 80068e4:	bc08      	pop	{r3}
 80068e6:	b003      	add	sp, #12
 80068e8:	4718      	bx	r3
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	7fffffff 	.word	0x7fffffff
 80068f0:	20000014 	.word	0x20000014
 80068f4:	ffff0208 	.word	0xffff0208

080068f8 <__ssputs_r>:
 80068f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068fa:	688e      	ldr	r6, [r1, #8]
 80068fc:	b085      	sub	sp, #20
 80068fe:	0007      	movs	r7, r0
 8006900:	000c      	movs	r4, r1
 8006902:	9203      	str	r2, [sp, #12]
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	429e      	cmp	r6, r3
 8006908:	d83c      	bhi.n	8006984 <__ssputs_r+0x8c>
 800690a:	2390      	movs	r3, #144	; 0x90
 800690c:	898a      	ldrh	r2, [r1, #12]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	421a      	tst	r2, r3
 8006912:	d034      	beq.n	800697e <__ssputs_r+0x86>
 8006914:	6909      	ldr	r1, [r1, #16]
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	6960      	ldr	r0, [r4, #20]
 800691a:	1a5b      	subs	r3, r3, r1
 800691c:	9302      	str	r3, [sp, #8]
 800691e:	2303      	movs	r3, #3
 8006920:	4343      	muls	r3, r0
 8006922:	0fdd      	lsrs	r5, r3, #31
 8006924:	18ed      	adds	r5, r5, r3
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	9802      	ldr	r0, [sp, #8]
 800692a:	3301      	adds	r3, #1
 800692c:	181b      	adds	r3, r3, r0
 800692e:	106d      	asrs	r5, r5, #1
 8006930:	42ab      	cmp	r3, r5
 8006932:	d900      	bls.n	8006936 <__ssputs_r+0x3e>
 8006934:	001d      	movs	r5, r3
 8006936:	0553      	lsls	r3, r2, #21
 8006938:	d532      	bpl.n	80069a0 <__ssputs_r+0xa8>
 800693a:	0029      	movs	r1, r5
 800693c:	0038      	movs	r0, r7
 800693e:	f000 fb49 	bl	8006fd4 <_malloc_r>
 8006942:	1e06      	subs	r6, r0, #0
 8006944:	d109      	bne.n	800695a <__ssputs_r+0x62>
 8006946:	230c      	movs	r3, #12
 8006948:	603b      	str	r3, [r7, #0]
 800694a:	2340      	movs	r3, #64	; 0x40
 800694c:	2001      	movs	r0, #1
 800694e:	89a2      	ldrh	r2, [r4, #12]
 8006950:	4240      	negs	r0, r0
 8006952:	4313      	orrs	r3, r2
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	b005      	add	sp, #20
 8006958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800695a:	9a02      	ldr	r2, [sp, #8]
 800695c:	6921      	ldr	r1, [r4, #16]
 800695e:	f7ff ff99 	bl	8006894 <memcpy>
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	4a14      	ldr	r2, [pc, #80]	; (80069b8 <__ssputs_r+0xc0>)
 8006966:	401a      	ands	r2, r3
 8006968:	2380      	movs	r3, #128	; 0x80
 800696a:	4313      	orrs	r3, r2
 800696c:	81a3      	strh	r3, [r4, #12]
 800696e:	9b02      	ldr	r3, [sp, #8]
 8006970:	6126      	str	r6, [r4, #16]
 8006972:	18f6      	adds	r6, r6, r3
 8006974:	6026      	str	r6, [r4, #0]
 8006976:	6165      	str	r5, [r4, #20]
 8006978:	9e01      	ldr	r6, [sp, #4]
 800697a:	1aed      	subs	r5, r5, r3
 800697c:	60a5      	str	r5, [r4, #8]
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	429e      	cmp	r6, r3
 8006982:	d900      	bls.n	8006986 <__ssputs_r+0x8e>
 8006984:	9e01      	ldr	r6, [sp, #4]
 8006986:	0032      	movs	r2, r6
 8006988:	9903      	ldr	r1, [sp, #12]
 800698a:	6820      	ldr	r0, [r4, #0]
 800698c:	f000 faa3 	bl	8006ed6 <memmove>
 8006990:	68a3      	ldr	r3, [r4, #8]
 8006992:	2000      	movs	r0, #0
 8006994:	1b9b      	subs	r3, r3, r6
 8006996:	60a3      	str	r3, [r4, #8]
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	199e      	adds	r6, r3, r6
 800699c:	6026      	str	r6, [r4, #0]
 800699e:	e7da      	b.n	8006956 <__ssputs_r+0x5e>
 80069a0:	002a      	movs	r2, r5
 80069a2:	0038      	movs	r0, r7
 80069a4:	f000 fb8c 	bl	80070c0 <_realloc_r>
 80069a8:	1e06      	subs	r6, r0, #0
 80069aa:	d1e0      	bne.n	800696e <__ssputs_r+0x76>
 80069ac:	0038      	movs	r0, r7
 80069ae:	6921      	ldr	r1, [r4, #16]
 80069b0:	f000 faa4 	bl	8006efc <_free_r>
 80069b4:	e7c7      	b.n	8006946 <__ssputs_r+0x4e>
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	fffffb7f 	.word	0xfffffb7f

080069bc <_svfiprintf_r>:
 80069bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069be:	b0a1      	sub	sp, #132	; 0x84
 80069c0:	9003      	str	r0, [sp, #12]
 80069c2:	001d      	movs	r5, r3
 80069c4:	898b      	ldrh	r3, [r1, #12]
 80069c6:	000f      	movs	r7, r1
 80069c8:	0016      	movs	r6, r2
 80069ca:	061b      	lsls	r3, r3, #24
 80069cc:	d511      	bpl.n	80069f2 <_svfiprintf_r+0x36>
 80069ce:	690b      	ldr	r3, [r1, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10e      	bne.n	80069f2 <_svfiprintf_r+0x36>
 80069d4:	2140      	movs	r1, #64	; 0x40
 80069d6:	f000 fafd 	bl	8006fd4 <_malloc_r>
 80069da:	6038      	str	r0, [r7, #0]
 80069dc:	6138      	str	r0, [r7, #16]
 80069de:	2800      	cmp	r0, #0
 80069e0:	d105      	bne.n	80069ee <_svfiprintf_r+0x32>
 80069e2:	230c      	movs	r3, #12
 80069e4:	9a03      	ldr	r2, [sp, #12]
 80069e6:	3801      	subs	r0, #1
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	b021      	add	sp, #132	; 0x84
 80069ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ee:	2340      	movs	r3, #64	; 0x40
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	2300      	movs	r3, #0
 80069f4:	ac08      	add	r4, sp, #32
 80069f6:	6163      	str	r3, [r4, #20]
 80069f8:	3320      	adds	r3, #32
 80069fa:	7663      	strb	r3, [r4, #25]
 80069fc:	3310      	adds	r3, #16
 80069fe:	76a3      	strb	r3, [r4, #26]
 8006a00:	9507      	str	r5, [sp, #28]
 8006a02:	0035      	movs	r5, r6
 8006a04:	782b      	ldrb	r3, [r5, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <_svfiprintf_r+0x52>
 8006a0a:	2b25      	cmp	r3, #37	; 0x25
 8006a0c:	d147      	bne.n	8006a9e <_svfiprintf_r+0xe2>
 8006a0e:	1bab      	subs	r3, r5, r6
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	42b5      	cmp	r5, r6
 8006a14:	d00c      	beq.n	8006a30 <_svfiprintf_r+0x74>
 8006a16:	0032      	movs	r2, r6
 8006a18:	0039      	movs	r1, r7
 8006a1a:	9803      	ldr	r0, [sp, #12]
 8006a1c:	f7ff ff6c 	bl	80068f8 <__ssputs_r>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d100      	bne.n	8006a26 <_svfiprintf_r+0x6a>
 8006a24:	e0ae      	b.n	8006b84 <_svfiprintf_r+0x1c8>
 8006a26:	6962      	ldr	r2, [r4, #20]
 8006a28:	9b05      	ldr	r3, [sp, #20]
 8006a2a:	4694      	mov	ip, r2
 8006a2c:	4463      	add	r3, ip
 8006a2e:	6163      	str	r3, [r4, #20]
 8006a30:	782b      	ldrb	r3, [r5, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d100      	bne.n	8006a38 <_svfiprintf_r+0x7c>
 8006a36:	e0a5      	b.n	8006b84 <_svfiprintf_r+0x1c8>
 8006a38:	2201      	movs	r2, #1
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	4252      	negs	r2, r2
 8006a3e:	6062      	str	r2, [r4, #4]
 8006a40:	a904      	add	r1, sp, #16
 8006a42:	3254      	adds	r2, #84	; 0x54
 8006a44:	1852      	adds	r2, r2, r1
 8006a46:	1c6e      	adds	r6, r5, #1
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	60e3      	str	r3, [r4, #12]
 8006a4c:	60a3      	str	r3, [r4, #8]
 8006a4e:	7013      	strb	r3, [r2, #0]
 8006a50:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a52:	2205      	movs	r2, #5
 8006a54:	7831      	ldrb	r1, [r6, #0]
 8006a56:	4854      	ldr	r0, [pc, #336]	; (8006ba8 <_svfiprintf_r+0x1ec>)
 8006a58:	f000 fa32 	bl	8006ec0 <memchr>
 8006a5c:	1c75      	adds	r5, r6, #1
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d11f      	bne.n	8006aa2 <_svfiprintf_r+0xe6>
 8006a62:	6822      	ldr	r2, [r4, #0]
 8006a64:	06d3      	lsls	r3, r2, #27
 8006a66:	d504      	bpl.n	8006a72 <_svfiprintf_r+0xb6>
 8006a68:	2353      	movs	r3, #83	; 0x53
 8006a6a:	a904      	add	r1, sp, #16
 8006a6c:	185b      	adds	r3, r3, r1
 8006a6e:	2120      	movs	r1, #32
 8006a70:	7019      	strb	r1, [r3, #0]
 8006a72:	0713      	lsls	r3, r2, #28
 8006a74:	d504      	bpl.n	8006a80 <_svfiprintf_r+0xc4>
 8006a76:	2353      	movs	r3, #83	; 0x53
 8006a78:	a904      	add	r1, sp, #16
 8006a7a:	185b      	adds	r3, r3, r1
 8006a7c:	212b      	movs	r1, #43	; 0x2b
 8006a7e:	7019      	strb	r1, [r3, #0]
 8006a80:	7833      	ldrb	r3, [r6, #0]
 8006a82:	2b2a      	cmp	r3, #42	; 0x2a
 8006a84:	d016      	beq.n	8006ab4 <_svfiprintf_r+0xf8>
 8006a86:	0035      	movs	r5, r6
 8006a88:	2100      	movs	r1, #0
 8006a8a:	200a      	movs	r0, #10
 8006a8c:	68e3      	ldr	r3, [r4, #12]
 8006a8e:	782a      	ldrb	r2, [r5, #0]
 8006a90:	1c6e      	adds	r6, r5, #1
 8006a92:	3a30      	subs	r2, #48	; 0x30
 8006a94:	2a09      	cmp	r2, #9
 8006a96:	d94e      	bls.n	8006b36 <_svfiprintf_r+0x17a>
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	d111      	bne.n	8006ac0 <_svfiprintf_r+0x104>
 8006a9c:	e017      	b.n	8006ace <_svfiprintf_r+0x112>
 8006a9e:	3501      	adds	r5, #1
 8006aa0:	e7b0      	b.n	8006a04 <_svfiprintf_r+0x48>
 8006aa2:	4b41      	ldr	r3, [pc, #260]	; (8006ba8 <_svfiprintf_r+0x1ec>)
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	1ac0      	subs	r0, r0, r3
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4083      	lsls	r3, r0
 8006aac:	4313      	orrs	r3, r2
 8006aae:	002e      	movs	r6, r5
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	e7ce      	b.n	8006a52 <_svfiprintf_r+0x96>
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	1d19      	adds	r1, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	9107      	str	r1, [sp, #28]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	db01      	blt.n	8006ac4 <_svfiprintf_r+0x108>
 8006ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ac2:	e004      	b.n	8006ace <_svfiprintf_r+0x112>
 8006ac4:	425b      	negs	r3, r3
 8006ac6:	60e3      	str	r3, [r4, #12]
 8006ac8:	2302      	movs	r3, #2
 8006aca:	4313      	orrs	r3, r2
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	782b      	ldrb	r3, [r5, #0]
 8006ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ad2:	d10a      	bne.n	8006aea <_svfiprintf_r+0x12e>
 8006ad4:	786b      	ldrb	r3, [r5, #1]
 8006ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad8:	d135      	bne.n	8006b46 <_svfiprintf_r+0x18a>
 8006ada:	9b07      	ldr	r3, [sp, #28]
 8006adc:	3502      	adds	r5, #2
 8006ade:	1d1a      	adds	r2, r3, #4
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	9207      	str	r2, [sp, #28]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	db2b      	blt.n	8006b40 <_svfiprintf_r+0x184>
 8006ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aea:	4e30      	ldr	r6, [pc, #192]	; (8006bac <_svfiprintf_r+0x1f0>)
 8006aec:	2203      	movs	r2, #3
 8006aee:	0030      	movs	r0, r6
 8006af0:	7829      	ldrb	r1, [r5, #0]
 8006af2:	f000 f9e5 	bl	8006ec0 <memchr>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d006      	beq.n	8006b08 <_svfiprintf_r+0x14c>
 8006afa:	2340      	movs	r3, #64	; 0x40
 8006afc:	1b80      	subs	r0, r0, r6
 8006afe:	4083      	lsls	r3, r0
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	3501      	adds	r5, #1
 8006b04:	4313      	orrs	r3, r2
 8006b06:	6023      	str	r3, [r4, #0]
 8006b08:	7829      	ldrb	r1, [r5, #0]
 8006b0a:	2206      	movs	r2, #6
 8006b0c:	4828      	ldr	r0, [pc, #160]	; (8006bb0 <_svfiprintf_r+0x1f4>)
 8006b0e:	1c6e      	adds	r6, r5, #1
 8006b10:	7621      	strb	r1, [r4, #24]
 8006b12:	f000 f9d5 	bl	8006ec0 <memchr>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d03c      	beq.n	8006b94 <_svfiprintf_r+0x1d8>
 8006b1a:	4b26      	ldr	r3, [pc, #152]	; (8006bb4 <_svfiprintf_r+0x1f8>)
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d125      	bne.n	8006b6c <_svfiprintf_r+0x1b0>
 8006b20:	2207      	movs	r2, #7
 8006b22:	9b07      	ldr	r3, [sp, #28]
 8006b24:	3307      	adds	r3, #7
 8006b26:	4393      	bics	r3, r2
 8006b28:	3308      	adds	r3, #8
 8006b2a:	9307      	str	r3, [sp, #28]
 8006b2c:	6963      	ldr	r3, [r4, #20]
 8006b2e:	9a04      	ldr	r2, [sp, #16]
 8006b30:	189b      	adds	r3, r3, r2
 8006b32:	6163      	str	r3, [r4, #20]
 8006b34:	e765      	b.n	8006a02 <_svfiprintf_r+0x46>
 8006b36:	4343      	muls	r3, r0
 8006b38:	0035      	movs	r5, r6
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	189b      	adds	r3, r3, r2
 8006b3e:	e7a6      	b.n	8006a8e <_svfiprintf_r+0xd2>
 8006b40:	2301      	movs	r3, #1
 8006b42:	425b      	negs	r3, r3
 8006b44:	e7d0      	b.n	8006ae8 <_svfiprintf_r+0x12c>
 8006b46:	2300      	movs	r3, #0
 8006b48:	200a      	movs	r0, #10
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	3501      	adds	r5, #1
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	7829      	ldrb	r1, [r5, #0]
 8006b52:	1c6e      	adds	r6, r5, #1
 8006b54:	3930      	subs	r1, #48	; 0x30
 8006b56:	2909      	cmp	r1, #9
 8006b58:	d903      	bls.n	8006b62 <_svfiprintf_r+0x1a6>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0c5      	beq.n	8006aea <_svfiprintf_r+0x12e>
 8006b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b60:	e7c3      	b.n	8006aea <_svfiprintf_r+0x12e>
 8006b62:	4342      	muls	r2, r0
 8006b64:	0035      	movs	r5, r6
 8006b66:	2301      	movs	r3, #1
 8006b68:	1852      	adds	r2, r2, r1
 8006b6a:	e7f1      	b.n	8006b50 <_svfiprintf_r+0x194>
 8006b6c:	ab07      	add	r3, sp, #28
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	003a      	movs	r2, r7
 8006b72:	0021      	movs	r1, r4
 8006b74:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <_svfiprintf_r+0x1fc>)
 8006b76:	9803      	ldr	r0, [sp, #12]
 8006b78:	e000      	b.n	8006b7c <_svfiprintf_r+0x1c0>
 8006b7a:	bf00      	nop
 8006b7c:	9004      	str	r0, [sp, #16]
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	3301      	adds	r3, #1
 8006b82:	d1d3      	bne.n	8006b2c <_svfiprintf_r+0x170>
 8006b84:	89bb      	ldrh	r3, [r7, #12]
 8006b86:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006b88:	065b      	lsls	r3, r3, #25
 8006b8a:	d400      	bmi.n	8006b8e <_svfiprintf_r+0x1d2>
 8006b8c:	e72d      	b.n	80069ea <_svfiprintf_r+0x2e>
 8006b8e:	2001      	movs	r0, #1
 8006b90:	4240      	negs	r0, r0
 8006b92:	e72a      	b.n	80069ea <_svfiprintf_r+0x2e>
 8006b94:	ab07      	add	r3, sp, #28
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	003a      	movs	r2, r7
 8006b9a:	0021      	movs	r1, r4
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <_svfiprintf_r+0x1fc>)
 8006b9e:	9803      	ldr	r0, [sp, #12]
 8006ba0:	f000 f87c 	bl	8006c9c <_printf_i>
 8006ba4:	e7ea      	b.n	8006b7c <_svfiprintf_r+0x1c0>
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	0800777c 	.word	0x0800777c
 8006bac:	08007782 	.word	0x08007782
 8006bb0:	08007786 	.word	0x08007786
 8006bb4:	00000000 	.word	0x00000000
 8006bb8:	080068f9 	.word	0x080068f9

08006bbc <_printf_common>:
 8006bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bbe:	0015      	movs	r5, r2
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	688a      	ldr	r2, [r1, #8]
 8006bc4:	690b      	ldr	r3, [r1, #16]
 8006bc6:	000c      	movs	r4, r1
 8006bc8:	9000      	str	r0, [sp, #0]
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	da00      	bge.n	8006bd0 <_printf_common+0x14>
 8006bce:	0013      	movs	r3, r2
 8006bd0:	0022      	movs	r2, r4
 8006bd2:	602b      	str	r3, [r5, #0]
 8006bd4:	3243      	adds	r2, #67	; 0x43
 8006bd6:	7812      	ldrb	r2, [r2, #0]
 8006bd8:	2a00      	cmp	r2, #0
 8006bda:	d001      	beq.n	8006be0 <_printf_common+0x24>
 8006bdc:	3301      	adds	r3, #1
 8006bde:	602b      	str	r3, [r5, #0]
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	069b      	lsls	r3, r3, #26
 8006be4:	d502      	bpl.n	8006bec <_printf_common+0x30>
 8006be6:	682b      	ldr	r3, [r5, #0]
 8006be8:	3302      	adds	r3, #2
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	2306      	movs	r3, #6
 8006bf0:	0017      	movs	r7, r2
 8006bf2:	401f      	ands	r7, r3
 8006bf4:	421a      	tst	r2, r3
 8006bf6:	d027      	beq.n	8006c48 <_printf_common+0x8c>
 8006bf8:	0023      	movs	r3, r4
 8006bfa:	3343      	adds	r3, #67	; 0x43
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	1e5a      	subs	r2, r3, #1
 8006c00:	4193      	sbcs	r3, r2
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	0692      	lsls	r2, r2, #26
 8006c06:	d430      	bmi.n	8006c6a <_printf_common+0xae>
 8006c08:	0022      	movs	r2, r4
 8006c0a:	9901      	ldr	r1, [sp, #4]
 8006c0c:	9800      	ldr	r0, [sp, #0]
 8006c0e:	9e08      	ldr	r6, [sp, #32]
 8006c10:	3243      	adds	r2, #67	; 0x43
 8006c12:	47b0      	blx	r6
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d025      	beq.n	8006c64 <_printf_common+0xa8>
 8006c18:	2306      	movs	r3, #6
 8006c1a:	6820      	ldr	r0, [r4, #0]
 8006c1c:	682a      	ldr	r2, [r5, #0]
 8006c1e:	68e1      	ldr	r1, [r4, #12]
 8006c20:	2500      	movs	r5, #0
 8006c22:	4003      	ands	r3, r0
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d103      	bne.n	8006c30 <_printf_common+0x74>
 8006c28:	1a8d      	subs	r5, r1, r2
 8006c2a:	43eb      	mvns	r3, r5
 8006c2c:	17db      	asrs	r3, r3, #31
 8006c2e:	401d      	ands	r5, r3
 8006c30:	68a3      	ldr	r3, [r4, #8]
 8006c32:	6922      	ldr	r2, [r4, #16]
 8006c34:	4293      	cmp	r3, r2
 8006c36:	dd01      	ble.n	8006c3c <_printf_common+0x80>
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	18ed      	adds	r5, r5, r3
 8006c3c:	2700      	movs	r7, #0
 8006c3e:	42bd      	cmp	r5, r7
 8006c40:	d120      	bne.n	8006c84 <_printf_common+0xc8>
 8006c42:	2000      	movs	r0, #0
 8006c44:	e010      	b.n	8006c68 <_printf_common+0xac>
 8006c46:	3701      	adds	r7, #1
 8006c48:	68e3      	ldr	r3, [r4, #12]
 8006c4a:	682a      	ldr	r2, [r5, #0]
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	42bb      	cmp	r3, r7
 8006c50:	ddd2      	ble.n	8006bf8 <_printf_common+0x3c>
 8006c52:	0022      	movs	r2, r4
 8006c54:	2301      	movs	r3, #1
 8006c56:	9901      	ldr	r1, [sp, #4]
 8006c58:	9800      	ldr	r0, [sp, #0]
 8006c5a:	9e08      	ldr	r6, [sp, #32]
 8006c5c:	3219      	adds	r2, #25
 8006c5e:	47b0      	blx	r6
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d1f0      	bne.n	8006c46 <_printf_common+0x8a>
 8006c64:	2001      	movs	r0, #1
 8006c66:	4240      	negs	r0, r0
 8006c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c6a:	2030      	movs	r0, #48	; 0x30
 8006c6c:	18e1      	adds	r1, r4, r3
 8006c6e:	3143      	adds	r1, #67	; 0x43
 8006c70:	7008      	strb	r0, [r1, #0]
 8006c72:	0021      	movs	r1, r4
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	3145      	adds	r1, #69	; 0x45
 8006c78:	7809      	ldrb	r1, [r1, #0]
 8006c7a:	18a2      	adds	r2, r4, r2
 8006c7c:	3243      	adds	r2, #67	; 0x43
 8006c7e:	3302      	adds	r3, #2
 8006c80:	7011      	strb	r1, [r2, #0]
 8006c82:	e7c1      	b.n	8006c08 <_printf_common+0x4c>
 8006c84:	0022      	movs	r2, r4
 8006c86:	2301      	movs	r3, #1
 8006c88:	9901      	ldr	r1, [sp, #4]
 8006c8a:	9800      	ldr	r0, [sp, #0]
 8006c8c:	9e08      	ldr	r6, [sp, #32]
 8006c8e:	321a      	adds	r2, #26
 8006c90:	47b0      	blx	r6
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d0e6      	beq.n	8006c64 <_printf_common+0xa8>
 8006c96:	3701      	adds	r7, #1
 8006c98:	e7d1      	b.n	8006c3e <_printf_common+0x82>
	...

08006c9c <_printf_i>:
 8006c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c9e:	b08b      	sub	sp, #44	; 0x2c
 8006ca0:	9206      	str	r2, [sp, #24]
 8006ca2:	000a      	movs	r2, r1
 8006ca4:	3243      	adds	r2, #67	; 0x43
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	9005      	str	r0, [sp, #20]
 8006caa:	9204      	str	r2, [sp, #16]
 8006cac:	7e0a      	ldrb	r2, [r1, #24]
 8006cae:	000c      	movs	r4, r1
 8006cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cb2:	2a78      	cmp	r2, #120	; 0x78
 8006cb4:	d807      	bhi.n	8006cc6 <_printf_i+0x2a>
 8006cb6:	2a62      	cmp	r2, #98	; 0x62
 8006cb8:	d809      	bhi.n	8006cce <_printf_i+0x32>
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	d100      	bne.n	8006cc0 <_printf_i+0x24>
 8006cbe:	e0c1      	b.n	8006e44 <_printf_i+0x1a8>
 8006cc0:	2a58      	cmp	r2, #88	; 0x58
 8006cc2:	d100      	bne.n	8006cc6 <_printf_i+0x2a>
 8006cc4:	e08c      	b.n	8006de0 <_printf_i+0x144>
 8006cc6:	0026      	movs	r6, r4
 8006cc8:	3642      	adds	r6, #66	; 0x42
 8006cca:	7032      	strb	r2, [r6, #0]
 8006ccc:	e022      	b.n	8006d14 <_printf_i+0x78>
 8006cce:	0010      	movs	r0, r2
 8006cd0:	3863      	subs	r0, #99	; 0x63
 8006cd2:	2815      	cmp	r0, #21
 8006cd4:	d8f7      	bhi.n	8006cc6 <_printf_i+0x2a>
 8006cd6:	f7f9 fa1d 	bl	8000114 <__gnu_thumb1_case_shi>
 8006cda:	0016      	.short	0x0016
 8006cdc:	fff6001f 	.word	0xfff6001f
 8006ce0:	fff6fff6 	.word	0xfff6fff6
 8006ce4:	001ffff6 	.word	0x001ffff6
 8006ce8:	fff6fff6 	.word	0xfff6fff6
 8006cec:	fff6fff6 	.word	0xfff6fff6
 8006cf0:	003600a8 	.word	0x003600a8
 8006cf4:	fff6009a 	.word	0xfff6009a
 8006cf8:	00b9fff6 	.word	0x00b9fff6
 8006cfc:	0036fff6 	.word	0x0036fff6
 8006d00:	fff6fff6 	.word	0xfff6fff6
 8006d04:	009e      	.short	0x009e
 8006d06:	0026      	movs	r6, r4
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	3642      	adds	r6, #66	; 0x42
 8006d0c:	1d11      	adds	r1, r2, #4
 8006d0e:	6019      	str	r1, [r3, #0]
 8006d10:	6813      	ldr	r3, [r2, #0]
 8006d12:	7033      	strb	r3, [r6, #0]
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0a7      	b.n	8006e68 <_printf_i+0x1cc>
 8006d18:	6808      	ldr	r0, [r1, #0]
 8006d1a:	6819      	ldr	r1, [r3, #0]
 8006d1c:	1d0a      	adds	r2, r1, #4
 8006d1e:	0605      	lsls	r5, r0, #24
 8006d20:	d50b      	bpl.n	8006d3a <_printf_i+0x9e>
 8006d22:	680d      	ldr	r5, [r1, #0]
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	da03      	bge.n	8006d32 <_printf_i+0x96>
 8006d2a:	232d      	movs	r3, #45	; 0x2d
 8006d2c:	9a04      	ldr	r2, [sp, #16]
 8006d2e:	426d      	negs	r5, r5
 8006d30:	7013      	strb	r3, [r2, #0]
 8006d32:	4b61      	ldr	r3, [pc, #388]	; (8006eb8 <_printf_i+0x21c>)
 8006d34:	270a      	movs	r7, #10
 8006d36:	9303      	str	r3, [sp, #12]
 8006d38:	e01b      	b.n	8006d72 <_printf_i+0xd6>
 8006d3a:	680d      	ldr	r5, [r1, #0]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	0641      	lsls	r1, r0, #25
 8006d40:	d5f1      	bpl.n	8006d26 <_printf_i+0x8a>
 8006d42:	b22d      	sxth	r5, r5
 8006d44:	e7ef      	b.n	8006d26 <_printf_i+0x8a>
 8006d46:	680d      	ldr	r5, [r1, #0]
 8006d48:	6819      	ldr	r1, [r3, #0]
 8006d4a:	1d08      	adds	r0, r1, #4
 8006d4c:	6018      	str	r0, [r3, #0]
 8006d4e:	062e      	lsls	r6, r5, #24
 8006d50:	d501      	bpl.n	8006d56 <_printf_i+0xba>
 8006d52:	680d      	ldr	r5, [r1, #0]
 8006d54:	e003      	b.n	8006d5e <_printf_i+0xc2>
 8006d56:	066d      	lsls	r5, r5, #25
 8006d58:	d5fb      	bpl.n	8006d52 <_printf_i+0xb6>
 8006d5a:	680d      	ldr	r5, [r1, #0]
 8006d5c:	b2ad      	uxth	r5, r5
 8006d5e:	4b56      	ldr	r3, [pc, #344]	; (8006eb8 <_printf_i+0x21c>)
 8006d60:	2708      	movs	r7, #8
 8006d62:	9303      	str	r3, [sp, #12]
 8006d64:	2a6f      	cmp	r2, #111	; 0x6f
 8006d66:	d000      	beq.n	8006d6a <_printf_i+0xce>
 8006d68:	3702      	adds	r7, #2
 8006d6a:	0023      	movs	r3, r4
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	3343      	adds	r3, #67	; 0x43
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	6863      	ldr	r3, [r4, #4]
 8006d74:	60a3      	str	r3, [r4, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	db03      	blt.n	8006d82 <_printf_i+0xe6>
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	6821      	ldr	r1, [r4, #0]
 8006d7e:	4391      	bics	r1, r2
 8006d80:	6021      	str	r1, [r4, #0]
 8006d82:	2d00      	cmp	r5, #0
 8006d84:	d102      	bne.n	8006d8c <_printf_i+0xf0>
 8006d86:	9e04      	ldr	r6, [sp, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00c      	beq.n	8006da6 <_printf_i+0x10a>
 8006d8c:	9e04      	ldr	r6, [sp, #16]
 8006d8e:	0028      	movs	r0, r5
 8006d90:	0039      	movs	r1, r7
 8006d92:	f7f9 fa4f 	bl	8000234 <__aeabi_uidivmod>
 8006d96:	9b03      	ldr	r3, [sp, #12]
 8006d98:	3e01      	subs	r6, #1
 8006d9a:	5c5b      	ldrb	r3, [r3, r1]
 8006d9c:	7033      	strb	r3, [r6, #0]
 8006d9e:	002b      	movs	r3, r5
 8006da0:	0005      	movs	r5, r0
 8006da2:	429f      	cmp	r7, r3
 8006da4:	d9f3      	bls.n	8006d8e <_printf_i+0xf2>
 8006da6:	2f08      	cmp	r7, #8
 8006da8:	d109      	bne.n	8006dbe <_printf_i+0x122>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	07db      	lsls	r3, r3, #31
 8006dae:	d506      	bpl.n	8006dbe <_printf_i+0x122>
 8006db0:	6863      	ldr	r3, [r4, #4]
 8006db2:	6922      	ldr	r2, [r4, #16]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	dc02      	bgt.n	8006dbe <_printf_i+0x122>
 8006db8:	2330      	movs	r3, #48	; 0x30
 8006dba:	3e01      	subs	r6, #1
 8006dbc:	7033      	strb	r3, [r6, #0]
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	1b9b      	subs	r3, r3, r6
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	0021      	movs	r1, r4
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	9805      	ldr	r0, [sp, #20]
 8006dcc:	9b06      	ldr	r3, [sp, #24]
 8006dce:	aa09      	add	r2, sp, #36	; 0x24
 8006dd0:	f7ff fef4 	bl	8006bbc <_printf_common>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d14c      	bne.n	8006e72 <_printf_i+0x1d6>
 8006dd8:	2001      	movs	r0, #1
 8006dda:	4240      	negs	r0, r0
 8006ddc:	b00b      	add	sp, #44	; 0x2c
 8006dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de0:	3145      	adds	r1, #69	; 0x45
 8006de2:	700a      	strb	r2, [r1, #0]
 8006de4:	4a34      	ldr	r2, [pc, #208]	; (8006eb8 <_printf_i+0x21c>)
 8006de6:	9203      	str	r2, [sp, #12]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	6821      	ldr	r1, [r4, #0]
 8006dec:	ca20      	ldmia	r2!, {r5}
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	0608      	lsls	r0, r1, #24
 8006df2:	d516      	bpl.n	8006e22 <_printf_i+0x186>
 8006df4:	07cb      	lsls	r3, r1, #31
 8006df6:	d502      	bpl.n	8006dfe <_printf_i+0x162>
 8006df8:	2320      	movs	r3, #32
 8006dfa:	4319      	orrs	r1, r3
 8006dfc:	6021      	str	r1, [r4, #0]
 8006dfe:	2710      	movs	r7, #16
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	d1b2      	bne.n	8006d6a <_printf_i+0xce>
 8006e04:	2320      	movs	r3, #32
 8006e06:	6822      	ldr	r2, [r4, #0]
 8006e08:	439a      	bics	r2, r3
 8006e0a:	6022      	str	r2, [r4, #0]
 8006e0c:	e7ad      	b.n	8006d6a <_printf_i+0xce>
 8006e0e:	2220      	movs	r2, #32
 8006e10:	6809      	ldr	r1, [r1, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	6022      	str	r2, [r4, #0]
 8006e16:	0022      	movs	r2, r4
 8006e18:	2178      	movs	r1, #120	; 0x78
 8006e1a:	3245      	adds	r2, #69	; 0x45
 8006e1c:	7011      	strb	r1, [r2, #0]
 8006e1e:	4a27      	ldr	r2, [pc, #156]	; (8006ebc <_printf_i+0x220>)
 8006e20:	e7e1      	b.n	8006de6 <_printf_i+0x14a>
 8006e22:	0648      	lsls	r0, r1, #25
 8006e24:	d5e6      	bpl.n	8006df4 <_printf_i+0x158>
 8006e26:	b2ad      	uxth	r5, r5
 8006e28:	e7e4      	b.n	8006df4 <_printf_i+0x158>
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	680d      	ldr	r5, [r1, #0]
 8006e2e:	1d10      	adds	r0, r2, #4
 8006e30:	6949      	ldr	r1, [r1, #20]
 8006e32:	6018      	str	r0, [r3, #0]
 8006e34:	6813      	ldr	r3, [r2, #0]
 8006e36:	062e      	lsls	r6, r5, #24
 8006e38:	d501      	bpl.n	8006e3e <_printf_i+0x1a2>
 8006e3a:	6019      	str	r1, [r3, #0]
 8006e3c:	e002      	b.n	8006e44 <_printf_i+0x1a8>
 8006e3e:	066d      	lsls	r5, r5, #25
 8006e40:	d5fb      	bpl.n	8006e3a <_printf_i+0x19e>
 8006e42:	8019      	strh	r1, [r3, #0]
 8006e44:	2300      	movs	r3, #0
 8006e46:	9e04      	ldr	r6, [sp, #16]
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	e7bb      	b.n	8006dc4 <_printf_i+0x128>
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	1d11      	adds	r1, r2, #4
 8006e50:	6019      	str	r1, [r3, #0]
 8006e52:	6816      	ldr	r6, [r2, #0]
 8006e54:	2100      	movs	r1, #0
 8006e56:	0030      	movs	r0, r6
 8006e58:	6862      	ldr	r2, [r4, #4]
 8006e5a:	f000 f831 	bl	8006ec0 <memchr>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d001      	beq.n	8006e66 <_printf_i+0x1ca>
 8006e62:	1b80      	subs	r0, r0, r6
 8006e64:	6060      	str	r0, [r4, #4]
 8006e66:	6863      	ldr	r3, [r4, #4]
 8006e68:	6123      	str	r3, [r4, #16]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9a04      	ldr	r2, [sp, #16]
 8006e6e:	7013      	strb	r3, [r2, #0]
 8006e70:	e7a8      	b.n	8006dc4 <_printf_i+0x128>
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	0032      	movs	r2, r6
 8006e76:	9906      	ldr	r1, [sp, #24]
 8006e78:	9805      	ldr	r0, [sp, #20]
 8006e7a:	9d07      	ldr	r5, [sp, #28]
 8006e7c:	47a8      	blx	r5
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	d0aa      	beq.n	8006dd8 <_printf_i+0x13c>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	079b      	lsls	r3, r3, #30
 8006e86:	d415      	bmi.n	8006eb4 <_printf_i+0x218>
 8006e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8a:	68e0      	ldr	r0, [r4, #12]
 8006e8c:	4298      	cmp	r0, r3
 8006e8e:	daa5      	bge.n	8006ddc <_printf_i+0x140>
 8006e90:	0018      	movs	r0, r3
 8006e92:	e7a3      	b.n	8006ddc <_printf_i+0x140>
 8006e94:	0022      	movs	r2, r4
 8006e96:	2301      	movs	r3, #1
 8006e98:	9906      	ldr	r1, [sp, #24]
 8006e9a:	9805      	ldr	r0, [sp, #20]
 8006e9c:	9e07      	ldr	r6, [sp, #28]
 8006e9e:	3219      	adds	r2, #25
 8006ea0:	47b0      	blx	r6
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	d098      	beq.n	8006dd8 <_printf_i+0x13c>
 8006ea6:	3501      	adds	r5, #1
 8006ea8:	68e3      	ldr	r3, [r4, #12]
 8006eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	42ab      	cmp	r3, r5
 8006eb0:	dcf0      	bgt.n	8006e94 <_printf_i+0x1f8>
 8006eb2:	e7e9      	b.n	8006e88 <_printf_i+0x1ec>
 8006eb4:	2500      	movs	r5, #0
 8006eb6:	e7f7      	b.n	8006ea8 <_printf_i+0x20c>
 8006eb8:	0800778d 	.word	0x0800778d
 8006ebc:	0800779e 	.word	0x0800779e

08006ec0 <memchr>:
 8006ec0:	b2c9      	uxtb	r1, r1
 8006ec2:	1882      	adds	r2, r0, r2
 8006ec4:	4290      	cmp	r0, r2
 8006ec6:	d101      	bne.n	8006ecc <memchr+0xc>
 8006ec8:	2000      	movs	r0, #0
 8006eca:	4770      	bx	lr
 8006ecc:	7803      	ldrb	r3, [r0, #0]
 8006ece:	428b      	cmp	r3, r1
 8006ed0:	d0fb      	beq.n	8006eca <memchr+0xa>
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	e7f6      	b.n	8006ec4 <memchr+0x4>

08006ed6 <memmove>:
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	4288      	cmp	r0, r1
 8006eda:	d902      	bls.n	8006ee2 <memmove+0xc>
 8006edc:	188b      	adds	r3, r1, r2
 8006ede:	4298      	cmp	r0, r3
 8006ee0:	d303      	bcc.n	8006eea <memmove+0x14>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e007      	b.n	8006ef6 <memmove+0x20>
 8006ee6:	5c8b      	ldrb	r3, [r1, r2]
 8006ee8:	5483      	strb	r3, [r0, r2]
 8006eea:	3a01      	subs	r2, #1
 8006eec:	d2fb      	bcs.n	8006ee6 <memmove+0x10>
 8006eee:	bd10      	pop	{r4, pc}
 8006ef0:	5ccc      	ldrb	r4, [r1, r3]
 8006ef2:	54c4      	strb	r4, [r0, r3]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d1fa      	bne.n	8006ef0 <memmove+0x1a>
 8006efa:	e7f8      	b.n	8006eee <memmove+0x18>

08006efc <_free_r>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	0005      	movs	r5, r0
 8006f00:	2900      	cmp	r1, #0
 8006f02:	d010      	beq.n	8006f26 <_free_r+0x2a>
 8006f04:	1f0c      	subs	r4, r1, #4
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da00      	bge.n	8006f0e <_free_r+0x12>
 8006f0c:	18e4      	adds	r4, r4, r3
 8006f0e:	0028      	movs	r0, r5
 8006f10:	f000 f918 	bl	8007144 <__malloc_lock>
 8006f14:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <_free_r+0x90>)
 8006f16:	6813      	ldr	r3, [r2, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <_free_r+0x2c>
 8006f1c:	6063      	str	r3, [r4, #4]
 8006f1e:	6014      	str	r4, [r2, #0]
 8006f20:	0028      	movs	r0, r5
 8006f22:	f000 f917 	bl	8007154 <__malloc_unlock>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	d908      	bls.n	8006f3e <_free_r+0x42>
 8006f2c:	6821      	ldr	r1, [r4, #0]
 8006f2e:	1860      	adds	r0, r4, r1
 8006f30:	4283      	cmp	r3, r0
 8006f32:	d1f3      	bne.n	8006f1c <_free_r+0x20>
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	1841      	adds	r1, r0, r1
 8006f3a:	6021      	str	r1, [r4, #0]
 8006f3c:	e7ee      	b.n	8006f1c <_free_r+0x20>
 8006f3e:	001a      	movs	r2, r3
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <_free_r+0x4e>
 8006f46:	42a3      	cmp	r3, r4
 8006f48:	d9f9      	bls.n	8006f3e <_free_r+0x42>
 8006f4a:	6811      	ldr	r1, [r2, #0]
 8006f4c:	1850      	adds	r0, r2, r1
 8006f4e:	42a0      	cmp	r0, r4
 8006f50:	d10b      	bne.n	8006f6a <_free_r+0x6e>
 8006f52:	6820      	ldr	r0, [r4, #0]
 8006f54:	1809      	adds	r1, r1, r0
 8006f56:	1850      	adds	r0, r2, r1
 8006f58:	6011      	str	r1, [r2, #0]
 8006f5a:	4283      	cmp	r3, r0
 8006f5c:	d1e0      	bne.n	8006f20 <_free_r+0x24>
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	1841      	adds	r1, r0, r1
 8006f64:	6011      	str	r1, [r2, #0]
 8006f66:	6053      	str	r3, [r2, #4]
 8006f68:	e7da      	b.n	8006f20 <_free_r+0x24>
 8006f6a:	42a0      	cmp	r0, r4
 8006f6c:	d902      	bls.n	8006f74 <_free_r+0x78>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	e7d5      	b.n	8006f20 <_free_r+0x24>
 8006f74:	6821      	ldr	r1, [r4, #0]
 8006f76:	1860      	adds	r0, r4, r1
 8006f78:	4283      	cmp	r3, r0
 8006f7a:	d103      	bne.n	8006f84 <_free_r+0x88>
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	1841      	adds	r1, r0, r1
 8006f82:	6021      	str	r1, [r4, #0]
 8006f84:	6063      	str	r3, [r4, #4]
 8006f86:	6054      	str	r4, [r2, #4]
 8006f88:	e7ca      	b.n	8006f20 <_free_r+0x24>
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	200004b8 	.word	0x200004b8

08006f90 <sbrk_aligned>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	4e0f      	ldr	r6, [pc, #60]	; (8006fd0 <sbrk_aligned+0x40>)
 8006f94:	000d      	movs	r5, r1
 8006f96:	6831      	ldr	r1, [r6, #0]
 8006f98:	0004      	movs	r4, r0
 8006f9a:	2900      	cmp	r1, #0
 8006f9c:	d102      	bne.n	8006fa4 <sbrk_aligned+0x14>
 8006f9e:	f000 f8bf 	bl	8007120 <_sbrk_r>
 8006fa2:	6030      	str	r0, [r6, #0]
 8006fa4:	0029      	movs	r1, r5
 8006fa6:	0020      	movs	r0, r4
 8006fa8:	f000 f8ba 	bl	8007120 <_sbrk_r>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d00a      	beq.n	8006fc6 <sbrk_aligned+0x36>
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	1cc5      	adds	r5, r0, #3
 8006fb4:	439d      	bics	r5, r3
 8006fb6:	42a8      	cmp	r0, r5
 8006fb8:	d007      	beq.n	8006fca <sbrk_aligned+0x3a>
 8006fba:	1a29      	subs	r1, r5, r0
 8006fbc:	0020      	movs	r0, r4
 8006fbe:	f000 f8af 	bl	8007120 <_sbrk_r>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	d101      	bne.n	8006fca <sbrk_aligned+0x3a>
 8006fc6:	2501      	movs	r5, #1
 8006fc8:	426d      	negs	r5, r5
 8006fca:	0028      	movs	r0, r5
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	200004bc 	.word	0x200004bc

08006fd4 <_malloc_r>:
 8006fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	1ccb      	adds	r3, r1, #3
 8006fda:	4393      	bics	r3, r2
 8006fdc:	3308      	adds	r3, #8
 8006fde:	0006      	movs	r6, r0
 8006fe0:	001f      	movs	r7, r3
 8006fe2:	2b0c      	cmp	r3, #12
 8006fe4:	d232      	bcs.n	800704c <_malloc_r+0x78>
 8006fe6:	270c      	movs	r7, #12
 8006fe8:	42b9      	cmp	r1, r7
 8006fea:	d831      	bhi.n	8007050 <_malloc_r+0x7c>
 8006fec:	0030      	movs	r0, r6
 8006fee:	f000 f8a9 	bl	8007144 <__malloc_lock>
 8006ff2:	4d32      	ldr	r5, [pc, #200]	; (80070bc <_malloc_r+0xe8>)
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	001c      	movs	r4, r3
 8006ff8:	2c00      	cmp	r4, #0
 8006ffa:	d12e      	bne.n	800705a <_malloc_r+0x86>
 8006ffc:	0039      	movs	r1, r7
 8006ffe:	0030      	movs	r0, r6
 8007000:	f7ff ffc6 	bl	8006f90 <sbrk_aligned>
 8007004:	0004      	movs	r4, r0
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	d11e      	bne.n	8007048 <_malloc_r+0x74>
 800700a:	682c      	ldr	r4, [r5, #0]
 800700c:	0025      	movs	r5, r4
 800700e:	2d00      	cmp	r5, #0
 8007010:	d14a      	bne.n	80070a8 <_malloc_r+0xd4>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	0029      	movs	r1, r5
 8007016:	18e3      	adds	r3, r4, r3
 8007018:	0030      	movs	r0, r6
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	f000 f880 	bl	8007120 <_sbrk_r>
 8007020:	9b01      	ldr	r3, [sp, #4]
 8007022:	4283      	cmp	r3, r0
 8007024:	d143      	bne.n	80070ae <_malloc_r+0xda>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	3703      	adds	r7, #3
 800702a:	1aff      	subs	r7, r7, r3
 800702c:	2303      	movs	r3, #3
 800702e:	439f      	bics	r7, r3
 8007030:	3708      	adds	r7, #8
 8007032:	2f0c      	cmp	r7, #12
 8007034:	d200      	bcs.n	8007038 <_malloc_r+0x64>
 8007036:	270c      	movs	r7, #12
 8007038:	0039      	movs	r1, r7
 800703a:	0030      	movs	r0, r6
 800703c:	f7ff ffa8 	bl	8006f90 <sbrk_aligned>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d034      	beq.n	80070ae <_malloc_r+0xda>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	19df      	adds	r7, r3, r7
 8007048:	6027      	str	r7, [r4, #0]
 800704a:	e013      	b.n	8007074 <_malloc_r+0xa0>
 800704c:	2b00      	cmp	r3, #0
 800704e:	dacb      	bge.n	8006fe8 <_malloc_r+0x14>
 8007050:	230c      	movs	r3, #12
 8007052:	2500      	movs	r5, #0
 8007054:	6033      	str	r3, [r6, #0]
 8007056:	0028      	movs	r0, r5
 8007058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800705a:	6822      	ldr	r2, [r4, #0]
 800705c:	1bd1      	subs	r1, r2, r7
 800705e:	d420      	bmi.n	80070a2 <_malloc_r+0xce>
 8007060:	290b      	cmp	r1, #11
 8007062:	d917      	bls.n	8007094 <_malloc_r+0xc0>
 8007064:	19e2      	adds	r2, r4, r7
 8007066:	6027      	str	r7, [r4, #0]
 8007068:	42a3      	cmp	r3, r4
 800706a:	d111      	bne.n	8007090 <_malloc_r+0xbc>
 800706c:	602a      	str	r2, [r5, #0]
 800706e:	6863      	ldr	r3, [r4, #4]
 8007070:	6011      	str	r1, [r2, #0]
 8007072:	6053      	str	r3, [r2, #4]
 8007074:	0030      	movs	r0, r6
 8007076:	0025      	movs	r5, r4
 8007078:	f000 f86c 	bl	8007154 <__malloc_unlock>
 800707c:	2207      	movs	r2, #7
 800707e:	350b      	adds	r5, #11
 8007080:	1d23      	adds	r3, r4, #4
 8007082:	4395      	bics	r5, r2
 8007084:	1aea      	subs	r2, r5, r3
 8007086:	429d      	cmp	r5, r3
 8007088:	d0e5      	beq.n	8007056 <_malloc_r+0x82>
 800708a:	1b5b      	subs	r3, r3, r5
 800708c:	50a3      	str	r3, [r4, r2]
 800708e:	e7e2      	b.n	8007056 <_malloc_r+0x82>
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	e7ec      	b.n	800706e <_malloc_r+0x9a>
 8007094:	6862      	ldr	r2, [r4, #4]
 8007096:	42a3      	cmp	r3, r4
 8007098:	d101      	bne.n	800709e <_malloc_r+0xca>
 800709a:	602a      	str	r2, [r5, #0]
 800709c:	e7ea      	b.n	8007074 <_malloc_r+0xa0>
 800709e:	605a      	str	r2, [r3, #4]
 80070a0:	e7e8      	b.n	8007074 <_malloc_r+0xa0>
 80070a2:	0023      	movs	r3, r4
 80070a4:	6864      	ldr	r4, [r4, #4]
 80070a6:	e7a7      	b.n	8006ff8 <_malloc_r+0x24>
 80070a8:	002c      	movs	r4, r5
 80070aa:	686d      	ldr	r5, [r5, #4]
 80070ac:	e7af      	b.n	800700e <_malloc_r+0x3a>
 80070ae:	230c      	movs	r3, #12
 80070b0:	0030      	movs	r0, r6
 80070b2:	6033      	str	r3, [r6, #0]
 80070b4:	f000 f84e 	bl	8007154 <__malloc_unlock>
 80070b8:	e7cd      	b.n	8007056 <_malloc_r+0x82>
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	200004b8 	.word	0x200004b8

080070c0 <_realloc_r>:
 80070c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070c2:	0007      	movs	r7, r0
 80070c4:	000e      	movs	r6, r1
 80070c6:	0014      	movs	r4, r2
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d105      	bne.n	80070d8 <_realloc_r+0x18>
 80070cc:	0011      	movs	r1, r2
 80070ce:	f7ff ff81 	bl	8006fd4 <_malloc_r>
 80070d2:	0005      	movs	r5, r0
 80070d4:	0028      	movs	r0, r5
 80070d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070d8:	2a00      	cmp	r2, #0
 80070da:	d103      	bne.n	80070e4 <_realloc_r+0x24>
 80070dc:	f7ff ff0e 	bl	8006efc <_free_r>
 80070e0:	0025      	movs	r5, r4
 80070e2:	e7f7      	b.n	80070d4 <_realloc_r+0x14>
 80070e4:	f000 f83e 	bl	8007164 <_malloc_usable_size_r>
 80070e8:	9001      	str	r0, [sp, #4]
 80070ea:	4284      	cmp	r4, r0
 80070ec:	d803      	bhi.n	80070f6 <_realloc_r+0x36>
 80070ee:	0035      	movs	r5, r6
 80070f0:	0843      	lsrs	r3, r0, #1
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	d3ee      	bcc.n	80070d4 <_realloc_r+0x14>
 80070f6:	0021      	movs	r1, r4
 80070f8:	0038      	movs	r0, r7
 80070fa:	f7ff ff6b 	bl	8006fd4 <_malloc_r>
 80070fe:	1e05      	subs	r5, r0, #0
 8007100:	d0e8      	beq.n	80070d4 <_realloc_r+0x14>
 8007102:	9b01      	ldr	r3, [sp, #4]
 8007104:	0022      	movs	r2, r4
 8007106:	429c      	cmp	r4, r3
 8007108:	d900      	bls.n	800710c <_realloc_r+0x4c>
 800710a:	001a      	movs	r2, r3
 800710c:	0031      	movs	r1, r6
 800710e:	0028      	movs	r0, r5
 8007110:	f7ff fbc0 	bl	8006894 <memcpy>
 8007114:	0031      	movs	r1, r6
 8007116:	0038      	movs	r0, r7
 8007118:	f7ff fef0 	bl	8006efc <_free_r>
 800711c:	e7da      	b.n	80070d4 <_realloc_r+0x14>
	...

08007120 <_sbrk_r>:
 8007120:	2300      	movs	r3, #0
 8007122:	b570      	push	{r4, r5, r6, lr}
 8007124:	4d06      	ldr	r5, [pc, #24]	; (8007140 <_sbrk_r+0x20>)
 8007126:	0004      	movs	r4, r0
 8007128:	0008      	movs	r0, r1
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	f7fa ff82 	bl	8002034 <_sbrk>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d103      	bne.n	800713c <_sbrk_r+0x1c>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d000      	beq.n	800713c <_sbrk_r+0x1c>
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	200004c0 	.word	0x200004c0

08007144 <__malloc_lock>:
 8007144:	b510      	push	{r4, lr}
 8007146:	4802      	ldr	r0, [pc, #8]	; (8007150 <__malloc_lock+0xc>)
 8007148:	f000 f814 	bl	8007174 <__retarget_lock_acquire_recursive>
 800714c:	bd10      	pop	{r4, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	200004c4 	.word	0x200004c4

08007154 <__malloc_unlock>:
 8007154:	b510      	push	{r4, lr}
 8007156:	4802      	ldr	r0, [pc, #8]	; (8007160 <__malloc_unlock+0xc>)
 8007158:	f000 f80d 	bl	8007176 <__retarget_lock_release_recursive>
 800715c:	bd10      	pop	{r4, pc}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	200004c4 	.word	0x200004c4

08007164 <_malloc_usable_size_r>:
 8007164:	1f0b      	subs	r3, r1, #4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	1f18      	subs	r0, r3, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	da01      	bge.n	8007172 <_malloc_usable_size_r+0xe>
 800716e:	580b      	ldr	r3, [r1, r0]
 8007170:	18c0      	adds	r0, r0, r3
 8007172:	4770      	bx	lr

08007174 <__retarget_lock_acquire_recursive>:
 8007174:	4770      	bx	lr

08007176 <__retarget_lock_release_recursive>:
 8007176:	4770      	bx	lr

08007178 <_init>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr

08007184 <_fini>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr
