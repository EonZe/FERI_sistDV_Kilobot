
kilobot_demo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000516c  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800545c  0800545c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800545c  0800545c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800545c  0800545c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005464  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000078  080054dc  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080054dc  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6a9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d84  00000000  00000000  0002c749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0002e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  0002f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ab4  00000000  00000000  0002ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e63c  00000000  00000000  00045a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f8e  00000000  00000000  00054078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000392c  00000000  00000000  000dd058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000078 	.word	0x20000078
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08005208 	.word	0x08005208

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	2000007c 	.word	0x2000007c
 80000f8:	08005208 	.word	0x08005208

080000fc <strlen>:
 80000fc:	2300      	movs	r3, #0
 80000fe:	5cc2      	ldrb	r2, [r0, r3]
 8000100:	3301      	adds	r3, #1
 8000102:	2a00      	cmp	r2, #0
 8000104:	d1fb      	bne.n	80000fe <strlen+0x2>
 8000106:	1e58      	subs	r0, r3, #1
 8000108:	4770      	bx	lr
	...

0800010c <__gnu_thumb1_case_shi>:
 800010c:	b403      	push	{r0, r1}
 800010e:	4671      	mov	r1, lr
 8000110:	0849      	lsrs	r1, r1, #1
 8000112:	0040      	lsls	r0, r0, #1
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	5e09      	ldrsh	r1, [r1, r0]
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	448e      	add	lr, r1
 800011c:	bc03      	pop	{r0, r1}
 800011e:	4770      	bx	lr

08000120 <__udivsi3>:
 8000120:	2200      	movs	r2, #0
 8000122:	0843      	lsrs	r3, r0, #1
 8000124:	428b      	cmp	r3, r1
 8000126:	d374      	bcc.n	8000212 <__udivsi3+0xf2>
 8000128:	0903      	lsrs	r3, r0, #4
 800012a:	428b      	cmp	r3, r1
 800012c:	d35f      	bcc.n	80001ee <__udivsi3+0xce>
 800012e:	0a03      	lsrs	r3, r0, #8
 8000130:	428b      	cmp	r3, r1
 8000132:	d344      	bcc.n	80001be <__udivsi3+0x9e>
 8000134:	0b03      	lsrs	r3, r0, #12
 8000136:	428b      	cmp	r3, r1
 8000138:	d328      	bcc.n	800018c <__udivsi3+0x6c>
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d30d      	bcc.n	800015c <__udivsi3+0x3c>
 8000140:	22ff      	movs	r2, #255	; 0xff
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	ba12      	rev	r2, r2
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d302      	bcc.n	8000152 <__udivsi3+0x32>
 800014c:	1212      	asrs	r2, r2, #8
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	d065      	beq.n	800021e <__udivsi3+0xfe>
 8000152:	0b03      	lsrs	r3, r0, #12
 8000154:	428b      	cmp	r3, r1
 8000156:	d319      	bcc.n	800018c <__udivsi3+0x6c>
 8000158:	e000      	b.n	800015c <__udivsi3+0x3c>
 800015a:	0a09      	lsrs	r1, r1, #8
 800015c:	0bc3      	lsrs	r3, r0, #15
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x46>
 8000162:	03cb      	lsls	r3, r1, #15
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b83      	lsrs	r3, r0, #14
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x52>
 800016e:	038b      	lsls	r3, r1, #14
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b43      	lsrs	r3, r0, #13
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x5e>
 800017a:	034b      	lsls	r3, r1, #13
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b03      	lsrs	r3, r0, #12
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x6a>
 8000186:	030b      	lsls	r3, r1, #12
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0ac3      	lsrs	r3, r0, #11
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x76>
 8000192:	02cb      	lsls	r3, r1, #11
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a83      	lsrs	r3, r0, #10
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x82>
 800019e:	028b      	lsls	r3, r1, #10
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a43      	lsrs	r3, r0, #9
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x8e>
 80001aa:	024b      	lsls	r3, r1, #9
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a03      	lsrs	r3, r0, #8
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x9a>
 80001b6:	020b      	lsls	r3, r1, #8
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	d2cd      	bcs.n	800015a <__udivsi3+0x3a>
 80001be:	09c3      	lsrs	r3, r0, #7
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xa8>
 80001c4:	01cb      	lsls	r3, r1, #7
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0983      	lsrs	r3, r0, #6
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xb4>
 80001d0:	018b      	lsls	r3, r1, #6
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0943      	lsrs	r3, r0, #5
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xc0>
 80001dc:	014b      	lsls	r3, r1, #5
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0903      	lsrs	r3, r0, #4
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xcc>
 80001e8:	010b      	lsls	r3, r1, #4
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	08c3      	lsrs	r3, r0, #3
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xd8>
 80001f4:	00cb      	lsls	r3, r1, #3
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0883      	lsrs	r3, r0, #2
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xe4>
 8000200:	008b      	lsls	r3, r1, #2
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0843      	lsrs	r3, r0, #1
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xf0>
 800020c:	004b      	lsls	r3, r1, #1
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	1a41      	subs	r1, r0, r1
 8000214:	d200      	bcs.n	8000218 <__udivsi3+0xf8>
 8000216:	4601      	mov	r1, r0
 8000218:	4152      	adcs	r2, r2
 800021a:	4610      	mov	r0, r2
 800021c:	4770      	bx	lr
 800021e:	e7ff      	b.n	8000220 <__udivsi3+0x100>
 8000220:	b501      	push	{r0, lr}
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f806 	bl	8000234 <__aeabi_idiv0>
 8000228:	bd02      	pop	{r1, pc}
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_uidivmod>:
 800022c:	2900      	cmp	r1, #0
 800022e:	d0f7      	beq.n	8000220 <__udivsi3+0x100>
 8000230:	e776      	b.n	8000120 <__udivsi3>
 8000232:	4770      	bx	lr

08000234 <__aeabi_idiv0>:
 8000234:	4770      	bx	lr
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <NRF24_DelayMicroSeconds>:
static SPI_HandleTypeDef nrf24_hspi;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <NRF24_DelayMicroSeconds+0x38>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	490a      	ldr	r1, [pc, #40]	; (8000274 <NRF24_DelayMicroSeconds+0x3c>)
 800024a:	0018      	movs	r0, r3
 800024c:	f7ff ff68 	bl	8000120 <__udivsi3>
 8000250:	0003      	movs	r3, r0
 8000252:	001a      	movs	r2, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	4353      	muls	r3, r2
 8000258:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	1e5a      	subs	r2, r3, #1
 8000260:	60fa      	str	r2, [r7, #12]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d1fa      	bne.n	800025c <NRF24_DelayMicroSeconds+0x24>
}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	b004      	add	sp, #16
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000008 	.word	0x20000008
 8000274:	002dc6c0 	.word	0x002dc6c0

08000278 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d008      	beq.n	8000298 <NRF24_csn+0x20>
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <NRF24_csn+0x38>)
 8000288:	6818      	ldr	r0, [r3, #0]
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <NRF24_csn+0x3c>)
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	2201      	movs	r2, #1
 8000290:	0019      	movs	r1, r3
 8000292:	f001 fcbd 	bl	8001c10 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000296:	e007      	b.n	80002a8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <NRF24_csn+0x38>)
 800029a:	6818      	ldr	r0, [r3, #0]
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <NRF24_csn+0x3c>)
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	2200      	movs	r2, #0
 80002a2:	0019      	movs	r1, r3
 80002a4:	f001 fcb4 	bl	8001c10 <HAL_GPIO_WritePin>
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b002      	add	sp, #8
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	200000a4 	.word	0x200000a4
 80002b4:	200000a8 	.word	0x200000a8

080002b8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d008      	beq.n	80002d8 <NRF24_ce+0x20>
 80002c6:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <NRF24_ce+0x38>)
 80002c8:	6818      	ldr	r0, [r3, #0]
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <NRF24_ce+0x3c>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	2201      	movs	r2, #1
 80002d0:	0019      	movs	r1, r3
 80002d2:	f001 fc9d 	bl	8001c10 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80002d6:	e007      	b.n	80002e8 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <NRF24_ce+0x38>)
 80002da:	6818      	ldr	r0, [r3, #0]
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <NRF24_ce+0x3c>)
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	2200      	movs	r2, #0
 80002e2:	0019      	movs	r1, r3
 80002e4:	f001 fc94 	bl	8001c10 <HAL_GPIO_WritePin>
}
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b002      	add	sp, #8
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200000a4 	.word	0x200000a4
 80002f4:	200000aa 	.word	0x200000aa

080002f8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	0002      	movs	r2, r0
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ffb7 	bl	8000278 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800030a:	1dfb      	adds	r3, r7, #7
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	221f      	movs	r2, #31
 8000310:	4013      	ands	r3, r2
 8000312:	b2da      	uxtb	r2, r3
 8000314:	240c      	movs	r4, #12
 8000316:	193b      	adds	r3, r7, r4
 8000318:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800031a:	1939      	adds	r1, r7, r4
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <NRF24_read_register+0x58>)
 800031e:	2364      	movs	r3, #100	; 0x64
 8000320:	2201      	movs	r2, #1
 8000322:	f002 fa43 	bl	80027ac <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000326:	193b      	adds	r3, r7, r4
 8000328:	1c59      	adds	r1, r3, #1
 800032a:	4809      	ldr	r0, [pc, #36]	; (8000350 <NRF24_read_register+0x58>)
 800032c:	2364      	movs	r3, #100	; 0x64
 800032e:	2201      	movs	r2, #1
 8000330:	f002 fb94 	bl	8002a5c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000334:	250f      	movs	r5, #15
 8000336:	197b      	adds	r3, r7, r5
 8000338:	193a      	adds	r2, r7, r4
 800033a:	7852      	ldrb	r2, [r2, #1]
 800033c:	701a      	strb	r2, [r3, #0]
	//Bring CSN high
	NRF24_csn(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f7ff ff9a 	bl	8000278 <NRF24_csn>
	return retData;
 8000344:	197b      	adds	r3, r7, r5
 8000346:	781b      	ldrb	r3, [r3, #0]
}
 8000348:	0018      	movs	r0, r3
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bdb0      	pop	{r4, r5, r7, pc}
 8000350:	200000ac 	.word	0x200000ac

08000354 <NRF24_write_register>:
	//Bring CSN high
	NRF24_csn(1);
}
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	0002      	movs	r2, r0
 800035c:	1dfb      	adds	r3, r7, #7
 800035e:	701a      	strb	r2, [r3, #0]
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	1c0a      	adds	r2, r1, #0
 8000364:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff ff86 	bl	8000278 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2220      	movs	r2, #32
 8000372:	4313      	orrs	r3, r2
 8000374:	b2da      	uxtb	r2, r3
 8000376:	210c      	movs	r1, #12
 8000378:	187b      	adds	r3, r7, r1
 800037a:	701a      	strb	r2, [r3, #0]
	spiBuf[1] = value;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	1dba      	adds	r2, r7, #6
 8000380:	7812      	ldrb	r2, [r2, #0]
 8000382:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000384:	1879      	adds	r1, r7, r1
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <NRF24_write_register+0x4c>)
 8000388:	2364      	movs	r3, #100	; 0x64
 800038a:	2202      	movs	r2, #2
 800038c:	f002 fa0e 	bl	80027ac <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ff71 	bl	8000278 <NRF24_csn>
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b004      	add	sp, #16
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	200000ac 	.word	0x200000ac

080003a4 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6039      	str	r1, [r7, #0]
 80003ac:	0011      	movs	r1, r2
 80003ae:	1dfb      	adds	r3, r7, #7
 80003b0:	1c02      	adds	r2, r0, #0
 80003b2:	701a      	strb	r2, [r3, #0]
 80003b4:	1dbb      	adds	r3, r7, #6
 80003b6:	1c0a      	adds	r2, r1, #0
 80003b8:	701a      	strb	r2, [r3, #0]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff ff5c 	bl	8000278 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2220      	movs	r2, #32
 80003c6:	4313      	orrs	r3, r2
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	210c      	movs	r1, #12
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <NRF24_write_registerN+0x58>)
 80003d4:	2364      	movs	r3, #100	; 0x64
 80003d6:	2201      	movs	r2, #1
 80003d8:	f002 f9e8 	bl	80027ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80003dc:	1dbb      	adds	r3, r7, #6
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	6839      	ldr	r1, [r7, #0]
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <NRF24_write_registerN+0x58>)
 80003e6:	2364      	movs	r3, #100	; 0x64
 80003e8:	f002 f9e0 	bl	80027ac <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f7ff ff43 	bl	8000278 <NRF24_csn>
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b004      	add	sp, #16
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	200000ac 	.word	0x200000ac

08000400 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	000a      	movs	r2, r1
 800040a:	1cfb      	adds	r3, r7, #3
 800040c:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800040e:	f000 fa65 	bl	80008dc <NRF24_getPayloadSize>
 8000412:	0003      	movs	r3, r0
 8000414:	001a      	movs	r2, r3
 8000416:	1cfb      	adds	r3, r7, #3
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	4293      	cmp	r3, r2
 800041c:	d304      	bcc.n	8000428 <NRF24_read_payload+0x28>
 800041e:	f000 fa5d 	bl	80008dc <NRF24_getPayloadSize>
 8000422:	0003      	movs	r3, r0
 8000424:	001a      	movs	r2, r3
 8000426:	e001      	b.n	800042c <NRF24_read_payload+0x2c>
 8000428:	1cfb      	adds	r3, r7, #3
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	240f      	movs	r4, #15
 800042e:	193b      	adds	r3, r7, r4
 8000430:	701a      	strb	r2, [r3, #0]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000432:	2000      	movs	r0, #0
 8000434:	f7ff ff20 	bl	8000278 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000438:	210e      	movs	r1, #14
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2261      	movs	r2, #97	; 0x61
 800043e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000440:	1879      	adds	r1, r7, r1
 8000442:	480a      	ldr	r0, [pc, #40]	; (800046c <NRF24_read_payload+0x6c>)
 8000444:	2364      	movs	r3, #100	; 0x64
 8000446:	2201      	movs	r2, #1
 8000448:	f002 f9b0 	bl	80027ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800044c:	193b      	adds	r3, r7, r4
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b29a      	uxth	r2, r3
 8000452:	6879      	ldr	r1, [r7, #4]
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <NRF24_read_payload+0x6c>)
 8000456:	2364      	movs	r3, #100	; 0x64
 8000458:	f002 fb00 	bl	8002a5c <HAL_SPI_Receive>
	NRF24_csn(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff ff0b 	bl	8000278 <NRF24_csn>
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b005      	add	sp, #20
 8000468:	bd90      	pop	{r4, r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	200000ac 	.word	0x200000ac

08000470 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000474:	21ff      	movs	r1, #255	; 0xff
 8000476:	20e1      	movs	r0, #225	; 0xe1
 8000478:	f7ff ff6c 	bl	8000354 <NRF24_write_register>
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000486:	21ff      	movs	r1, #255	; 0xff
 8000488:	20e2      	movs	r0, #226	; 0xe2
 800048a:	f7ff ff63 	bl	8000354 <NRF24_write_register>
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800049a:	1dfc      	adds	r4, r7, #7
 800049c:	2007      	movs	r0, #7
 800049e:	f7ff ff2b 	bl	80002f8 <NRF24_read_register>
 80004a2:	0003      	movs	r3, r0
 80004a4:	7023      	strb	r3, [r4, #0]
	return statReg;
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	781b      	ldrb	r3, [r3, #0]
}
 80004aa:	0018      	movs	r0, r3
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b003      	add	sp, #12
 80004b0:	bd90      	pop	{r4, r7, pc}
	...

080004b4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80004b4:	b082      	sub	sp, #8
 80004b6:	b5b0      	push	{r4, r5, r7, lr}
 80004b8:	b084      	sub	sp, #16
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	0008      	movs	r0, r1
 80004c0:	0011      	movs	r1, r2
 80004c2:	2204      	movs	r2, #4
 80004c4:	2418      	movs	r4, #24
 80004c6:	1912      	adds	r2, r2, r4
 80004c8:	2508      	movs	r5, #8
 80004ca:	46ac      	mov	ip, r5
 80004cc:	44bc      	add	ip, r7
 80004ce:	4462      	add	r2, ip
 80004d0:	6013      	str	r3, [r2, #0]
 80004d2:	1cbb      	adds	r3, r7, #2
 80004d4:	1c02      	adds	r2, r0, #0
 80004d6:	801a      	strh	r2, [r3, #0]
 80004d8:	003b      	movs	r3, r7
 80004da:	1c0a      	adds	r2, r1, #0
 80004dc:	801a      	strh	r2, [r3, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80004de:	4a71      	ldr	r2, [pc, #452]	; (80006a4 <NRF24_begin+0x1f0>)
 80004e0:	2304      	movs	r3, #4
 80004e2:	191b      	adds	r3, r3, r4
 80004e4:	2108      	movs	r1, #8
 80004e6:	468c      	mov	ip, r1
 80004e8:	44bc      	add	ip, r7
 80004ea:	4463      	add	r3, ip
 80004ec:	0010      	movs	r0, r2
 80004ee:	0019      	movs	r1, r3
 80004f0:	2364      	movs	r3, #100	; 0x64
 80004f2:	001a      	movs	r2, r3
 80004f4:	f004 f82c 	bl	8004550 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80004f8:	4b6b      	ldr	r3, [pc, #428]	; (80006a8 <NRF24_begin+0x1f4>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80004fe:	4b6b      	ldr	r3, [pc, #428]	; (80006ac <NRF24_begin+0x1f8>)
 8000500:	1cba      	adds	r2, r7, #2
 8000502:	8812      	ldrh	r2, [r2, #0]
 8000504:	801a      	strh	r2, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000506:	4b6a      	ldr	r3, [pc, #424]	; (80006b0 <NRF24_begin+0x1fc>)
 8000508:	003a      	movs	r2, r7
 800050a:	8812      	ldrh	r2, [r2, #0]
 800050c:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f7ff feb2 	bl	8000278 <NRF24_csn>
	NRF24_ce(0);
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff fecf 	bl	80002b8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800051a:	2005      	movs	r0, #5
 800051c:	f001 f93c 	bl	8001798 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000520:	2108      	movs	r1, #8
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ff16 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000528:	213f      	movs	r1, #63	; 0x3f
 800052a:	2001      	movs	r0, #1
 800052c:	f7ff ff12 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000530:	2103      	movs	r1, #3
 8000532:	2002      	movs	r0, #2
 8000534:	f7ff ff0e 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000538:	2103      	movs	r1, #3
 800053a:	2003      	movs	r0, #3
 800053c:	f7ff ff0a 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000540:	2103      	movs	r1, #3
 8000542:	2004      	movs	r0, #4
 8000544:	f7ff ff06 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000548:	2102      	movs	r1, #2
 800054a:	2005      	movs	r0, #5
 800054c:	f7ff ff02 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000550:	210f      	movs	r1, #15
 8000552:	2006      	movs	r0, #6
 8000554:	f7ff fefe 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000558:	210e      	movs	r1, #14
 800055a:	2007      	movs	r0, #7
 800055c:	f7ff fefa 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000560:	2100      	movs	r1, #0
 8000562:	2008      	movs	r0, #8
 8000564:	f7ff fef6 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000568:	2100      	movs	r1, #0
 800056a:	2009      	movs	r0, #9
 800056c:	f7ff fef2 	bl	8000354 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000570:	2108      	movs	r1, #8
 8000572:	187b      	adds	r3, r7, r1
 8000574:	22e7      	movs	r2, #231	; 0xe7
 8000576:	711a      	strb	r2, [r3, #4]
 8000578:	187b      	adds	r3, r7, r1
 800057a:	22e7      	movs	r2, #231	; 0xe7
 800057c:	70da      	strb	r2, [r3, #3]
 800057e:	187b      	adds	r3, r7, r1
 8000580:	22e7      	movs	r2, #231	; 0xe7
 8000582:	709a      	strb	r2, [r3, #2]
 8000584:	187b      	adds	r3, r7, r1
 8000586:	22e7      	movs	r2, #231	; 0xe7
 8000588:	705a      	strb	r2, [r3, #1]
 800058a:	187b      	adds	r3, r7, r1
 800058c:	22e7      	movs	r2, #231	; 0xe7
 800058e:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000590:	000c      	movs	r4, r1
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2205      	movs	r2, #5
 8000596:	0019      	movs	r1, r3
 8000598:	200a      	movs	r0, #10
 800059a:	f7ff ff03 	bl	80003a4 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800059e:	0021      	movs	r1, r4
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	22c2      	movs	r2, #194	; 0xc2
 80005a4:	711a      	strb	r2, [r3, #4]
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	22c2      	movs	r2, #194	; 0xc2
 80005aa:	70da      	strb	r2, [r3, #3]
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	22c2      	movs	r2, #194	; 0xc2
 80005b0:	709a      	strb	r2, [r3, #2]
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	22c2      	movs	r2, #194	; 0xc2
 80005b6:	705a      	strb	r2, [r3, #1]
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	22c2      	movs	r2, #194	; 0xc2
 80005bc:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80005be:	000c      	movs	r4, r1
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2205      	movs	r2, #5
 80005c4:	0019      	movs	r1, r3
 80005c6:	200b      	movs	r0, #11
 80005c8:	f7ff feec 	bl	80003a4 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80005cc:	21c3      	movs	r1, #195	; 0xc3
 80005ce:	200c      	movs	r0, #12
 80005d0:	f7ff fec0 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80005d4:	21c4      	movs	r1, #196	; 0xc4
 80005d6:	200d      	movs	r0, #13
 80005d8:	f7ff febc 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80005dc:	21c5      	movs	r1, #197	; 0xc5
 80005de:	200e      	movs	r0, #14
 80005e0:	f7ff feb8 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80005e4:	21c6      	movs	r1, #198	; 0xc6
 80005e6:	200f      	movs	r0, #15
 80005e8:	f7ff feb4 	bl	8000354 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80005ec:	0021      	movs	r1, r4
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	22e7      	movs	r2, #231	; 0xe7
 80005f2:	711a      	strb	r2, [r3, #4]
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	22e7      	movs	r2, #231	; 0xe7
 80005f8:	70da      	strb	r2, [r3, #3]
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	22e7      	movs	r2, #231	; 0xe7
 80005fe:	709a      	strb	r2, [r3, #2]
 8000600:	187b      	adds	r3, r7, r1
 8000602:	22e7      	movs	r2, #231	; 0xe7
 8000604:	705a      	strb	r2, [r3, #1]
 8000606:	187b      	adds	r3, r7, r1
 8000608:	22e7      	movs	r2, #231	; 0xe7
 800060a:	701a      	strb	r2, [r3, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2205      	movs	r2, #5
 8000610:	0019      	movs	r1, r3
 8000612:	2010      	movs	r0, #16
 8000614:	f7ff fec6 	bl	80003a4 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000618:	2100      	movs	r1, #0
 800061a:	2011      	movs	r0, #17
 800061c:	f7ff fe9a 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000620:	2100      	movs	r1, #0
 8000622:	2012      	movs	r0, #18
 8000624:	f7ff fe96 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000628:	2100      	movs	r1, #0
 800062a:	2013      	movs	r0, #19
 800062c:	f7ff fe92 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000630:	2100      	movs	r1, #0
 8000632:	2014      	movs	r0, #20
 8000634:	f7ff fe8e 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000638:	2100      	movs	r1, #0
 800063a:	2015      	movs	r0, #21
 800063c:	f7ff fe8a 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000640:	2100      	movs	r1, #0
 8000642:	2016      	movs	r0, #22
 8000644:	f7ff fe86 	bl	8000354 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000648:	f000 fac8 	bl	8000bdc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800064c:	2100      	movs	r1, #0
 800064e:	201c      	movs	r0, #28
 8000650:	f7ff fe80 	bl	8000354 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000654:	2100      	movs	r1, #0
 8000656:	201d      	movs	r0, #29
 8000658:	f7ff fe7c 	bl	8000354 <NRF24_write_register>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800065c:	210f      	movs	r1, #15
 800065e:	200f      	movs	r0, #15
 8000660:	f000 f8e6 	bl	8000830 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f980 	bl	800096a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800066a:	2001      	movs	r0, #1
 800066c:	f000 f9ce 	bl	8000a0c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000670:	2002      	movs	r0, #2
 8000672:	f000 fa27 	bl	8000ac4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000676:	f000 f945 	bl	8000904 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800067a:	2020      	movs	r0, #32
 800067c:	f000 f912 	bl	80008a4 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000680:	f000 faa3 	bl	8000bca <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000684:	204c      	movs	r0, #76	; 0x4c
 8000686:	f000 f8f1 	bl	800086c <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800068a:	f7ff fef1 	bl	8000470 <NRF24_flush_tx>
	NRF24_flush_rx();
 800068e:	f7ff fef8 	bl	8000482 <NRF24_flush_rx>

	NRF24_powerDown();
 8000692:	f000 fa4f 	bl	8000b34 <NRF24_powerDown>

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b004      	add	sp, #16
 800069c:	bcb0      	pop	{r4, r5, r7}
 800069e:	bc08      	pop	{r3}
 80006a0:	b002      	add	sp, #8
 80006a2:	4718      	bx	r3
 80006a4:	200000ac 	.word	0x200000ac
 80006a8:	200000a4 	.word	0x200000a4
 80006ac:	200000a8 	.word	0x200000a8
 80006b0:	200000aa 	.word	0x200000aa

080006b4 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff fe1d 	bl	80002f8 <NRF24_read_register>
 80006be:	0003      	movs	r3, r0
 80006c0:	001a      	movs	r2, r3
 80006c2:	2303      	movs	r3, #3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	0019      	movs	r1, r3
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fe42 	bl	8000354 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <NRF24_startListening+0x50>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	0011      	movs	r1, r2
 80006d8:	4319      	orrs	r1, r3
 80006da:	d005      	beq.n	80006e8 <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <NRF24_startListening+0x50>)
 80006de:	2205      	movs	r2, #5
 80006e0:	0019      	movs	r1, r3
 80006e2:	200a      	movs	r0, #10
 80006e4:	f7ff fe5e 	bl	80003a4 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80006e8:	f7ff fec2 	bl	8000470 <NRF24_flush_tx>
	NRF24_flush_rx();
 80006ec:	f7ff fec9 	bl	8000482 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff fde1 	bl	80002b8 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80006f6:	2096      	movs	r0, #150	; 0x96
 80006f8:	f7ff fd9e 	bl	8000238 <NRF24_DelayMicroSeconds>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000098 	.word	0x20000098

08000708 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff fdd3 	bl	80002b8 <NRF24_ce>
	NRF24_flush_tx();
 8000712:	f7ff fead 	bl	8000470 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000716:	f7ff feb4 	bl	8000482 <NRF24_flush_rx>
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fa17 	bl	8000b58 <NRF24_availablePipe>
 800072a:	0003      	movs	r3, r0
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000732:	b590      	push	{r4, r7, lr}
 8000734:	b085      	sub	sp, #20
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	000a      	movs	r2, r1
 800073c:	1cfb      	adds	r3, r7, #3
 800073e:	701a      	strb	r2, [r3, #0]
	NRF24_read_payload( buf, len );
 8000740:	1cfb      	adds	r3, r7, #3
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff fe59 	bl	8000400 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800074e:	2017      	movs	r0, #23
 8000750:	f7ff fdd2 	bl	80002f8 <NRF24_read_register>
 8000754:	0003      	movs	r3, r0
 8000756:	0019      	movs	r1, r3
 8000758:	240f      	movs	r4, #15
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2201      	movs	r2, #1
 800075e:	400a      	ands	r2, r1
 8000760:	701a      	strb	r2, [r3, #0]
	NRF24_flush_rx();
 8000762:	f7ff fe8e 	bl	8000482 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000766:	f000 f8c3 	bl	80008f0 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	1e5a      	subs	r2, r3, #1
 8000770:	4193      	sbcs	r3, r2
 8000772:	b2db      	uxtb	r3, r3
}
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	b005      	add	sp, #20
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	0001      	movs	r1, r0
 8000784:	603a      	str	r2, [r7, #0]
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	200f      	movs	r0, #15
 800078a:	183b      	adds	r3, r7, r0
 800078c:	1c0a      	adds	r2, r1, #0
 800078e:	701a      	strb	r2, [r3, #0]
	if (number == 0)
 8000790:	183b      	adds	r3, r7, r0
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d104      	bne.n	80007a2 <NRF24_openReadingPipe+0x26>
    pipe0_reading_address = address;
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4920      	ldr	r1, [pc, #128]	; (8000820 <NRF24_openReadingPipe+0xa4>)
 800079e:	600a      	str	r2, [r1, #0]
 80007a0:	604b      	str	r3, [r1, #4]

	if(number <= 6)
 80007a2:	220f      	movs	r2, #15
 80007a4:	18bb      	adds	r3, r7, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	d834      	bhi.n	8000816 <NRF24_openReadingPipe+0x9a>
	{
		if(number < 2)
 80007ac:	18bb      	adds	r3, r7, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d809      	bhi.n	80007c8 <NRF24_openReadingPipe+0x4c>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80007b4:	18bb      	adds	r3, r7, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <NRF24_openReadingPipe+0xa8>)
 80007ba:	5cd3      	ldrb	r3, [r2, r3]
 80007bc:	0039      	movs	r1, r7
 80007be:	2205      	movs	r2, #5
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff fdef 	bl	80003a4 <NRF24_write_registerN>
 80007c6:	e009      	b.n	80007dc <NRF24_openReadingPipe+0x60>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80007c8:	230f      	movs	r3, #15
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <NRF24_openReadingPipe+0xa8>)
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	0039      	movs	r1, r7
 80007d4:	2201      	movs	r2, #1
 80007d6:	0018      	movs	r0, r3
 80007d8:	f7ff fde4 	bl	80003a4 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80007dc:	240f      	movs	r4, #15
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <NRF24_openReadingPipe+0xac>)
 80007e4:	5cd2      	ldrb	r2, [r2, r3]
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <NRF24_openReadingPipe+0xb0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	0019      	movs	r1, r3
 80007ec:	0010      	movs	r0, r2
 80007ee:	f7ff fdb1 	bl	8000354 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff fd80 	bl	80002f8 <NRF24_read_register>
 80007f8:	0003      	movs	r3, r0
 80007fa:	b25a      	sxtb	r2, r3
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2101      	movs	r1, #1
 8000802:	4099      	lsls	r1, r3
 8000804:	000b      	movs	r3, r1
 8000806:	b25b      	sxtb	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b25b      	sxtb	r3, r3
 800080c:	b2db      	uxtb	r3, r3
 800080e:	0019      	movs	r1, r3
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff fd9f 	bl	8000354 <NRF24_write_register>
	}

}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b005      	add	sp, #20
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000098 	.word	0x20000098
 8000824:	08005238 	.word	0x08005238
 8000828:	08005240 	.word	0x08005240
 800082c:	200000a0 	.word	0x200000a0

08000830 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	0002      	movs	r2, r0
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	1dbb      	adds	r3, r7, #6
 800083e:	1c0a      	adds	r2, r1, #0
 8000840:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	b25a      	sxtb	r2, r3
 800084a:	1dbb      	adds	r3, r7, #6
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b25b      	sxtb	r3, r3
 8000850:	210f      	movs	r1, #15
 8000852:	400b      	ands	r3, r1
 8000854:	b25b      	sxtb	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b25b      	sxtb	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	0019      	movs	r1, r3
 800085e:	2004      	movs	r0, #4
 8000860:	f7ff fd78 	bl	8000354 <NRF24_write_register>
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}

0800086c <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	0002      	movs	r2, r0
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	701a      	strb	r2, [r3, #0]
	const uint8_t max_channel = 127;
 8000878:	210f      	movs	r1, #15
 800087a:	187b      	adds	r3, r7, r1
 800087c:	227f      	movs	r2, #127	; 0x7f
 800087e:	701a      	strb	r2, [r3, #0]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000880:	187b      	adds	r3, r7, r1
 8000882:	1dfa      	adds	r2, r7, #7
 8000884:	7810      	ldrb	r0, [r2, #0]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b2d9      	uxtb	r1, r3
 800088a:	b2c2      	uxtb	r2, r0
 800088c:	4291      	cmp	r1, r2
 800088e:	d900      	bls.n	8000892 <NRF24_setChannel+0x26>
 8000890:	1c03      	adds	r3, r0, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	0019      	movs	r1, r3
 8000896:	2005      	movs	r0, #5
 8000898:	f7ff fd5c 	bl	8000354 <NRF24_write_register>
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b004      	add	sp, #16
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	701a      	strb	r2, [r3, #0]
	const uint8_t max_payload_size = 32;
 80008b0:	210f      	movs	r1, #15
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2220      	movs	r2, #32
 80008b6:	701a      	strb	r2, [r3, #0]
  payload_size = MIN(size,max_payload_size);
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	1dfa      	adds	r2, r7, #7
 80008bc:	7810      	ldrb	r0, [r2, #0]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2d9      	uxtb	r1, r3
 80008c2:	b2c2      	uxtb	r2, r0
 80008c4:	4291      	cmp	r1, r2
 80008c6:	d900      	bls.n	80008ca <NRF24_setPayloadSize+0x26>
 80008c8:	1c03      	adds	r3, r0, #0
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <NRF24_setPayloadSize+0x34>)
 80008ce:	701a      	strb	r2, [r3, #0]
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b004      	add	sp, #16
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000a0 	.word	0x200000a0

080008dc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	return payload_size;
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <NRF24_getPayloadSize+0x10>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	200000a0 	.word	0x200000a0

080008f0 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80008f4:	2060      	movs	r0, #96	; 0x60
 80008f6:	f7ff fcff 	bl	80002f8 <NRF24_read_register>
 80008fa:	0003      	movs	r3, r0
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000908:	201d      	movs	r0, #29
 800090a:	f7ff fcf5 	bl	80002f8 <NRF24_read_register>
 800090e:	0003      	movs	r3, r0
 8000910:	001a      	movs	r2, r3
 8000912:	2304      	movs	r3, #4
 8000914:	439a      	bics	r2, r3
 8000916:	0013      	movs	r3, r2
 8000918:	b2db      	uxtb	r3, r3
 800091a:	0019      	movs	r1, r3
 800091c:	201d      	movs	r0, #29
 800091e:	f7ff fd19 	bl	8000354 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000922:	2100      	movs	r1, #0
 8000924:	201c      	movs	r0, #28
 8000926:	f7ff fd15 	bl	8000354 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800092a:	4b03      	ldr	r3, [pc, #12]	; (8000938 <NRF24_disableDynamicPayloads+0x34>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	200000a1 	.word	0x200000a1

0800093c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	0002      	movs	r2, r0
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	701a      	strb	r2, [r3, #0]
	if ( enable )
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d004      	beq.n	800095a <NRF24_setAutoAck+0x1e>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000950:	213f      	movs	r1, #63	; 0x3f
 8000952:	2001      	movs	r0, #1
 8000954:	f7ff fcfe 	bl	8000354 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000958:	e003      	b.n	8000962 <NRF24_setAutoAck+0x26>
    NRF24_write_register(REG_EN_AA, 0x00);
 800095a:	2100      	movs	r1, #0
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fcf9 	bl	8000354 <NRF24_write_register>
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b002      	add	sp, #8
 8000968:	bd80      	pop	{r7, pc}

0800096a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800096a:	b5b0      	push	{r4, r5, r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	0002      	movs	r2, r0
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	701a      	strb	r2, [r3, #0]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000976:	250f      	movs	r5, #15
 8000978:	197c      	adds	r4, r7, r5
 800097a:	2006      	movs	r0, #6
 800097c:	f7ff fcbc 	bl	80002f8 <NRF24_read_register>
 8000980:	0003      	movs	r3, r0
 8000982:	7023      	strb	r3, [r4, #0]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000984:	0028      	movs	r0, r5
 8000986:	183b      	adds	r3, r7, r0
 8000988:	183a      	adds	r2, r7, r0
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	2106      	movs	r1, #6
 800098e:	438a      	bics	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b03      	cmp	r3, #3
 8000998:	d106      	bne.n	80009a8 <NRF24_setPALevel+0x3e>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800099a:	183b      	adds	r3, r7, r0
 800099c:	183a      	adds	r2, r7, r0
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	2106      	movs	r1, #6
 80009a2:	430a      	orrs	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e026      	b.n	80009f6 <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m6dB )
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d107      	bne.n	80009c0 <NRF24_setPALevel+0x56>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80009b0:	220f      	movs	r2, #15
 80009b2:	18bb      	adds	r3, r7, r2
 80009b4:	18ba      	adds	r2, r7, r2
 80009b6:	7812      	ldrb	r2, [r2, #0]
 80009b8:	2104      	movs	r1, #4
 80009ba:	430a      	orrs	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e01a      	b.n	80009f6 <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m12dB )
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d107      	bne.n	80009d8 <NRF24_setPALevel+0x6e>
  {
    setup |= _BV(RF_PWR_LOW);
 80009c8:	220f      	movs	r2, #15
 80009ca:	18bb      	adds	r3, r7, r2
 80009cc:	18ba      	adds	r2, r7, r2
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	2102      	movs	r1, #2
 80009d2:	430a      	orrs	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e00e      	b.n	80009f6 <NRF24_setPALevel+0x8c>
  }
  else if ( level == RF24_PA_m18dB )
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00a      	beq.n	80009f6 <NRF24_setPALevel+0x8c>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d106      	bne.n	80009f6 <NRF24_setPALevel+0x8c>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009e8:	220f      	movs	r2, #15
 80009ea:	18bb      	adds	r3, r7, r2
 80009ec:	18ba      	adds	r2, r7, r2
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	2106      	movs	r1, #6
 80009f2:	430a      	orrs	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80009f6:	230f      	movs	r3, #15
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	0019      	movs	r1, r3
 80009fe:	2006      	movs	r0, #6
 8000a00:	f7ff fca8 	bl	8000354 <NRF24_write_register>
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b004      	add	sp, #16
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}

08000a0c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	0002      	movs	r2, r0
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	701a      	strb	r2, [r3, #0]
	bool result = false;
 8000a18:	230f      	movs	r3, #15
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a20:	250e      	movs	r5, #14
 8000a22:	197c      	adds	r4, r7, r5
 8000a24:	2006      	movs	r0, #6
 8000a26:	f7ff fc67 	bl	80002f8 <NRF24_read_register>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	7023      	strb	r3, [r4, #0]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <NRF24_setDataRate+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000a34:	0028      	movs	r0, r5
 8000a36:	183b      	adds	r3, r7, r0
 8000a38:	183a      	adds	r2, r7, r0
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	2128      	movs	r1, #40	; 0x28
 8000a3e:	438a      	bics	r2, r1
 8000a40:	701a      	strb	r2, [r3, #0]
  if( speed == RF24_250KBPS )
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d109      	bne.n	8000a5e <NRF24_setDataRate+0x52>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <NRF24_setDataRate+0xb4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000a50:	183b      	adds	r3, r7, r0
 8000a52:	183a      	adds	r2, r7, r0
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	2120      	movs	r1, #32
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e011      	b.n	8000a82 <NRF24_setDataRate+0x76>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10a      	bne.n	8000a7c <NRF24_setDataRate+0x70>
    {
      wide_band = true ;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <NRF24_setDataRate+0xb4>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000a6c:	220e      	movs	r2, #14
 8000a6e:	18bb      	adds	r3, r7, r2
 8000a70:	18ba      	adds	r2, r7, r2
 8000a72:	7812      	ldrb	r2, [r2, #0]
 8000a74:	2108      	movs	r1, #8
 8000a76:	430a      	orrs	r2, r1
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	e002      	b.n	8000a82 <NRF24_setDataRate+0x76>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <NRF24_setDataRate+0xb4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000a82:	240e      	movs	r4, #14
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f7ff fc62 	bl	8000354 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000a90:	2006      	movs	r0, #6
 8000a92:	f7ff fc31 	bl	80002f8 <NRF24_read_register>
 8000a96:	0003      	movs	r3, r0
 8000a98:	001a      	movs	r2, r3
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d104      	bne.n	8000aac <NRF24_setDataRate+0xa0>
  {
    result = true;
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e002      	b.n	8000ab2 <NRF24_setDataRate+0xa6>
  }
  else
  {
    wide_band = false;
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <NRF24_setDataRate+0xb4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b004      	add	sp, #16
 8000abe:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac0:	200000a2 	.word	0x200000a2

08000ac4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	0002      	movs	r2, r0
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	701a      	strb	r2, [r3, #0]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fc11 	bl	80002f8 <NRF24_read_register>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	0019      	movs	r1, r3
 8000ada:	200f      	movs	r0, #15
 8000adc:	183b      	adds	r3, r7, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	4391      	bics	r1, r2
 8000ae2:	000a      	movs	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d017      	beq.n	8000b1e <NRF24_setCRCLength+0x5a>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <NRF24_setCRCLength+0x40>
  {
    config |= _BV(BIT_EN_CRC);
 8000af6:	183b      	adds	r3, r7, r0
 8000af8:	183a      	adds	r2, r7, r0
 8000afa:	7812      	ldrb	r2, [r2, #0]
 8000afc:	2108      	movs	r1, #8
 8000afe:	430a      	orrs	r2, r1
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e00c      	b.n	8000b1e <NRF24_setCRCLength+0x5a>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000b04:	200f      	movs	r0, #15
 8000b06:	183b      	adds	r3, r7, r0
 8000b08:	183a      	adds	r2, r7, r0
 8000b0a:	7812      	ldrb	r2, [r2, #0]
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
    config |= _BV( BIT_CRCO );
 8000b12:	183b      	adds	r3, r7, r0
 8000b14:	183a      	adds	r2, r7, r0
 8000b16:	7812      	ldrb	r2, [r2, #0]
 8000b18:	2104      	movs	r1, #4
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000b1e:	230f      	movs	r3, #15
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	0019      	movs	r1, r3
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fc14 	bl	8000354 <NRF24_write_register>
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b004      	add	sp, #16
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fbdd 	bl	80002f8 <NRF24_read_register>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	001a      	movs	r2, r3
 8000b42:	2302      	movs	r3, #2
 8000b44:	439a      	bics	r2, r3
 8000b46:	0013      	movs	r3, r2
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fc01 	bl	8000354 <NRF24_write_register>
}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000b60:	250f      	movs	r5, #15
 8000b62:	197c      	adds	r4, r7, r5
 8000b64:	f7ff fc96 	bl	8000494 <NRF24_get_status>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	7023      	strb	r3, [r4, #0]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000b6c:	0028      	movs	r0, r5
 8000b6e:	183b      	adds	r3, r7, r0
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2240      	movs	r2, #64	; 0x40
 8000b74:	401a      	ands	r2, r3
 8000b76:	240e      	movs	r4, #14
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	1e51      	subs	r1, r2, #1
 8000b7c:	418a      	sbcs	r2, r1
 8000b7e:	701a      	strb	r2, [r3, #0]

  if (result)
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d019      	beq.n	8000bbc <NRF24_availablePipe+0x64>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d008      	beq.n	8000ba0 <NRF24_availablePipe+0x48>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000b8e:	183b      	adds	r3, r7, r0
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	085b      	lsrs	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2207      	movs	r2, #7
 8000b98:	4013      	ands	r3, r2
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000ba0:	2140      	movs	r1, #64	; 0x40
 8000ba2:	2007      	movs	r0, #7
 8000ba4:	f7ff fbd6 	bl	8000354 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000ba8:	230f      	movs	r3, #15
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2220      	movs	r2, #32
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	d003      	beq.n	8000bbc <NRF24_availablePipe+0x64>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f7ff fbcc 	bl	8000354 <NRF24_write_register>
    }
  }
  return result;
 8000bbc:	230e      	movs	r3, #14
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	781b      	ldrb	r3, [r3, #0]
}
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bdb0      	pop	{r4, r5, r7, pc}

08000bca <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000bce:	2170      	movs	r1, #112	; 0x70
 8000bd0:	2007      	movs	r0, #7
 8000bd2:	f7ff fbbf 	bl	8000354 <NRF24_write_register>
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fb48 	bl	8000278 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2250      	movs	r2, #80	; 0x50
 8000bec:	701a      	strb	r2, [r3, #0]
	cmdRxBuf[1] = 0x73;
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2273      	movs	r2, #115	; 0x73
 8000bf2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000bf4:	1d39      	adds	r1, r7, #4
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <NRF24_ACTIVATE_cmd+0x34>)
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	f001 fdd6 	bl	80027ac <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff fb39 	bl	8000278 <NRF24_csn>
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	200000ac 	.word	0x200000ac

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c16:	46c6      	mov	lr, r8
 8000c18:	b500      	push	{lr}
 8000c1a:	b09a      	sub	sp, #104	; 0x68
 8000c1c:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1e:	f000 fd35 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c22:	f000 f8ef 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c26:	f000 fafb 	bl	8001220 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000c2a:	f000 f983 	bl	8000f34 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000c2e:	f000 f943 	bl	8000eb8 <MX_SPI1_Init>
  MX_TIM15_Init();
 8000c32:	f000 f9d5 	bl	8000fe0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000c36:	f000 fa6b 	bl	8001110 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000c3a:	4b68      	ldr	r3, [pc, #416]	; (8000ddc <main+0x1c8>)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f002 fcae 	bl	80035a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000c44:	4b66      	ldr	r3, [pc, #408]	; (8000de0 <main+0x1cc>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f002 fca9 	bl	80035a0 <HAL_TIM_PWM_Start>

	// MAX = 2000, MIN = 500, MIN se lahko po potrebi prilagodi
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0);
 8000c4e:	4b63      	ldr	r3, [pc, #396]	; (8000ddc <main+0x1c8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8000c56:	4b62      	ldr	r3, [pc, #392]	; (8000de0 <main+0x1cc>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_GPIO_WritePin(GPIOB, CE_Pin, GPIO_PIN_SET);
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4860      	ldr	r0, [pc, #384]	; (8000de4 <main+0x1d0>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	0019      	movs	r1, r3
 8000c68:	f000 ffd2 	bl	8001c10 <HAL_GPIO_WritePin>

  //**** RECIEVER ****//
    // All necessary setup done in NRF24_begin
    NRF24_begin(GPIOA, NRF_CSN_Pin, NRF_CE_Pin, hspi1);
 8000c6c:	4c5e      	ldr	r4, [pc, #376]	; (8000de8 <main+0x1d4>)
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4698      	mov	r8, r3
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	021e      	lsls	r6, r3, #8
 8000c78:	23a0      	movs	r3, #160	; 0xa0
 8000c7a:	05dd      	lsls	r5, r3, #23
 8000c7c:	466b      	mov	r3, sp
 8000c7e:	0018      	movs	r0, r3
 8000c80:	1d23      	adds	r3, r4, #4
 8000c82:	2260      	movs	r2, #96	; 0x60
 8000c84:	0019      	movs	r1, r3
 8000c86:	f003 fc63 	bl	8004550 <memcpy>
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	4642      	mov	r2, r8
 8000c8e:	0031      	movs	r1, r6
 8000c90:	0028      	movs	r0, r5
 8000c92:	f7ff fc0f 	bl	80004b4 <NRF24_begin>
    NRF24_stopListening();
 8000c96:	f7ff fd37 	bl	8000708 <NRF24_stopListening>

    // Open Rx pipeline
    NRF24_openReadingPipe(1, RxAddress);
 8000c9a:	4b54      	ldr	r3, [pc, #336]	; (8000dec <main+0x1d8>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fd6b 	bl	800077c <NRF24_openReadingPipe>

    NRF24_setAutoAck(false);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fe48 	bl	800093c <NRF24_setAutoAck>
    NRF24_setChannel(83);
 8000cac:	2053      	movs	r0, #83	; 0x53
 8000cae:	f7ff fddd 	bl	800086c <NRF24_setChannel>
    NRF24_setPayloadSize(payloadSize);
 8000cb2:	2020      	movs	r0, #32
 8000cb4:	f7ff fdf6 	bl	80008a4 <NRF24_setPayloadSize>
    NRF24_setPALevel(RF24_PA_m6dB);
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f7ff fe56 	bl	800096a <NRF24_setPALevel>

    NRF24_startListening();
 8000cbe:	f7ff fcf9 	bl	80006b4 <NRF24_startListening>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  if(NRF24_available()==1) {
 8000cc2:	f7ff fd2d 	bl	8000720 <NRF24_available>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d0fb      	beq.n	8000cc2 <main+0xae>
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000cca:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <main+0x1d0>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 ffbb 	bl	8001c4a <HAL_GPIO_TogglePin>
		NRF24_read(RxBin, payloadSize);
 8000cd4:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <main+0x1dc>)
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff fd2a 	bl	8000732 <NRF24_read>
		if ((char) RxBin[0] == ID) {
 8000cde:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <main+0x1dc>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b35      	cmp	r3, #53	; 0x35
 8000ce4:	d169      	bne.n	8000dba <main+0x1a6>
			for(int i = 0; i< payloadSize; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	e00b      	b.n	8000d04 <main+0xf0>
				RxData[i] = (char) RxBin[i+1];
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a3f      	ldr	r2, [pc, #252]	; (8000df0 <main+0x1dc>)
 8000cf2:	5cd1      	ldrb	r1, [r2, r3]
 8000cf4:	4a3f      	ldr	r2, [pc, #252]	; (8000df4 <main+0x1e0>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	18d3      	adds	r3, r2, r3
 8000cfa:	1c0a      	adds	r2, r1, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i< payloadSize; i++)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3301      	adds	r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b1f      	cmp	r3, #31
 8000d08:	ddf0      	ble.n	8000cec <main+0xd8>

			switch (RxData[0]) {
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <main+0x1e0>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b50      	cmp	r3, #80	; 0x50
 8000d10:	d002      	beq.n	8000d18 <main+0x104>
 8000d12:	2b54      	cmp	r3, #84	; 0x54
 8000d14:	d025      	beq.n	8000d62 <main+0x14e>
						HAL_Delay(1000);
					HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
					__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
					break;
				default:
					break;
 8000d16:	e051      	b.n	8000dbc <main+0x1a8>
					sscanf(RxData,"P%4u %4u", &PWM1, &PWM2);
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <main+0x1e4>)
 8000d1a:	4a38      	ldr	r2, [pc, #224]	; (8000dfc <main+0x1e8>)
 8000d1c:	4938      	ldr	r1, [pc, #224]	; (8000e00 <main+0x1ec>)
 8000d1e:	4835      	ldr	r0, [pc, #212]	; (8000df4 <main+0x1e0>)
 8000d20:	f003 fc28 	bl	8004574 <siscanf>
					if (PWM1 > PWM_MAX) PWM1 = PWM_MAX;
 8000d24:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <main+0x1e8>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	23fa      	movs	r3, #250	; 0xfa
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d903      	bls.n	8000d38 <main+0x124>
 8000d30:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <main+0x1e8>)
 8000d32:	22fa      	movs	r2, #250	; 0xfa
 8000d34:	00d2      	lsls	r2, r2, #3
 8000d36:	601a      	str	r2, [r3, #0]
					if (PWM2 > PWM_MAX) PWM2 = PWM_MAX;
 8000d38:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <main+0x1e4>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	23fa      	movs	r3, #250	; 0xfa
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d903      	bls.n	8000d4c <main+0x138>
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <main+0x1e4>)
 8000d46:	22fa      	movs	r2, #250	; 0xfa
 8000d48:	00d2      	lsls	r2, r2, #3
 8000d4a:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, PWM1);
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <main+0x1c8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a2a      	ldr	r2, [pc, #168]	; (8000dfc <main+0x1e8>)
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, PWM2);
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <main+0x1cc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <main+0x1e4>)
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8000d60:	e02c      	b.n	8000dbc <main+0x1a8>
					__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, PWM_MAX);
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <main+0x1c8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	22fa      	movs	r2, #250	; 0xfa
 8000d68:	00d2      	lsls	r2, r2, #3
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <main+0x1d0>)
 8000d6e:	2104      	movs	r1, #4
 8000d70:	0018      	movs	r0, r3
 8000d72:	f000 ff6a 	bl	8001c4a <HAL_GPIO_TogglePin>
						HAL_Delay(1000);
 8000d76:	23fa      	movs	r3, #250	; 0xfa
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 fd0c 	bl	8001798 <HAL_Delay>
					HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <main+0x1d0>)
 8000d82:	2104      	movs	r1, #4
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 ff60 	bl	8001c4a <HAL_GPIO_TogglePin>
					__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0);
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <main+0x1c8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, PWM_MAX);
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <main+0x1cc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	22fa      	movs	r2, #250	; 0xfa
 8000d98:	00d2      	lsls	r2, r2, #3
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
						HAL_Delay(1000);
 8000d9c:	23fa      	movs	r3, #250	; 0xfa
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fcf9 	bl	8001798 <HAL_Delay>
					HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <main+0x1d0>)
 8000da8:	2104      	movs	r1, #4
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 ff4d 	bl	8001c4a <HAL_GPIO_TogglePin>
					__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <main+0x1cc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2200      	movs	r2, #0
 8000db6:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8000db8:	e000      	b.n	8000dbc <main+0x1a8>
			}
		}
 8000dba:	46c0      	nop			; (mov r8, r8)
		for(int i = 0; i< payloadSize; i++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	e007      	b.n	8000dd2 <main+0x1be>
			RxData[i] = '\0';
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <main+0x1e0>)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	18d3      	adds	r3, r2, r3
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i< payloadSize; i++)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b1f      	cmp	r3, #31
 8000dd6:	ddf4      	ble.n	8000dc2 <main+0x1ae>
	  if(NRF24_available()==1) {
 8000dd8:	e773      	b.n	8000cc2 <main+0xae>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	200001c0 	.word	0x200001c0
 8000de0:	2000020c 	.word	0x2000020c
 8000de4:	50000400 	.word	0x50000400
 8000de8:	20000110 	.word	0x20000110
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000260 	.word	0x20000260
 8000df4:	20000280 	.word	0x20000280
 8000df8:	2000025c 	.word	0x2000025c
 8000dfc:	20000258 	.word	0x20000258
 8000e00:	08005220 	.word	0x08005220

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b093      	sub	sp, #76	; 0x4c
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	2414      	movs	r4, #20
 8000e0c:	193b      	adds	r3, r7, r4
 8000e0e:	0018      	movs	r0, r3
 8000e10:	2334      	movs	r3, #52	; 0x34
 8000e12:	001a      	movs	r2, r3
 8000e14:	2100      	movs	r1, #0
 8000e16:	f003 fba4 	bl	8004562 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2310      	movs	r3, #16
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f003 fb9d 	bl	8004562 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 ff27 	bl	8001c80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2202      	movs	r2, #2
 8000e36:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	0052      	lsls	r2, r2, #1
 8000e3e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e40:	0021      	movs	r1, r4
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2240      	movs	r2, #64	; 0x40
 8000e4c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2202      	movs	r2, #2
 8000e52:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2202      	movs	r2, #2
 8000e58:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2208      	movs	r2, #8
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	0292      	lsls	r2, r2, #10
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	0592      	lsls	r2, r2, #22
 8000e74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 ff41 	bl	8001d00 <HAL_RCC_OscConfig>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e82:	f000 fa2f 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2202      	movs	r2, #2
 8000e90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 fa42 	bl	800232c <HAL_RCC_ClockConfig>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000eac:	f000 fa1a 	bl	80012e4 <Error_Handler>
  }
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b013      	add	sp, #76	; 0x4c
 8000eb6:	bd90      	pop	{r4, r7, pc}

08000eb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <MX_SPI1_Init+0x78>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000ec4:	2282      	movs	r2, #130	; 0x82
 8000ec6:	0052      	lsls	r2, r2, #1
 8000ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000ed2:	22e0      	movs	r2, #224	; 0xe0
 8000ed4:	00d2      	lsls	r2, r2, #3
 8000ed6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000eee:	2218      	movs	r2, #24
 8000ef0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000f06:	2207      	movs	r2, #7
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <MX_SPI1_Init+0x74>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f001 fb8f 	bl	800263c <HAL_SPI_Init>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d001      	beq.n	8000f26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 f9df 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000110 	.word	0x20000110
 8000f30:	40013000 	.word	0x40013000

08000f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	0018      	movs	r0, r3
 8000f40:	2310      	movs	r3, #16
 8000f42:	001a      	movs	r2, r3
 8000f44:	2100      	movs	r1, #0
 8000f46:	f003 fb0c 	bl	8004562 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	230c      	movs	r3, #12
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f003 fb05 	bl	8004562 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_TIM3_Init+0xa0>)
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <MX_TIM3_Init+0xa4>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <MX_TIM3_Init+0xa0>)
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_TIM3_Init+0xa0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_TIM3_Init+0xa0>)
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_TIM3_Init+0xa8>)
 8000f6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_TIM3_Init+0xa0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_TIM3_Init+0xa0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_TIM3_Init+0xa0>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f002 fa5e 	bl	8003440 <HAL_TIM_Base_Init>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f88:	f000 f9ac 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	0152      	lsls	r2, r2, #5
 8000f94:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f96:	187a      	adds	r2, r7, r1
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_TIM3_Init+0xa0>)
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f002 fcd9 	bl	8003954 <HAL_TIM_ConfigClockSource>
 8000fa2:	1e03      	subs	r3, r0, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000fa6:	f000 f99d 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb6:	1d3a      	adds	r2, r7, #4
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_TIM3_Init+0xa0>)
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f003 f98f 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	1e03      	subs	r3, r0, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000fc6:	f000 f98d 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b008      	add	sp, #32
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	20000174 	.word	0x20000174
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	00004e20 	.word	0x00004e20

08000fe0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b098      	sub	sp, #96	; 0x60
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe6:	2354      	movs	r3, #84	; 0x54
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	0018      	movs	r0, r3
 8000fec:	230c      	movs	r3, #12
 8000fee:	001a      	movs	r2, r3
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	f003 fab6 	bl	8004562 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff6:	2338      	movs	r3, #56	; 0x38
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	231c      	movs	r3, #28
 8000ffe:	001a      	movs	r2, r3
 8001000:	2100      	movs	r1, #0
 8001002:	f003 faae 	bl	8004562 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	0018      	movs	r0, r3
 800100a:	2334      	movs	r3, #52	; 0x34
 800100c:	001a      	movs	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f003 faa7 	bl	8004562 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <MX_TIM15_Init+0x128>)
 8001016:	4a3d      	ldr	r2, [pc, #244]	; (800110c <MX_TIM15_Init+0x12c>)
 8001018:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64;
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <MX_TIM15_Init+0x128>)
 800101c:	2240      	movs	r2, #64	; 0x40
 800101e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b39      	ldr	r3, [pc, #228]	; (8001108 <MX_TIM15_Init+0x128>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000;
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <MX_TIM15_Init+0x128>)
 8001028:	22fa      	movs	r2, #250	; 0xfa
 800102a:	00d2      	lsls	r2, r2, #3
 800102c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b36      	ldr	r3, [pc, #216]	; (8001108 <MX_TIM15_Init+0x128>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001034:	4b34      	ldr	r3, [pc, #208]	; (8001108 <MX_TIM15_Init+0x128>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b33      	ldr	r3, [pc, #204]	; (8001108 <MX_TIM15_Init+0x128>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <MX_TIM15_Init+0x128>)
 8001042:	0018      	movs	r0, r3
 8001044:	f002 fa54 	bl	80034f0 <HAL_TIM_PWM_Init>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 800104c:	f000 f94a 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2154      	movs	r1, #84	; 0x54
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800105e:	187a      	adds	r2, r7, r1
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <MX_TIM15_Init+0x128>)
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f003 f93b 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800106e:	f000 f939 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001072:	2138      	movs	r1, #56	; 0x38
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2260      	movs	r2, #96	; 0x60
 8001078:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109e:	1879      	adds	r1, r7, r1
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_TIM15_Init+0x128>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	0018      	movs	r0, r3
 80010a6:	f002 fb5f 	bl	8003768 <HAL_TIM_PWM_ConfigChannel>
 80010aa:	1e03      	subs	r3, r0, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM15_Init+0xd2>
  {
    Error_Handler();
 80010ae:	f000 f919 	bl	80012e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	0192      	lsls	r2, r2, #6
 80010d6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80010e4:	1d3a      	adds	r2, r7, #4
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_TIM15_Init+0x128>)
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f003 f960 	bl	80043b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 80010f4:	f000 f8f6 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <MX_TIM15_Init+0x128>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 f9e0 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b018      	add	sp, #96	; 0x60
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200001c0 	.word	0x200001c0
 800110c:	40014000 	.word	0x40014000

08001110 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	2334      	movs	r3, #52	; 0x34
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	0018      	movs	r0, r3
 800111c:	231c      	movs	r3, #28
 800111e:	001a      	movs	r2, r3
 8001120:	2100      	movs	r1, #0
 8001122:	f003 fa1e 	bl	8004562 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001126:	003b      	movs	r3, r7
 8001128:	0018      	movs	r0, r3
 800112a:	2334      	movs	r3, #52	; 0x34
 800112c:	001a      	movs	r2, r3
 800112e:	2100      	movs	r1, #0
 8001130:	f003 fa17 	bl	8004562 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001134:	4b38      	ldr	r3, [pc, #224]	; (8001218 <MX_TIM16_Init+0x108>)
 8001136:	4a39      	ldr	r2, [pc, #228]	; (800121c <MX_TIM16_Init+0x10c>)
 8001138:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64;
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <MX_TIM16_Init+0x108>)
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <MX_TIM16_Init+0x108>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000;
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <MX_TIM16_Init+0x108>)
 8001148:	22fa      	movs	r2, #250	; 0xfa
 800114a:	00d2      	lsls	r2, r2, #3
 800114c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <MX_TIM16_Init+0x108>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <MX_TIM16_Init+0x108>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <MX_TIM16_Init+0x108>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <MX_TIM16_Init+0x108>)
 8001162:	0018      	movs	r0, r3
 8001164:	f002 f96c 	bl	8003440 <HAL_TIM_Base_Init>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 800116c:	f000 f8ba 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <MX_TIM16_Init+0x108>)
 8001172:	0018      	movs	r0, r3
 8001174:	f002 f9bc 	bl	80034f0 <HAL_TIM_PWM_Init>
 8001178:	1e03      	subs	r3, r0, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 f8b2 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001180:	2134      	movs	r1, #52	; 0x34
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2260      	movs	r2, #96	; 0x60
 8001186:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ac:	1879      	adds	r1, r7, r1
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM16_Init+0x108>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f002 fad8 	bl	8003768 <HAL_TIM_PWM_ConfigChannel>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80011bc:	f000 f892 	bl	80012e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011c0:	003b      	movs	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011c6:	003b      	movs	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011cc:	003b      	movs	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d2:	003b      	movs	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011d8:	003b      	movs	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011de:	003b      	movs	r3, r7
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	0192      	lsls	r2, r2, #6
 80011e4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011e6:	003b      	movs	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ec:	003b      	movs	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80011f2:	003a      	movs	r2, r7
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_TIM16_Init+0x108>)
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f003 f8d9 	bl	80043b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8001202:	f000 f86f 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <MX_TIM16_Init+0x108>)
 8001208:	0018      	movs	r0, r3
 800120a:	f000 f959 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b014      	add	sp, #80	; 0x50
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	2000020c 	.word	0x2000020c
 800121c:	40014400 	.word	0x40014400

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	240c      	movs	r4, #12
 8001228:	193b      	adds	r3, r7, r4
 800122a:	0018      	movs	r0, r3
 800122c:	2314      	movs	r3, #20
 800122e:	001a      	movs	r2, r3
 8001230:	2100      	movs	r1, #0
 8001232:	f003 f996 	bl	8004562 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_GPIO_Init+0xbc>)
 8001238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_GPIO_Init+0xbc>)
 800123c:	2101      	movs	r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_GPIO_Init+0xbc>)
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	2201      	movs	r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_GPIO_Init+0xbc>)
 8001250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <MX_GPIO_Init+0xbc>)
 8001254:	2102      	movs	r1, #2
 8001256:	430a      	orrs	r2, r1
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_GPIO_Init+0xbc>)
 800125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125e:	2202      	movs	r2, #2
 8001260:	4013      	ands	r3, r2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|CE_Pin, GPIO_PIN_RESET);
 8001266:	2382      	movs	r3, #130	; 0x82
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <MX_GPIO_Init+0xc0>)
 800126c:	2200      	movs	r2, #0
 800126e:	0019      	movs	r1, r3
 8001270:	f000 fcce 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8001274:	2384      	movs	r3, #132	; 0x84
 8001276:	0219      	lsls	r1, r3, #8
 8001278:	23a0      	movs	r3, #160	; 0xa0
 800127a:	05db      	lsls	r3, r3, #23
 800127c:	2200      	movs	r2, #0
 800127e:	0018      	movs	r0, r3
 8001280:	f000 fcc6 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin CE_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CE_Pin;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2282      	movs	r2, #130	; 0x82
 8001288:	0052      	lsls	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	193b      	adds	r3, r7, r4
 800128e:	2201      	movs	r2, #1
 8001290:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	193b      	adds	r3, r7, r4
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	193b      	adds	r3, r7, r4
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	193b      	adds	r3, r7, r4
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <MX_GPIO_Init+0xc0>)
 80012a2:	0019      	movs	r1, r3
 80012a4:	0010      	movs	r0, r2
 80012a6:	f000 fb4f 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80012aa:	0021      	movs	r1, r4
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2284      	movs	r2, #132	; 0x84
 80012b0:	0212      	lsls	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2201      	movs	r2, #1
 80012b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	187a      	adds	r2, r7, r1
 80012c8:	23a0      	movs	r3, #160	; 0xa0
 80012ca:	05db      	lsls	r3, r3, #23
 80012cc:	0011      	movs	r1, r2
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 fb3a 	bl	8001948 <HAL_GPIO_Init>

}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b009      	add	sp, #36	; 0x24
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	40021000 	.word	0x40021000
 80012e0:	50000400 	.word	0x50000400

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	46c0      	nop			; (mov r8, r8)
	  while (1)
	  {
		  /* USER CODE BEGIN Error_Handler_Debug */
		  /* User can add his own implementation to report the HAL error return state */
		  __disable_irq();
		  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0xc>
	...

080012f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_MspInit+0x44>)
 80012fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_MspInit+0x44>)
 8001300:	2101      	movs	r1, #1
 8001302:	430a      	orrs	r2, r1
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_MspInit+0x44>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2201      	movs	r2, #1
 800130c:	4013      	ands	r3, r2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_MspInit+0x44>)
 8001314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_MspInit+0x44>)
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	0549      	lsls	r1, r1, #21
 800131c:	430a      	orrs	r2, r1
 800131e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_MspInit+0x44>)
 8001322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	055b      	lsls	r3, r3, #21
 8001328:	4013      	ands	r3, r2
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b08b      	sub	sp, #44	; 0x2c
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	2414      	movs	r4, #20
 8001346:	193b      	adds	r3, r7, r4
 8001348:	0018      	movs	r0, r3
 800134a:	2314      	movs	r3, #20
 800134c:	001a      	movs	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	f003 f907 	bl	8004562 <memset>
  if(hspi->Instance==SPI1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2c      	ldr	r2, [pc, #176]	; (800140c <HAL_SPI_MspInit+0xd0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d152      	bne.n	8001404 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_SPI_MspInit+0xd4>)
 8001360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_SPI_MspInit+0xd4>)
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	0149      	lsls	r1, r1, #5
 8001368:	430a      	orrs	r2, r1
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_SPI_MspInit+0xd4>)
 800136e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	015b      	lsls	r3, r3, #5
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <HAL_SPI_MspInit+0xd4>)
 800137c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_SPI_MspInit+0xd4>)
 8001380:	2101      	movs	r1, #1
 8001382:	430a      	orrs	r2, r1
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <HAL_SPI_MspInit+0xd4>)
 8001388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138a:	2201      	movs	r2, #1
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <HAL_SPI_MspInit+0xd4>)
 8001394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_SPI_MspInit+0xd4>)
 8001398:	2102      	movs	r1, #2
 800139a:	430a      	orrs	r2, r1
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <HAL_SPI_MspInit+0xd4>)
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI_NRF_MISO_Pin|SPI_NRF_MOSI_Pin;
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	22c0      	movs	r2, #192	; 0xc0
 80013ae:	0152      	lsls	r2, r2, #5
 80013b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2202      	movs	r2, #2
 80013b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	193a      	adds	r2, r7, r4
 80013cc:	23a0      	movs	r3, #160	; 0xa0
 80013ce:	05db      	lsls	r3, r3, #23
 80013d0:	0011      	movs	r1, r2
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 fab8 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_NRF_SCK_Pin;
 80013d8:	0021      	movs	r1, r4
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2208      	movs	r2, #8
 80013de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2202      	movs	r2, #2
 80013e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI_NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	4a06      	ldr	r2, [pc, #24]	; (8001414 <HAL_SPI_MspInit+0xd8>)
 80013fc:	0019      	movs	r1, r3
 80013fe:	0010      	movs	r0, r2
 8001400:	f000 faa2 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b00b      	add	sp, #44	; 0x2c
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	40013000 	.word	0x40013000
 8001410:	40021000 	.word	0x40021000
 8001414:	50000400 	.word	0x50000400

08001418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <HAL_TIM_Base_MspInit+0x5c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10c      	bne.n	8001444 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_TIM_Base_MspInit+0x60>)
 800142c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_TIM_Base_MspInit+0x60>)
 8001430:	2102      	movs	r1, #2
 8001432:	430a      	orrs	r2, r1
 8001434:	63da      	str	r2, [r3, #60]	; 0x3c
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_TIM_Base_MspInit+0x60>)
 8001438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001442:	e012      	b.n	800146a <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM16)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0x64>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d10d      	bne.n	800146a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_TIM_Base_MspInit+0x60>)
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_TIM_Base_MspInit+0x60>)
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0289      	lsls	r1, r1, #10
 8001458:	430a      	orrs	r2, r1
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_TIM_Base_MspInit+0x60>)
 800145e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	029b      	lsls	r3, r3, #10
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b004      	add	sp, #16
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	40000400 	.word	0x40000400
 8001478:	40021000 	.word	0x40021000
 800147c:	40014400 	.word	0x40014400

08001480 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_TIM_PWM_MspInit+0x38>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10d      	bne.n	80014ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_TIM_PWM_MspInit+0x3c>)
 8001494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_TIM_PWM_MspInit+0x3c>)
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	0249      	lsls	r1, r1, #9
 800149c:	430a      	orrs	r2, r1
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_TIM_PWM_MspInit+0x3c>)
 80014a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	025b      	lsls	r3, r3, #9
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	40014000 	.word	0x40014000
 80014bc:	40021000 	.word	0x40021000

080014c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b08b      	sub	sp, #44	; 0x2c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	2414      	movs	r4, #20
 80014ca:	193b      	adds	r3, r7, r4
 80014cc:	0018      	movs	r0, r3
 80014ce:	2314      	movs	r3, #20
 80014d0:	001a      	movs	r2, r3
 80014d2:	2100      	movs	r1, #0
 80014d4:	f003 f845 	bl	8004562 <memset>
  if(htim->Instance==TIM15)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a29      	ldr	r2, [pc, #164]	; (8001584 <HAL_TIM_MspPostInit+0xc4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d123      	bne.n	800152a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <HAL_TIM_MspPostInit+0xc8>)
 80014e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <HAL_TIM_MspPostInit+0xc8>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_TIM_MspPostInit+0xc8>)
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	2201      	movs	r2, #1
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = MOT1_Pin;
 80014fa:	0021      	movs	r1, r4
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2204      	movs	r2, #4
 8001500:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2202      	movs	r2, #2
 8001506:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2205      	movs	r2, #5
 8001518:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOT1_GPIO_Port, &GPIO_InitStruct);
 800151a:	187a      	adds	r2, r7, r1
 800151c:	23a0      	movs	r3, #160	; 0xa0
 800151e:	05db      	lsls	r3, r3, #23
 8001520:	0011      	movs	r1, r2
 8001522:	0018      	movs	r0, r3
 8001524:	f000 fa10 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001528:	e027      	b.n	800157a <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM16)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_TIM_MspPostInit+0xcc>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d122      	bne.n	800157a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_TIM_MspPostInit+0xc8>)
 8001536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_TIM_MspPostInit+0xc8>)
 800153a:	2101      	movs	r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	635a      	str	r2, [r3, #52]	; 0x34
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_TIM_MspPostInit+0xc8>)
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOT2_Pin;
 800154c:	2114      	movs	r1, #20
 800154e:	187b      	adds	r3, r7, r1
 8001550:	2240      	movs	r2, #64	; 0x40
 8001552:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	187b      	adds	r3, r7, r1
 8001556:	2202      	movs	r2, #2
 8001558:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2205      	movs	r2, #5
 800156a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOT2_GPIO_Port, &GPIO_InitStruct);
 800156c:	187a      	adds	r2, r7, r1
 800156e:	23a0      	movs	r3, #160	; 0xa0
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f000 f9e7 	bl	8001948 <HAL_GPIO_Init>
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b00b      	add	sp, #44	; 0x2c
 8001580:	bd90      	pop	{r4, r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40014000 	.word	0x40014000
 8001588:	40021000 	.word	0x40021000
 800158c:	40014400 	.word	0x40014400

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x4>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b4:	f000 f8d4 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	18d3      	adds	r3, r2, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f002 ff84 	bl	80044fc <__errno>
 80015f4:	0003      	movs	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	425b      	negs	r3, r3
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	18d2      	adds	r2, r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <_sbrk+0x64>)
 8001610:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b006      	add	sp, #24
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20004800 	.word	0x20004800
 8001620:	00000400 	.word	0x00000400
 8001624:	200002a0 	.word	0x200002a0
 8001628:	200002b8 	.word	0x200002b8

0800162c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800163a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800163c:	f7ff fff6 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <LoopForever+0x6>)
  ldr r1, =_edata
 8001642:	490d      	ldr	r1, [pc, #52]	; (8001678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <LoopForever+0xe>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001658:	4c0a      	ldr	r4, [pc, #40]	; (8001684 <LoopForever+0x16>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001666:	f002 ff4f 	bl	8004508 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800166a:	f7ff fad3 	bl	8000c14 <main>

0800166e <LoopForever>:

LoopForever:
  b LoopForever
 800166e:	e7fe      	b.n	800166e <LoopForever>
  ldr   r0, =_estack
 8001670:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800167c:	08005464 	.word	0x08005464
  ldr r2, =_sbss
 8001680:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001684:	200002b8 	.word	0x200002b8

08001688 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC1_IRQHandler>
	...

0800168c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_Init+0x3c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Init+0x3c>)
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	0049      	lsls	r1, r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a6:	2003      	movs	r0, #3
 80016a8:	f000 f810 	bl	80016cc <HAL_InitTick>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e001      	b.n	80016bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fe1c 	bl	80012f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016bc:	1dfb      	adds	r3, r7, #7
 80016be:	781b      	ldrb	r3, [r3, #0]
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d4:	230f      	movs	r3, #15
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_InitTick+0x88>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d02b      	beq.n	800173c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <HAL_InitTick+0x8c>)
 80016e6:	681c      	ldr	r4, [r3, #0]
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <HAL_InitTick+0x88>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	0019      	movs	r1, r3
 80016ee:	23fa      	movs	r3, #250	; 0xfa
 80016f0:	0098      	lsls	r0, r3, #2
 80016f2:	f7fe fd15 	bl	8000120 <__udivsi3>
 80016f6:	0003      	movs	r3, r0
 80016f8:	0019      	movs	r1, r3
 80016fa:	0020      	movs	r0, r4
 80016fc:	f7fe fd10 	bl	8000120 <__udivsi3>
 8001700:	0003      	movs	r3, r0
 8001702:	0018      	movs	r0, r3
 8001704:	f000 f913 	bl	800192e <HAL_SYSTICK_Config>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d112      	bne.n	8001732 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d80a      	bhi.n	8001728 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	2301      	movs	r3, #1
 8001716:	425b      	negs	r3, r3
 8001718:	2200      	movs	r2, #0
 800171a:	0018      	movs	r0, r3
 800171c:	f000 f8f2 	bl	8001904 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_InitTick+0x90>)
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e00d      	b.n	8001744 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001728:	230f      	movs	r3, #15
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e008      	b.n	8001744 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001732:	230f      	movs	r3, #15
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e003      	b.n	8001744 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800173c:	230f      	movs	r3, #15
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001744:	230f      	movs	r3, #15
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b005      	add	sp, #20
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	20000010 	.word	0x20000010
 8001758:	20000008 	.word	0x20000008
 800175c:	2000000c 	.word	0x2000000c

08001760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_IncTick+0x1c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	001a      	movs	r2, r3
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_IncTick+0x20>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	18d2      	adds	r2, r2, r3
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_IncTick+0x20>)
 8001772:	601a      	str	r2, [r3, #0]
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	20000010 	.word	0x20000010
 8001780:	200002a4 	.word	0x200002a4

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <HAL_GetTick+0x10>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	200002a4 	.word	0x200002a4

08001798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff fff0 	bl	8001784 <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3301      	adds	r3, #1
 80017b0:	d005      	beq.n	80017be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_Delay+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	001a      	movs	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	189b      	adds	r3, r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	f7ff ffe0 	bl	8001784 <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f7      	bhi.n	80017c0 <HAL_Delay+0x28>
  {
  }
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000010 	.word	0x20000010

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	0002      	movs	r2, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b7f      	cmp	r3, #127	; 0x7f
 80017f4:	d828      	bhi.n	8001848 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f6:	4a2f      	ldr	r2, [pc, #188]	; (80018b4 <__NVIC_SetPriority+0xd4>)
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	33c0      	adds	r3, #192	; 0xc0
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	589b      	ldr	r3, [r3, r2]
 8001806:	1dfa      	adds	r2, r7, #7
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	0011      	movs	r1, r2
 800180c:	2203      	movs	r2, #3
 800180e:	400a      	ands	r2, r1
 8001810:	00d2      	lsls	r2, r2, #3
 8001812:	21ff      	movs	r1, #255	; 0xff
 8001814:	4091      	lsls	r1, r2
 8001816:	000a      	movs	r2, r1
 8001818:	43d2      	mvns	r2, r2
 800181a:	401a      	ands	r2, r3
 800181c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	22ff      	movs	r2, #255	; 0xff
 8001824:	401a      	ands	r2, r3
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	0018      	movs	r0, r3
 800182c:	2303      	movs	r3, #3
 800182e:	4003      	ands	r3, r0
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001834:	481f      	ldr	r0, [pc, #124]	; (80018b4 <__NVIC_SetPriority+0xd4>)
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b25b      	sxtb	r3, r3
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	430a      	orrs	r2, r1
 8001840:	33c0      	adds	r3, #192	; 0xc0
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001846:	e031      	b.n	80018ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <__NVIC_SetPriority+0xd8>)
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	0019      	movs	r1, r3
 8001850:	230f      	movs	r3, #15
 8001852:	400b      	ands	r3, r1
 8001854:	3b08      	subs	r3, #8
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3306      	adds	r3, #6
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	18d3      	adds	r3, r2, r3
 800185e:	3304      	adds	r3, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	1dfa      	adds	r2, r7, #7
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	0011      	movs	r1, r2
 8001868:	2203      	movs	r2, #3
 800186a:	400a      	ands	r2, r1
 800186c:	00d2      	lsls	r2, r2, #3
 800186e:	21ff      	movs	r1, #255	; 0xff
 8001870:	4091      	lsls	r1, r2
 8001872:	000a      	movs	r2, r1
 8001874:	43d2      	mvns	r2, r2
 8001876:	401a      	ands	r2, r3
 8001878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	22ff      	movs	r2, #255	; 0xff
 8001880:	401a      	ands	r2, r3
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	0018      	movs	r0, r3
 8001888:	2303      	movs	r3, #3
 800188a:	4003      	ands	r3, r0
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001890:	4809      	ldr	r0, [pc, #36]	; (80018b8 <__NVIC_SetPriority+0xd8>)
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	001c      	movs	r4, r3
 8001898:	230f      	movs	r3, #15
 800189a:	4023      	ands	r3, r4
 800189c:	3b08      	subs	r3, #8
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	430a      	orrs	r2, r1
 80018a2:	3306      	adds	r3, #6
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	18c3      	adds	r3, r0, r3
 80018a8:	3304      	adds	r3, #4
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b003      	add	sp, #12
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	045b      	lsls	r3, r3, #17
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d301      	bcc.n	80018d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d0:	2301      	movs	r3, #1
 80018d2:	e010      	b.n	80018f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <SysTick_Config+0x44>)
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	3a01      	subs	r2, #1
 80018da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018dc:	2301      	movs	r3, #1
 80018de:	425b      	negs	r3, r3
 80018e0:	2103      	movs	r1, #3
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff ff7c 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x44>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x44>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	210f      	movs	r1, #15
 8001910:	187b      	adds	r3, r7, r1
 8001912:	1c02      	adds	r2, r0, #0
 8001914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	187b      	adds	r3, r7, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b25b      	sxtb	r3, r3
 800191e:	0011      	movs	r1, r2
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff ff5d 	bl	80017e0 <__NVIC_SetPriority>
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b004      	add	sp, #16
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff ffbf 	bl	80018bc <SysTick_Config>
 800193e:	0003      	movs	r3, r0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	e147      	b.n	8001be8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4091      	lsls	r1, r2
 8001962:	000a      	movs	r2, r1
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d100      	bne.n	8001970 <HAL_GPIO_Init+0x28>
 800196e:	e138      	b.n	8001be2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2203      	movs	r2, #3
 8001976:	4013      	ands	r3, r2
 8001978:	2b01      	cmp	r3, #1
 800197a:	d005      	beq.n	8001988 <HAL_GPIO_Init+0x40>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	4013      	ands	r3, r2
 8001984:	2b02      	cmp	r3, #2
 8001986:	d130      	bne.n	80019ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	409a      	lsls	r2, r3
 8001996:	0013      	movs	r3, r2
 8001998:	43da      	mvns	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	409a      	lsls	r2, r3
 80019aa:	0013      	movs	r3, r2
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019be:	2201      	movs	r2, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	43da      	mvns	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	2201      	movs	r2, #1
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2203      	movs	r2, #3
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d017      	beq.n	8001a26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	43da      	mvns	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	409a      	lsls	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d123      	bne.n	8001a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	08da      	lsrs	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3208      	adds	r2, #8
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	58d3      	ldr	r3, [r2, r3]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2207      	movs	r2, #7
 8001a44:	4013      	ands	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	0013      	movs	r3, r2
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2107      	movs	r1, #7
 8001a5e:	400b      	ands	r3, r1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	409a      	lsls	r2, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	6939      	ldr	r1, [r7, #16]
 8001a78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2203      	movs	r2, #3
 8001a98:	401a      	ands	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	23c0      	movs	r3, #192	; 0xc0
 8001ab4:	029b      	lsls	r3, r3, #10
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d100      	bne.n	8001abc <HAL_GPIO_Init+0x174>
 8001aba:	e092      	b.n	8001be2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001abc:	4a50      	ldr	r2, [pc, #320]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3318      	adds	r3, #24
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	589b      	ldr	r3, [r3, r2]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2203      	movs	r2, #3
 8001ace:	4013      	ands	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	23a0      	movs	r3, #160	; 0xa0
 8001ae4:	05db      	lsls	r3, r3, #23
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x1ca>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a45      	ldr	r2, [pc, #276]	; (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x1c6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a44      	ldr	r2, [pc, #272]	; (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x1c2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <HAL_GPIO_Init+0x2c4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x1be>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x1cc>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e004      	b.n	8001b14 <HAL_GPIO_Init+0x1cc>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e002      	b.n	8001b14 <HAL_GPIO_Init+0x1cc>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x1cc>
 8001b12:	2300      	movs	r3, #0
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	2103      	movs	r1, #3
 8001b18:	400a      	ands	r2, r1
 8001b1a:	00d2      	lsls	r2, r2, #3
 8001b1c:	4093      	lsls	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b24:	4936      	ldr	r1, [pc, #216]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3318      	adds	r3, #24
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b32:	4a33      	ldr	r2, [pc, #204]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	58d3      	ldr	r3, [r2, r3]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	025b      	lsls	r3, r3, #9
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b58:	4929      	ldr	r1, [pc, #164]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001b62:	2384      	movs	r3, #132	; 0x84
 8001b64:	58d3      	ldr	r3, [r2, r3]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	029b      	lsls	r3, r3, #10
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b86:	491e      	ldr	r1, [pc, #120]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001b88:	2284      	movs	r2, #132	; 0x84
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	035b      	lsls	r3, r3, #13
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	039b      	lsls	r3, r3, #14
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	40da      	lsrs	r2, r3
 8001bf0:	1e13      	subs	r3, r2, #0
 8001bf2:	d000      	beq.n	8001bf6 <HAL_GPIO_Init+0x2ae>
 8001bf4:	e6b0      	b.n	8001958 <HAL_GPIO_Init+0x10>
  }
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b006      	add	sp, #24
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021800 	.word	0x40021800
 8001c04:	50000400 	.word	0x50000400
 8001c08:	50000800 	.word	0x50000800
 8001c0c:	50000c00 	.word	0x50000c00

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	0008      	movs	r0, r1
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	1cbb      	adds	r3, r7, #2
 8001c1e:	1c02      	adds	r2, r0, #0
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	1c7b      	adds	r3, r7, #1
 8001c24:	1c0a      	adds	r2, r1, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c28:	1c7b      	adds	r3, r7, #1
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c30:	1cbb      	adds	r3, r7, #2
 8001c32:	881a      	ldrh	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c3a:	1cbb      	adds	r3, r7, #2
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	000a      	movs	r2, r1
 8001c54:	1cbb      	adds	r3, r7, #2
 8001c56:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c5e:	1cbb      	adds	r3, r7, #2
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4013      	ands	r3, r2
 8001c66:	041a      	lsls	r2, r3, #16
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	1cb9      	adds	r1, r7, #2
 8001c6e:	8809      	ldrh	r1, [r1, #0]
 8001c70:	400b      	ands	r3, r1
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b004      	add	sp, #16
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d11f      	bne.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	0013      	movs	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	189b      	adds	r3, r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4912      	ldr	r1, [pc, #72]	; (8001cfc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7fe fa34 	bl	8000120 <__udivsi3>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cbe:	e008      	b.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e001      	b.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e009      	b.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d0ed      	beq.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	fffff9ff 	.word	0xfffff9ff
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	000f4240 	.word	0x000f4240

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e2f9      	b.n	8002306 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2201      	movs	r2, #1
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d100      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1e>
 8001d1c:	e07c      	b.n	8001e18 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1e:	4bc3      	ldr	r3, [pc, #780]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2238      	movs	r2, #56	; 0x38
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d28:	4bc0      	ldr	r3, [pc, #768]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d102      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3e>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d10b      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4bb9      	ldr	r3, [pc, #740]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d062      	beq.n	8001e16 <HAL_RCC_OscConfig+0x116>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d15e      	bne.n	8001e16 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e2d4      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	025b      	lsls	r3, r3, #9
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x78>
 8001d68:	4bb0      	ldr	r3, [pc, #704]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4baf      	ldr	r3, [pc, #700]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	0249      	lsls	r1, r1, #9
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e020      	b.n	8001dba <HAL_RCC_OscConfig+0xba>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	23a0      	movs	r3, #160	; 0xa0
 8001d7e:	02db      	lsls	r3, r3, #11
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d10e      	bne.n	8001da2 <HAL_RCC_OscConfig+0xa2>
 8001d84:	4ba9      	ldr	r3, [pc, #676]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4ba8      	ldr	r3, [pc, #672]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	02c9      	lsls	r1, r1, #11
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	4ba6      	ldr	r3, [pc, #664]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4ba5      	ldr	r3, [pc, #660]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001d98:	2180      	movs	r1, #128	; 0x80
 8001d9a:	0249      	lsls	r1, r1, #9
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e00b      	b.n	8001dba <HAL_RCC_OscConfig+0xba>
 8001da2:	4ba2      	ldr	r3, [pc, #648]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4ba1      	ldr	r3, [pc, #644]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001da8:	49a1      	ldr	r1, [pc, #644]	; (8002030 <HAL_RCC_OscConfig+0x330>)
 8001daa:	400a      	ands	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	4b9f      	ldr	r3, [pc, #636]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b9e      	ldr	r3, [pc, #632]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001db4:	499f      	ldr	r1, [pc, #636]	; (8002034 <HAL_RCC_OscConfig+0x334>)
 8001db6:	400a      	ands	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d014      	beq.n	8001dec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fcdf 	bl	8001784 <HAL_GetTick>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff fcda 	bl	8001784 <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e293      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dde:	4b93      	ldr	r3, [pc, #588]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	029b      	lsls	r3, r3, #10
 8001de6:	4013      	ands	r3, r2
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0xcc>
 8001dea:	e015      	b.n	8001e18 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff fcca 	bl	8001784 <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df6:	f7ff fcc5 	bl	8001784 <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b64      	cmp	r3, #100	; 0x64
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e27e      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e08:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	029b      	lsls	r3, r3, #10
 8001e10:	4013      	ands	r3, r2
 8001e12:	d1f0      	bne.n	8001df6 <HAL_RCC_OscConfig+0xf6>
 8001e14:	e000      	b.n	8001e18 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d100      	bne.n	8001e24 <HAL_RCC_OscConfig+0x124>
 8001e22:	e099      	b.n	8001f58 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e24:	4b81      	ldr	r3, [pc, #516]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2238      	movs	r2, #56	; 0x38
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2203      	movs	r2, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_OscConfig+0x144>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d002      	beq.n	8001e4a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d135      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e4a:	4b78      	ldr	r3, [pc, #480]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4013      	ands	r3, r2
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x162>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e251      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b72      	ldr	r3, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4a74      	ldr	r2, [pc, #464]	; (8002038 <HAL_RCC_OscConfig+0x338>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	021a      	lsls	r2, r3, #8
 8001e72:	4b6e      	ldr	r3, [pc, #440]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d112      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e7e:	4b6b      	ldr	r3, [pc, #428]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6e      	ldr	r2, [pc, #440]	; (800203c <HAL_RCC_OscConfig+0x33c>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	4b67      	ldr	r3, [pc, #412]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e92:	4b66      	ldr	r3, [pc, #408]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0adb      	lsrs	r3, r3, #11
 8001e98:	2207      	movs	r2, #7
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	4a68      	ldr	r2, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x340>)
 8001e9e:	40da      	lsrs	r2, r3
 8001ea0:	4b68      	ldr	r3, [pc, #416]	; (8002044 <HAL_RCC_OscConfig+0x344>)
 8001ea2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ea4:	4b68      	ldr	r3, [pc, #416]	; (8002048 <HAL_RCC_OscConfig+0x348>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff fc0f 	bl	80016cc <HAL_InitTick>
 8001eae:	1e03      	subs	r3, r0, #0
 8001eb0:	d051      	beq.n	8001f56 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e227      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d030      	beq.n	8001f20 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ebe:	4b5b      	ldr	r3, [pc, #364]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a5e      	ldr	r2, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x33c>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	4b57      	ldr	r3, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ed2:	4b56      	ldr	r3, [pc, #344]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b55      	ldr	r3, [pc, #340]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	0049      	lsls	r1, r1, #1
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fc50 	bl	8001784 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff fc4b 	bl	8001784 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e204      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b48      	ldr	r3, [pc, #288]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a4a      	ldr	r2, [pc, #296]	; (8002038 <HAL_RCC_OscConfig+0x338>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	021a      	lsls	r2, r3, #8
 8001f18:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	e01b      	b.n	8001f58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f20:	4b42      	ldr	r3, [pc, #264]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001f26:	4949      	ldr	r1, [pc, #292]	; (800204c <HAL_RCC_OscConfig+0x34c>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fc2a 	bl	8001784 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff fc25 	bl	8001784 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1de      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4013      	ands	r3, r2
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x236>
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f56:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d047      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2238      	movs	r2, #56	; 0x38
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b18      	cmp	r3, #24
 8001f6c:	d10a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	d03c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2f2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d138      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e1c0      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d019      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff fbf4 	bl	8001784 <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fbef 	bl	8001784 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e1a8      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0f1      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2a2>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	438a      	bics	r2, r1
 8001fca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fbda 	bl	8001784 <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7ff fbd5 	bl	8001784 <HAL_GetTick>
 8001fda:	0002      	movs	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e18e      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8001fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fec:	2202      	movs	r2, #2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d1f1      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2fe>
 8001ffc:	e0c6      	b.n	800218c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffe:	231f      	movs	r3, #31
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2238      	movs	r2, #56	; 0x38
 800200c:	4013      	ands	r3, r2
 800200e:	2b20      	cmp	r3, #32
 8002010:	d11e      	bne.n	8002050 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_RCC_OscConfig+0x32c>)
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d100      	bne.n	800201e <HAL_RCC_OscConfig+0x31e>
 800201c:	e0b6      	b.n	800218c <HAL_RCC_OscConfig+0x48c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d000      	beq.n	8002028 <HAL_RCC_OscConfig+0x328>
 8002026:	e0b1      	b.n	800218c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e16c      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
 800202c:	40021000 	.word	0x40021000
 8002030:	fffeffff 	.word	0xfffeffff
 8002034:	fffbffff 	.word	0xfffbffff
 8002038:	ffff80ff 	.word	0xffff80ff
 800203c:	ffffc7ff 	.word	0xffffc7ff
 8002040:	00f42400 	.word	0x00f42400
 8002044:	20000008 	.word	0x20000008
 8002048:	2000000c 	.word	0x2000000c
 800204c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002050:	4baf      	ldr	r3, [pc, #700]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	055b      	lsls	r3, r3, #21
 8002058:	4013      	ands	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_RCC_OscConfig+0x360>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x362>
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d011      	beq.n	800208a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4baa      	ldr	r3, [pc, #680]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800206a:	4ba9      	ldr	r3, [pc, #676]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0549      	lsls	r1, r1, #21
 8002070:	430a      	orrs	r2, r1
 8002072:	63da      	str	r2, [r3, #60]	; 0x3c
 8002074:	4ba6      	ldr	r3, [pc, #664]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	055b      	lsls	r3, r3, #21
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002082:	231f      	movs	r3, #31
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208a:	4ba2      	ldr	r3, [pc, #648]	; (8002314 <HAL_RCC_OscConfig+0x614>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4013      	ands	r3, r2
 8002094:	d11a      	bne.n	80020cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002096:	4b9f      	ldr	r3, [pc, #636]	; (8002314 <HAL_RCC_OscConfig+0x614>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b9e      	ldr	r3, [pc, #632]	; (8002314 <HAL_RCC_OscConfig+0x614>)
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0049      	lsls	r1, r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fb6e 	bl	8001784 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7ff fb69 	bl	8001784 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e122      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c0:	4b94      	ldr	r3, [pc, #592]	; (8002314 <HAL_RCC_OscConfig+0x614>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3e2>
 80020d4:	4b8e      	ldr	r3, [pc, #568]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80020d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d8:	4b8d      	ldr	r3, [pc, #564]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80020da:	2101      	movs	r1, #1
 80020dc:	430a      	orrs	r2, r1
 80020de:	65da      	str	r2, [r3, #92]	; 0x5c
 80020e0:	e01c      	b.n	800211c <HAL_RCC_OscConfig+0x41c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x404>
 80020ea:	4b89      	ldr	r3, [pc, #548]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80020ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80020f0:	2104      	movs	r1, #4
 80020f2:	430a      	orrs	r2, r1
 80020f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80020f6:	4b86      	ldr	r3, [pc, #536]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80020f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020fa:	4b85      	ldr	r3, [pc, #532]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	65da      	str	r2, [r3, #92]	; 0x5c
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0x41c>
 8002104:	4b82      	ldr	r3, [pc, #520]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002106:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002108:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 800210a:	2101      	movs	r1, #1
 800210c:	438a      	bics	r2, r1
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002110:	4b7f      	ldr	r3, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002114:	4b7e      	ldr	r3, [pc, #504]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002116:	2104      	movs	r1, #4
 8002118:	438a      	bics	r2, r1
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d014      	beq.n	800214e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff fb2e 	bl	8001784 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212c:	e009      	b.n	8002142 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7ff fb29 	bl	8001784 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	4a77      	ldr	r2, [pc, #476]	; (8002318 <HAL_RCC_OscConfig+0x618>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0e1      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002142:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x42e>
 800214c:	e013      	b.n	8002176 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7ff fb19 	bl	8001784 <HAL_GetTick>
 8002152:	0003      	movs	r3, r0
 8002154:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002156:	e009      	b.n	800216c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7ff fb14 	bl	8001784 <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	4a6d      	ldr	r2, [pc, #436]	; (8002318 <HAL_RCC_OscConfig+0x618>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e0cc      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800216c:	4b68      	ldr	r3, [pc, #416]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002176:	231f      	movs	r3, #31
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002184:	4b62      	ldr	r3, [pc, #392]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002186:	4965      	ldr	r1, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x61c>)
 8002188:	400a      	ands	r2, r1
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d100      	bne.n	8002196 <HAL_RCC_OscConfig+0x496>
 8002194:	e0b6      	b.n	8002304 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002196:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2238      	movs	r2, #56	; 0x38
 800219c:	4013      	ands	r3, r2
 800219e:	2b10      	cmp	r3, #16
 80021a0:	d100      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4a4>
 80021a2:	e07e      	b.n	80022a2 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d153      	bne.n	8002254 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b57      	ldr	r3, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80021b2:	495b      	ldr	r1, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x620>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff fae4 	bl	8001784 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7ff fadf 	bl	8001784 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e098      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d4:	4b4e      	ldr	r3, [pc, #312]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	049b      	lsls	r3, r3, #18
 80021dc:	4013      	ands	r3, r2
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a4f      	ldr	r2, [pc, #316]	; (8002324 <HAL_RCC_OscConfig+0x624>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	431a      	orrs	r2, r3
 8002208:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 800220a:	430a      	orrs	r2, r1
 800220c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220e:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0449      	lsls	r1, r1, #17
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800221c:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	0549      	lsls	r1, r1, #21
 8002226:	430a      	orrs	r2, r1
 8002228:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7ff faab 	bl	8001784 <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7ff faa6 	bl	8001784 <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e05f      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002246:	4b32      	ldr	r3, [pc, #200]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	049b      	lsls	r3, r3, #18
 800224e:	4013      	ands	r3, r2
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x534>
 8002252:	e057      	b.n	8002304 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 800225a:	4931      	ldr	r1, [pc, #196]	; (8002320 <HAL_RCC_OscConfig+0x620>)
 800225c:	400a      	ands	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002266:	2103      	movs	r1, #3
 8002268:	438a      	bics	r2, r1
 800226a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002272:	492d      	ldr	r1, [pc, #180]	; (8002328 <HAL_RCC_OscConfig+0x628>)
 8002274:	400a      	ands	r2, r1
 8002276:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff fa84 	bl	8001784 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7ff fa7f 	bl	8001784 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e038      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	049b      	lsls	r3, r3, #18
 800229c:	4013      	ands	r3, r2
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x582>
 80022a0:	e030      	b.n	8002304 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e02b      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_RCC_OscConfig+0x610>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2203      	movs	r2, #3
 80022b8:	401a      	ands	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d11e      	bne.n	8002300 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2270      	movs	r2, #112	; 0x70
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d117      	bne.n	8002300 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	23fe      	movs	r3, #254	; 0xfe
 80022d4:	01db      	lsls	r3, r3, #7
 80022d6:	401a      	ands	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d10e      	bne.n	8002300 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	23f8      	movs	r3, #248	; 0xf8
 80022e6:	039b      	lsls	r3, r3, #14
 80022e8:	401a      	ands	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d106      	bne.n	8002300 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	0f5b      	lsrs	r3, r3, #29
 80022f6:	075a      	lsls	r2, r3, #29
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b008      	add	sp, #32
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	00001388 	.word	0x00001388
 800231c:	efffffff 	.word	0xefffffff
 8002320:	feffffff 	.word	0xfeffffff
 8002324:	1fc1808c 	.word	0x1fc1808c
 8002328:	effeffff 	.word	0xeffeffff

0800232c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0e9      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b76      	ldr	r3, [pc, #472]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2207      	movs	r2, #7
 8002346:	4013      	ands	r3, r2
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d91e      	bls.n	800238c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b73      	ldr	r3, [pc, #460]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2207      	movs	r2, #7
 8002354:	4393      	bics	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	4b70      	ldr	r3, [pc, #448]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002360:	f7ff fa10 	bl	8001784 <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002368:	e009      	b.n	800237e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236a:	f7ff fa0b 	bl	8001784 <HAL_GetTick>
 800236e:	0002      	movs	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_RCC_ClockConfig+0x1f4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0ca      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2207      	movs	r2, #7
 8002384:	4013      	ands	r3, r2
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d1ee      	bne.n	800236a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2202      	movs	r2, #2
 8002392:	4013      	ands	r3, r2
 8002394:	d015      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2204      	movs	r2, #4
 800239c:	4013      	ands	r3, r2
 800239e:	d006      	beq.n	80023ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023a0:	4b60      	ldr	r3, [pc, #384]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b5f      	ldr	r3, [pc, #380]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80023a6:	21e0      	movs	r1, #224	; 0xe0
 80023a8:	01c9      	lsls	r1, r1, #7
 80023aa:	430a      	orrs	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ae:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4a5d      	ldr	r2, [pc, #372]	; (8002528 <HAL_RCC_ClockConfig+0x1fc>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	d057      	beq.n	800247c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d4:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	029b      	lsls	r3, r3, #10
 80023dc:	4013      	ands	r3, r2
 80023de:	d12b      	bne.n	8002438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e097      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ec:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	049b      	lsls	r3, r3, #18
 80023f4:	4013      	ands	r3, r2
 80023f6:	d11f      	bne.n	8002438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e08b      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002404:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4013      	ands	r3, r2
 800240e:	d113      	bne.n	8002438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e07f      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d106      	bne.n	800242a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800241c:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 800241e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002420:	2202      	movs	r2, #2
 8002422:	4013      	ands	r3, r2
 8002424:	d108      	bne.n	8002438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e074      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	2202      	movs	r2, #2
 8002430:	4013      	ands	r3, r2
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e06d      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002438:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2207      	movs	r2, #7
 800243e:	4393      	bics	r3, r2
 8002440:	0019      	movs	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4b37      	ldr	r3, [pc, #220]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244c:	f7ff f99a 	bl	8001784 <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002454:	e009      	b.n	800246a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002456:	f7ff f995 	bl	8001784 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <HAL_RCC_ClockConfig+0x1f4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e054      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2238      	movs	r2, #56	; 0x38
 8002470:	401a      	ands	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	429a      	cmp	r2, r3
 800247a:	d1ec      	bne.n	8002456 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2207      	movs	r2, #7
 8002482:	4013      	ands	r3, r2
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d21e      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2207      	movs	r2, #7
 8002490:	4393      	bics	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800249c:	f7ff f972 	bl	8001784 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024a4:	e009      	b.n	80024ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a6:	f7ff f96d 	bl	8001784 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_RCC_ClockConfig+0x1f4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e02c      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2207      	movs	r2, #7
 80024c0:	4013      	ands	r3, r2
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1ee      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2204      	movs	r2, #4
 80024ce:	4013      	ands	r3, r2
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4a15      	ldr	r2, [pc, #84]	; (800252c <HAL_RCC_ClockConfig+0x200>)
 80024d8:	4013      	ands	r3, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024e6:	f000 f829 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024ea:	0001      	movs	r1, r0
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	220f      	movs	r2, #15
 80024f4:	401a      	ands	r2, r3
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_RCC_ClockConfig+0x204>)
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	58d3      	ldr	r3, [r2, r3]
 80024fc:	221f      	movs	r2, #31
 80024fe:	4013      	ands	r3, r2
 8002500:	000a      	movs	r2, r1
 8002502:	40da      	lsrs	r2, r3
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_ClockConfig+0x208>)
 8002506:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_ClockConfig+0x20c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff f8dd 	bl	80016cc <HAL_InitTick>
 8002512:	0003      	movs	r3, r0
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b004      	add	sp, #16
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40022000 	.word	0x40022000
 8002520:	00001388 	.word	0x00001388
 8002524:	40021000 	.word	0x40021000
 8002528:	fffff0ff 	.word	0xfffff0ff
 800252c:	ffff8fff 	.word	0xffff8fff
 8002530:	08005248 	.word	0x08005248
 8002534:	20000008 	.word	0x20000008
 8002538:	2000000c 	.word	0x2000000c

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002542:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2238      	movs	r2, #56	; 0x38
 8002548:	4013      	ands	r3, r2
 800254a:	d10f      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800254c:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0adb      	lsrs	r3, r3, #11
 8002552:	2207      	movs	r2, #7
 8002554:	4013      	ands	r3, r2
 8002556:	2201      	movs	r2, #1
 8002558:	409a      	lsls	r2, r3
 800255a:	0013      	movs	r3, r2
 800255c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	4835      	ldr	r0, [pc, #212]	; (8002638 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002562:	f7fd fddd 	bl	8000120 <__udivsi3>
 8002566:	0003      	movs	r3, r0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	e05d      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2238      	movs	r2, #56	; 0x38
 8002572:	4013      	ands	r3, r2
 8002574:	2b08      	cmp	r3, #8
 8002576:	d102      	bne.n	800257e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002578:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_RCC_GetSysClockFreq+0xfc>)
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	e054      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2238      	movs	r2, #56	; 0x38
 8002584:	4013      	ands	r3, r2
 8002586:	2b10      	cmp	r3, #16
 8002588:	d138      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2203      	movs	r2, #3
 8002590:	4013      	ands	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002594:	4b27      	ldr	r3, [pc, #156]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	2207      	movs	r2, #7
 800259c:	4013      	ands	r3, r2
 800259e:	3301      	adds	r3, #1
 80025a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d10d      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	4823      	ldr	r0, [pc, #140]	; (8002638 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025ac:	f7fd fdb8 	bl	8000120 <__udivsi3>
 80025b0:	0003      	movs	r3, r0
 80025b2:	0019      	movs	r1, r3
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	227f      	movs	r2, #127	; 0x7f
 80025bc:	4013      	ands	r3, r2
 80025be:	434b      	muls	r3, r1
 80025c0:	617b      	str	r3, [r7, #20]
        break;
 80025c2:	e00d      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	481c      	ldr	r0, [pc, #112]	; (8002638 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025c8:	f7fd fdaa 	bl	8000120 <__udivsi3>
 80025cc:	0003      	movs	r3, r0
 80025ce:	0019      	movs	r1, r3
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	227f      	movs	r2, #127	; 0x7f
 80025d8:	4013      	ands	r3, r2
 80025da:	434b      	muls	r3, r1
 80025dc:	617b      	str	r3, [r7, #20]
        break;
 80025de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0f5b      	lsrs	r3, r3, #29
 80025e6:	2207      	movs	r2, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	3301      	adds	r3, #1
 80025ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	f7fd fd95 	bl	8000120 <__udivsi3>
 80025f6:	0003      	movs	r3, r0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e015      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2238      	movs	r2, #56	; 0x38
 8002602:	4013      	ands	r3, r2
 8002604:	2b20      	cmp	r3, #32
 8002606:	d103      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2238      	movs	r2, #56	; 0x38
 8002616:	4013      	ands	r3, r2
 8002618:	2b18      	cmp	r3, #24
 800261a:	d103      	bne.n	8002624 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800261c:	23fa      	movs	r3, #250	; 0xfa
 800261e:	01db      	lsls	r3, r3, #7
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e001      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002628:	693b      	ldr	r3, [r7, #16]
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b006      	add	sp, #24
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40021000 	.word	0x40021000
 8002638:	00f42400 	.word	0x00f42400

0800263c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0a8      	b.n	80027a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	2382      	movs	r3, #130	; 0x82
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	429a      	cmp	r2, r3
 8002660:	d009      	beq.n	8002676 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	61da      	str	r2, [r3, #28]
 8002668:	e005      	b.n	8002676 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	225d      	movs	r2, #93	; 0x5d
 8002680:	5c9b      	ldrb	r3, [r3, r2]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	225c      	movs	r2, #92	; 0x5c
 800268c:	2100      	movs	r1, #0
 800268e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0018      	movs	r0, r3
 8002694:	f7fe fe52 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	225d      	movs	r2, #93	; 0x5d
 800269c:	2102      	movs	r1, #2
 800269e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2140      	movs	r1, #64	; 0x40
 80026ac:	438a      	bics	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	23e0      	movs	r3, #224	; 0xe0
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d902      	bls.n	80026c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e002      	b.n	80026c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	015b      	lsls	r3, r3, #5
 80026c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	23f0      	movs	r3, #240	; 0xf0
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d008      	beq.n	80026e6 <HAL_SPI_Init+0xaa>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	23e0      	movs	r3, #224	; 0xe0
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	429a      	cmp	r2, r3
 80026de:	d002      	beq.n	80026e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	2382      	movs	r3, #130	; 0x82
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6899      	ldr	r1, [r3, #8]
 80026f4:	2384      	movs	r3, #132	; 0x84
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	400b      	ands	r3, r1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2102      	movs	r1, #2
 8002702:	400b      	ands	r3, r1
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2101      	movs	r1, #1
 800270c:	400b      	ands	r3, r1
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6999      	ldr	r1, [r3, #24]
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	400b      	ands	r3, r1
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2138      	movs	r1, #56	; 0x38
 8002722:	400b      	ands	r3, r1
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	400b      	ands	r3, r1
 800272e:	431a      	orrs	r2, r3
 8002730:	0011      	movs	r1, r2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	401a      	ands	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	2204      	movs	r2, #4
 800274c:	401a      	ands	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2110      	movs	r1, #16
 8002754:	400b      	ands	r3, r1
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	2108      	movs	r1, #8
 800275e:	400b      	ands	r3, r1
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68d9      	ldr	r1, [r3, #12]
 8002766:	23f0      	movs	r3, #240	; 0xf0
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	400b      	ands	r3, r1
 800276c:	431a      	orrs	r2, r3
 800276e:	0011      	movs	r1, r2
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	015b      	lsls	r3, r3, #5
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4907      	ldr	r1, [pc, #28]	; (80027a8 <HAL_SPI_Init+0x16c>)
 800278c:	400a      	ands	r2, r1
 800278e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	225d      	movs	r2, #93	; 0x5d
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	fffff7ff 	.word	0xfffff7ff

080027ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	1dbb      	adds	r3, r7, #6
 80027ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027bc:	231f      	movs	r3, #31
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	225c      	movs	r2, #92	; 0x5c
 80027c8:	5c9b      	ldrb	r3, [r3, r2]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_SPI_Transmit+0x26>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e140      	b.n	8002a54 <HAL_SPI_Transmit+0x2a8>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	225c      	movs	r2, #92	; 0x5c
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027da:	f7fe ffd3 	bl	8001784 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027e2:	2316      	movs	r3, #22
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	1dba      	adds	r2, r7, #6
 80027e8:	8812      	ldrh	r2, [r2, #0]
 80027ea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	225d      	movs	r2, #93	; 0x5d
 80027f0:	5c9b      	ldrb	r3, [r3, r2]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d004      	beq.n	8002802 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80027f8:	231f      	movs	r3, #31
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	2202      	movs	r2, #2
 80027fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002800:	e11d      	b.n	8002a3e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_SPI_Transmit+0x64>
 8002808:	1dbb      	adds	r3, r7, #6
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002810:	231f      	movs	r3, #31
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
    goto error;
 8002818:	e111      	b.n	8002a3e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	225d      	movs	r2, #93	; 0x5d
 800281e:	2103      	movs	r1, #3
 8002820:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1dba      	adds	r2, r7, #6
 8002832:	8812      	ldrh	r2, [r2, #0]
 8002834:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1dba      	adds	r2, r7, #6
 800283a:	8812      	ldrh	r2, [r2, #0]
 800283c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2244      	movs	r2, #68	; 0x44
 8002848:	2100      	movs	r1, #0
 800284a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2246      	movs	r2, #70	; 0x46
 8002850:	2100      	movs	r1, #0
 8002852:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	429a      	cmp	r2, r3
 800286a:	d110      	bne.n	800288e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2140      	movs	r1, #64	; 0x40
 8002878:	438a      	bics	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2180      	movs	r1, #128	; 0x80
 8002888:	01c9      	lsls	r1, r1, #7
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	4013      	ands	r3, r2
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	d007      	beq.n	80028ac <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	23e0      	movs	r3, #224	; 0xe0
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d94e      	bls.n	8002956 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d004      	beq.n	80028ca <HAL_SPI_Transmit+0x11e>
 80028c0:	2316      	movs	r3, #22
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d13f      	bne.n	800294a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	1c9a      	adds	r2, r3, #2
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ee:	e02c      	b.n	800294a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d112      	bne.n	8002924 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	881a      	ldrh	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	1c9a      	adds	r2, r3, #2
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002922:	e012      	b.n	800294a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002924:	f7fe ff2e 	bl	8001784 <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d802      	bhi.n	800293a <HAL_SPI_Transmit+0x18e>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	d102      	bne.n	8002940 <HAL_SPI_Transmit+0x194>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d104      	bne.n	800294a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002940:	231f      	movs	r3, #31
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2203      	movs	r2, #3
 8002946:	701a      	strb	r2, [r3, #0]
          goto error;
 8002948:	e079      	b.n	8002a3e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1cd      	bne.n	80028f0 <HAL_SPI_Transmit+0x144>
 8002954:	e04f      	b.n	80029f6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d004      	beq.n	8002968 <HAL_SPI_Transmit+0x1bc>
 800295e:	2316      	movs	r3, #22
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d141      	bne.n	80029ec <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	7812      	ldrb	r2, [r2, #0]
 8002974:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800298e:	e02d      	b.n	80029ec <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d113      	bne.n	80029c6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029c4:	e012      	b.n	80029ec <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029c6:	f7fe fedd 	bl	8001784 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d802      	bhi.n	80029dc <HAL_SPI_Transmit+0x230>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	d102      	bne.n	80029e2 <HAL_SPI_Transmit+0x236>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80029e2:	231f      	movs	r3, #31
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2203      	movs	r2, #3
 80029e8:	701a      	strb	r2, [r3, #0]
          goto error;
 80029ea:	e028      	b.n	8002a3e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1cc      	bne.n	8002990 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	6839      	ldr	r1, [r7, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 fcd9 	bl	80033b4 <SPI_EndRxTxTransaction>
 8002a02:	1e03      	subs	r3, r0, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002a32:	231f      	movs	r3, #31
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e000      	b.n	8002a3e <HAL_SPI_Transmit+0x292>
  }

error:
 8002a3c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	225d      	movs	r2, #93	; 0x5d
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	225c      	movs	r2, #92	; 0x5c
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a4e:	231f      	movs	r3, #31
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	781b      	ldrb	r3, [r3, #0]
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b008      	add	sp, #32
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a6c:	2317      	movs	r3, #23
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	2382      	movs	r3, #130	; 0x82
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d113      	bne.n	8002aa8 <HAL_SPI_Receive+0x4c>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10f      	bne.n	8002aa8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	225d      	movs	r2, #93	; 0x5d
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a90:	1dbb      	adds	r3, r7, #6
 8002a92:	881c      	ldrh	r4, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	0023      	movs	r3, r4
 8002aa0:	f000 f928 	bl	8002cf4 <HAL_SPI_TransmitReceive>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	e11c      	b.n	8002ce2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	225c      	movs	r2, #92	; 0x5c
 8002aac:	5c9b      	ldrb	r3, [r3, r2]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_SPI_Receive+0x5a>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e115      	b.n	8002ce2 <HAL_SPI_Receive+0x286>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	225c      	movs	r2, #92	; 0x5c
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002abe:	f7fe fe61 	bl	8001784 <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	225d      	movs	r2, #93	; 0x5d
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d004      	beq.n	8002adc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002ad2:	2317      	movs	r3, #23
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ada:	e0f7      	b.n	8002ccc <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_SPI_Receive+0x8e>
 8002ae2:	1dbb      	adds	r3, r7, #6
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d104      	bne.n	8002af4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002aea:	2317      	movs	r3, #23
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002af2:	e0eb      	b.n	8002ccc <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	225d      	movs	r2, #93	; 0x5d
 8002af8:	2104      	movs	r1, #4
 8002afa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1dba      	adds	r2, r7, #6
 8002b0c:	2144      	movs	r1, #68	; 0x44
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1dba      	adds	r2, r7, #6
 8002b16:	2146      	movs	r1, #70	; 0x46
 8002b18:	8812      	ldrh	r2, [r2, #0]
 8002b1a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	23e0      	movs	r3, #224	; 0xe0
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d908      	bls.n	8002b58 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4966      	ldr	r1, [pc, #408]	; (8002cec <HAL_SPI_Receive+0x290>)
 8002b52:	400a      	ands	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	e008      	b.n	8002b6a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	0149      	lsls	r1, r1, #5
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d10f      	bne.n	8002b96 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2140      	movs	r1, #64	; 0x40
 8002b82:	438a      	bics	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4957      	ldr	r1, [pc, #348]	; (8002cf0 <HAL_SPI_Receive+0x294>)
 8002b92:	400a      	ands	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2240      	movs	r2, #64	; 0x40
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d007      	beq.n	8002bb4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2140      	movs	r1, #64	; 0x40
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	23e0      	movs	r3, #224	; 0xe0
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d900      	bls.n	8002bc2 <HAL_SPI_Receive+0x166>
 8002bc0:	e069      	b.n	8002c96 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bc2:	e031      	b.n	8002c28 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d117      	bne.n	8002c02 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	001a      	movs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	7812      	ldrb	r2, [r2, #0]
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2246      	movs	r2, #70	; 0x46
 8002bf2:	5a9b      	ldrh	r3, [r3, r2]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b299      	uxth	r1, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2246      	movs	r2, #70	; 0x46
 8002bfe:	5299      	strh	r1, [r3, r2]
 8002c00:	e012      	b.n	8002c28 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c02:	f7fe fdbf 	bl	8001784 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d802      	bhi.n	8002c18 <HAL_SPI_Receive+0x1bc>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	d102      	bne.n	8002c1e <HAL_SPI_Receive+0x1c2>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002c1e:	2317      	movs	r3, #23
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	2203      	movs	r2, #3
 8002c24:	701a      	strb	r2, [r3, #0]
          goto error;
 8002c26:	e051      	b.n	8002ccc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2246      	movs	r2, #70	; 0x46
 8002c2c:	5a9b      	ldrh	r3, [r3, r2]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1c7      	bne.n	8002bc4 <HAL_SPI_Receive+0x168>
 8002c34:	e035      	b.n	8002ca2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d115      	bne.n	8002c70 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	1c9a      	adds	r2, r3, #2
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2246      	movs	r2, #70	; 0x46
 8002c60:	5a9b      	ldrh	r3, [r3, r2]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b299      	uxth	r1, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2246      	movs	r2, #70	; 0x46
 8002c6c:	5299      	strh	r1, [r3, r2]
 8002c6e:	e012      	b.n	8002c96 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c70:	f7fe fd88 	bl	8001784 <HAL_GetTick>
 8002c74:	0002      	movs	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d802      	bhi.n	8002c86 <HAL_SPI_Receive+0x22a>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_SPI_Receive+0x230>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002c8c:	2317      	movs	r3, #23
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2203      	movs	r2, #3
 8002c92:	701a      	strb	r2, [r3, #0]
          goto error;
 8002c94:	e01a      	b.n	8002ccc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2246      	movs	r2, #70	; 0x46
 8002c9a:	5a9b      	ldrh	r3, [r3, r2]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1c9      	bne.n	8002c36 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 fb25 	bl	80032f8 <SPI_EndRxTransaction>
 8002cae:	1e03      	subs	r3, r0, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002cc0:	2317      	movs	r3, #23
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e000      	b.n	8002ccc <HAL_SPI_Receive+0x270>
  }

error :
 8002cca:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	225d      	movs	r2, #93	; 0x5d
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	225c      	movs	r2, #92	; 0x5c
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002cdc:	2317      	movs	r3, #23
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b007      	add	sp, #28
 8002ce8:	bd90      	pop	{r4, r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	ffffefff 	.word	0xffffefff
 8002cf0:	ffffbfff 	.word	0xffffbfff

08002cf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	001a      	movs	r2, r3
 8002d02:	1cbb      	adds	r3, r7, #2
 8002d04:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d06:	2301      	movs	r3, #1
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d0a:	2323      	movs	r3, #35	; 0x23
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	225c      	movs	r2, #92	; 0x5c
 8002d16:	5c9b      	ldrb	r3, [r3, r2]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_SPI_TransmitReceive+0x2c>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e1b5      	b.n	800308c <HAL_SPI_TransmitReceive+0x398>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	225c      	movs	r2, #92	; 0x5c
 8002d24:	2101      	movs	r1, #1
 8002d26:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d28:	f7fe fd2c 	bl	8001784 <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d30:	201b      	movs	r0, #27
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	215d      	movs	r1, #93	; 0x5d
 8002d38:	5c52      	ldrb	r2, [r2, r1]
 8002d3a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d42:	2312      	movs	r3, #18
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	1cba      	adds	r2, r7, #2
 8002d48:	8812      	ldrh	r2, [r2, #0]
 8002d4a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d4c:	183b      	adds	r3, r7, r0
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d011      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x84>
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	2382      	movs	r3, #130	; 0x82
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d107      	bne.n	8002d6e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <HAL_SPI_TransmitReceive+0x7a>
 8002d66:	183b      	adds	r3, r7, r0
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d004      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002d6e:	2323      	movs	r3, #35	; 0x23
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2202      	movs	r2, #2
 8002d74:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d76:	e17e      	b.n	8003076 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <HAL_SPI_TransmitReceive+0x98>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_SPI_TransmitReceive+0x98>
 8002d84:	1cbb      	adds	r3, r7, #2
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002d8c:	2323      	movs	r3, #35	; 0x23
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d94:	e16f      	b.n	8003076 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	225d      	movs	r2, #93	; 0x5d
 8002d9a:	5c9b      	ldrb	r3, [r3, r2]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d003      	beq.n	8002daa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	225d      	movs	r2, #93	; 0x5d
 8002da6:	2105      	movs	r1, #5
 8002da8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1cba      	adds	r2, r7, #2
 8002dba:	2146      	movs	r1, #70	; 0x46
 8002dbc:	8812      	ldrh	r2, [r2, #0]
 8002dbe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1cba      	adds	r2, r7, #2
 8002dc4:	2144      	movs	r1, #68	; 0x44
 8002dc6:	8812      	ldrh	r2, [r2, #0]
 8002dc8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1cba      	adds	r2, r7, #2
 8002dd4:	8812      	ldrh	r2, [r2, #0]
 8002dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1cba      	adds	r2, r7, #2
 8002ddc:	8812      	ldrh	r2, [r2, #0]
 8002dde:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	23e0      	movs	r3, #224	; 0xe0
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d908      	bls.n	8002e0a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	49a4      	ldr	r1, [pc, #656]	; (8003094 <HAL_SPI_TransmitReceive+0x3a0>)
 8002e04:	400a      	ands	r2, r1
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	e008      	b.n	8002e1c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0149      	lsls	r1, r1, #5
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2240      	movs	r2, #64	; 0x40
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d007      	beq.n	8002e3a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2140      	movs	r1, #64	; 0x40
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	23e0      	movs	r3, #224	; 0xe0
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d800      	bhi.n	8002e48 <HAL_SPI_TransmitReceive+0x154>
 8002e46:	e07f      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_SPI_TransmitReceive+0x168>
 8002e50:	2312      	movs	r3, #18
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d000      	beq.n	8002e5c <HAL_SPI_TransmitReceive+0x168>
 8002e5a:	e069      	b.n	8002f30 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	881a      	ldrh	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	1c9a      	adds	r2, r3, #2
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e80:	e056      	b.n	8002f30 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x1d4>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x1d4>
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d113      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	1c9a      	adds	r2, r3, #2
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d11c      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x21c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2246      	movs	r2, #70	; 0x46
 8002eda:	5a9b      	ldrh	r3, [r3, r2]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	b292      	uxth	r2, r2
 8002eee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	1c9a      	adds	r2, r3, #2
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2246      	movs	r2, #70	; 0x46
 8002efe:	5a9b      	ldrh	r3, [r3, r2]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b299      	uxth	r1, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2246      	movs	r2, #70	; 0x46
 8002f0a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f10:	f7fe fc38 	bl	8001784 <HAL_GetTick>
 8002f14:	0002      	movs	r2, r0
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d807      	bhi.n	8002f30 <HAL_SPI_TransmitReceive+0x23c>
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	3301      	adds	r3, #1
 8002f24:	d004      	beq.n	8002f30 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002f26:	2323      	movs	r3, #35	; 0x23
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	701a      	strb	r2, [r3, #0]
        goto error;
 8002f2e:	e0a2      	b.n	8003076 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1a3      	bne.n	8002e82 <HAL_SPI_TransmitReceive+0x18e>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2246      	movs	r2, #70	; 0x46
 8002f3e:	5a9b      	ldrh	r3, [r3, r2]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d19d      	bne.n	8002e82 <HAL_SPI_TransmitReceive+0x18e>
 8002f46:	e085      	b.n	8003054 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_SPI_TransmitReceive+0x268>
 8002f50:	2312      	movs	r3, #18
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d000      	beq.n	8002f5c <HAL_SPI_TransmitReceive+0x268>
 8002f5a:	e070      	b.n	800303e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f82:	e05c      	b.n	800303e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d11c      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x2d8>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d017      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x2d8>
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d114      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d11e      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x324>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2246      	movs	r2, #70	; 0x46
 8002fde:	5a9b      	ldrh	r3, [r3, r2]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d018      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330c      	adds	r3, #12
 8002fec:	001a      	movs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2246      	movs	r2, #70	; 0x46
 8003006:	5a9b      	ldrh	r3, [r3, r2]
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b299      	uxth	r1, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2246      	movs	r2, #70	; 0x46
 8003012:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003014:	2301      	movs	r3, #1
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003018:	f7fe fbb4 	bl	8001784 <HAL_GetTick>
 800301c:	0002      	movs	r2, r0
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003024:	429a      	cmp	r2, r3
 8003026:	d802      	bhi.n	800302e <HAL_SPI_TransmitReceive+0x33a>
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	3301      	adds	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_SPI_TransmitReceive+0x340>
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2b00      	cmp	r3, #0
 8003032:	d104      	bne.n	800303e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003034:	2323      	movs	r3, #35	; 0x23
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2203      	movs	r2, #3
 800303a:	701a      	strb	r2, [r3, #0]
        goto error;
 800303c:	e01b      	b.n	8003076 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d19d      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x290>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2246      	movs	r2, #70	; 0x46
 800304c:	5a9b      	ldrh	r3, [r3, r2]
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d197      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f9aa 	bl	80033b4 <SPI_EndRxTxTransaction>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d007      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003064:	2323      	movs	r3, #35	; 0x23
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	661a      	str	r2, [r3, #96]	; 0x60
 8003072:	e000      	b.n	8003076 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003074:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	225d      	movs	r2, #93	; 0x5d
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	225c      	movs	r2, #92	; 0x5c
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003086:	2323      	movs	r3, #35	; 0x23
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	781b      	ldrb	r3, [r3, #0]
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b00a      	add	sp, #40	; 0x28
 8003092:	bd80      	pop	{r7, pc}
 8003094:	ffffefff 	.word	0xffffefff

08003098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	1dfb      	adds	r3, r7, #7
 80030a6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030a8:	f7fe fb6c 	bl	8001784 <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	18d3      	adds	r3, r2, r3
 80030b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030b8:	f7fe fb64 	bl	8001784 <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030c0:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <SPI_WaitFlagStateUntilTimeout+0x114>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	015b      	lsls	r3, r3, #5
 80030c6:	0d1b      	lsrs	r3, r3, #20
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	4353      	muls	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ce:	e058      	b.n	8003182 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	d055      	beq.n	8003182 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030d6:	f7fe fb55 	bl	8001784 <HAL_GetTick>
 80030da:	0002      	movs	r2, r0
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d902      	bls.n	80030ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d142      	bne.n	8003172 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	21e0      	movs	r1, #224	; 0xe0
 80030f8:	438a      	bics	r2, r1
 80030fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	2382      	movs	r3, #130	; 0x82
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	429a      	cmp	r2, r3
 8003106:	d113      	bne.n	8003130 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	429a      	cmp	r2, r3
 8003112:	d005      	beq.n	8003120 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	429a      	cmp	r2, r3
 800311e:	d107      	bne.n	8003130 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2140      	movs	r1, #64	; 0x40
 800312c:	438a      	bics	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	019b      	lsls	r3, r3, #6
 8003138:	429a      	cmp	r2, r3
 800313a:	d110      	bne.n	800315e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	491a      	ldr	r1, [pc, #104]	; (80031b0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003148:	400a      	ands	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	0189      	lsls	r1, r1, #6
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	225d      	movs	r2, #93	; 0x5d
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	225c      	movs	r2, #92	; 0x5c
 800316a:	2100      	movs	r1, #0
 800316c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e017      	b.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3b01      	subs	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	425a      	negs	r2, r3
 8003192:	4153      	adcs	r3, r2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	001a      	movs	r2, r3
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d197      	bne.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b008      	add	sp, #32
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	20000008 	.word	0x20000008
 80031b0:	ffffdfff 	.word	0xffffdfff

080031b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031c2:	2317      	movs	r3, #23
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031ca:	f7fe fadb 	bl	8001784 <HAL_GetTick>
 80031ce:	0002      	movs	r2, r0
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	18d3      	adds	r3, r2, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80031da:	f7fe fad3 	bl	8001784 <HAL_GetTick>
 80031de:	0003      	movs	r3, r0
 80031e0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	0013      	movs	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	00da      	lsls	r2, r3, #3
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	0d1b      	lsrs	r3, r3, #20
 80031fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fc:	4353      	muls	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003200:	e068      	b.n	80032d4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	23c0      	movs	r3, #192	; 0xc0
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	429a      	cmp	r2, r3
 800320a:	d10a      	bne.n	8003222 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	2117      	movs	r1, #23
 800321a:	187b      	adds	r3, r7, r1
 800321c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800321e:	187b      	adds	r3, r7, r1
 8003220:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	3301      	adds	r3, #1
 8003226:	d055      	beq.n	80032d4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003228:	f7fe faac 	bl	8001784 <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003234:	429a      	cmp	r2, r3
 8003236:	d902      	bls.n	800323e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	2b00      	cmp	r3, #0
 800323c:	d142      	bne.n	80032c4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	21e0      	movs	r1, #224	; 0xe0
 800324a:	438a      	bics	r2, r1
 800324c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	2382      	movs	r3, #130	; 0x82
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	429a      	cmp	r2, r3
 8003258:	d113      	bne.n	8003282 <SPI_WaitFifoStateUntilTimeout+0xce>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	429a      	cmp	r2, r3
 8003264:	d005      	beq.n	8003272 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	429a      	cmp	r2, r3
 8003270:	d107      	bne.n	8003282 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2140      	movs	r1, #64	; 0x40
 800327e:	438a      	bics	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	429a      	cmp	r2, r3
 800328c:	d110      	bne.n	80032b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800329a:	400a      	ands	r2, r1
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	0189      	lsls	r1, r1, #6
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	225d      	movs	r2, #93	; 0x5d
 80032b4:	2101      	movs	r1, #1
 80032b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	225c      	movs	r2, #92	; 0x5c
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e010      	b.n	80032e6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4013      	ands	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d18e      	bne.n	8003202 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b00a      	add	sp, #40	; 0x28
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	20000008 	.word	0x20000008
 80032f4:	ffffdfff 	.word	0xffffdfff

080032f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	2382      	movs	r3, #130	; 0x82
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	429a      	cmp	r2, r3
 800330e:	d113      	bne.n	8003338 <SPI_EndRxTransaction+0x40>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	429a      	cmp	r2, r3
 800331a:	d005      	beq.n	8003328 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	429a      	cmp	r2, r3
 8003326:	d107      	bne.n	8003338 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2140      	movs	r1, #64	; 0x40
 8003334:	438a      	bics	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	0013      	movs	r3, r2
 8003342:	2200      	movs	r2, #0
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	f7ff fea7 	bl	8003098 <SPI_WaitFlagStateUntilTimeout>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d007      	beq.n	800335e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003352:	2220      	movs	r2, #32
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e026      	b.n	80033ac <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	2382      	movs	r3, #130	; 0x82
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	429a      	cmp	r2, r3
 8003368:	d11f      	bne.n	80033aa <SPI_EndRxTransaction+0xb2>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	429a      	cmp	r2, r3
 8003374:	d005      	beq.n	8003382 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	429a      	cmp	r2, r3
 8003380:	d113      	bne.n	80033aa <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	23c0      	movs	r3, #192	; 0xc0
 8003386:	00d9      	lsls	r1, r3, #3
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	0013      	movs	r3, r2
 8003390:	2200      	movs	r2, #0
 8003392:	f7ff ff0f 	bl	80031b4 <SPI_WaitFifoStateUntilTimeout>
 8003396:	1e03      	subs	r3, r0, #0
 8003398:	d007      	beq.n	80033aa <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339e:	2220      	movs	r2, #32
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e000      	b.n	80033ac <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b004      	add	sp, #16
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	23c0      	movs	r3, #192	; 0xc0
 80033c4:	0159      	lsls	r1, r3, #5
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	0013      	movs	r3, r2
 80033ce:	2200      	movs	r2, #0
 80033d0:	f7ff fef0 	bl	80031b4 <SPI_WaitFifoStateUntilTimeout>
 80033d4:	1e03      	subs	r3, r0, #0
 80033d6:	d007      	beq.n	80033e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033dc:	2220      	movs	r2, #32
 80033de:	431a      	orrs	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e027      	b.n	8003438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	0013      	movs	r3, r2
 80033f2:	2200      	movs	r2, #0
 80033f4:	2180      	movs	r1, #128	; 0x80
 80033f6:	f7ff fe4f 	bl	8003098 <SPI_WaitFlagStateUntilTimeout>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d007      	beq.n	800340e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	2220      	movs	r2, #32
 8003404:	431a      	orrs	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e014      	b.n	8003438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	23c0      	movs	r3, #192	; 0xc0
 8003412:	00d9      	lsls	r1, r3, #3
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	0013      	movs	r3, r2
 800341c:	2200      	movs	r2, #0
 800341e:	f7ff fec9 	bl	80031b4 <SPI_WaitFifoStateUntilTimeout>
 8003422:	1e03      	subs	r3, r0, #0
 8003424:	d007      	beq.n	8003436 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342a:	2220      	movs	r2, #32
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e000      	b.n	8003438 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b004      	add	sp, #16
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e04a      	b.n	80034e8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223d      	movs	r2, #61	; 0x3d
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d107      	bne.n	800346e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	223c      	movs	r2, #60	; 0x3c
 8003462:	2100      	movs	r1, #0
 8003464:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0018      	movs	r0, r3
 800346a:	f7fd ffd5 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	223d      	movs	r2, #61	; 0x3d
 8003472:	2102      	movs	r1, #2
 8003474:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	0019      	movs	r1, r3
 8003480:	0010      	movs	r0, r2
 8003482:	f000 fb33 	bl	8003aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2248      	movs	r2, #72	; 0x48
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	223e      	movs	r2, #62	; 0x3e
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	223f      	movs	r2, #63	; 0x3f
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2241      	movs	r2, #65	; 0x41
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2242      	movs	r2, #66	; 0x42
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2243      	movs	r2, #67	; 0x43
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2244      	movs	r2, #68	; 0x44
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2245      	movs	r2, #69	; 0x45
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2246      	movs	r2, #70	; 0x46
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2247      	movs	r2, #71	; 0x47
 80034da:	2101      	movs	r1, #1
 80034dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	223d      	movs	r2, #61	; 0x3d
 80034e2:	2101      	movs	r1, #1
 80034e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b002      	add	sp, #8
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e04a      	b.n	8003598 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	223d      	movs	r2, #61	; 0x3d
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	223c      	movs	r2, #60	; 0x3c
 8003512:	2100      	movs	r1, #0
 8003514:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f7fd ffb1 	bl	8001480 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	223d      	movs	r2, #61	; 0x3d
 8003522:	2102      	movs	r1, #2
 8003524:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	0019      	movs	r1, r3
 8003530:	0010      	movs	r0, r2
 8003532:	f000 fadb 	bl	8003aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2248      	movs	r2, #72	; 0x48
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	223e      	movs	r2, #62	; 0x3e
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	223f      	movs	r2, #63	; 0x3f
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2240      	movs	r2, #64	; 0x40
 8003552:	2101      	movs	r1, #1
 8003554:	5499      	strb	r1, [r3, r2]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2241      	movs	r2, #65	; 0x41
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2242      	movs	r2, #66	; 0x42
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2243      	movs	r2, #67	; 0x43
 800356a:	2101      	movs	r1, #1
 800356c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2244      	movs	r2, #68	; 0x44
 8003572:	2101      	movs	r1, #1
 8003574:	5499      	strb	r1, [r3, r2]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2245      	movs	r2, #69	; 0x45
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2246      	movs	r2, #70	; 0x46
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2247      	movs	r2, #71	; 0x47
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	223d      	movs	r2, #61	; 0x3d
 8003592:	2101      	movs	r1, #1
 8003594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b002      	add	sp, #8
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <HAL_TIM_PWM_Start+0x22>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	223e      	movs	r2, #62	; 0x3e
 80035b4:	5c9b      	ldrb	r3, [r3, r2]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	4193      	sbcs	r3, r2
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	e037      	b.n	8003632 <HAL_TIM_PWM_Start+0x92>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d108      	bne.n	80035da <HAL_TIM_PWM_Start+0x3a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	223f      	movs	r2, #63	; 0x3f
 80035cc:	5c9b      	ldrb	r3, [r3, r2]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	1e5a      	subs	r2, r3, #1
 80035d4:	4193      	sbcs	r3, r2
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	e02b      	b.n	8003632 <HAL_TIM_PWM_Start+0x92>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d108      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x52>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2240      	movs	r2, #64	; 0x40
 80035e4:	5c9b      	ldrb	r3, [r3, r2]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	1e5a      	subs	r2, r3, #1
 80035ec:	4193      	sbcs	r3, r2
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e01f      	b.n	8003632 <HAL_TIM_PWM_Start+0x92>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d108      	bne.n	800360a <HAL_TIM_PWM_Start+0x6a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2241      	movs	r2, #65	; 0x41
 80035fc:	5c9b      	ldrb	r3, [r3, r2]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	4193      	sbcs	r3, r2
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e013      	b.n	8003632 <HAL_TIM_PWM_Start+0x92>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b10      	cmp	r3, #16
 800360e:	d108      	bne.n	8003622 <HAL_TIM_PWM_Start+0x82>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2242      	movs	r2, #66	; 0x42
 8003614:	5c9b      	ldrb	r3, [r3, r2]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	1e5a      	subs	r2, r3, #1
 800361c:	4193      	sbcs	r3, r2
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e007      	b.n	8003632 <HAL_TIM_PWM_Start+0x92>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2243      	movs	r2, #67	; 0x43
 8003626:	5c9b      	ldrb	r3, [r3, r2]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	1e5a      	subs	r2, r3, #1
 800362e:	4193      	sbcs	r3, r2
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e085      	b.n	8003746 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0xaa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	223e      	movs	r2, #62	; 0x3e
 8003644:	2102      	movs	r1, #2
 8003646:	5499      	strb	r1, [r3, r2]
 8003648:	e023      	b.n	8003692 <HAL_TIM_PWM_Start+0xf2>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d104      	bne.n	800365a <HAL_TIM_PWM_Start+0xba>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	223f      	movs	r2, #63	; 0x3f
 8003654:	2102      	movs	r1, #2
 8003656:	5499      	strb	r1, [r3, r2]
 8003658:	e01b      	b.n	8003692 <HAL_TIM_PWM_Start+0xf2>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d104      	bne.n	800366a <HAL_TIM_PWM_Start+0xca>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	2102      	movs	r1, #2
 8003666:	5499      	strb	r1, [r3, r2]
 8003668:	e013      	b.n	8003692 <HAL_TIM_PWM_Start+0xf2>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	d104      	bne.n	800367a <HAL_TIM_PWM_Start+0xda>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2241      	movs	r2, #65	; 0x41
 8003674:	2102      	movs	r1, #2
 8003676:	5499      	strb	r1, [r3, r2]
 8003678:	e00b      	b.n	8003692 <HAL_TIM_PWM_Start+0xf2>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b10      	cmp	r3, #16
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_Start+0xea>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2242      	movs	r2, #66	; 0x42
 8003684:	2102      	movs	r1, #2
 8003686:	5499      	strb	r1, [r3, r2]
 8003688:	e003      	b.n	8003692 <HAL_TIM_PWM_Start+0xf2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2243      	movs	r2, #67	; 0x43
 800368e:	2102      	movs	r1, #2
 8003690:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6839      	ldr	r1, [r7, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	0018      	movs	r0, r3
 800369c:	f000 fdfc 	bl	8004298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <HAL_TIM_PWM_Start+0x1b0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x128>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_TIM_PWM_Start+0x1b4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x128>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a27      	ldr	r2, [pc, #156]	; (8003758 <HAL_TIM_PWM_Start+0x1b8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x128>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a26      	ldr	r2, [pc, #152]	; (800375c <HAL_TIM_PWM_Start+0x1bc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_TIM_PWM_Start+0x12c>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_TIM_PWM_Start+0x12e>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	0209      	lsls	r1, r1, #8
 80036e0:	430a      	orrs	r2, r1
 80036e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a19      	ldr	r2, [pc, #100]	; (8003750 <HAL_TIM_PWM_Start+0x1b0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_TIM_PWM_Start+0x162>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <HAL_TIM_PWM_Start+0x1c0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_TIM_PWM_Start+0x162>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a15      	ldr	r2, [pc, #84]	; (8003754 <HAL_TIM_PWM_Start+0x1b4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d116      	bne.n	8003730 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_TIM_PWM_Start+0x1c4>)
 800370a:	4013      	ands	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b06      	cmp	r3, #6
 8003712:	d016      	beq.n	8003742 <HAL_TIM_PWM_Start+0x1a2>
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	025b      	lsls	r3, r3, #9
 800371a:	429a      	cmp	r2, r3
 800371c:	d011      	beq.n	8003742 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	e008      	b.n	8003742 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e000      	b.n	8003744 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b004      	add	sp, #16
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400
 800375c:	40014800 	.word	0x40014800
 8003760:	40000400 	.word	0x40000400
 8003764:	00010007 	.word	0x00010007

08003768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	223c      	movs	r2, #60	; 0x3c
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800377e:	2302      	movs	r3, #2
 8003780:	e0df      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	223c      	movs	r2, #60	; 0x3c
 8003786:	2101      	movs	r1, #1
 8003788:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b14      	cmp	r3, #20
 800378e:	d900      	bls.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003790:	e0d1      	b.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	009a      	lsls	r2, r3, #2
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8003798:	18d3      	adds	r3, r2, r3
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	0011      	movs	r1, r2
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 fa16 	bl	8003bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2108      	movs	r1, #8
 80037b8:	430a      	orrs	r2, r1
 80037ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2104      	movs	r1, #4
 80037c8:	438a      	bics	r2, r1
 80037ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6999      	ldr	r1, [r3, #24]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	619a      	str	r2, [r3, #24]
      break;
 80037de:	e0ab      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	0011      	movs	r1, r2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 fa7f 	bl	8003cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	0109      	lsls	r1, r1, #4
 80037fc:	430a      	orrs	r2, r1
 80037fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4951      	ldr	r1, [pc, #324]	; (8003950 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800380c:	400a      	ands	r2, r1
 800380e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6999      	ldr	r1, [r3, #24]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	021a      	lsls	r2, r3, #8
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	619a      	str	r2, [r3, #24]
      break;
 8003824:	e088      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f000 fae0 	bl	8003df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2108      	movs	r1, #8
 8003840:	430a      	orrs	r2, r1
 8003842:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2104      	movs	r1, #4
 8003850:	438a      	bics	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69d9      	ldr	r1, [r3, #28]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	61da      	str	r2, [r3, #28]
      break;
 8003866:	e067      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f000 fb47 	bl	8003f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	0109      	lsls	r1, r1, #4
 8003884:	430a      	orrs	r2, r1
 8003886:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	492f      	ldr	r1, [pc, #188]	; (8003950 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003894:	400a      	ands	r2, r1
 8003896:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69d9      	ldr	r1, [r3, #28]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	61da      	str	r2, [r3, #28]
      break;
 80038ac:	e044      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	0011      	movs	r1, r2
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 fb8e 	bl	8003fd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2108      	movs	r1, #8
 80038c8:	430a      	orrs	r2, r1
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2104      	movs	r1, #4
 80038d8:	438a      	bics	r2, r1
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038ee:	e023      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	0011      	movs	r1, r2
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 fbcd 	bl	8004098 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2180      	movs	r1, #128	; 0x80
 800390a:	0109      	lsls	r1, r1, #4
 800390c:	430a      	orrs	r2, r1
 800390e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	490d      	ldr	r1, [pc, #52]	; (8003950 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800391c:	400a      	ands	r2, r1
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	021a      	lsls	r2, r3, #8
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003934:	e000      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8003936:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	223c      	movs	r2, #60	; 0x3c
 800393c:	2100      	movs	r1, #0
 800393e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	0018      	movs	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	b004      	add	sp, #16
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	08005288 	.word	0x08005288
 8003950:	fffffbff 	.word	0xfffffbff

08003954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	223c      	movs	r2, #60	; 0x3c
 8003962:	5c9b      	ldrb	r3, [r3, r2]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_TIM_ConfigClockSource+0x18>
 8003968:	2302      	movs	r3, #2
 800396a:	e0b7      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x188>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	223c      	movs	r2, #60	; 0x3c
 8003970:	2101      	movs	r1, #1
 8003972:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	223d      	movs	r2, #61	; 0x3d
 8003978:	2102      	movs	r1, #2
 800397a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a57      	ldr	r2, [pc, #348]	; (8003ae4 <HAL_TIM_ConfigClockSource+0x190>)
 8003988:	4013      	ands	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a56      	ldr	r2, [pc, #344]	; (8003ae8 <HAL_TIM_ConfigClockSource+0x194>)
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	0192      	lsls	r2, r2, #6
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d040      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0xd6>
 80039a8:	2280      	movs	r2, #128	; 0x80
 80039aa:	0192      	lsls	r2, r2, #6
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d900      	bls.n	80039b2 <HAL_TIM_ConfigClockSource+0x5e>
 80039b0:	e088      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x170>
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	0152      	lsls	r2, r2, #5
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d100      	bne.n	80039bc <HAL_TIM_ConfigClockSource+0x68>
 80039ba:	e085      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x174>
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	0152      	lsls	r2, r2, #5
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d900      	bls.n	80039c6 <HAL_TIM_ConfigClockSource+0x72>
 80039c4:	e07e      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x170>
 80039c6:	2b70      	cmp	r3, #112	; 0x70
 80039c8:	d018      	beq.n	80039fc <HAL_TIM_ConfigClockSource+0xa8>
 80039ca:	d900      	bls.n	80039ce <HAL_TIM_ConfigClockSource+0x7a>
 80039cc:	e07a      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x170>
 80039ce:	2b60      	cmp	r3, #96	; 0x60
 80039d0:	d04f      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x11e>
 80039d2:	d900      	bls.n	80039d6 <HAL_TIM_ConfigClockSource+0x82>
 80039d4:	e076      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x170>
 80039d6:	2b50      	cmp	r3, #80	; 0x50
 80039d8:	d03b      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0xfe>
 80039da:	d900      	bls.n	80039de <HAL_TIM_ConfigClockSource+0x8a>
 80039dc:	e072      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x170>
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d057      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x13e>
 80039e2:	d900      	bls.n	80039e6 <HAL_TIM_ConfigClockSource+0x92>
 80039e4:	e06e      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x170>
 80039e6:	2b30      	cmp	r3, #48	; 0x30
 80039e8:	d063      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15e>
 80039ea:	d86b      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x170>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d060      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15e>
 80039f0:	d868      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x170>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d05d      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15e>
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d05b      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039fa:	e063      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	6899      	ldr	r1, [r3, #8]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f000 fc24 	bl	8004258 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2277      	movs	r2, #119	; 0x77
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
      break;
 8003a28:	e04f      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6899      	ldr	r1, [r3, #8]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f000 fc0d 	bl	8004258 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	01c9      	lsls	r1, r1, #7
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
      break;
 8003a50:	e03b      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	001a      	movs	r2, r3
 8003a60:	f000 fb7e 	bl	8004160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2150      	movs	r1, #80	; 0x50
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f000 fbd8 	bl	8004220 <TIM_ITRx_SetConfig>
      break;
 8003a70:	e02b      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	001a      	movs	r2, r3
 8003a80:	f000 fb9c 	bl	80041bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2160      	movs	r1, #96	; 0x60
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 fbc8 	bl	8004220 <TIM_ITRx_SetConfig>
      break;
 8003a90:	e01b      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	f000 fb5e 	bl	8004160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2140      	movs	r1, #64	; 0x40
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f000 fbb8 	bl	8004220 <TIM_ITRx_SetConfig>
      break;
 8003ab0:	e00b      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	0019      	movs	r1, r3
 8003abc:	0010      	movs	r0, r2
 8003abe:	f000 fbaf 	bl	8004220 <TIM_ITRx_SetConfig>
        break;
 8003ac2:	e002      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	e000      	b.n	8003aca <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003ac8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	223d      	movs	r2, #61	; 0x3d
 8003ace:	2101      	movs	r1, #1
 8003ad0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	223c      	movs	r2, #60	; 0x3c
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b004      	add	sp, #16
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	ffceff88 	.word	0xffceff88
 8003ae8:	ffff00ff 	.word	0xffff00ff

08003aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <TIM_Base_SetConfig+0xd0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_Base_SetConfig+0x20>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a2e      	ldr	r2, [pc, #184]	; (8003bc0 <TIM_Base_SetConfig+0xd4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d108      	bne.n	8003b1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2270      	movs	r2, #112	; 0x70
 8003b10:	4393      	bics	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <TIM_Base_SetConfig+0xd0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <TIM_Base_SetConfig+0x62>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <TIM_Base_SetConfig+0xd4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00f      	beq.n	8003b4e <TIM_Base_SetConfig+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <TIM_Base_SetConfig+0xd8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <TIM_Base_SetConfig+0x62>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <TIM_Base_SetConfig+0xdc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_Base_SetConfig+0x62>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a22      	ldr	r2, [pc, #136]	; (8003bcc <TIM_Base_SetConfig+0xe0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_Base_SetConfig+0x62>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a21      	ldr	r2, [pc, #132]	; (8003bd0 <TIM_Base_SetConfig+0xe4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <TIM_Base_SetConfig+0xe8>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	4393      	bics	r3, r2
 8003b66:	001a      	movs	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <TIM_Base_SetConfig+0xd0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xba>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <TIM_Base_SetConfig+0xdc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0xba>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a0c      	ldr	r2, [pc, #48]	; (8003bcc <TIM_Base_SetConfig+0xe0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0xba>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a0b      	ldr	r2, [pc, #44]	; (8003bd0 <TIM_Base_SetConfig+0xe4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d103      	bne.n	8003bae <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	615a      	str	r2, [r3, #20]
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b004      	add	sp, #16
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40002000 	.word	0x40002000
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	fffffcff 	.word	0xfffffcff

08003bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	2201      	movs	r2, #1
 8003be8:	4393      	bics	r3, r2
 8003bea:	001a      	movs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a32      	ldr	r2, [pc, #200]	; (8003cd0 <TIM_OC1_SetConfig+0xf8>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4393      	bics	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	4393      	bics	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a28      	ldr	r2, [pc, #160]	; (8003cd4 <TIM_OC1_SetConfig+0xfc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <TIM_OC1_SetConfig+0x76>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <TIM_OC1_SetConfig+0x100>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <TIM_OC1_SetConfig+0x76>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <TIM_OC1_SetConfig+0x104>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_OC1_SetConfig+0x76>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <TIM_OC1_SetConfig+0x108>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10c      	bne.n	8003c68 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2208      	movs	r2, #8
 8003c52:	4393      	bics	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2204      	movs	r2, #4
 8003c64:	4393      	bics	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a1a      	ldr	r2, [pc, #104]	; (8003cd4 <TIM_OC1_SetConfig+0xfc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00b      	beq.n	8003c88 <TIM_OC1_SetConfig+0xb0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <TIM_OC1_SetConfig+0x100>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d007      	beq.n	8003c88 <TIM_OC1_SetConfig+0xb0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <TIM_OC1_SetConfig+0x104>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_OC1_SetConfig+0xb0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <TIM_OC1_SetConfig+0x108>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d111      	bne.n	8003cac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4a16      	ldr	r2, [pc, #88]	; (8003ce4 <TIM_OC1_SetConfig+0x10c>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <TIM_OC1_SetConfig+0x110>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b006      	add	sp, #24
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	fffeff8f 	.word	0xfffeff8f
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800
 8003ce4:	fffffeff 	.word	0xfffffeff
 8003ce8:	fffffdff 	.word	0xfffffdff

08003cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	4393      	bics	r3, r2
 8003cfe:	001a      	movs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a2e      	ldr	r2, [pc, #184]	; (8003dd4 <TIM_OC2_SetConfig+0xe8>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a2d      	ldr	r2, [pc, #180]	; (8003dd8 <TIM_OC2_SetConfig+0xec>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2220      	movs	r2, #32
 8003d36:	4393      	bics	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <TIM_OC2_SetConfig+0xf0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10d      	bne.n	8003d6a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	4393      	bics	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2240      	movs	r2, #64	; 0x40
 8003d66:	4393      	bics	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <TIM_OC2_SetConfig+0xf0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <TIM_OC2_SetConfig+0x9e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <TIM_OC2_SetConfig+0xf4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_OC2_SetConfig+0x9e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <TIM_OC2_SetConfig+0xf8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_OC2_SetConfig+0x9e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <TIM_OC2_SetConfig+0xfc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d113      	bne.n	8003db2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4a17      	ldr	r2, [pc, #92]	; (8003dec <TIM_OC2_SetConfig+0x100>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <TIM_OC2_SetConfig+0x104>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	621a      	str	r2, [r3, #32]
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b006      	add	sp, #24
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	feff8fff 	.word	0xfeff8fff
 8003dd8:	fffffcff 	.word	0xfffffcff
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800
 8003dec:	fffffbff 	.word	0xfffffbff
 8003df0:	fffff7ff 	.word	0xfffff7ff

08003df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a35      	ldr	r2, [pc, #212]	; (8003ed8 <TIM_OC3_SetConfig+0xe4>)
 8003e04:	401a      	ands	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <TIM_OC3_SetConfig+0xe8>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2203      	movs	r2, #3
 8003e28:	4393      	bics	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	4a29      	ldr	r2, [pc, #164]	; (8003ee0 <TIM_OC3_SetConfig+0xec>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a25      	ldr	r2, [pc, #148]	; (8003ee4 <TIM_OC3_SetConfig+0xf0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10d      	bne.n	8003e6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4a24      	ldr	r2, [pc, #144]	; (8003ee8 <TIM_OC3_SetConfig+0xf4>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	4a20      	ldr	r2, [pc, #128]	; (8003eec <TIM_OC3_SetConfig+0xf8>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <TIM_OC3_SetConfig+0xf0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <TIM_OC3_SetConfig+0x9a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <TIM_OC3_SetConfig+0xfc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <TIM_OC3_SetConfig+0x9a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <TIM_OC3_SetConfig+0x100>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d003      	beq.n	8003e8e <TIM_OC3_SetConfig+0x9a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <TIM_OC3_SetConfig+0x104>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d113      	bne.n	8003eb6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <TIM_OC3_SetConfig+0x108>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <TIM_OC3_SetConfig+0x10c>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b006      	add	sp, #24
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	fffffeff 	.word	0xfffffeff
 8003edc:	fffeff8f 	.word	0xfffeff8f
 8003ee0:	fffffdff 	.word	0xfffffdff
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	fffff7ff 	.word	0xfffff7ff
 8003eec:	fffffbff 	.word	0xfffffbff
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800
 8003efc:	ffffefff 	.word	0xffffefff
 8003f00:	ffffdfff 	.word	0xffffdfff

08003f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <TIM_OC4_SetConfig+0xb0>)
 8003f14:	401a      	ands	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <TIM_OC4_SetConfig+0xb4>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <TIM_OC4_SetConfig+0xb8>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <TIM_OC4_SetConfig+0xbc>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	031b      	lsls	r3, r3, #12
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <TIM_OC4_SetConfig+0xc0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <TIM_OC4_SetConfig+0x78>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <TIM_OC4_SetConfig+0xc4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <TIM_OC4_SetConfig+0x78>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <TIM_OC4_SetConfig+0xc8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC4_SetConfig+0x78>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <TIM_OC4_SetConfig+0xcc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d109      	bne.n	8003f90 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <TIM_OC4_SetConfig+0xd0>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	019b      	lsls	r3, r3, #6
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b006      	add	sp, #24
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	ffffefff 	.word	0xffffefff
 8003fb8:	feff8fff 	.word	0xfeff8fff
 8003fbc:	fffffcff 	.word	0xfffffcff
 8003fc0:	ffffdfff 	.word	0xffffdfff
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800
 8003fd4:	ffffbfff 	.word	0xffffbfff

08003fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4a25      	ldr	r2, [pc, #148]	; (800407c <TIM_OC5_SetConfig+0xa4>)
 8003fe8:	401a      	ands	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <TIM_OC5_SetConfig+0xa8>)
 8004004:	4013      	ands	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <TIM_OC5_SetConfig+0xac>)
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a17      	ldr	r2, [pc, #92]	; (8004088 <TIM_OC5_SetConfig+0xb0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_OC5_SetConfig+0x6e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a16      	ldr	r2, [pc, #88]	; (800408c <TIM_OC5_SetConfig+0xb4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <TIM_OC5_SetConfig+0x6e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a15      	ldr	r2, [pc, #84]	; (8004090 <TIM_OC5_SetConfig+0xb8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_OC5_SetConfig+0x6e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <TIM_OC5_SetConfig+0xbc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d109      	bne.n	800405a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	4a0c      	ldr	r2, [pc, #48]	; (800407c <TIM_OC5_SetConfig+0xa4>)
 800404a:	4013      	ands	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	621a      	str	r2, [r3, #32]
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b006      	add	sp, #24
 800407a:	bd80      	pop	{r7, pc}
 800407c:	fffeffff 	.word	0xfffeffff
 8004080:	fffeff8f 	.word	0xfffeff8f
 8004084:	fffdffff 	.word	0xfffdffff
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800

08004098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4a26      	ldr	r2, [pc, #152]	; (8004140 <TIM_OC6_SetConfig+0xa8>)
 80040a8:	401a      	ands	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a20      	ldr	r2, [pc, #128]	; (8004144 <TIM_OC6_SetConfig+0xac>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <TIM_OC6_SetConfig+0xb0>)
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	051b      	lsls	r3, r3, #20
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a18      	ldr	r2, [pc, #96]	; (800414c <TIM_OC6_SetConfig+0xb4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00b      	beq.n	8004108 <TIM_OC6_SetConfig+0x70>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a17      	ldr	r2, [pc, #92]	; (8004150 <TIM_OC6_SetConfig+0xb8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <TIM_OC6_SetConfig+0x70>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a16      	ldr	r2, [pc, #88]	; (8004154 <TIM_OC6_SetConfig+0xbc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_OC6_SetConfig+0x70>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a15      	ldr	r2, [pc, #84]	; (8004158 <TIM_OC6_SetConfig+0xc0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d109      	bne.n	800411c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	4a14      	ldr	r2, [pc, #80]	; (800415c <TIM_OC6_SetConfig+0xc4>)
 800410c:	4013      	ands	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	029b      	lsls	r3, r3, #10
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	b006      	add	sp, #24
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	ffefffff 	.word	0xffefffff
 8004144:	feff8fff 	.word	0xfeff8fff
 8004148:	ffdfffff 	.word	0xffdfffff
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800
 800415c:	fffbffff 	.word	0xfffbffff

08004160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	2201      	movs	r2, #1
 8004178:	4393      	bics	r3, r2
 800417a:	001a      	movs	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	22f0      	movs	r2, #240	; 0xf0
 800418a:	4393      	bics	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	220a      	movs	r2, #10
 800419c:	4393      	bics	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b006      	add	sp, #24
 80041ba:	bd80      	pop	{r7, pc}

080041bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	2210      	movs	r2, #16
 80041ce:	4393      	bics	r3, r2
 80041d0:	001a      	movs	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <TIM_TI2_ConfigInputStage+0x60>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	031b      	lsls	r3, r3, #12
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	22a0      	movs	r2, #160	; 0xa0
 80041f8:	4393      	bics	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	b006      	add	sp, #24
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	ffff0fff 	.word	0xffff0fff

08004220 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a08      	ldr	r2, [pc, #32]	; (8004254 <TIM_ITRx_SetConfig+0x34>)
 8004234:	4013      	ands	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	2207      	movs	r2, #7
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	609a      	str	r2, [r3, #8]
}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b004      	add	sp, #16
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	ffcfff8f 	.word	0xffcfff8f

08004258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <TIM_ETR_SetConfig+0x3c>)
 8004270:	4013      	ands	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	431a      	orrs	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b006      	add	sp, #24
 8004292:	bd80      	pop	{r7, pc}
 8004294:	ffff00ff 	.word	0xffff00ff

08004298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	221f      	movs	r2, #31
 80042a8:	4013      	ands	r3, r2
 80042aa:	2201      	movs	r2, #1
 80042ac:	409a      	lsls	r2, r3
 80042ae:	0013      	movs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	43d2      	mvns	r2, r2
 80042ba:	401a      	ands	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	211f      	movs	r1, #31
 80042c8:	400b      	ands	r3, r1
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4099      	lsls	r1, r3
 80042ce:	000b      	movs	r3, r1
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	46bd      	mov	sp, r7
 80042da:	b006      	add	sp, #24
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	223c      	movs	r2, #60	; 0x3c
 80042ee:	5c9b      	ldrb	r3, [r3, r2]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e04f      	b.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	223c      	movs	r2, #60	; 0x3c
 80042fc:	2101      	movs	r1, #1
 80042fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	223d      	movs	r2, #61	; 0x3d
 8004304:	2102      	movs	r1, #2
 8004306:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a20      	ldr	r2, [pc, #128]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d108      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004326:	4013      	ands	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2270      	movs	r2, #112	; 0x70
 8004338:	4393      	bics	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d10c      	bne.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	4393      	bics	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	223d      	movs	r2, #61	; 0x3d
 800438a:	2101      	movs	r1, #1
 800438c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	223c      	movs	r2, #60	; 0x3c
 8004392:	2100      	movs	r1, #0
 8004394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	0018      	movs	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	b004      	add	sp, #16
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	ff0fffff 	.word	0xff0fffff
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40014000 	.word	0x40014000

080043b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	223c      	movs	r2, #60	; 0x3c
 80043c2:	5c9b      	ldrb	r3, [r3, r2]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e079      	b.n	80044c0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	223c      	movs	r2, #60	; 0x3c
 80043d0:	2101      	movs	r1, #1
 80043d2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	22ff      	movs	r2, #255	; 0xff
 80043d8:	4393      	bics	r3, r2
 80043da:	001a      	movs	r2, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a38      	ldr	r2, [pc, #224]	; (80044c8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80043e8:	401a      	ands	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a35      	ldr	r2, [pc, #212]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80043f6:	401a      	ands	r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a33      	ldr	r2, [pc, #204]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004404:	401a      	ands	r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004412:	401a      	ands	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a2e      	ldr	r2, [pc, #184]	; (80044d8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004420:	401a      	ands	r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a2b      	ldr	r2, [pc, #172]	; (80044dc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800442e:	401a      	ands	r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800443c:	401a      	ands	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d106      	bne.n	8004460 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004456:	401a      	ands	r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d121      	bne.n	80044ae <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800446e:	401a      	ands	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	051b      	lsls	r3, r3, #20
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800447e:	401a      	ands	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a1a      	ldr	r2, [pc, #104]	; (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800448c:	401a      	ands	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d106      	bne.n	80044ae <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80044a4:	401a      	ands	r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223c      	movs	r2, #60	; 0x3c
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b004      	add	sp, #16
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	fffffcff 	.word	0xfffffcff
 80044cc:	fffffbff 	.word	0xfffffbff
 80044d0:	fffff7ff 	.word	0xfffff7ff
 80044d4:	ffffefff 	.word	0xffffefff
 80044d8:	ffffdfff 	.word	0xffffdfff
 80044dc:	ffffbfff 	.word	0xffffbfff
 80044e0:	fff0ffff 	.word	0xfff0ffff
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	efffffff 	.word	0xefffffff
 80044ec:	ff0fffff 	.word	0xff0fffff
 80044f0:	feffffff 	.word	0xfeffffff
 80044f4:	fdffffff 	.word	0xfdffffff
 80044f8:	dfffffff 	.word	0xdfffffff

080044fc <__errno>:
 80044fc:	4b01      	ldr	r3, [pc, #4]	; (8004504 <__errno+0x8>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	4770      	bx	lr
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	20000014 	.word	0x20000014

08004508 <__libc_init_array>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	2600      	movs	r6, #0
 800450c:	4d0c      	ldr	r5, [pc, #48]	; (8004540 <__libc_init_array+0x38>)
 800450e:	4c0d      	ldr	r4, [pc, #52]	; (8004544 <__libc_init_array+0x3c>)
 8004510:	1b64      	subs	r4, r4, r5
 8004512:	10a4      	asrs	r4, r4, #2
 8004514:	42a6      	cmp	r6, r4
 8004516:	d109      	bne.n	800452c <__libc_init_array+0x24>
 8004518:	2600      	movs	r6, #0
 800451a:	f000 fe75 	bl	8005208 <_init>
 800451e:	4d0a      	ldr	r5, [pc, #40]	; (8004548 <__libc_init_array+0x40>)
 8004520:	4c0a      	ldr	r4, [pc, #40]	; (800454c <__libc_init_array+0x44>)
 8004522:	1b64      	subs	r4, r4, r5
 8004524:	10a4      	asrs	r4, r4, #2
 8004526:	42a6      	cmp	r6, r4
 8004528:	d105      	bne.n	8004536 <__libc_init_array+0x2e>
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	00b3      	lsls	r3, r6, #2
 800452e:	58eb      	ldr	r3, [r5, r3]
 8004530:	4798      	blx	r3
 8004532:	3601      	adds	r6, #1
 8004534:	e7ee      	b.n	8004514 <__libc_init_array+0xc>
 8004536:	00b3      	lsls	r3, r6, #2
 8004538:	58eb      	ldr	r3, [r5, r3]
 800453a:	4798      	blx	r3
 800453c:	3601      	adds	r6, #1
 800453e:	e7f2      	b.n	8004526 <__libc_init_array+0x1e>
 8004540:	0800545c 	.word	0x0800545c
 8004544:	0800545c 	.word	0x0800545c
 8004548:	0800545c 	.word	0x0800545c
 800454c:	08005460 	.word	0x08005460

08004550 <memcpy>:
 8004550:	2300      	movs	r3, #0
 8004552:	b510      	push	{r4, lr}
 8004554:	429a      	cmp	r2, r3
 8004556:	d100      	bne.n	800455a <memcpy+0xa>
 8004558:	bd10      	pop	{r4, pc}
 800455a:	5ccc      	ldrb	r4, [r1, r3]
 800455c:	54c4      	strb	r4, [r0, r3]
 800455e:	3301      	adds	r3, #1
 8004560:	e7f8      	b.n	8004554 <memcpy+0x4>

08004562 <memset>:
 8004562:	0003      	movs	r3, r0
 8004564:	1882      	adds	r2, r0, r2
 8004566:	4293      	cmp	r3, r2
 8004568:	d100      	bne.n	800456c <memset+0xa>
 800456a:	4770      	bx	lr
 800456c:	7019      	strb	r1, [r3, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	e7f9      	b.n	8004566 <memset+0x4>
	...

08004574 <siscanf>:
 8004574:	b40e      	push	{r1, r2, r3}
 8004576:	b530      	push	{r4, r5, lr}
 8004578:	2381      	movs	r3, #129	; 0x81
 800457a:	b09c      	sub	sp, #112	; 0x70
 800457c:	466a      	mov	r2, sp
 800457e:	ac1f      	add	r4, sp, #124	; 0x7c
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	cc20      	ldmia	r4!, {r5}
 8004584:	8293      	strh	r3, [r2, #20]
 8004586:	9002      	str	r0, [sp, #8]
 8004588:	9006      	str	r0, [sp, #24]
 800458a:	f7fb fdb7 	bl	80000fc <strlen>
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <siscanf+0x48>)
 8004590:	466a      	mov	r2, sp
 8004592:	930b      	str	r3, [sp, #44]	; 0x2c
 8004594:	2300      	movs	r3, #0
 8004596:	9003      	str	r0, [sp, #12]
 8004598:	9007      	str	r0, [sp, #28]
 800459a:	4809      	ldr	r0, [pc, #36]	; (80045c0 <siscanf+0x4c>)
 800459c:	930f      	str	r3, [sp, #60]	; 0x3c
 800459e:	9314      	str	r3, [sp, #80]	; 0x50
 80045a0:	3b01      	subs	r3, #1
 80045a2:	82d3      	strh	r3, [r2, #22]
 80045a4:	a902      	add	r1, sp, #8
 80045a6:	0023      	movs	r3, r4
 80045a8:	002a      	movs	r2, r5
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	9401      	str	r4, [sp, #4]
 80045ae:	f000 f867 	bl	8004680 <__ssvfiscanf_r>
 80045b2:	b01c      	add	sp, #112	; 0x70
 80045b4:	bc30      	pop	{r4, r5}
 80045b6:	bc08      	pop	{r3}
 80045b8:	b003      	add	sp, #12
 80045ba:	4718      	bx	r3
 80045bc:	080045c5 	.word	0x080045c5
 80045c0:	20000014 	.word	0x20000014

080045c4 <__seofread>:
 80045c4:	2000      	movs	r0, #0
 80045c6:	4770      	bx	lr

080045c8 <_sungetc_r>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	0014      	movs	r4, r2
 80045cc:	1c4b      	adds	r3, r1, #1
 80045ce:	d103      	bne.n	80045d8 <_sungetc_r+0x10>
 80045d0:	2501      	movs	r5, #1
 80045d2:	426d      	negs	r5, r5
 80045d4:	0028      	movs	r0, r5
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	8993      	ldrh	r3, [r2, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	4393      	bics	r3, r2
 80045de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	b2ce      	uxtb	r6, r1
 80045e4:	6863      	ldr	r3, [r4, #4]
 80045e6:	b2cd      	uxtb	r5, r1
 80045e8:	2a00      	cmp	r2, #0
 80045ea:	d010      	beq.n	800460e <_sungetc_r+0x46>
 80045ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045ee:	429a      	cmp	r2, r3
 80045f0:	dd07      	ble.n	8004602 <_sungetc_r+0x3a>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	701e      	strb	r6, [r3, #0]
 80045fa:	6863      	ldr	r3, [r4, #4]
 80045fc:	3301      	adds	r3, #1
 80045fe:	6063      	str	r3, [r4, #4]
 8004600:	e7e8      	b.n	80045d4 <_sungetc_r+0xc>
 8004602:	0021      	movs	r1, r4
 8004604:	f000 fc78 	bl	8004ef8 <__submore>
 8004608:	2800      	cmp	r0, #0
 800460a:	d0f2      	beq.n	80045f2 <_sungetc_r+0x2a>
 800460c:	e7e0      	b.n	80045d0 <_sungetc_r+0x8>
 800460e:	6921      	ldr	r1, [r4, #16]
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	2900      	cmp	r1, #0
 8004614:	d007      	beq.n	8004626 <_sungetc_r+0x5e>
 8004616:	4291      	cmp	r1, r2
 8004618:	d205      	bcs.n	8004626 <_sungetc_r+0x5e>
 800461a:	1e51      	subs	r1, r2, #1
 800461c:	7808      	ldrb	r0, [r1, #0]
 800461e:	42a8      	cmp	r0, r5
 8004620:	d101      	bne.n	8004626 <_sungetc_r+0x5e>
 8004622:	6021      	str	r1, [r4, #0]
 8004624:	e7ea      	b.n	80045fc <_sungetc_r+0x34>
 8004626:	6423      	str	r3, [r4, #64]	; 0x40
 8004628:	0023      	movs	r3, r4
 800462a:	3344      	adds	r3, #68	; 0x44
 800462c:	6363      	str	r3, [r4, #52]	; 0x34
 800462e:	2303      	movs	r3, #3
 8004630:	63a3      	str	r3, [r4, #56]	; 0x38
 8004632:	0023      	movs	r3, r4
 8004634:	3346      	adds	r3, #70	; 0x46
 8004636:	63e2      	str	r2, [r4, #60]	; 0x3c
 8004638:	701e      	strb	r6, [r3, #0]
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	2301      	movs	r3, #1
 800463e:	e7de      	b.n	80045fe <_sungetc_r+0x36>

08004640 <__ssrefill_r>:
 8004640:	b510      	push	{r4, lr}
 8004642:	000c      	movs	r4, r1
 8004644:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004646:	2900      	cmp	r1, #0
 8004648:	d00e      	beq.n	8004668 <__ssrefill_r+0x28>
 800464a:	0023      	movs	r3, r4
 800464c:	3344      	adds	r3, #68	; 0x44
 800464e:	4299      	cmp	r1, r3
 8004650:	d001      	beq.n	8004656 <__ssrefill_r+0x16>
 8004652:	f000 fc9d 	bl	8004f90 <_free_r>
 8004656:	2000      	movs	r0, #0
 8004658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800465a:	6360      	str	r0, [r4, #52]	; 0x34
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	4283      	cmp	r3, r0
 8004660:	d002      	beq.n	8004668 <__ssrefill_r+0x28>
 8004662:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd10      	pop	{r4, pc}
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	2001      	movs	r0, #1
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	89a2      	ldrh	r2, [r4, #12]
 8004672:	6063      	str	r3, [r4, #4]
 8004674:	3320      	adds	r3, #32
 8004676:	4313      	orrs	r3, r2
 8004678:	81a3      	strh	r3, [r4, #12]
 800467a:	4240      	negs	r0, r0
 800467c:	e7f3      	b.n	8004666 <__ssrefill_r+0x26>
	...

08004680 <__ssvfiscanf_r>:
 8004680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004682:	4cb8      	ldr	r4, [pc, #736]	; (8004964 <__ssvfiscanf_r+0x2e4>)
 8004684:	0006      	movs	r6, r0
 8004686:	44a5      	add	sp, r4
 8004688:	000c      	movs	r4, r1
 800468a:	2100      	movs	r1, #0
 800468c:	9146      	str	r1, [sp, #280]	; 0x118
 800468e:	9147      	str	r1, [sp, #284]	; 0x11c
 8004690:	a903      	add	r1, sp, #12
 8004692:	9148      	str	r1, [sp, #288]	; 0x120
 8004694:	21be      	movs	r1, #190	; 0xbe
 8004696:	48b4      	ldr	r0, [pc, #720]	; (8004968 <__ssvfiscanf_r+0x2e8>)
 8004698:	0049      	lsls	r1, r1, #1
 800469a:	ad43      	add	r5, sp, #268	; 0x10c
 800469c:	5068      	str	r0, [r5, r1]
 800469e:	25c0      	movs	r5, #192	; 0xc0
 80046a0:	49b2      	ldr	r1, [pc, #712]	; (800496c <__ssvfiscanf_r+0x2ec>)
 80046a2:	006d      	lsls	r5, r5, #1
 80046a4:	a843      	add	r0, sp, #268	; 0x10c
 80046a6:	5141      	str	r1, [r0, r5]
 80046a8:	9302      	str	r3, [sp, #8]
 80046aa:	7813      	ldrb	r3, [r2, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d100      	bne.n	80046b2 <__ssvfiscanf_r+0x32>
 80046b0:	e155      	b.n	800495e <__ssvfiscanf_r+0x2de>
 80046b2:	49af      	ldr	r1, [pc, #700]	; (8004970 <__ssvfiscanf_r+0x2f0>)
 80046b4:	2508      	movs	r5, #8
 80046b6:	5cc8      	ldrb	r0, [r1, r3]
 80046b8:	2108      	movs	r1, #8
 80046ba:	1c57      	adds	r7, r2, #1
 80046bc:	4001      	ands	r1, r0
 80046be:	4228      	tst	r0, r5
 80046c0:	d020      	beq.n	8004704 <__ssvfiscanf_r+0x84>
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	dd12      	ble.n	80046ee <__ssvfiscanf_r+0x6e>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	49a9      	ldr	r1, [pc, #676]	; (8004970 <__ssvfiscanf_r+0x2f0>)
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	5c8a      	ldrb	r2, [r1, r2]
 80046d0:	2108      	movs	r1, #8
 80046d2:	420a      	tst	r2, r1
 80046d4:	d101      	bne.n	80046da <__ssvfiscanf_r+0x5a>
 80046d6:	003a      	movs	r2, r7
 80046d8:	e7e7      	b.n	80046aa <__ssvfiscanf_r+0x2a>
 80046da:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80046dc:	3301      	adds	r3, #1
 80046de:	9200      	str	r2, [sp, #0]
 80046e0:	3201      	adds	r2, #1
 80046e2:	9247      	str	r2, [sp, #284]	; 0x11c
 80046e4:	6862      	ldr	r2, [r4, #4]
 80046e6:	6023      	str	r3, [r4, #0]
 80046e8:	3a01      	subs	r2, #1
 80046ea:	6062      	str	r2, [r4, #4]
 80046ec:	e7e9      	b.n	80046c2 <__ssvfiscanf_r+0x42>
 80046ee:	22c0      	movs	r2, #192	; 0xc0
 80046f0:	ab43      	add	r3, sp, #268	; 0x10c
 80046f2:	0052      	lsls	r2, r2, #1
 80046f4:	589b      	ldr	r3, [r3, r2]
 80046f6:	0021      	movs	r1, r4
 80046f8:	0030      	movs	r0, r6
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	4798      	blx	r3
 80046fe:	2800      	cmp	r0, #0
 8004700:	d0e2      	beq.n	80046c8 <__ssvfiscanf_r+0x48>
 8004702:	e7e8      	b.n	80046d6 <__ssvfiscanf_r+0x56>
 8004704:	001d      	movs	r5, r3
 8004706:	2b25      	cmp	r3, #37	; 0x25
 8004708:	d164      	bne.n	80047d4 <__ssvfiscanf_r+0x154>
 800470a:	9145      	str	r1, [sp, #276]	; 0x114
 800470c:	9143      	str	r1, [sp, #268]	; 0x10c
 800470e:	7853      	ldrb	r3, [r2, #1]
 8004710:	2b2a      	cmp	r3, #42	; 0x2a
 8004712:	d102      	bne.n	800471a <__ssvfiscanf_r+0x9a>
 8004714:	3b1a      	subs	r3, #26
 8004716:	9343      	str	r3, [sp, #268]	; 0x10c
 8004718:	1c97      	adds	r7, r2, #2
 800471a:	003d      	movs	r5, r7
 800471c:	220a      	movs	r2, #10
 800471e:	7829      	ldrb	r1, [r5, #0]
 8004720:	1c6b      	adds	r3, r5, #1
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	000b      	movs	r3, r1
 8004726:	3b30      	subs	r3, #48	; 0x30
 8004728:	2b09      	cmp	r3, #9
 800472a:	d91f      	bls.n	800476c <__ssvfiscanf_r+0xec>
 800472c:	4f91      	ldr	r7, [pc, #580]	; (8004974 <__ssvfiscanf_r+0x2f4>)
 800472e:	2203      	movs	r2, #3
 8004730:	0038      	movs	r0, r7
 8004732:	f000 fc21 	bl	8004f78 <memchr>
 8004736:	2800      	cmp	r0, #0
 8004738:	d007      	beq.n	800474a <__ssvfiscanf_r+0xca>
 800473a:	2301      	movs	r3, #1
 800473c:	1bc0      	subs	r0, r0, r7
 800473e:	4083      	lsls	r3, r0
 8004740:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004742:	9d00      	ldr	r5, [sp, #0]
 8004744:	4313      	orrs	r3, r2
 8004746:	9201      	str	r2, [sp, #4]
 8004748:	9343      	str	r3, [sp, #268]	; 0x10c
 800474a:	1c6f      	adds	r7, r5, #1
 800474c:	782d      	ldrb	r5, [r5, #0]
 800474e:	2d78      	cmp	r5, #120	; 0x78
 8004750:	d807      	bhi.n	8004762 <__ssvfiscanf_r+0xe2>
 8004752:	2d57      	cmp	r5, #87	; 0x57
 8004754:	d812      	bhi.n	800477c <__ssvfiscanf_r+0xfc>
 8004756:	2d25      	cmp	r5, #37	; 0x25
 8004758:	d03c      	beq.n	80047d4 <__ssvfiscanf_r+0x154>
 800475a:	d836      	bhi.n	80047ca <__ssvfiscanf_r+0x14a>
 800475c:	2d00      	cmp	r5, #0
 800475e:	d100      	bne.n	8004762 <__ssvfiscanf_r+0xe2>
 8004760:	e0fa      	b.n	8004958 <__ssvfiscanf_r+0x2d8>
 8004762:	2303      	movs	r3, #3
 8004764:	9349      	str	r3, [sp, #292]	; 0x124
 8004766:	3307      	adds	r3, #7
 8004768:	9344      	str	r3, [sp, #272]	; 0x110
 800476a:	e06d      	b.n	8004848 <__ssvfiscanf_r+0x1c8>
 800476c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800476e:	9d00      	ldr	r5, [sp, #0]
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	4353      	muls	r3, r2
 8004774:	3b30      	subs	r3, #48	; 0x30
 8004776:	185b      	adds	r3, r3, r1
 8004778:	9345      	str	r3, [sp, #276]	; 0x114
 800477a:	e7d0      	b.n	800471e <__ssvfiscanf_r+0x9e>
 800477c:	0028      	movs	r0, r5
 800477e:	3858      	subs	r0, #88	; 0x58
 8004780:	2820      	cmp	r0, #32
 8004782:	d8ee      	bhi.n	8004762 <__ssvfiscanf_r+0xe2>
 8004784:	f7fb fcc2 	bl	800010c <__gnu_thumb1_case_shi>
 8004788:	ffed0051 	.word	0xffed0051
 800478c:	0087ffed 	.word	0x0087ffed
 8004790:	ffedffed 	.word	0xffedffed
 8004794:	ffedffed 	.word	0xffedffed
 8004798:	ffedffed 	.word	0xffedffed
 800479c:	0095ffed 	.word	0x0095ffed
 80047a0:	0024007d 	.word	0x0024007d
 80047a4:	00240024 	.word	0x00240024
 80047a8:	007fffed 	.word	0x007fffed
 80047ac:	ffedffed 	.word	0xffedffed
 80047b0:	ffedffed 	.word	0xffedffed
 80047b4:	0083009f 	.word	0x0083009f
 80047b8:	ffed004b 	.word	0xffed004b
 80047bc:	009dffed 	.word	0x009dffed
 80047c0:	007dffed 	.word	0x007dffed
 80047c4:	ffedffed 	.word	0xffedffed
 80047c8:	0051      	.short	0x0051
 80047ca:	3d45      	subs	r5, #69	; 0x45
 80047cc:	2d02      	cmp	r5, #2
 80047ce:	d8c8      	bhi.n	8004762 <__ssvfiscanf_r+0xe2>
 80047d0:	2305      	movs	r3, #5
 80047d2:	e06c      	b.n	80048ae <__ssvfiscanf_r+0x22e>
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	dd0e      	ble.n	80047f8 <__ssvfiscanf_r+0x178>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	42aa      	cmp	r2, r5
 80047e0:	d000      	beq.n	80047e4 <__ssvfiscanf_r+0x164>
 80047e2:	e0bc      	b.n	800495e <__ssvfiscanf_r+0x2de>
 80047e4:	3301      	adds	r3, #1
 80047e6:	6862      	ldr	r2, [r4, #4]
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80047ec:	3a01      	subs	r2, #1
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	6062      	str	r2, [r4, #4]
 80047f4:	9347      	str	r3, [sp, #284]	; 0x11c
 80047f6:	e76e      	b.n	80046d6 <__ssvfiscanf_r+0x56>
 80047f8:	22c0      	movs	r2, #192	; 0xc0
 80047fa:	ab43      	add	r3, sp, #268	; 0x10c
 80047fc:	0052      	lsls	r2, r2, #1
 80047fe:	589b      	ldr	r3, [r3, r2]
 8004800:	0021      	movs	r1, r4
 8004802:	0030      	movs	r0, r6
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	4798      	blx	r3
 8004808:	2800      	cmp	r0, #0
 800480a:	d0e6      	beq.n	80047da <__ssvfiscanf_r+0x15a>
 800480c:	9846      	ldr	r0, [sp, #280]	; 0x118
 800480e:	2800      	cmp	r0, #0
 8004810:	d000      	beq.n	8004814 <__ssvfiscanf_r+0x194>
 8004812:	e09d      	b.n	8004950 <__ssvfiscanf_r+0x2d0>
 8004814:	3801      	subs	r0, #1
 8004816:	23a5      	movs	r3, #165	; 0xa5
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	449d      	add	sp, r3
 800481c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	2320      	movs	r3, #32
 8004824:	9a00      	ldr	r2, [sp, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	9343      	str	r3, [sp, #268]	; 0x10c
 800482a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	9a00      	ldr	r2, [sp, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4313      	orrs	r3, r2
 8004836:	9343      	str	r3, [sp, #268]	; 0x10c
 8004838:	2310      	movs	r3, #16
 800483a:	9344      	str	r3, [sp, #272]	; 0x110
 800483c:	236e      	movs	r3, #110	; 0x6e
 800483e:	42ab      	cmp	r3, r5
 8004840:	41ad      	sbcs	r5, r5
 8004842:	426d      	negs	r5, r5
 8004844:	3503      	adds	r5, #3
 8004846:	9549      	str	r5, [sp, #292]	; 0x124
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	dd4a      	ble.n	80048e4 <__ssvfiscanf_r+0x264>
 800484e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	065b      	lsls	r3, r3, #25
 8004854:	d406      	bmi.n	8004864 <__ssvfiscanf_r+0x1e4>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	4945      	ldr	r1, [pc, #276]	; (8004970 <__ssvfiscanf_r+0x2f0>)
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	5c8a      	ldrb	r2, [r1, r2]
 800485e:	2108      	movs	r1, #8
 8004860:	420a      	tst	r2, r1
 8004862:	d14a      	bne.n	80048fa <__ssvfiscanf_r+0x27a>
 8004864:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004866:	2b02      	cmp	r3, #2
 8004868:	dc5e      	bgt.n	8004928 <__ssvfiscanf_r+0x2a8>
 800486a:	0022      	movs	r2, r4
 800486c:	0030      	movs	r0, r6
 800486e:	ab02      	add	r3, sp, #8
 8004870:	a943      	add	r1, sp, #268	; 0x10c
 8004872:	f000 f883 	bl	800497c <_scanf_chars>
 8004876:	2801      	cmp	r0, #1
 8004878:	d071      	beq.n	800495e <__ssvfiscanf_r+0x2de>
 800487a:	2802      	cmp	r0, #2
 800487c:	d000      	beq.n	8004880 <__ssvfiscanf_r+0x200>
 800487e:	e72a      	b.n	80046d6 <__ssvfiscanf_r+0x56>
 8004880:	e7c4      	b.n	800480c <__ssvfiscanf_r+0x18c>
 8004882:	230a      	movs	r3, #10
 8004884:	e7d9      	b.n	800483a <__ssvfiscanf_r+0x1ba>
 8004886:	2300      	movs	r3, #0
 8004888:	2503      	movs	r5, #3
 800488a:	9344      	str	r3, [sp, #272]	; 0x110
 800488c:	e7db      	b.n	8004846 <__ssvfiscanf_r+0x1c6>
 800488e:	2308      	movs	r3, #8
 8004890:	2504      	movs	r5, #4
 8004892:	9344      	str	r3, [sp, #272]	; 0x110
 8004894:	e7d7      	b.n	8004846 <__ssvfiscanf_r+0x1c6>
 8004896:	0039      	movs	r1, r7
 8004898:	a803      	add	r0, sp, #12
 800489a:	f000 f9d1 	bl	8004c40 <__sccl>
 800489e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80048a0:	0007      	movs	r7, r0
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2340      	movs	r3, #64	; 0x40
 80048a6:	9a00      	ldr	r2, [sp, #0]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	9343      	str	r3, [sp, #268]	; 0x10c
 80048ac:	2301      	movs	r3, #1
 80048ae:	9349      	str	r3, [sp, #292]	; 0x124
 80048b0:	e7ca      	b.n	8004848 <__ssvfiscanf_r+0x1c8>
 80048b2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	2340      	movs	r3, #64	; 0x40
 80048b8:	9a00      	ldr	r2, [sp, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80048be:	2300      	movs	r3, #0
 80048c0:	e7f5      	b.n	80048ae <__ssvfiscanf_r+0x22e>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e7f3      	b.n	80048ae <__ssvfiscanf_r+0x22e>
 80048c6:	9843      	ldr	r0, [sp, #268]	; 0x10c
 80048c8:	06c3      	lsls	r3, r0, #27
 80048ca:	d500      	bpl.n	80048ce <__ssvfiscanf_r+0x24e>
 80048cc:	e703      	b.n	80046d6 <__ssvfiscanf_r+0x56>
 80048ce:	9b02      	ldr	r3, [sp, #8]
 80048d0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80048d2:	1d19      	adds	r1, r3, #4
 80048d4:	9102      	str	r1, [sp, #8]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	07c5      	lsls	r5, r0, #31
 80048da:	d501      	bpl.n	80048e0 <__ssvfiscanf_r+0x260>
 80048dc:	801a      	strh	r2, [r3, #0]
 80048de:	e6fa      	b.n	80046d6 <__ssvfiscanf_r+0x56>
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e6f8      	b.n	80046d6 <__ssvfiscanf_r+0x56>
 80048e4:	22c0      	movs	r2, #192	; 0xc0
 80048e6:	ab43      	add	r3, sp, #268	; 0x10c
 80048e8:	0052      	lsls	r2, r2, #1
 80048ea:	589b      	ldr	r3, [r3, r2]
 80048ec:	0021      	movs	r1, r4
 80048ee:	0030      	movs	r0, r6
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	4798      	blx	r3
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d0aa      	beq.n	800484e <__ssvfiscanf_r+0x1ce>
 80048f8:	e788      	b.n	800480c <__ssvfiscanf_r+0x18c>
 80048fa:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80048fc:	9200      	str	r2, [sp, #0]
 80048fe:	3201      	adds	r2, #1
 8004900:	9247      	str	r2, [sp, #284]	; 0x11c
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	3a01      	subs	r2, #1
 8004906:	6062      	str	r2, [r4, #4]
 8004908:	2a00      	cmp	r2, #0
 800490a:	dd02      	ble.n	8004912 <__ssvfiscanf_r+0x292>
 800490c:	3301      	adds	r3, #1
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	e7a1      	b.n	8004856 <__ssvfiscanf_r+0x1d6>
 8004912:	22c0      	movs	r2, #192	; 0xc0
 8004914:	ab43      	add	r3, sp, #268	; 0x10c
 8004916:	0052      	lsls	r2, r2, #1
 8004918:	589b      	ldr	r3, [r3, r2]
 800491a:	0021      	movs	r1, r4
 800491c:	0030      	movs	r0, r6
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	4798      	blx	r3
 8004922:	2800      	cmp	r0, #0
 8004924:	d097      	beq.n	8004856 <__ssvfiscanf_r+0x1d6>
 8004926:	e771      	b.n	800480c <__ssvfiscanf_r+0x18c>
 8004928:	2b04      	cmp	r3, #4
 800492a:	dc06      	bgt.n	800493a <__ssvfiscanf_r+0x2ba>
 800492c:	0022      	movs	r2, r4
 800492e:	0030      	movs	r0, r6
 8004930:	ab02      	add	r3, sp, #8
 8004932:	a943      	add	r1, sp, #268	; 0x10c
 8004934:	f000 f880 	bl	8004a38 <_scanf_i>
 8004938:	e79d      	b.n	8004876 <__ssvfiscanf_r+0x1f6>
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <__ssvfiscanf_r+0x2f8>)
 800493c:	2b00      	cmp	r3, #0
 800493e:	d100      	bne.n	8004942 <__ssvfiscanf_r+0x2c2>
 8004940:	e6c9      	b.n	80046d6 <__ssvfiscanf_r+0x56>
 8004942:	0022      	movs	r2, r4
 8004944:	0030      	movs	r0, r6
 8004946:	ab02      	add	r3, sp, #8
 8004948:	a943      	add	r1, sp, #268	; 0x10c
 800494a:	e000      	b.n	800494e <__ssvfiscanf_r+0x2ce>
 800494c:	bf00      	nop
 800494e:	e792      	b.n	8004876 <__ssvfiscanf_r+0x1f6>
 8004950:	89a3      	ldrh	r3, [r4, #12]
 8004952:	065b      	lsls	r3, r3, #25
 8004954:	d400      	bmi.n	8004958 <__ssvfiscanf_r+0x2d8>
 8004956:	e75e      	b.n	8004816 <__ssvfiscanf_r+0x196>
 8004958:	2001      	movs	r0, #1
 800495a:	4240      	negs	r0, r0
 800495c:	e75b      	b.n	8004816 <__ssvfiscanf_r+0x196>
 800495e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004960:	e759      	b.n	8004816 <__ssvfiscanf_r+0x196>
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	fffffd6c 	.word	0xfffffd6c
 8004968:	080045c9 	.word	0x080045c9
 800496c:	08004641 	.word	0x08004641
 8004970:	080052fc 	.word	0x080052fc
 8004974:	080052dc 	.word	0x080052dc
 8004978:	00000000 	.word	0x00000000

0800497c <_scanf_chars>:
 800497c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800497e:	0015      	movs	r5, r2
 8004980:	688a      	ldr	r2, [r1, #8]
 8004982:	000c      	movs	r4, r1
 8004984:	9001      	str	r0, [sp, #4]
 8004986:	2a00      	cmp	r2, #0
 8004988:	d105      	bne.n	8004996 <_scanf_chars+0x1a>
 800498a:	6989      	ldr	r1, [r1, #24]
 800498c:	3201      	adds	r2, #1
 800498e:	2900      	cmp	r1, #0
 8004990:	d000      	beq.n	8004994 <_scanf_chars+0x18>
 8004992:	3a02      	subs	r2, #2
 8004994:	60a2      	str	r2, [r4, #8]
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	06d2      	lsls	r2, r2, #27
 800499a:	d403      	bmi.n	80049a4 <_scanf_chars+0x28>
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	1d11      	adds	r1, r2, #4
 80049a0:	6019      	str	r1, [r3, #0]
 80049a2:	6817      	ldr	r7, [r2, #0]
 80049a4:	2600      	movs	r6, #0
 80049a6:	69a0      	ldr	r0, [r4, #24]
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d013      	beq.n	80049d4 <_scanf_chars+0x58>
 80049ac:	2801      	cmp	r0, #1
 80049ae:	d108      	bne.n	80049c2 <_scanf_chars+0x46>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	6962      	ldr	r2, [r4, #20]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <_scanf_chars+0x58>
 80049bc:	2e00      	cmp	r6, #0
 80049be:	d038      	beq.n	8004a32 <_scanf_chars+0xb6>
 80049c0:	e026      	b.n	8004a10 <_scanf_chars+0x94>
 80049c2:	2802      	cmp	r0, #2
 80049c4:	d124      	bne.n	8004a10 <_scanf_chars+0x94>
 80049c6:	682b      	ldr	r3, [r5, #0]
 80049c8:	4a1a      	ldr	r2, [pc, #104]	; (8004a34 <_scanf_chars+0xb8>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	5cd3      	ldrb	r3, [r2, r3]
 80049ce:	2208      	movs	r2, #8
 80049d0:	4213      	tst	r3, r2
 80049d2:	d11d      	bne.n	8004a10 <_scanf_chars+0x94>
 80049d4:	2210      	movs	r2, #16
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	3601      	adds	r6, #1
 80049da:	4213      	tst	r3, r2
 80049dc:	d103      	bne.n	80049e6 <_scanf_chars+0x6a>
 80049de:	682b      	ldr	r3, [r5, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	703b      	strb	r3, [r7, #0]
 80049e4:	3701      	adds	r7, #1
 80049e6:	682a      	ldr	r2, [r5, #0]
 80049e8:	686b      	ldr	r3, [r5, #4]
 80049ea:	3201      	adds	r2, #1
 80049ec:	602a      	str	r2, [r5, #0]
 80049ee:	68a2      	ldr	r2, [r4, #8]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	3a01      	subs	r2, #1
 80049f4:	606b      	str	r3, [r5, #4]
 80049f6:	60a2      	str	r2, [r4, #8]
 80049f8:	2a00      	cmp	r2, #0
 80049fa:	d009      	beq.n	8004a10 <_scanf_chars+0x94>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	dcd2      	bgt.n	80049a6 <_scanf_chars+0x2a>
 8004a00:	23c0      	movs	r3, #192	; 0xc0
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	0029      	movs	r1, r5
 8004a06:	58e3      	ldr	r3, [r4, r3]
 8004a08:	9801      	ldr	r0, [sp, #4]
 8004a0a:	4798      	blx	r3
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d0ca      	beq.n	80049a6 <_scanf_chars+0x2a>
 8004a10:	6822      	ldr	r2, [r4, #0]
 8004a12:	2310      	movs	r3, #16
 8004a14:	0011      	movs	r1, r2
 8004a16:	4019      	ands	r1, r3
 8004a18:	421a      	tst	r2, r3
 8004a1a:	d106      	bne.n	8004a2a <_scanf_chars+0xae>
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60e3      	str	r3, [r4, #12]
 8004a22:	69a3      	ldr	r3, [r4, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d000      	beq.n	8004a2a <_scanf_chars+0xae>
 8004a28:	7039      	strb	r1, [r7, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	199e      	adds	r6, r3, r6
 8004a30:	6126      	str	r6, [r4, #16]
 8004a32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a34:	080052fc 	.word	0x080052fc

08004a38 <_scanf_i>:
 8004a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3a:	000c      	movs	r4, r1
 8004a3c:	b08d      	sub	sp, #52	; 0x34
 8004a3e:	9302      	str	r3, [sp, #8]
 8004a40:	4b79      	ldr	r3, [pc, #484]	; (8004c28 <_scanf_i+0x1f0>)
 8004a42:	0016      	movs	r6, r2
 8004a44:	9005      	str	r0, [sp, #20]
 8004a46:	aa09      	add	r2, sp, #36	; 0x24
 8004a48:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004a4a:	c223      	stmia	r2!, {r0, r1, r5}
 8004a4c:	4b77      	ldr	r3, [pc, #476]	; (8004c2c <_scanf_i+0x1f4>)
 8004a4e:	9306      	str	r3, [sp, #24]
 8004a50:	69a3      	ldr	r3, [r4, #24]
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d001      	beq.n	8004a5a <_scanf_i+0x22>
 8004a56:	4b76      	ldr	r3, [pc, #472]	; (8004c30 <_scanf_i+0x1f8>)
 8004a58:	9306      	str	r3, [sp, #24]
 8004a5a:	22ae      	movs	r2, #174	; 0xae
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	0052      	lsls	r2, r2, #1
 8004a62:	1e59      	subs	r1, r3, #1
 8004a64:	9004      	str	r0, [sp, #16]
 8004a66:	4291      	cmp	r1, r2
 8004a68:	d905      	bls.n	8004a76 <_scanf_i+0x3e>
 8004a6a:	3b5e      	subs	r3, #94	; 0x5e
 8004a6c:	3bff      	subs	r3, #255	; 0xff
 8004a6e:	9304      	str	r3, [sp, #16]
 8004a70:	235e      	movs	r3, #94	; 0x5e
 8004a72:	33ff      	adds	r3, #255	; 0xff
 8004a74:	60a3      	str	r3, [r4, #8]
 8004a76:	0023      	movs	r3, r4
 8004a78:	331c      	adds	r3, #28
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	23d0      	movs	r3, #208	; 0xd0
 8004a7e:	2700      	movs	r7, #0
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	4313      	orrs	r3, r2
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	9b01      	ldr	r3, [sp, #4]
 8004a8a:	9303      	str	r3, [sp, #12]
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	a809      	add	r0, sp, #36	; 0x24
 8004a90:	7819      	ldrb	r1, [r3, #0]
 8004a92:	00bb      	lsls	r3, r7, #2
 8004a94:	2202      	movs	r2, #2
 8004a96:	5818      	ldr	r0, [r3, r0]
 8004a98:	f000 fa6e 	bl	8004f78 <memchr>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d02b      	beq.n	8004af8 <_scanf_i+0xc0>
 8004aa0:	2f01      	cmp	r7, #1
 8004aa2:	d162      	bne.n	8004b6a <_scanf_i+0x132>
 8004aa4:	6863      	ldr	r3, [r4, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <_scanf_i+0x80>
 8004aaa:	3308      	adds	r3, #8
 8004aac:	6822      	ldr	r2, [r4, #0]
 8004aae:	6063      	str	r3, [r4, #4]
 8004ab0:	33f9      	adds	r3, #249	; 0xf9
 8004ab2:	33ff      	adds	r3, #255	; 0xff
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	6023      	str	r3, [r4, #0]
 8004ab8:	4b5e      	ldr	r3, [pc, #376]	; (8004c34 <_scanf_i+0x1fc>)
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	4013      	ands	r3, r2
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	68a3      	ldr	r3, [r4, #8]
 8004ac2:	1e5a      	subs	r2, r3, #1
 8004ac4:	60a2      	str	r2, [r4, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <_scanf_i+0xc0>
 8004aca:	6833      	ldr	r3, [r6, #0]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	6032      	str	r2, [r6, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	9a03      	ldr	r2, [sp, #12]
 8004ad4:	7013      	strb	r3, [r2, #0]
 8004ad6:	6873      	ldr	r3, [r6, #4]
 8004ad8:	1c55      	adds	r5, r2, #1
 8004ada:	3b01      	subs	r3, #1
 8004adc:	6073      	str	r3, [r6, #4]
 8004ade:	9503      	str	r5, [sp, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	dc09      	bgt.n	8004af8 <_scanf_i+0xc0>
 8004ae4:	23c0      	movs	r3, #192	; 0xc0
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	58e3      	ldr	r3, [r4, r3]
 8004aea:	0031      	movs	r1, r6
 8004aec:	9805      	ldr	r0, [sp, #20]
 8004aee:	9307      	str	r3, [sp, #28]
 8004af0:	4798      	blx	r3
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d000      	beq.n	8004af8 <_scanf_i+0xc0>
 8004af6:	e081      	b.n	8004bfc <_scanf_i+0x1c4>
 8004af8:	3701      	adds	r7, #1
 8004afa:	2f03      	cmp	r7, #3
 8004afc:	d1c6      	bne.n	8004a8c <_scanf_i+0x54>
 8004afe:	6863      	ldr	r3, [r4, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <_scanf_i+0xd0>
 8004b04:	330a      	adds	r3, #10
 8004b06:	6063      	str	r3, [r4, #4]
 8004b08:	2110      	movs	r1, #16
 8004b0a:	2700      	movs	r7, #0
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	6960      	ldr	r0, [r4, #20]
 8004b10:	1ac9      	subs	r1, r1, r3
 8004b12:	4b49      	ldr	r3, [pc, #292]	; (8004c38 <_scanf_i+0x200>)
 8004b14:	18c9      	adds	r1, r1, r3
 8004b16:	f000 f893 	bl	8004c40 <__sccl>
 8004b1a:	9d03      	ldr	r5, [sp, #12]
 8004b1c:	68a3      	ldr	r3, [r4, #8]
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	9303      	str	r3, [sp, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d041      	beq.n	8004baa <_scanf_i+0x172>
 8004b26:	6831      	ldr	r1, [r6, #0]
 8004b28:	6963      	ldr	r3, [r4, #20]
 8004b2a:	7808      	ldrb	r0, [r1, #0]
 8004b2c:	5c1b      	ldrb	r3, [r3, r0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d03b      	beq.n	8004baa <_scanf_i+0x172>
 8004b32:	2830      	cmp	r0, #48	; 0x30
 8004b34:	d129      	bne.n	8004b8a <_scanf_i+0x152>
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	421a      	tst	r2, r3
 8004b3c:	d025      	beq.n	8004b8a <_scanf_i+0x152>
 8004b3e:	9b04      	ldr	r3, [sp, #16]
 8004b40:	3701      	adds	r7, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <_scanf_i+0x11a>
 8004b46:	001a      	movs	r2, r3
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	3a01      	subs	r2, #1
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	9204      	str	r2, [sp, #16]
 8004b50:	60a3      	str	r3, [r4, #8]
 8004b52:	6873      	ldr	r3, [r6, #4]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	6073      	str	r3, [r6, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	dd1d      	ble.n	8004b98 <_scanf_i+0x160>
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	6033      	str	r3, [r6, #0]
 8004b62:	68a3      	ldr	r3, [r4, #8]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	60a3      	str	r3, [r4, #8]
 8004b68:	e7d8      	b.n	8004b1c <_scanf_i+0xe4>
 8004b6a:	2f02      	cmp	r7, #2
 8004b6c:	d1a8      	bne.n	8004ac0 <_scanf_i+0x88>
 8004b6e:	21c0      	movs	r1, #192	; 0xc0
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	00c9      	lsls	r1, r1, #3
 8004b76:	4011      	ands	r1, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d1bf      	bne.n	8004afe <_scanf_i+0xc6>
 8004b7e:	3bf1      	subs	r3, #241	; 0xf1
 8004b80:	3bff      	subs	r3, #255	; 0xff
 8004b82:	6063      	str	r3, [r4, #4]
 8004b84:	33f0      	adds	r3, #240	; 0xf0
 8004b86:	4313      	orrs	r3, r2
 8004b88:	e799      	b.n	8004abe <_scanf_i+0x86>
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <_scanf_i+0x204>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	780b      	ldrb	r3, [r1, #0]
 8004b92:	702b      	strb	r3, [r5, #0]
 8004b94:	3501      	adds	r5, #1
 8004b96:	e7dc      	b.n	8004b52 <_scanf_i+0x11a>
 8004b98:	23c0      	movs	r3, #192	; 0xc0
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	58e3      	ldr	r3, [r4, r3]
 8004b9e:	0031      	movs	r1, r6
 8004ba0:	9805      	ldr	r0, [sp, #20]
 8004ba2:	9303      	str	r3, [sp, #12]
 8004ba4:	4798      	blx	r3
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d0db      	beq.n	8004b62 <_scanf_i+0x12a>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	05db      	lsls	r3, r3, #23
 8004bae:	d50e      	bpl.n	8004bce <_scanf_i+0x196>
 8004bb0:	9b01      	ldr	r3, [sp, #4]
 8004bb2:	429d      	cmp	r5, r3
 8004bb4:	d907      	bls.n	8004bc6 <_scanf_i+0x18e>
 8004bb6:	23be      	movs	r3, #190	; 0xbe
 8004bb8:	3d01      	subs	r5, #1
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	0032      	movs	r2, r6
 8004bbe:	7829      	ldrb	r1, [r5, #0]
 8004bc0:	58e3      	ldr	r3, [r4, r3]
 8004bc2:	9805      	ldr	r0, [sp, #20]
 8004bc4:	4798      	blx	r3
 8004bc6:	9b01      	ldr	r3, [sp, #4]
 8004bc8:	2001      	movs	r0, #1
 8004bca:	429d      	cmp	r5, r3
 8004bcc:	d029      	beq.n	8004c22 <_scanf_i+0x1ea>
 8004bce:	6821      	ldr	r1, [r4, #0]
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	000a      	movs	r2, r1
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	4219      	tst	r1, r3
 8004bd8:	d11c      	bne.n	8004c14 <_scanf_i+0x1dc>
 8004bda:	702a      	strb	r2, [r5, #0]
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	9901      	ldr	r1, [sp, #4]
 8004be0:	9805      	ldr	r0, [sp, #20]
 8004be2:	9e06      	ldr	r6, [sp, #24]
 8004be4:	47b0      	blx	r6
 8004be6:	9b02      	ldr	r3, [sp, #8]
 8004be8:	6821      	ldr	r1, [r4, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	068a      	lsls	r2, r1, #26
 8004bee:	d507      	bpl.n	8004c00 <_scanf_i+0x1c8>
 8004bf0:	1d1a      	adds	r2, r3, #4
 8004bf2:	9902      	ldr	r1, [sp, #8]
 8004bf4:	600a      	str	r2, [r1, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6018      	str	r0, [r3, #0]
 8004bfa:	e008      	b.n	8004c0e <_scanf_i+0x1d6>
 8004bfc:	2700      	movs	r7, #0
 8004bfe:	e7d4      	b.n	8004baa <_scanf_i+0x172>
 8004c00:	1d1a      	adds	r2, r3, #4
 8004c02:	07ce      	lsls	r6, r1, #31
 8004c04:	d5f5      	bpl.n	8004bf2 <_scanf_i+0x1ba>
 8004c06:	9902      	ldr	r1, [sp, #8]
 8004c08:	600a      	str	r2, [r1, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	8018      	strh	r0, [r3, #0]
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60e3      	str	r3, [r4, #12]
 8004c14:	2000      	movs	r0, #0
 8004c16:	9b01      	ldr	r3, [sp, #4]
 8004c18:	1aed      	subs	r5, r5, r3
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	19ef      	adds	r7, r5, r7
 8004c1e:	19df      	adds	r7, r3, r7
 8004c20:	6127      	str	r7, [r4, #16]
 8004c22:	b00d      	add	sp, #52	; 0x34
 8004c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	0800522c 	.word	0x0800522c
 8004c2c:	08004dd5 	.word	0x08004dd5
 8004c30:	08004ef1 	.word	0x08004ef1
 8004c34:	fffffaff 	.word	0xfffffaff
 8004c38:	080052e9 	.word	0x080052e9
 8004c3c:	fffff6ff 	.word	0xfffff6ff

08004c40 <__sccl>:
 8004c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c42:	780b      	ldrb	r3, [r1, #0]
 8004c44:	0004      	movs	r4, r0
 8004c46:	2b5e      	cmp	r3, #94	; 0x5e
 8004c48:	d00c      	beq.n	8004c64 <__sccl+0x24>
 8004c4a:	1c48      	adds	r0, r1, #1
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	0022      	movs	r2, r4
 8004c50:	1c65      	adds	r5, r4, #1
 8004c52:	35ff      	adds	r5, #255	; 0xff
 8004c54:	7011      	strb	r1, [r2, #0]
 8004c56:	3201      	adds	r2, #1
 8004c58:	42aa      	cmp	r2, r5
 8004c5a:	d1fb      	bne.n	8004c54 <__sccl+0x14>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <__sccl+0x2c>
 8004c60:	3801      	subs	r0, #1
 8004c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c64:	784b      	ldrb	r3, [r1, #1]
 8004c66:	1c88      	adds	r0, r1, #2
 8004c68:	2101      	movs	r1, #1
 8004c6a:	e7f0      	b.n	8004c4e <__sccl+0xe>
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	262d      	movs	r6, #45	; 0x2d
 8004c70:	4051      	eors	r1, r2
 8004c72:	0002      	movs	r2, r0
 8004c74:	54e1      	strb	r1, [r4, r3]
 8004c76:	7815      	ldrb	r5, [r2, #0]
 8004c78:	1c50      	adds	r0, r2, #1
 8004c7a:	2d2d      	cmp	r5, #45	; 0x2d
 8004c7c:	d009      	beq.n	8004c92 <__sccl+0x52>
 8004c7e:	2d5d      	cmp	r5, #93	; 0x5d
 8004c80:	d0ef      	beq.n	8004c62 <__sccl+0x22>
 8004c82:	2d00      	cmp	r5, #0
 8004c84:	d101      	bne.n	8004c8a <__sccl+0x4a>
 8004c86:	0010      	movs	r0, r2
 8004c88:	e7eb      	b.n	8004c62 <__sccl+0x22>
 8004c8a:	002b      	movs	r3, r5
 8004c8c:	e7f1      	b.n	8004c72 <__sccl+0x32>
 8004c8e:	0033      	movs	r3, r6
 8004c90:	e7ef      	b.n	8004c72 <__sccl+0x32>
 8004c92:	7855      	ldrb	r5, [r2, #1]
 8004c94:	2d5d      	cmp	r5, #93	; 0x5d
 8004c96:	d0fa      	beq.n	8004c8e <__sccl+0x4e>
 8004c98:	42ab      	cmp	r3, r5
 8004c9a:	dcf8      	bgt.n	8004c8e <__sccl+0x4e>
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	3202      	adds	r2, #2
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	5421      	strb	r1, [r4, r0]
 8004ca4:	4285      	cmp	r5, r0
 8004ca6:	dcfb      	bgt.n	8004ca0 <__sccl+0x60>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	1c5f      	adds	r7, r3, #1
 8004cac:	42ab      	cmp	r3, r5
 8004cae:	da01      	bge.n	8004cb4 <__sccl+0x74>
 8004cb0:	1ae8      	subs	r0, r5, r3
 8004cb2:	3801      	subs	r0, #1
 8004cb4:	183b      	adds	r3, r7, r0
 8004cb6:	e7de      	b.n	8004c76 <__sccl+0x36>

08004cb8 <_strtol_l.constprop.0>:
 8004cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	001e      	movs	r6, r3
 8004cbe:	9005      	str	r0, [sp, #20]
 8004cc0:	9101      	str	r1, [sp, #4]
 8004cc2:	9202      	str	r2, [sp, #8]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d045      	beq.n	8004d54 <_strtol_l.constprop.0+0x9c>
 8004cc8:	000b      	movs	r3, r1
 8004cca:	2e24      	cmp	r6, #36	; 0x24
 8004ccc:	d842      	bhi.n	8004d54 <_strtol_l.constprop.0+0x9c>
 8004cce:	4a3f      	ldr	r2, [pc, #252]	; (8004dcc <_strtol_l.constprop.0+0x114>)
 8004cd0:	2108      	movs	r1, #8
 8004cd2:	4694      	mov	ip, r2
 8004cd4:	001a      	movs	r2, r3
 8004cd6:	4660      	mov	r0, ip
 8004cd8:	7814      	ldrb	r4, [r2, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	5d00      	ldrb	r0, [r0, r4]
 8004cde:	001d      	movs	r5, r3
 8004ce0:	0007      	movs	r7, r0
 8004ce2:	400f      	ands	r7, r1
 8004ce4:	4208      	tst	r0, r1
 8004ce6:	d1f5      	bne.n	8004cd4 <_strtol_l.constprop.0+0x1c>
 8004ce8:	2c2d      	cmp	r4, #45	; 0x2d
 8004cea:	d13a      	bne.n	8004d62 <_strtol_l.constprop.0+0xaa>
 8004cec:	2701      	movs	r7, #1
 8004cee:	781c      	ldrb	r4, [r3, #0]
 8004cf0:	1c95      	adds	r5, r2, #2
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	d065      	beq.n	8004dc2 <_strtol_l.constprop.0+0x10a>
 8004cf6:	2e10      	cmp	r6, #16
 8004cf8:	d109      	bne.n	8004d0e <_strtol_l.constprop.0+0x56>
 8004cfa:	2c30      	cmp	r4, #48	; 0x30
 8004cfc:	d107      	bne.n	8004d0e <_strtol_l.constprop.0+0x56>
 8004cfe:	2220      	movs	r2, #32
 8004d00:	782b      	ldrb	r3, [r5, #0]
 8004d02:	4393      	bics	r3, r2
 8004d04:	2b58      	cmp	r3, #88	; 0x58
 8004d06:	d157      	bne.n	8004db8 <_strtol_l.constprop.0+0x100>
 8004d08:	2610      	movs	r6, #16
 8004d0a:	786c      	ldrb	r4, [r5, #1]
 8004d0c:	3502      	adds	r5, #2
 8004d0e:	4b30      	ldr	r3, [pc, #192]	; (8004dd0 <_strtol_l.constprop.0+0x118>)
 8004d10:	0031      	movs	r1, r6
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	0018      	movs	r0, r3
 8004d16:	9303      	str	r3, [sp, #12]
 8004d18:	f7fb fa88 	bl	800022c <__aeabi_uidivmod>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4684      	mov	ip, r0
 8004d22:	0018      	movs	r0, r3
 8004d24:	9104      	str	r1, [sp, #16]
 8004d26:	4252      	negs	r2, r2
 8004d28:	0021      	movs	r1, r4
 8004d2a:	3930      	subs	r1, #48	; 0x30
 8004d2c:	2909      	cmp	r1, #9
 8004d2e:	d81d      	bhi.n	8004d6c <_strtol_l.constprop.0+0xb4>
 8004d30:	000c      	movs	r4, r1
 8004d32:	42a6      	cmp	r6, r4
 8004d34:	dd28      	ble.n	8004d88 <_strtol_l.constprop.0+0xd0>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	db24      	blt.n	8004d84 <_strtol_l.constprop.0+0xcc>
 8004d3a:	0013      	movs	r3, r2
 8004d3c:	4584      	cmp	ip, r0
 8004d3e:	d306      	bcc.n	8004d4e <_strtol_l.constprop.0+0x96>
 8004d40:	d102      	bne.n	8004d48 <_strtol_l.constprop.0+0x90>
 8004d42:	9904      	ldr	r1, [sp, #16]
 8004d44:	42a1      	cmp	r1, r4
 8004d46:	db02      	blt.n	8004d4e <_strtol_l.constprop.0+0x96>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4370      	muls	r0, r6
 8004d4c:	1820      	adds	r0, r4, r0
 8004d4e:	782c      	ldrb	r4, [r5, #0]
 8004d50:	3501      	adds	r5, #1
 8004d52:	e7e9      	b.n	8004d28 <_strtol_l.constprop.0+0x70>
 8004d54:	f7ff fbd2 	bl	80044fc <__errno>
 8004d58:	2316      	movs	r3, #22
 8004d5a:	6003      	str	r3, [r0, #0]
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	b007      	add	sp, #28
 8004d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d62:	2c2b      	cmp	r4, #43	; 0x2b
 8004d64:	d1c5      	bne.n	8004cf2 <_strtol_l.constprop.0+0x3a>
 8004d66:	781c      	ldrb	r4, [r3, #0]
 8004d68:	1c95      	adds	r5, r2, #2
 8004d6a:	e7c2      	b.n	8004cf2 <_strtol_l.constprop.0+0x3a>
 8004d6c:	0021      	movs	r1, r4
 8004d6e:	3941      	subs	r1, #65	; 0x41
 8004d70:	2919      	cmp	r1, #25
 8004d72:	d801      	bhi.n	8004d78 <_strtol_l.constprop.0+0xc0>
 8004d74:	3c37      	subs	r4, #55	; 0x37
 8004d76:	e7dc      	b.n	8004d32 <_strtol_l.constprop.0+0x7a>
 8004d78:	0021      	movs	r1, r4
 8004d7a:	3961      	subs	r1, #97	; 0x61
 8004d7c:	2919      	cmp	r1, #25
 8004d7e:	d803      	bhi.n	8004d88 <_strtol_l.constprop.0+0xd0>
 8004d80:	3c57      	subs	r4, #87	; 0x57
 8004d82:	e7d6      	b.n	8004d32 <_strtol_l.constprop.0+0x7a>
 8004d84:	0013      	movs	r3, r2
 8004d86:	e7e2      	b.n	8004d4e <_strtol_l.constprop.0+0x96>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da09      	bge.n	8004da0 <_strtol_l.constprop.0+0xe8>
 8004d8c:	2322      	movs	r3, #34	; 0x22
 8004d8e:	9a05      	ldr	r2, [sp, #20]
 8004d90:	9803      	ldr	r0, [sp, #12]
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	9b02      	ldr	r3, [sp, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0e1      	beq.n	8004d5e <_strtol_l.constprop.0+0xa6>
 8004d9a:	1e6b      	subs	r3, r5, #1
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	e007      	b.n	8004db0 <_strtol_l.constprop.0+0xf8>
 8004da0:	2f00      	cmp	r7, #0
 8004da2:	d000      	beq.n	8004da6 <_strtol_l.constprop.0+0xee>
 8004da4:	4240      	negs	r0, r0
 8004da6:	9a02      	ldr	r2, [sp, #8]
 8004da8:	2a00      	cmp	r2, #0
 8004daa:	d0d8      	beq.n	8004d5e <_strtol_l.constprop.0+0xa6>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f4      	bne.n	8004d9a <_strtol_l.constprop.0+0xe2>
 8004db0:	9b02      	ldr	r3, [sp, #8]
 8004db2:	9a01      	ldr	r2, [sp, #4]
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e7d2      	b.n	8004d5e <_strtol_l.constprop.0+0xa6>
 8004db8:	2430      	movs	r4, #48	; 0x30
 8004dba:	2e00      	cmp	r6, #0
 8004dbc:	d1a7      	bne.n	8004d0e <_strtol_l.constprop.0+0x56>
 8004dbe:	3608      	adds	r6, #8
 8004dc0:	e7a5      	b.n	8004d0e <_strtol_l.constprop.0+0x56>
 8004dc2:	2c30      	cmp	r4, #48	; 0x30
 8004dc4:	d09b      	beq.n	8004cfe <_strtol_l.constprop.0+0x46>
 8004dc6:	260a      	movs	r6, #10
 8004dc8:	e7a1      	b.n	8004d0e <_strtol_l.constprop.0+0x56>
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	080052fc 	.word	0x080052fc
 8004dd0:	7fffffff 	.word	0x7fffffff

08004dd4 <_strtol_r>:
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	f7ff ff6f 	bl	8004cb8 <_strtol_l.constprop.0>
 8004dda:	bd10      	pop	{r4, pc}

08004ddc <_strtoul_l.constprop.0>:
 8004ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dde:	b087      	sub	sp, #28
 8004de0:	9202      	str	r2, [sp, #8]
 8004de2:	4a42      	ldr	r2, [pc, #264]	; (8004eec <_strtoul_l.constprop.0+0x110>)
 8004de4:	001e      	movs	r6, r3
 8004de6:	9101      	str	r1, [sp, #4]
 8004de8:	000b      	movs	r3, r1
 8004dea:	4694      	mov	ip, r2
 8004dec:	2108      	movs	r1, #8
 8004dee:	9005      	str	r0, [sp, #20]
 8004df0:	001a      	movs	r2, r3
 8004df2:	4660      	mov	r0, ip
 8004df4:	7814      	ldrb	r4, [r2, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	5d00      	ldrb	r0, [r0, r4]
 8004dfa:	001d      	movs	r5, r3
 8004dfc:	0007      	movs	r7, r0
 8004dfe:	400f      	ands	r7, r1
 8004e00:	4208      	tst	r0, r1
 8004e02:	d1f5      	bne.n	8004df0 <_strtoul_l.constprop.0+0x14>
 8004e04:	2c2d      	cmp	r4, #45	; 0x2d
 8004e06:	d13a      	bne.n	8004e7e <_strtoul_l.constprop.0+0xa2>
 8004e08:	2701      	movs	r7, #1
 8004e0a:	781c      	ldrb	r4, [r3, #0]
 8004e0c:	1c95      	adds	r5, r2, #2
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d067      	beq.n	8004ee2 <_strtoul_l.constprop.0+0x106>
 8004e12:	2e10      	cmp	r6, #16
 8004e14:	d109      	bne.n	8004e2a <_strtoul_l.constprop.0+0x4e>
 8004e16:	2c30      	cmp	r4, #48	; 0x30
 8004e18:	d107      	bne.n	8004e2a <_strtoul_l.constprop.0+0x4e>
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	782b      	ldrb	r3, [r5, #0]
 8004e1e:	4393      	bics	r3, r2
 8004e20:	2b58      	cmp	r3, #88	; 0x58
 8004e22:	d159      	bne.n	8004ed8 <_strtoul_l.constprop.0+0xfc>
 8004e24:	2610      	movs	r6, #16
 8004e26:	786c      	ldrb	r4, [r5, #1]
 8004e28:	3502      	adds	r5, #2
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	0031      	movs	r1, r6
 8004e2e:	4240      	negs	r0, r0
 8004e30:	f7fb f976 	bl	8000120 <__udivsi3>
 8004e34:	9003      	str	r0, [sp, #12]
 8004e36:	2001      	movs	r0, #1
 8004e38:	0031      	movs	r1, r6
 8004e3a:	4240      	negs	r0, r0
 8004e3c:	f7fb f9f6 	bl	800022c <__aeabi_uidivmod>
 8004e40:	2300      	movs	r3, #0
 8004e42:	9104      	str	r1, [sp, #16]
 8004e44:	2101      	movs	r1, #1
 8004e46:	2201      	movs	r2, #1
 8004e48:	0018      	movs	r0, r3
 8004e4a:	468c      	mov	ip, r1
 8004e4c:	4252      	negs	r2, r2
 8004e4e:	0021      	movs	r1, r4
 8004e50:	3930      	subs	r1, #48	; 0x30
 8004e52:	2909      	cmp	r1, #9
 8004e54:	d818      	bhi.n	8004e88 <_strtoul_l.constprop.0+0xac>
 8004e56:	000c      	movs	r4, r1
 8004e58:	42a6      	cmp	r6, r4
 8004e5a:	dd23      	ble.n	8004ea4 <_strtoul_l.constprop.0+0xc8>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	db1f      	blt.n	8004ea0 <_strtoul_l.constprop.0+0xc4>
 8004e60:	9903      	ldr	r1, [sp, #12]
 8004e62:	0013      	movs	r3, r2
 8004e64:	4281      	cmp	r1, r0
 8004e66:	d307      	bcc.n	8004e78 <_strtoul_l.constprop.0+0x9c>
 8004e68:	d103      	bne.n	8004e72 <_strtoul_l.constprop.0+0x96>
 8004e6a:	9904      	ldr	r1, [sp, #16]
 8004e6c:	0013      	movs	r3, r2
 8004e6e:	42a1      	cmp	r1, r4
 8004e70:	db02      	blt.n	8004e78 <_strtoul_l.constprop.0+0x9c>
 8004e72:	4663      	mov	r3, ip
 8004e74:	4370      	muls	r0, r6
 8004e76:	1820      	adds	r0, r4, r0
 8004e78:	782c      	ldrb	r4, [r5, #0]
 8004e7a:	3501      	adds	r5, #1
 8004e7c:	e7e7      	b.n	8004e4e <_strtoul_l.constprop.0+0x72>
 8004e7e:	2c2b      	cmp	r4, #43	; 0x2b
 8004e80:	d1c5      	bne.n	8004e0e <_strtoul_l.constprop.0+0x32>
 8004e82:	781c      	ldrb	r4, [r3, #0]
 8004e84:	1c95      	adds	r5, r2, #2
 8004e86:	e7c2      	b.n	8004e0e <_strtoul_l.constprop.0+0x32>
 8004e88:	0021      	movs	r1, r4
 8004e8a:	3941      	subs	r1, #65	; 0x41
 8004e8c:	2919      	cmp	r1, #25
 8004e8e:	d801      	bhi.n	8004e94 <_strtoul_l.constprop.0+0xb8>
 8004e90:	3c37      	subs	r4, #55	; 0x37
 8004e92:	e7e1      	b.n	8004e58 <_strtoul_l.constprop.0+0x7c>
 8004e94:	0021      	movs	r1, r4
 8004e96:	3961      	subs	r1, #97	; 0x61
 8004e98:	2919      	cmp	r1, #25
 8004e9a:	d803      	bhi.n	8004ea4 <_strtoul_l.constprop.0+0xc8>
 8004e9c:	3c57      	subs	r4, #87	; 0x57
 8004e9e:	e7db      	b.n	8004e58 <_strtoul_l.constprop.0+0x7c>
 8004ea0:	0013      	movs	r3, r2
 8004ea2:	e7e9      	b.n	8004e78 <_strtoul_l.constprop.0+0x9c>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	da09      	bge.n	8004ebc <_strtoul_l.constprop.0+0xe0>
 8004ea8:	2322      	movs	r3, #34	; 0x22
 8004eaa:	2001      	movs	r0, #1
 8004eac:	9a05      	ldr	r2, [sp, #20]
 8004eae:	4240      	negs	r0, r0
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	9b02      	ldr	r3, [sp, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <_strtoul_l.constprop.0+0xf0>
 8004eb8:	b007      	add	sp, #28
 8004eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ebc:	2f00      	cmp	r7, #0
 8004ebe:	d000      	beq.n	8004ec2 <_strtoul_l.constprop.0+0xe6>
 8004ec0:	4240      	negs	r0, r0
 8004ec2:	9a02      	ldr	r2, [sp, #8]
 8004ec4:	2a00      	cmp	r2, #0
 8004ec6:	d0f7      	beq.n	8004eb8 <_strtoul_l.constprop.0+0xdc>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <_strtoul_l.constprop.0+0xf4>
 8004ecc:	1e6b      	subs	r3, r5, #1
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	9b02      	ldr	r3, [sp, #8]
 8004ed2:	9a01      	ldr	r2, [sp, #4]
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e7ef      	b.n	8004eb8 <_strtoul_l.constprop.0+0xdc>
 8004ed8:	2430      	movs	r4, #48	; 0x30
 8004eda:	2e00      	cmp	r6, #0
 8004edc:	d1a5      	bne.n	8004e2a <_strtoul_l.constprop.0+0x4e>
 8004ede:	3608      	adds	r6, #8
 8004ee0:	e7a3      	b.n	8004e2a <_strtoul_l.constprop.0+0x4e>
 8004ee2:	2c30      	cmp	r4, #48	; 0x30
 8004ee4:	d099      	beq.n	8004e1a <_strtoul_l.constprop.0+0x3e>
 8004ee6:	260a      	movs	r6, #10
 8004ee8:	e79f      	b.n	8004e2a <_strtoul_l.constprop.0+0x4e>
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	080052fc 	.word	0x080052fc

08004ef0 <_strtoul_r>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	f7ff ff73 	bl	8004ddc <_strtoul_l.constprop.0>
 8004ef6:	bd10      	pop	{r4, pc}

08004ef8 <__submore>:
 8004ef8:	000b      	movs	r3, r1
 8004efa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004efc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004efe:	3344      	adds	r3, #68	; 0x44
 8004f00:	000c      	movs	r4, r1
 8004f02:	429d      	cmp	r5, r3
 8004f04:	d11c      	bne.n	8004f40 <__submore+0x48>
 8004f06:	2680      	movs	r6, #128	; 0x80
 8004f08:	00f6      	lsls	r6, r6, #3
 8004f0a:	0031      	movs	r1, r6
 8004f0c:	f000 f8ac 	bl	8005068 <_malloc_r>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d102      	bne.n	8004f1a <__submore+0x22>
 8004f14:	2001      	movs	r0, #1
 8004f16:	4240      	negs	r0, r0
 8004f18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f1a:	0023      	movs	r3, r4
 8004f1c:	6360      	str	r0, [r4, #52]	; 0x34
 8004f1e:	63a6      	str	r6, [r4, #56]	; 0x38
 8004f20:	3346      	adds	r3, #70	; 0x46
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <__submore+0x70>)
 8004f26:	54c2      	strb	r2, [r0, r3]
 8004f28:	0023      	movs	r3, r4
 8004f2a:	3345      	adds	r3, #69	; 0x45
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <__submore+0x74>)
 8004f30:	54c2      	strb	r2, [r0, r3]
 8004f32:	782a      	ldrb	r2, [r5, #0]
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <__submore+0x78>)
 8004f36:	54c2      	strb	r2, [r0, r3]
 8004f38:	18c0      	adds	r0, r0, r3
 8004f3a:	6020      	str	r0, [r4, #0]
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e7eb      	b.n	8004f18 <__submore+0x20>
 8004f40:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8004f42:	0029      	movs	r1, r5
 8004f44:	0073      	lsls	r3, r6, #1
 8004f46:	001a      	movs	r2, r3
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	f000 f903 	bl	8005154 <_realloc_r>
 8004f4e:	1e05      	subs	r5, r0, #0
 8004f50:	d0e0      	beq.n	8004f14 <__submore+0x1c>
 8004f52:	1987      	adds	r7, r0, r6
 8004f54:	0001      	movs	r1, r0
 8004f56:	0032      	movs	r2, r6
 8004f58:	0038      	movs	r0, r7
 8004f5a:	f7ff faf9 	bl	8004550 <memcpy>
 8004f5e:	9b01      	ldr	r3, [sp, #4]
 8004f60:	6027      	str	r7, [r4, #0]
 8004f62:	6365      	str	r5, [r4, #52]	; 0x34
 8004f64:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f66:	e7e9      	b.n	8004f3c <__submore+0x44>
 8004f68:	000003ff 	.word	0x000003ff
 8004f6c:	000003fe 	.word	0x000003fe
 8004f70:	000003fd 	.word	0x000003fd

08004f74 <__retarget_lock_acquire_recursive>:
 8004f74:	4770      	bx	lr

08004f76 <__retarget_lock_release_recursive>:
 8004f76:	4770      	bx	lr

08004f78 <memchr>:
 8004f78:	b2c9      	uxtb	r1, r1
 8004f7a:	1882      	adds	r2, r0, r2
 8004f7c:	4290      	cmp	r0, r2
 8004f7e:	d101      	bne.n	8004f84 <memchr+0xc>
 8004f80:	2000      	movs	r0, #0
 8004f82:	4770      	bx	lr
 8004f84:	7803      	ldrb	r3, [r0, #0]
 8004f86:	428b      	cmp	r3, r1
 8004f88:	d0fb      	beq.n	8004f82 <memchr+0xa>
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	e7f6      	b.n	8004f7c <memchr+0x4>
	...

08004f90 <_free_r>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	0005      	movs	r5, r0
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d010      	beq.n	8004fba <_free_r+0x2a>
 8004f98:	1f0c      	subs	r4, r1, #4
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	da00      	bge.n	8004fa2 <_free_r+0x12>
 8004fa0:	18e4      	adds	r4, r4, r3
 8004fa2:	0028      	movs	r0, r5
 8004fa4:	f000 f918 	bl	80051d8 <__malloc_lock>
 8004fa8:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <_free_r+0x90>)
 8004faa:	6813      	ldr	r3, [r2, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <_free_r+0x2c>
 8004fb0:	6063      	str	r3, [r4, #4]
 8004fb2:	6014      	str	r4, [r2, #0]
 8004fb4:	0028      	movs	r0, r5
 8004fb6:	f000 f917 	bl	80051e8 <__malloc_unlock>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	d908      	bls.n	8004fd2 <_free_r+0x42>
 8004fc0:	6821      	ldr	r1, [r4, #0]
 8004fc2:	1860      	adds	r0, r4, r1
 8004fc4:	4283      	cmp	r3, r0
 8004fc6:	d1f3      	bne.n	8004fb0 <_free_r+0x20>
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	1841      	adds	r1, r0, r1
 8004fce:	6021      	str	r1, [r4, #0]
 8004fd0:	e7ee      	b.n	8004fb0 <_free_r+0x20>
 8004fd2:	001a      	movs	r2, r3
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <_free_r+0x4e>
 8004fda:	42a3      	cmp	r3, r4
 8004fdc:	d9f9      	bls.n	8004fd2 <_free_r+0x42>
 8004fde:	6811      	ldr	r1, [r2, #0]
 8004fe0:	1850      	adds	r0, r2, r1
 8004fe2:	42a0      	cmp	r0, r4
 8004fe4:	d10b      	bne.n	8004ffe <_free_r+0x6e>
 8004fe6:	6820      	ldr	r0, [r4, #0]
 8004fe8:	1809      	adds	r1, r1, r0
 8004fea:	1850      	adds	r0, r2, r1
 8004fec:	6011      	str	r1, [r2, #0]
 8004fee:	4283      	cmp	r3, r0
 8004ff0:	d1e0      	bne.n	8004fb4 <_free_r+0x24>
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	1841      	adds	r1, r0, r1
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	6053      	str	r3, [r2, #4]
 8004ffc:	e7da      	b.n	8004fb4 <_free_r+0x24>
 8004ffe:	42a0      	cmp	r0, r4
 8005000:	d902      	bls.n	8005008 <_free_r+0x78>
 8005002:	230c      	movs	r3, #12
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	e7d5      	b.n	8004fb4 <_free_r+0x24>
 8005008:	6821      	ldr	r1, [r4, #0]
 800500a:	1860      	adds	r0, r4, r1
 800500c:	4283      	cmp	r3, r0
 800500e:	d103      	bne.n	8005018 <_free_r+0x88>
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	1841      	adds	r1, r0, r1
 8005016:	6021      	str	r1, [r4, #0]
 8005018:	6063      	str	r3, [r4, #4]
 800501a:	6054      	str	r4, [r2, #4]
 800501c:	e7ca      	b.n	8004fb4 <_free_r+0x24>
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	200002b0 	.word	0x200002b0

08005024 <sbrk_aligned>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	4e0f      	ldr	r6, [pc, #60]	; (8005064 <sbrk_aligned+0x40>)
 8005028:	000d      	movs	r5, r1
 800502a:	6831      	ldr	r1, [r6, #0]
 800502c:	0004      	movs	r4, r0
 800502e:	2900      	cmp	r1, #0
 8005030:	d102      	bne.n	8005038 <sbrk_aligned+0x14>
 8005032:	f000 f8bf 	bl	80051b4 <_sbrk_r>
 8005036:	6030      	str	r0, [r6, #0]
 8005038:	0029      	movs	r1, r5
 800503a:	0020      	movs	r0, r4
 800503c:	f000 f8ba 	bl	80051b4 <_sbrk_r>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d00a      	beq.n	800505a <sbrk_aligned+0x36>
 8005044:	2303      	movs	r3, #3
 8005046:	1cc5      	adds	r5, r0, #3
 8005048:	439d      	bics	r5, r3
 800504a:	42a8      	cmp	r0, r5
 800504c:	d007      	beq.n	800505e <sbrk_aligned+0x3a>
 800504e:	1a29      	subs	r1, r5, r0
 8005050:	0020      	movs	r0, r4
 8005052:	f000 f8af 	bl	80051b4 <_sbrk_r>
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	d101      	bne.n	800505e <sbrk_aligned+0x3a>
 800505a:	2501      	movs	r5, #1
 800505c:	426d      	negs	r5, r5
 800505e:	0028      	movs	r0, r5
 8005060:	bd70      	pop	{r4, r5, r6, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	200002b4 	.word	0x200002b4

08005068 <_malloc_r>:
 8005068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800506a:	2203      	movs	r2, #3
 800506c:	1ccb      	adds	r3, r1, #3
 800506e:	4393      	bics	r3, r2
 8005070:	3308      	adds	r3, #8
 8005072:	0006      	movs	r6, r0
 8005074:	001f      	movs	r7, r3
 8005076:	2b0c      	cmp	r3, #12
 8005078:	d232      	bcs.n	80050e0 <_malloc_r+0x78>
 800507a:	270c      	movs	r7, #12
 800507c:	42b9      	cmp	r1, r7
 800507e:	d831      	bhi.n	80050e4 <_malloc_r+0x7c>
 8005080:	0030      	movs	r0, r6
 8005082:	f000 f8a9 	bl	80051d8 <__malloc_lock>
 8005086:	4d32      	ldr	r5, [pc, #200]	; (8005150 <_malloc_r+0xe8>)
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	001c      	movs	r4, r3
 800508c:	2c00      	cmp	r4, #0
 800508e:	d12e      	bne.n	80050ee <_malloc_r+0x86>
 8005090:	0039      	movs	r1, r7
 8005092:	0030      	movs	r0, r6
 8005094:	f7ff ffc6 	bl	8005024 <sbrk_aligned>
 8005098:	0004      	movs	r4, r0
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d11e      	bne.n	80050dc <_malloc_r+0x74>
 800509e:	682c      	ldr	r4, [r5, #0]
 80050a0:	0025      	movs	r5, r4
 80050a2:	2d00      	cmp	r5, #0
 80050a4:	d14a      	bne.n	800513c <_malloc_r+0xd4>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	0029      	movs	r1, r5
 80050aa:	18e3      	adds	r3, r4, r3
 80050ac:	0030      	movs	r0, r6
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	f000 f880 	bl	80051b4 <_sbrk_r>
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	4283      	cmp	r3, r0
 80050b8:	d143      	bne.n	8005142 <_malloc_r+0xda>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	3703      	adds	r7, #3
 80050be:	1aff      	subs	r7, r7, r3
 80050c0:	2303      	movs	r3, #3
 80050c2:	439f      	bics	r7, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	2f0c      	cmp	r7, #12
 80050c8:	d200      	bcs.n	80050cc <_malloc_r+0x64>
 80050ca:	270c      	movs	r7, #12
 80050cc:	0039      	movs	r1, r7
 80050ce:	0030      	movs	r0, r6
 80050d0:	f7ff ffa8 	bl	8005024 <sbrk_aligned>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d034      	beq.n	8005142 <_malloc_r+0xda>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	19df      	adds	r7, r3, r7
 80050dc:	6027      	str	r7, [r4, #0]
 80050de:	e013      	b.n	8005108 <_malloc_r+0xa0>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	dacb      	bge.n	800507c <_malloc_r+0x14>
 80050e4:	230c      	movs	r3, #12
 80050e6:	2500      	movs	r5, #0
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	0028      	movs	r0, r5
 80050ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	1bd1      	subs	r1, r2, r7
 80050f2:	d420      	bmi.n	8005136 <_malloc_r+0xce>
 80050f4:	290b      	cmp	r1, #11
 80050f6:	d917      	bls.n	8005128 <_malloc_r+0xc0>
 80050f8:	19e2      	adds	r2, r4, r7
 80050fa:	6027      	str	r7, [r4, #0]
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d111      	bne.n	8005124 <_malloc_r+0xbc>
 8005100:	602a      	str	r2, [r5, #0]
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	6011      	str	r1, [r2, #0]
 8005106:	6053      	str	r3, [r2, #4]
 8005108:	0030      	movs	r0, r6
 800510a:	0025      	movs	r5, r4
 800510c:	f000 f86c 	bl	80051e8 <__malloc_unlock>
 8005110:	2207      	movs	r2, #7
 8005112:	350b      	adds	r5, #11
 8005114:	1d23      	adds	r3, r4, #4
 8005116:	4395      	bics	r5, r2
 8005118:	1aea      	subs	r2, r5, r3
 800511a:	429d      	cmp	r5, r3
 800511c:	d0e5      	beq.n	80050ea <_malloc_r+0x82>
 800511e:	1b5b      	subs	r3, r3, r5
 8005120:	50a3      	str	r3, [r4, r2]
 8005122:	e7e2      	b.n	80050ea <_malloc_r+0x82>
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	e7ec      	b.n	8005102 <_malloc_r+0x9a>
 8005128:	6862      	ldr	r2, [r4, #4]
 800512a:	42a3      	cmp	r3, r4
 800512c:	d101      	bne.n	8005132 <_malloc_r+0xca>
 800512e:	602a      	str	r2, [r5, #0]
 8005130:	e7ea      	b.n	8005108 <_malloc_r+0xa0>
 8005132:	605a      	str	r2, [r3, #4]
 8005134:	e7e8      	b.n	8005108 <_malloc_r+0xa0>
 8005136:	0023      	movs	r3, r4
 8005138:	6864      	ldr	r4, [r4, #4]
 800513a:	e7a7      	b.n	800508c <_malloc_r+0x24>
 800513c:	002c      	movs	r4, r5
 800513e:	686d      	ldr	r5, [r5, #4]
 8005140:	e7af      	b.n	80050a2 <_malloc_r+0x3a>
 8005142:	230c      	movs	r3, #12
 8005144:	0030      	movs	r0, r6
 8005146:	6033      	str	r3, [r6, #0]
 8005148:	f000 f84e 	bl	80051e8 <__malloc_unlock>
 800514c:	e7cd      	b.n	80050ea <_malloc_r+0x82>
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	200002b0 	.word	0x200002b0

08005154 <_realloc_r>:
 8005154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005156:	0007      	movs	r7, r0
 8005158:	000e      	movs	r6, r1
 800515a:	0014      	movs	r4, r2
 800515c:	2900      	cmp	r1, #0
 800515e:	d105      	bne.n	800516c <_realloc_r+0x18>
 8005160:	0011      	movs	r1, r2
 8005162:	f7ff ff81 	bl	8005068 <_malloc_r>
 8005166:	0005      	movs	r5, r0
 8005168:	0028      	movs	r0, r5
 800516a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800516c:	2a00      	cmp	r2, #0
 800516e:	d103      	bne.n	8005178 <_realloc_r+0x24>
 8005170:	f7ff ff0e 	bl	8004f90 <_free_r>
 8005174:	0025      	movs	r5, r4
 8005176:	e7f7      	b.n	8005168 <_realloc_r+0x14>
 8005178:	f000 f83e 	bl	80051f8 <_malloc_usable_size_r>
 800517c:	9001      	str	r0, [sp, #4]
 800517e:	4284      	cmp	r4, r0
 8005180:	d803      	bhi.n	800518a <_realloc_r+0x36>
 8005182:	0035      	movs	r5, r6
 8005184:	0843      	lsrs	r3, r0, #1
 8005186:	42a3      	cmp	r3, r4
 8005188:	d3ee      	bcc.n	8005168 <_realloc_r+0x14>
 800518a:	0021      	movs	r1, r4
 800518c:	0038      	movs	r0, r7
 800518e:	f7ff ff6b 	bl	8005068 <_malloc_r>
 8005192:	1e05      	subs	r5, r0, #0
 8005194:	d0e8      	beq.n	8005168 <_realloc_r+0x14>
 8005196:	9b01      	ldr	r3, [sp, #4]
 8005198:	0022      	movs	r2, r4
 800519a:	429c      	cmp	r4, r3
 800519c:	d900      	bls.n	80051a0 <_realloc_r+0x4c>
 800519e:	001a      	movs	r2, r3
 80051a0:	0031      	movs	r1, r6
 80051a2:	0028      	movs	r0, r5
 80051a4:	f7ff f9d4 	bl	8004550 <memcpy>
 80051a8:	0031      	movs	r1, r6
 80051aa:	0038      	movs	r0, r7
 80051ac:	f7ff fef0 	bl	8004f90 <_free_r>
 80051b0:	e7da      	b.n	8005168 <_realloc_r+0x14>
	...

080051b4 <_sbrk_r>:
 80051b4:	2300      	movs	r3, #0
 80051b6:	b570      	push	{r4, r5, r6, lr}
 80051b8:	4d06      	ldr	r5, [pc, #24]	; (80051d4 <_sbrk_r+0x20>)
 80051ba:	0004      	movs	r4, r0
 80051bc:	0008      	movs	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7fc f9fe 	bl	80015c0 <_sbrk>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d103      	bne.n	80051d0 <_sbrk_r+0x1c>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d000      	beq.n	80051d0 <_sbrk_r+0x1c>
 80051ce:	6023      	str	r3, [r4, #0]
 80051d0:	bd70      	pop	{r4, r5, r6, pc}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	200002a8 	.word	0x200002a8

080051d8 <__malloc_lock>:
 80051d8:	b510      	push	{r4, lr}
 80051da:	4802      	ldr	r0, [pc, #8]	; (80051e4 <__malloc_lock+0xc>)
 80051dc:	f7ff feca 	bl	8004f74 <__retarget_lock_acquire_recursive>
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	200002ac 	.word	0x200002ac

080051e8 <__malloc_unlock>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	4802      	ldr	r0, [pc, #8]	; (80051f4 <__malloc_unlock+0xc>)
 80051ec:	f7ff fec3 	bl	8004f76 <__retarget_lock_release_recursive>
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	200002ac 	.word	0x200002ac

080051f8 <_malloc_usable_size_r>:
 80051f8:	1f0b      	subs	r3, r1, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	1f18      	subs	r0, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da01      	bge.n	8005206 <_malloc_usable_size_r+0xe>
 8005202:	580b      	ldr	r3, [r1, r0]
 8005204:	18c0      	adds	r0, r0, r3
 8005206:	4770      	bx	lr

08005208 <_init>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr

08005214 <_fini>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr
