
rf_gateway_nrf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08005c78  08005c78  00015c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006228  08006228  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006230  08006230  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006238  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000078  080062b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  080062b0  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0bd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed6  00000000  00000000  0002d165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d4d  00000000  00000000  000305e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d15f  00000000  00000000  00052335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb482  00000000  00000000  0005f494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003160  00000000  00000000  0012a968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c60 	.word	0x08005c60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005c60 	.word	0x08005c60

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <NRF24_DelayMicroSeconds+0x3c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <NRF24_DelayMicroSeconds+0x40>)
 80005d6:	fba2 2303 	umull	r2, r3, r2, r3
 80005da:	0c9a      	lsrs	r2, r3, #18
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	fb02 f303 	mul.w	r3, r2, r3
 80005e2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80005e4:	bf00      	nop
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	60fa      	str	r2, [r7, #12]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1fa      	bne.n	80005e6 <NRF24_DelayMicroSeconds+0x22>
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000008 	.word	0x20000008
 8000604:	165e9f81 	.word	0x165e9f81

08000608 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d008      	beq.n	8000628 <NRF24_csn+0x20>
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <NRF24_csn+0x38>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <NRF24_csn+0x3c>)
 800061c:	8811      	ldrh	r1, [r2, #0]
 800061e:	2201      	movs	r2, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f002 f93d 	bl	80028a0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000626:	e007      	b.n	8000638 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <NRF24_csn+0x38>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <NRF24_csn+0x3c>)
 800062e:	8811      	ldrh	r1, [r2, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f934 	bl	80028a0 <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000009c 	.word	0x2000009c
 8000644:	200000a0 	.word	0x200000a0

08000648 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d008      	beq.n	8000668 <NRF24_ce+0x20>
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <NRF24_ce+0x38>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <NRF24_ce+0x3c>)
 800065c:	8811      	ldrh	r1, [r2, #0]
 800065e:	2201      	movs	r2, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f002 f91d 	bl	80028a0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000666:	e007      	b.n	8000678 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <NRF24_ce+0x38>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a05      	ldr	r2, [pc, #20]	; (8000684 <NRF24_ce+0x3c>)
 800066e:	8811      	ldrh	r1, [r2, #0]
 8000670:	2200      	movs	r2, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f914 	bl	80028a0 <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000009c 	.word	0x2000009c
 8000684:	200000a2 	.word	0x200000a2

08000688 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ffb8 	bl	8000608 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 031f 	and.w	r3, r3, #31
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006a2:	f107 010c 	add.w	r1, r7, #12
 80006a6:	2364      	movs	r3, #100	; 0x64
 80006a8:	2201      	movs	r2, #1
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <NRF24_read_register+0x4c>)
 80006ac:	f002 ff83 	bl	80035b6 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	1c59      	adds	r1, r3, #1
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	2201      	movs	r2, #1
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <NRF24_read_register+0x4c>)
 80006bc:	f003 f8b7 	bl	800382e <HAL_SPI_Receive>
	retData = spiBuf[1];
 80006c0:	7b7b      	ldrb	r3, [r7, #13]
 80006c2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff9f 	bl	8000608 <NRF24_csn>
	return retData;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000a4 	.word	0x200000a4

080006d8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff8d 	bl	8000608 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 031f 	and.w	r3, r3, #31
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006f8:	f107 010c 	add.w	r1, r7, #12
 80006fc:	2364      	movs	r3, #100	; 0x64
 80006fe:	2201      	movs	r2, #1
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <NRF24_read_registerN+0x4c>)
 8000702:	f002 ff58 	bl	80035b6 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	b29a      	uxth	r2, r3
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	6839      	ldr	r1, [r7, #0]
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <NRF24_read_registerN+0x4c>)
 8000710:	f003 f88d 	bl	800382e <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff ff77 	bl	8000608 <NRF24_csn>
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000a4 	.word	0x200000a4

08000728 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff65 	bl	8000608 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f043 0320 	orr.w	r3, r3, #32
 8000744:	b2db      	uxtb	r3, r3
 8000746:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800074c:	f107 010c 	add.w	r1, r7, #12
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	2202      	movs	r2, #2
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <NRF24_write_register+0x40>)
 8000756:	f002 ff2e 	bl	80035b6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800075a:	2001      	movs	r0, #1
 800075c:	f7ff ff54 	bl	8000608 <NRF24_csn>
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000a4 	.word	0x200000a4

0800076c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff43 	bl	8000608 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	b2db      	uxtb	r3, r3
 800078a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800078c:	f107 010c 	add.w	r1, r7, #12
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	2201      	movs	r2, #1
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <NRF24_write_registerN+0x4c>)
 8000796:	f002 ff0e 	bl	80035b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	b29a      	uxth	r2, r3
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	6839      	ldr	r1, [r7, #0]
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <NRF24_write_registerN+0x4c>)
 80007a4:	f002 ff07 	bl	80035b6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff ff2d 	bl	8000608 <NRF24_csn>
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000a4 	.word	0x200000a4

080007bc <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ff1d 	bl	8000608 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80007ce:	23a0      	movs	r3, #160	; 0xa0
 80007d0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80007d2:	f107 010f 	add.w	r1, r7, #15
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2201      	movs	r2, #1
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <NRF24_write_payload+0x40>)
 80007dc:	f002 feeb 	bl	80035b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <NRF24_write_payload+0x40>)
 80007ea:	f002 fee4 	bl	80035b6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff ff0a 	bl	8000608 <NRF24_csn>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000a4 	.word	0x200000a4

08000800 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000804:	21ff      	movs	r1, #255	; 0xff
 8000806:	20e1      	movs	r0, #225	; 0xe1
 8000808:	f7ff ff8e 	bl	8000728 <NRF24_write_register>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000814:	21ff      	movs	r1, #255	; 0xff
 8000816:	20e2      	movs	r0, #226	; 0xe2
 8000818:	f7ff ff86 	bl	8000728 <NRF24_write_register>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000826:	2007      	movs	r0, #7
 8000828:	f7ff ff2e 	bl	8000688 <NRF24_read_register>
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000830:	79fb      	ldrb	r3, [r7, #7]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800083c:	b082      	sub	sp, #8
 800083e:	b580      	push	{r7, lr}
 8000840:	b084      	sub	sp, #16
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	460b      	mov	r3, r1
 800084a:	807b      	strh	r3, [r7, #2]
 800084c:	4613      	mov	r3, r2
 800084e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000850:	4b66      	ldr	r3, [pc, #408]	; (80009ec <NRF24_begin+0x1b0>)
 8000852:	4618      	mov	r0, r3
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	2258      	movs	r2, #88	; 0x58
 800085a:	4619      	mov	r1, r3
 800085c:	f004 fd8a 	bl	8005374 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000860:	4a63      	ldr	r2, [pc, #396]	; (80009f0 <NRF24_begin+0x1b4>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000866:	4a63      	ldr	r2, [pc, #396]	; (80009f4 <NRF24_begin+0x1b8>)
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800086c:	4a62      	ldr	r2, [pc, #392]	; (80009f8 <NRF24_begin+0x1bc>)
 800086e:	883b      	ldrh	r3, [r7, #0]
 8000870:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fec8 	bl	8000608 <NRF24_csn>
	NRF24_ce(0);
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff fee5 	bl	8000648 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800087e:	2005      	movs	r0, #5
 8000880:	f001 fcb2 	bl	80021e8 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000884:	2108      	movs	r1, #8
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff ff4e 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800088c:	213f      	movs	r1, #63	; 0x3f
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff ff4a 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000894:	2103      	movs	r1, #3
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff ff46 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800089c:	2103      	movs	r1, #3
 800089e:	2003      	movs	r0, #3
 80008a0:	f7ff ff42 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80008a4:	2103      	movs	r1, #3
 80008a6:	2004      	movs	r0, #4
 80008a8:	f7ff ff3e 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80008ac:	2102      	movs	r1, #2
 80008ae:	2005      	movs	r0, #5
 80008b0:	f7ff ff3a 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80008b4:	210f      	movs	r1, #15
 80008b6:	2006      	movs	r0, #6
 80008b8:	f7ff ff36 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80008bc:	210e      	movs	r1, #14
 80008be:	2007      	movs	r0, #7
 80008c0:	f7ff ff32 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80008c4:	2100      	movs	r1, #0
 80008c6:	2008      	movs	r0, #8
 80008c8:	f7ff ff2e 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2009      	movs	r0, #9
 80008d0:	f7ff ff2a 	bl	8000728 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80008d4:	23e7      	movs	r3, #231	; 0xe7
 80008d6:	733b      	strb	r3, [r7, #12]
 80008d8:	23e7      	movs	r3, #231	; 0xe7
 80008da:	72fb      	strb	r3, [r7, #11]
 80008dc:	23e7      	movs	r3, #231	; 0xe7
 80008de:	72bb      	strb	r3, [r7, #10]
 80008e0:	23e7      	movs	r3, #231	; 0xe7
 80008e2:	727b      	strb	r3, [r7, #9]
 80008e4:	23e7      	movs	r3, #231	; 0xe7
 80008e6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2205      	movs	r2, #5
 80008ee:	4619      	mov	r1, r3
 80008f0:	200a      	movs	r0, #10
 80008f2:	f7ff ff3b 	bl	800076c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80008f6:	23c2      	movs	r3, #194	; 0xc2
 80008f8:	733b      	strb	r3, [r7, #12]
 80008fa:	23c2      	movs	r3, #194	; 0xc2
 80008fc:	72fb      	strb	r3, [r7, #11]
 80008fe:	23c2      	movs	r3, #194	; 0xc2
 8000900:	72bb      	strb	r3, [r7, #10]
 8000902:	23c2      	movs	r3, #194	; 0xc2
 8000904:	727b      	strb	r3, [r7, #9]
 8000906:	23c2      	movs	r3, #194	; 0xc2
 8000908:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2205      	movs	r2, #5
 8000910:	4619      	mov	r1, r3
 8000912:	200b      	movs	r0, #11
 8000914:	f7ff ff2a 	bl	800076c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000918:	21c3      	movs	r1, #195	; 0xc3
 800091a:	200c      	movs	r0, #12
 800091c:	f7ff ff04 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000920:	21c4      	movs	r1, #196	; 0xc4
 8000922:	200d      	movs	r0, #13
 8000924:	f7ff ff00 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000928:	21c5      	movs	r1, #197	; 0xc5
 800092a:	200e      	movs	r0, #14
 800092c:	f7ff fefc 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000930:	21c6      	movs	r1, #198	; 0xc6
 8000932:	200f      	movs	r0, #15
 8000934:	f7ff fef8 	bl	8000728 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000938:	23e7      	movs	r3, #231	; 0xe7
 800093a:	733b      	strb	r3, [r7, #12]
 800093c:	23e7      	movs	r3, #231	; 0xe7
 800093e:	72fb      	strb	r3, [r7, #11]
 8000940:	23e7      	movs	r3, #231	; 0xe7
 8000942:	72bb      	strb	r3, [r7, #10]
 8000944:	23e7      	movs	r3, #231	; 0xe7
 8000946:	727b      	strb	r3, [r7, #9]
 8000948:	23e7      	movs	r3, #231	; 0xe7
 800094a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2205      	movs	r2, #5
 8000952:	4619      	mov	r1, r3
 8000954:	2010      	movs	r0, #16
 8000956:	f7ff ff09 	bl	800076c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800095a:	2100      	movs	r1, #0
 800095c:	2011      	movs	r0, #17
 800095e:	f7ff fee3 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000962:	2100      	movs	r1, #0
 8000964:	2012      	movs	r0, #18
 8000966:	f7ff fedf 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800096a:	2100      	movs	r1, #0
 800096c:	2013      	movs	r0, #19
 800096e:	f7ff fedb 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000972:	2100      	movs	r1, #0
 8000974:	2014      	movs	r0, #20
 8000976:	f7ff fed7 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800097a:	2100      	movs	r1, #0
 800097c:	2015      	movs	r0, #21
 800097e:	f7ff fed3 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000982:	2100      	movs	r1, #0
 8000984:	2016      	movs	r0, #22
 8000986:	f7ff fecf 	bl	8000728 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800098a:	f000 fa83 	bl	8000e94 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800098e:	2100      	movs	r1, #0
 8000990:	201c      	movs	r0, #28
 8000992:	f7ff fec9 	bl	8000728 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000996:	2100      	movs	r1, #0
 8000998:	201d      	movs	r0, #29
 800099a:	f7ff fec5 	bl	8000728 <NRF24_write_register>
	printRadioSettings();
 800099e:	f000 fa93 	bl	8000ec8 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80009a2:	210f      	movs	r1, #15
 80009a4:	200f      	movs	r0, #15
 80009a6:	f000 f8ad 	bl	8000b04 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80009aa:	2003      	movs	r0, #3
 80009ac:	f000 f927 	bl	8000bfe <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f000 f95d 	bl	8000c70 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f000 f9a0 	bl	8000cfc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80009bc:	f000 f8f2 	bl	8000ba4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80009c0:	2020      	movs	r0, #32
 80009c2:	f000 f8cf 	bl	8000b64 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80009c6:	f000 fa5c 	bl	8000e82 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80009ca:	204c      	movs	r0, #76	; 0x4c
 80009cc:	f000 f8b5 	bl	8000b3a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80009d0:	f7ff ff16 	bl	8000800 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009d4:	f7ff ff1c 	bl	8000810 <NRF24_flush_rx>

	NRF24_powerDown();
 80009d8:	f000 f9b8 	bl	8000d4c <NRF24_powerDown>

}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009e6:	b002      	add	sp, #8
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200000a4 	.word	0x200000a4
 80009f0:	2000009c 	.word	0x2000009c
 80009f4:	200000a0 	.word	0x200000a0
 80009f8:	200000a2 	.word	0x200000a2

080009fc <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fe21 	bl	8000648 <NRF24_ce>
	NRF24_flush_tx();
 8000a06:	f7ff fefb 	bl	8000800 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000a0a:	f7ff ff01 	bl	8000810 <NRF24_flush_rx>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000a20:	f000 fa2f 	bl	8000e82 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	4619      	mov	r1, r3
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 f9ce 	bl	8000dca <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000a2e:	f001 fbcf 	bl	80021d0 <HAL_GetTick>
 8000a32:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000a34:	230a      	movs	r3, #10
 8000a36:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000a38:	f107 030d 	add.w	r3, r7, #13
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	2008      	movs	r0, #8
 8000a42:	f7ff fe49 	bl	80006d8 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000a46:	f7ff feeb 	bl	8000820 <NRF24_get_status>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d107      	bne.n	8000a68 <NRF24_write+0x54>
 8000a58:	f001 fbba 	bl	80021d0 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8e7      	bhi.n	8000a38 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000a68:	f107 010b 	add.w	r1, r7, #11
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <NRF24_write+0x90>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f9d2 	bl	8000e1c <NRF24_whatHappened>
	retStatus = tx_ok;
 8000a78:	7b3b      	ldrb	r3, [r7, #12]
 8000a7a:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <NRF24_write+0x90>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d005      	beq.n	8000a90 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000a84:	f000 f886 	bl	8000b94 <NRF24_getDynamicPayloadSize>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <NRF24_write+0x94>)
 8000a8e:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8000a90:	f000 f80c 	bl	8000aac <NRF24_available>
	NRF24_flush_tx();
 8000a94:	f7ff feb4 	bl	8000800 <NRF24_flush_tx>
	return retStatus;
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000094 	.word	0x20000094
 8000aa8:	20000095 	.word	0x20000095

08000aac <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 f95a 	bl	8000d6a <NRF24_availablePipe>
 8000ab6:	4603      	mov	r3, r0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	bd80      	pop	{r7, pc}

08000abc <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2205      	movs	r2, #5
 8000aca:	4619      	mov	r1, r3
 8000acc:	200a      	movs	r0, #10
 8000ace:	f7ff fe4d 	bl	800076c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	2010      	movs	r0, #16
 8000ada:	f7ff fe47 	bl	800076c <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <NRF24_openWritingPipe+0x44>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	7bfa      	ldrb	r2, [r7, #15]
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	bf28      	it	cs
 8000aec:	4613      	movcs	r3, r2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	4619      	mov	r1, r3
 8000af2:	2011      	movs	r0, #17
 8000af4:	f7ff fe18 	bl	8000728 <NRF24_write_register>
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000096 	.word	0x20000096

08000b04 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	4613      	mov	r3, r2
 8000b12:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	b25a      	sxtb	r2, r3
 8000b1a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2004      	movs	r0, #4
 8000b2e:	f7ff fdfb 	bl	8000728 <NRF24_write_register>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000b44:	237f      	movs	r3, #127	; 0x7f
 8000b46:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000b48:	7bfa      	ldrb	r2, [r7, #15]
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	bf28      	it	cs
 8000b50:	4613      	movcs	r3, r2
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4619      	mov	r1, r3
 8000b56:	2005      	movs	r0, #5
 8000b58:	f7ff fde6 	bl	8000728 <NRF24_write_register>
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b6e:	2320      	movs	r3, #32
 8000b70:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	bf28      	it	cs
 8000b7a:	4613      	movcs	r3, r2
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <NRF24_setPayloadSize+0x2c>)
 8000b80:	701a      	strb	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000096 	.word	0x20000096

08000b94 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b98:	2060      	movs	r0, #96	; 0x60
 8000b9a:	f7ff fd75 	bl	8000688 <NRF24_read_register>
 8000b9e:	4603      	mov	r3, r0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ba8:	201d      	movs	r0, #29
 8000baa:	f7ff fd6d 	bl	8000688 <NRF24_read_register>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f023 0304 	bic.w	r3, r3, #4
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	201d      	movs	r0, #29
 8000bba:	f7ff fdb5 	bl	8000728 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	201c      	movs	r0, #28
 8000bc2:	f7ff fdb1 	bl	8000728 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000bc6:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <NRF24_disableDynamicPayloads+0x2c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000097 	.word	0x20000097

08000bd4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d004      	beq.n	8000bee <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000be4:	213f      	movs	r1, #63	; 0x3f
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fd9e 	bl	8000728 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000bec:	e003      	b.n	8000bf6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fd99 	bl	8000728 <NRF24_write_register>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c08:	2006      	movs	r0, #6
 8000c0a:	f7ff fd3d 	bl	8000688 <NRF24_read_register>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	f023 0306 	bic.w	r3, r3, #6
 8000c18:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d104      	bne.n	8000c2a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	f043 0306 	orr.w	r3, r3, #6
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e019      	b.n	8000c5e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d104      	bne.n	8000c3a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e011      	b.n	8000c5e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d104      	bne.n	8000c4a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e009      	b.n	8000c5e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d006      	beq.n	8000c5e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d103      	bne.n	8000c5e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	f043 0306 	orr.w	r3, r3, #6
 8000c5c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	4619      	mov	r1, r3
 8000c62:	2006      	movs	r0, #6
 8000c64:	f7ff fd60 	bl	8000728 <NRF24_write_register>
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c7e:	2006      	movs	r0, #6
 8000c80:	f7ff fd02 	bl	8000688 <NRF24_read_register>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <NRF24_setDataRate+0x88>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c94:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d107      	bne.n	8000cac <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <NRF24_setDataRate+0x88>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	73bb      	strb	r3, [r7, #14]
 8000caa:	e00d      	b.n	8000cc8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d107      	bne.n	8000cc2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <NRF24_setDataRate+0x88>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000cb8:	7bbb      	ldrb	r3, [r7, #14]
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	73bb      	strb	r3, [r7, #14]
 8000cc0:	e002      	b.n	8000cc8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <NRF24_setDataRate+0x88>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000cc8:	7bbb      	ldrb	r3, [r7, #14]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	2006      	movs	r0, #6
 8000cce:	f7ff fd2b 	bl	8000728 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000cd2:	2006      	movs	r0, #6
 8000cd4:	f7ff fcd8 	bl	8000688 <NRF24_read_register>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d102      	bne.n	8000ce8 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e002      	b.n	8000cee <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <NRF24_setDataRate+0x88>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000098 	.word	0x20000098

08000cfc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fcbe 	bl	8000688 <NRF24_read_register>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f023 030c 	bic.w	r3, r3, #12
 8000d12:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00f      	beq.n	8000d3a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d104      	bne.n	8000d2a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e007      	b.n	8000d3a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fcf2 	bl	8000728 <NRF24_write_register>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fc99 	bl	8000688 <NRF24_read_register>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f023 0302 	bic.w	r3, r3, #2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff fce1 	bl	8000728 <NRF24_write_register>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000d72:	f7ff fd55 	bl	8000820 <NRF24_get_status>
 8000d76:	4603      	mov	r3, r0
 8000d78:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d017      	beq.n	8000dc0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d007      	beq.n	8000da6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	085b      	lsrs	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000da6:	2140      	movs	r1, #64	; 0x40
 8000da8:	2007      	movs	r0, #7
 8000daa:	f7ff fcbd 	bl	8000728 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	f003 0320 	and.w	r3, r3, #32
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000db8:	2120      	movs	r1, #32
 8000dba:	2007      	movs	r0, #7
 8000dbc:	f7ff fcb4 	bl	8000728 <NRF24_write_register>
    }
  }
  return result;
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff fc56 	bl	8000688 <NRF24_read_register>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f023 0301 	bic.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4619      	mov	r1, r3
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fc9b 	bl	8000728 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8000df2:	2096      	movs	r0, #150	; 0x96
 8000df4:	f7ff fbe6 	bl	80005c4 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fcdd 	bl	80007bc <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff fc20 	bl	8000648 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000e08:	200f      	movs	r0, #15
 8000e0a:	f7ff fbdb 	bl	80005c4 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fc1a 	bl	8000648 <NRF24_ce>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000e28:	f7ff fcfa 	bl	8000820 <NRF24_get_status>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e36:	2170      	movs	r1, #112	; 0x70
 8000e38:	2007      	movs	r0, #7
 8000e3a:	f7ff fc75 	bl	8000728 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	f003 0320 	and.w	r3, r3, #32
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bf14      	ite	ne
 8000e48:	2301      	movne	r3, #1
 8000e4a:	2300      	moveq	r3, #0
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf14      	ite	ne
 8000e5c:	2301      	movne	r3, #1
 8000e5e:	2300      	moveq	r3, #0
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf14      	ite	ne
 8000e70:	2301      	movne	r3, #1
 8000e72:	2300      	moveq	r3, #0
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e86:	2170      	movs	r1, #112	; 0x70
 8000e88:	2007      	movs	r0, #7
 8000e8a:	f7ff fc4d 	bl	8000728 <NRF24_write_register>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fbb4 	bl	8000608 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000ea0:	2350      	movs	r3, #80	; 0x50
 8000ea2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000ea4:	2373      	movs	r3, #115	; 0x73
 8000ea6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000ea8:	1d39      	adds	r1, r7, #4
 8000eaa:	2364      	movs	r3, #100	; 0x64
 8000eac:	2202      	movs	r2, #2
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <NRF24_ACTIVATE_cmd+0x30>)
 8000eb0:	f002 fb81 	bl	80035b6 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fba7 	bl	8000608 <NRF24_csn>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000a4 	.word	0x200000a4

08000ec8 <printRadioSettings>:
}



void printRadioSettings(void)
{
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	b0a1      	sub	sp, #132	; 0x84
 8000ecc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	49c3      	ldr	r1, [pc, #780]	; (80011e0 <printRadioSettings+0x318>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 fa63 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f996 	bl	8000210 <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	f107 0108 	add.w	r1, r7, #8
 8000eec:	230a      	movs	r3, #10
 8000eee:	48bd      	ldr	r0, [pc, #756]	; (80011e4 <printRadioSettings+0x31c>)
 8000ef0:	f003 f9eb 	bl	80042ca <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fbc7 	bl	8000688 <NRF24_read_register>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000f00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d013      	beq.n	8000f34 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000f0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <printRadioSettings+0x5e>
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	49b2      	ldr	r1, [pc, #712]	; (80011e8 <printRadioSettings+0x320>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 fa3e 	bl	80053a0 <siprintf>
 8000f24:	e00c      	b.n	8000f40 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	49b0      	ldr	r1, [pc, #704]	; (80011ec <printRadioSettings+0x324>)
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 fa37 	bl	80053a0 <siprintf>
 8000f32:	e005      	b.n	8000f40 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	49ad      	ldr	r1, [pc, #692]	; (80011f0 <printRadioSettings+0x328>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f004 fa30 	bl	80053a0 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f963 	bl	8000210 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f107 0108 	add.w	r1, r7, #8
 8000f52:	230a      	movs	r3, #10
 8000f54:	48a3      	ldr	r0, [pc, #652]	; (80011e4 <printRadioSettings+0x31c>)
 8000f56:	f003 f9b8 	bl	80042ca <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff fb94 	bl	8000688 <NRF24_read_register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f6a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bfcc      	ite	gt
 8000f72:	2301      	movgt	r3, #1
 8000f74:	2300      	movle	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f7e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bfcc      	ite	gt
 8000f86:	2301      	movgt	r3, #1
 8000f88:	2300      	movle	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f92:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	bfcc      	ite	gt
 8000f9a:	2301      	movgt	r3, #1
 8000f9c:	2300      	movle	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fa2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fa6:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bfcc      	ite	gt
 8000fae:	2301      	movgt	r3, #1
 8000fb0:	2300      	movle	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fba:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bfcc      	ite	gt
 8000fc2:	2301      	movgt	r3, #1
 8000fc4:	2300      	movle	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fce:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bfcc      	ite	gt
 8000fd6:	2301      	movgt	r3, #1
 8000fd8:	2300      	movle	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f107 0008 	add.w	r0, r7, #8
 8000fe0:	9303      	str	r3, [sp, #12]
 8000fe2:	9402      	str	r4, [sp, #8]
 8000fe4:	9101      	str	r1, [sp, #4]
 8000fe6:	9200      	str	r2, [sp, #0]
 8000fe8:	4633      	mov	r3, r6
 8000fea:	462a      	mov	r2, r5
 8000fec:	4981      	ldr	r1, [pc, #516]	; (80011f4 <printRadioSettings+0x32c>)
 8000fee:	f004 f9d7 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f90a 	bl	8000210 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f107 0108 	add.w	r1, r7, #8
 8001004:	230a      	movs	r3, #10
 8001006:	4877      	ldr	r0, [pc, #476]	; (80011e4 <printRadioSettings+0x31c>)
 8001008:	f003 f95f 	bl	80042ca <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800100c:	2002      	movs	r0, #2
 800100e:	f7ff fb3b 	bl	8000688 <NRF24_read_register>
 8001012:	4603      	mov	r3, r0
 8001014:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001018:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800101c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001020:	2b00      	cmp	r3, #0
 8001022:	bfcc      	ite	gt
 8001024:	2301      	movgt	r3, #1
 8001026:	2300      	movle	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800102c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001030:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001034:	2b00      	cmp	r3, #0
 8001036:	bfcc      	ite	gt
 8001038:	2301      	movgt	r3, #1
 800103a:	2300      	movle	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001040:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001044:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001048:	2b00      	cmp	r3, #0
 800104a:	bfcc      	ite	gt
 800104c:	2301      	movgt	r3, #1
 800104e:	2300      	movle	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001054:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001058:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800105c:	2b00      	cmp	r3, #0
 800105e:	bfcc      	ite	gt
 8001060:	2301      	movgt	r3, #1
 8001062:	2300      	movle	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001068:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800106c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001070:	2b00      	cmp	r3, #0
 8001072:	bfcc      	ite	gt
 8001074:	2301      	movgt	r3, #1
 8001076:	2300      	movle	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800107c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001080:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001084:	2b00      	cmp	r3, #0
 8001086:	bfcc      	ite	gt
 8001088:	2301      	movgt	r3, #1
 800108a:	2300      	movle	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f107 0008 	add.w	r0, r7, #8
 8001092:	9303      	str	r3, [sp, #12]
 8001094:	9402      	str	r4, [sp, #8]
 8001096:	9101      	str	r1, [sp, #4]
 8001098:	9200      	str	r2, [sp, #0]
 800109a:	4633      	mov	r3, r6
 800109c:	462a      	mov	r2, r5
 800109e:	4956      	ldr	r1, [pc, #344]	; (80011f8 <printRadioSettings+0x330>)
 80010a0:	f004 f97e 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f8b1 	bl	8000210 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f107 0108 	add.w	r1, r7, #8
 80010b6:	230a      	movs	r3, #10
 80010b8:	484a      	ldr	r0, [pc, #296]	; (80011e4 <printRadioSettings+0x31c>)
 80010ba:	f003 f906 	bl	80042ca <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80010be:	2003      	movs	r0, #3
 80010c0:	f7ff fae2 	bl	8000688 <NRF24_read_register>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80010ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d2:	3302      	adds	r3, #2
 80010d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80010d8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4946      	ldr	r1, [pc, #280]	; (80011fc <printRadioSettings+0x334>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 f95c 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f88f 	bl	8000210 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	230a      	movs	r3, #10
 80010fc:	4839      	ldr	r0, [pc, #228]	; (80011e4 <printRadioSettings+0x31c>)
 80010fe:	f003 f8e4 	bl	80042ca <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001102:	2005      	movs	r0, #5
 8001104:	f7ff fac0 	bl	8000688 <NRF24_read_register>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800110e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4939      	ldr	r1, [pc, #228]	; (8001200 <printRadioSettings+0x338>)
 800111c:	4618      	mov	r0, r3
 800111e:	f004 f93f 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f872 	bl	8000210 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	f107 0108 	add.w	r1, r7, #8
 8001134:	230a      	movs	r3, #10
 8001136:	482b      	ldr	r0, [pc, #172]	; (80011e4 <printRadioSettings+0x31c>)
 8001138:	f003 f8c7 	bl	80042ca <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800113c:	2006      	movs	r0, #6
 800113e:	f7ff faa3 	bl	8000688 <NRF24_read_register>
 8001142:	4603      	mov	r3, r0
 8001144:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001148:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <printRadioSettings+0x29a>
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	492a      	ldr	r1, [pc, #168]	; (8001204 <printRadioSettings+0x33c>)
 800115a:	4618      	mov	r0, r3
 800115c:	f004 f920 	bl	80053a0 <siprintf>
 8001160:	e005      	b.n	800116e <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <printRadioSettings+0x340>)
 8001168:	4618      	mov	r0, r3
 800116a:	f004 f919 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f84c 	bl	8000210 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	b29a      	uxth	r2, r3
 800117c:	f107 0108 	add.w	r1, r7, #8
 8001180:	230a      	movs	r3, #10
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <printRadioSettings+0x31c>)
 8001184:	f003 f8a1 	bl	80042ca <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001188:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118c:	f003 0306 	and.w	r3, r3, #6
 8001190:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001194:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001198:	085b      	lsrs	r3, r3, #1
 800119a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800119e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <printRadioSettings+0x2ec>
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4918      	ldr	r1, [pc, #96]	; (800120c <printRadioSettings+0x344>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 f8f7 	bl	80053a0 <siprintf>
 80011b2:	e03b      	b.n	800122c <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80011b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d106      	bne.n	80011ca <printRadioSettings+0x302>
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <printRadioSettings+0x348>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 f8ec 	bl	80053a0 <siprintf>
 80011c8:	e030      	b.n	800122c <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80011ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d122      	bne.n	8001218 <printRadioSettings+0x350>
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	490f      	ldr	r1, [pc, #60]	; (8001214 <printRadioSettings+0x34c>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 f8e1 	bl	80053a0 <siprintf>
 80011de:	e025      	b.n	800122c <printRadioSettings+0x364>
 80011e0:	08005c78 	.word	0x08005c78
 80011e4:	200000fc 	.word	0x200000fc
 80011e8:	08005cac 	.word	0x08005cac
 80011ec:	08005cc8 	.word	0x08005cc8
 80011f0:	08005ce4 	.word	0x08005ce4
 80011f4:	08005cf8 	.word	0x08005cf8
 80011f8:	08005d3c 	.word	0x08005d3c
 80011fc:	08005d88 	.word	0x08005d88
 8001200:	08005da4 	.word	0x08005da4
 8001204:	08005db8 	.word	0x08005db8
 8001208:	08005dd0 	.word	0x08005dd0
 800120c:	08005de8 	.word	0x08005de8
 8001210:	08005dfc 	.word	0x08005dfc
 8001214:	08005e10 	.word	0x08005e10
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001218:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800121c:	2b03      	cmp	r3, #3
 800121e:	d105      	bne.n	800122c <printRadioSettings+0x364>
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	49d7      	ldr	r1, [pc, #860]	; (8001584 <printRadioSettings+0x6bc>)
 8001226:	4618      	mov	r0, r3
 8001228:	f004 f8ba 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4618      	mov	r0, r3
 8001232:	f7fe ffed 	bl	8000210 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	f107 0108 	add.w	r1, r7, #8
 800123e:	230a      	movs	r3, #10
 8001240:	48d1      	ldr	r0, [pc, #836]	; (8001588 <printRadioSettings+0x6c0>)
 8001242:	f003 f842 	bl	80042ca <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001246:	463b      	mov	r3, r7
 8001248:	2205      	movs	r2, #5
 800124a:	4619      	mov	r1, r3
 800124c:	200a      	movs	r0, #10
 800124e:	f7ff fa43 	bl	80006d8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001252:	793b      	ldrb	r3, [r7, #4]
 8001254:	461c      	mov	r4, r3
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	461d      	mov	r5, r3
 800125a:	78bb      	ldrb	r3, [r7, #2]
 800125c:	787a      	ldrb	r2, [r7, #1]
 800125e:	7839      	ldrb	r1, [r7, #0]
 8001260:	f107 0008 	add.w	r0, r7, #8
 8001264:	9102      	str	r1, [sp, #8]
 8001266:	9201      	str	r2, [sp, #4]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	462b      	mov	r3, r5
 800126c:	4622      	mov	r2, r4
 800126e:	49c7      	ldr	r1, [pc, #796]	; (800158c <printRadioSettings+0x6c4>)
 8001270:	f004 f896 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4618      	mov	r0, r3
 800127a:	f7fe ffc9 	bl	8000210 <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	b29a      	uxth	r2, r3
 8001282:	f107 0108 	add.w	r1, r7, #8
 8001286:	230a      	movs	r3, #10
 8001288:	48bf      	ldr	r0, [pc, #764]	; (8001588 <printRadioSettings+0x6c0>)
 800128a:	f003 f81e 	bl	80042ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800128e:	463b      	mov	r3, r7
 8001290:	2205      	movs	r2, #5
 8001292:	4619      	mov	r1, r3
 8001294:	200b      	movs	r0, #11
 8001296:	f7ff fa1f 	bl	80006d8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800129a:	793b      	ldrb	r3, [r7, #4]
 800129c:	461c      	mov	r4, r3
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	461d      	mov	r5, r3
 80012a2:	78bb      	ldrb	r3, [r7, #2]
 80012a4:	787a      	ldrb	r2, [r7, #1]
 80012a6:	7839      	ldrb	r1, [r7, #0]
 80012a8:	f107 0008 	add.w	r0, r7, #8
 80012ac:	9102      	str	r1, [sp, #8]
 80012ae:	9201      	str	r2, [sp, #4]
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	462b      	mov	r3, r5
 80012b4:	4622      	mov	r2, r4
 80012b6:	49b6      	ldr	r1, [pc, #728]	; (8001590 <printRadioSettings+0x6c8>)
 80012b8:	f004 f872 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7fe ffa5 	bl	8000210 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f107 0108 	add.w	r1, r7, #8
 80012ce:	230a      	movs	r3, #10
 80012d0:	48ad      	ldr	r0, [pc, #692]	; (8001588 <printRadioSettings+0x6c0>)
 80012d2:	f002 fffa 	bl	80042ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80012d6:	463b      	mov	r3, r7
 80012d8:	2201      	movs	r2, #1
 80012da:	4619      	mov	r1, r3
 80012dc:	200c      	movs	r0, #12
 80012de:	f7ff f9fb 	bl	80006d8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80012e2:	783b      	ldrb	r3, [r7, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	49aa      	ldr	r1, [pc, #680]	; (8001594 <printRadioSettings+0x6cc>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 f857 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7fe ff8a 	bl	8000210 <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	f107 0108 	add.w	r1, r7, #8
 8001304:	230a      	movs	r3, #10
 8001306:	48a0      	ldr	r0, [pc, #640]	; (8001588 <printRadioSettings+0x6c0>)
 8001308:	f002 ffdf 	bl	80042ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800130c:	463b      	mov	r3, r7
 800130e:	2201      	movs	r2, #1
 8001310:	4619      	mov	r1, r3
 8001312:	200d      	movs	r0, #13
 8001314:	f7ff f9e0 	bl	80006d8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001318:	783b      	ldrb	r3, [r7, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	499d      	ldr	r1, [pc, #628]	; (8001598 <printRadioSettings+0x6d0>)
 8001322:	4618      	mov	r0, r3
 8001324:	f004 f83c 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff6f 	bl	8000210 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f107 0108 	add.w	r1, r7, #8
 800133a:	230a      	movs	r3, #10
 800133c:	4892      	ldr	r0, [pc, #584]	; (8001588 <printRadioSettings+0x6c0>)
 800133e:	f002 ffc4 	bl	80042ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001342:	463b      	mov	r3, r7
 8001344:	2201      	movs	r2, #1
 8001346:	4619      	mov	r1, r3
 8001348:	200e      	movs	r0, #14
 800134a:	f7ff f9c5 	bl	80006d8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800134e:	783b      	ldrb	r3, [r7, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4991      	ldr	r1, [pc, #580]	; (800159c <printRadioSettings+0x6d4>)
 8001358:	4618      	mov	r0, r3
 800135a:	f004 f821 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ff54 	bl	8000210 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	f107 0108 	add.w	r1, r7, #8
 8001370:	230a      	movs	r3, #10
 8001372:	4885      	ldr	r0, [pc, #532]	; (8001588 <printRadioSettings+0x6c0>)
 8001374:	f002 ffa9 	bl	80042ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001378:	463b      	mov	r3, r7
 800137a:	2201      	movs	r2, #1
 800137c:	4619      	mov	r1, r3
 800137e:	200f      	movs	r0, #15
 8001380:	f7ff f9aa 	bl	80006d8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001384:	783b      	ldrb	r3, [r7, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	4984      	ldr	r1, [pc, #528]	; (80015a0 <printRadioSettings+0x6d8>)
 800138e:	4618      	mov	r0, r3
 8001390:	f004 f806 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4618      	mov	r0, r3
 800139a:	f7fe ff39 	bl	8000210 <strlen>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	f107 0108 	add.w	r1, r7, #8
 80013a6:	230a      	movs	r3, #10
 80013a8:	4877      	ldr	r0, [pc, #476]	; (8001588 <printRadioSettings+0x6c0>)
 80013aa:	f002 ff8e 	bl	80042ca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80013ae:	463b      	mov	r3, r7
 80013b0:	2205      	movs	r2, #5
 80013b2:	4619      	mov	r1, r3
 80013b4:	2010      	movs	r0, #16
 80013b6:	f7ff f98f 	bl	80006d8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80013ba:	793b      	ldrb	r3, [r7, #4]
 80013bc:	461c      	mov	r4, r3
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	461d      	mov	r5, r3
 80013c2:	78bb      	ldrb	r3, [r7, #2]
 80013c4:	787a      	ldrb	r2, [r7, #1]
 80013c6:	7839      	ldrb	r1, [r7, #0]
 80013c8:	f107 0008 	add.w	r0, r7, #8
 80013cc:	9102      	str	r1, [sp, #8]
 80013ce:	9201      	str	r2, [sp, #4]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	462b      	mov	r3, r5
 80013d4:	4622      	mov	r2, r4
 80013d6:	4973      	ldr	r1, [pc, #460]	; (80015a4 <printRadioSettings+0x6dc>)
 80013d8:	f003 ffe2 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe ff15 	bl	8000210 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f107 0108 	add.w	r1, r7, #8
 80013ee:	230a      	movs	r3, #10
 80013f0:	4865      	ldr	r0, [pc, #404]	; (8001588 <printRadioSettings+0x6c0>)
 80013f2:	f002 ff6a 	bl	80042ca <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80013f6:	2011      	movs	r0, #17
 80013f8:	f7ff f946 	bl	8000688 <NRF24_read_register>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001402:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4966      	ldr	r1, [pc, #408]	; (80015a8 <printRadioSettings+0x6e0>)
 8001410:	4618      	mov	r0, r3
 8001412:	f003 ffc5 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe fef8 	bl	8000210 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	f107 0108 	add.w	r1, r7, #8
 8001428:	230a      	movs	r3, #10
 800142a:	4857      	ldr	r0, [pc, #348]	; (8001588 <printRadioSettings+0x6c0>)
 800142c:	f002 ff4d 	bl	80042ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001430:	2012      	movs	r0, #18
 8001432:	f7ff f929 	bl	8000688 <NRF24_read_register>
 8001436:	4603      	mov	r3, r0
 8001438:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800143c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001440:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	4958      	ldr	r1, [pc, #352]	; (80015ac <printRadioSettings+0x6e4>)
 800144a:	4618      	mov	r0, r3
 800144c:	f003 ffa8 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe fedb 	bl	8000210 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	f107 0108 	add.w	r1, r7, #8
 8001462:	230a      	movs	r3, #10
 8001464:	4848      	ldr	r0, [pc, #288]	; (8001588 <printRadioSettings+0x6c0>)
 8001466:	f002 ff30 	bl	80042ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 800146a:	2013      	movs	r0, #19
 800146c:	f7ff f90c 	bl	8000688 <NRF24_read_register>
 8001470:	4603      	mov	r3, r0
 8001472:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001476:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800147a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	494b      	ldr	r1, [pc, #300]	; (80015b0 <printRadioSettings+0x6e8>)
 8001484:	4618      	mov	r0, r3
 8001486:	f003 ff8b 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe febe 	bl	8000210 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	230a      	movs	r3, #10
 800149e:	483a      	ldr	r0, [pc, #232]	; (8001588 <printRadioSettings+0x6c0>)
 80014a0:	f002 ff13 	bl	80042ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80014a4:	2014      	movs	r0, #20
 80014a6:	f7ff f8ef 	bl	8000688 <NRF24_read_register>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	493d      	ldr	r1, [pc, #244]	; (80015b4 <printRadioSettings+0x6ec>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 ff6e 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe fea1 	bl	8000210 <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	f107 0108 	add.w	r1, r7, #8
 80014d6:	230a      	movs	r3, #10
 80014d8:	482b      	ldr	r0, [pc, #172]	; (8001588 <printRadioSettings+0x6c0>)
 80014da:	f002 fef6 	bl	80042ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80014de:	2015      	movs	r0, #21
 80014e0:	f7ff f8d2 	bl	8000688 <NRF24_read_register>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4930      	ldr	r1, [pc, #192]	; (80015b8 <printRadioSettings+0x6f0>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 ff51 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe fe84 	bl	8000210 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	230a      	movs	r3, #10
 8001512:	481d      	ldr	r0, [pc, #116]	; (8001588 <printRadioSettings+0x6c0>)
 8001514:	f002 fed9 	bl	80042ca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001518:	2016      	movs	r0, #22
 800151a:	f7ff f8b5 	bl	8000688 <NRF24_read_register>
 800151e:	4603      	mov	r3, r0
 8001520:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001524:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001528:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	4922      	ldr	r1, [pc, #136]	; (80015bc <printRadioSettings+0x6f4>)
 8001532:	4618      	mov	r0, r3
 8001534:	f003 ff34 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fe67 	bl	8000210 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	f107 0108 	add.w	r1, r7, #8
 800154a:	230a      	movs	r3, #10
 800154c:	480e      	ldr	r0, [pc, #56]	; (8001588 <printRadioSettings+0x6c0>)
 800154e:	f002 febc 	bl	80042ca <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001552:	201c      	movs	r0, #28
 8001554:	f7ff f898 	bl	8000688 <NRF24_read_register>
 8001558:	4603      	mov	r3, r0
 800155a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800155e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001562:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001566:	2b00      	cmp	r3, #0
 8001568:	bfcc      	ite	gt
 800156a:	2301      	movgt	r3, #1
 800156c:	2300      	movle	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001572:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001576:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800157a:	2b00      	cmp	r3, #0
 800157c:	bfcc      	ite	gt
 800157e:	2301      	movgt	r3, #1
 8001580:	2300      	movle	r3, #0
 8001582:	e01d      	b.n	80015c0 <printRadioSettings+0x6f8>
 8001584:	08005e24 	.word	0x08005e24
 8001588:	200000fc 	.word	0x200000fc
 800158c:	08005e38 	.word	0x08005e38
 8001590:	08005e68 	.word	0x08005e68
 8001594:	08005e98 	.word	0x08005e98
 8001598:	08005ec0 	.word	0x08005ec0
 800159c:	08005ee8 	.word	0x08005ee8
 80015a0:	08005f10 	.word	0x08005f10
 80015a4:	08005f38 	.word	0x08005f38
 80015a8:	08005f64 	.word	0x08005f64
 80015ac:	08005f80 	.word	0x08005f80
 80015b0:	08005f9c 	.word	0x08005f9c
 80015b4:	08005fb8 	.word	0x08005fb8
 80015b8:	08005fd4 	.word	0x08005fd4
 80015bc:	08005ff0 	.word	0x08005ff0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015c8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bfcc      	ite	gt
 80015d0:	2301      	movgt	r3, #1
 80015d2:	2300      	movle	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015dc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bfcc      	ite	gt
 80015e4:	2301      	movgt	r3, #1
 80015e6:	2300      	movle	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bfcc      	ite	gt
 80015f8:	2301      	movgt	r3, #1
 80015fa:	2300      	movle	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001600:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001604:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001608:	2b00      	cmp	r3, #0
 800160a:	bfcc      	ite	gt
 800160c:	2301      	movgt	r3, #1
 800160e:	2300      	movle	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f107 0008 	add.w	r0, r7, #8
 8001616:	9303      	str	r3, [sp, #12]
 8001618:	9402      	str	r4, [sp, #8]
 800161a:	9101      	str	r1, [sp, #4]
 800161c:	9200      	str	r2, [sp, #0]
 800161e:	4633      	mov	r3, r6
 8001620:	462a      	mov	r2, r5
 8001622:	4936      	ldr	r1, [pc, #216]	; (80016fc <printRadioSettings+0x834>)
 8001624:	f003 febc 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fdef 	bl	8000210 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	b29a      	uxth	r2, r3
 8001636:	f107 0108 	add.w	r1, r7, #8
 800163a:	230a      	movs	r3, #10
 800163c:	4830      	ldr	r0, [pc, #192]	; (8001700 <printRadioSettings+0x838>)
 800163e:	f002 fe44 	bl	80042ca <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001642:	201d      	movs	r0, #29
 8001644:	f7ff f820 	bl	8000688 <NRF24_read_register>
 8001648:	4603      	mov	r3, r0
 800164a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800164e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <printRadioSettings+0x7a0>
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4929      	ldr	r1, [pc, #164]	; (8001704 <printRadioSettings+0x83c>)
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fe9d 	bl	80053a0 <siprintf>
 8001666:	e005      	b.n	8001674 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4926      	ldr	r1, [pc, #152]	; (8001708 <printRadioSettings+0x840>)
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fe96 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fdc9 	bl	8000210 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	f107 0108 	add.w	r1, r7, #8
 8001686:	230a      	movs	r3, #10
 8001688:	481d      	ldr	r0, [pc, #116]	; (8001700 <printRadioSettings+0x838>)
 800168a:	f002 fe1e 	bl	80042ca <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800168e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <printRadioSettings+0x7e0>
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	491b      	ldr	r1, [pc, #108]	; (800170c <printRadioSettings+0x844>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 fe7d 	bl	80053a0 <siprintf>
 80016a6:	e005      	b.n	80016b4 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	4918      	ldr	r1, [pc, #96]	; (8001710 <printRadioSettings+0x848>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fe76 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fda9 	bl	8000210 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	f107 0108 	add.w	r1, r7, #8
 80016c6:	230a      	movs	r3, #10
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <printRadioSettings+0x838>)
 80016ca:	f002 fdfe 	bl	80042ca <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	4910      	ldr	r1, [pc, #64]	; (8001714 <printRadioSettings+0x84c>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fe63 	bl	80053a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fd96 	bl	8000210 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f107 0108 	add.w	r1, r7, #8
 80016ec:	230a      	movs	r3, #10
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <printRadioSettings+0x838>)
 80016f0:	f002 fdeb 	bl	80042ca <HAL_UART_Transmit>
}
 80016f4:	bf00      	nop
 80016f6:	3774      	adds	r7, #116	; 0x74
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	0800600c 	.word	0x0800600c
 8001700:	200000fc 	.word	0x200000fc
 8001704:	08006058 	.word	0x08006058
 8001708:	08006070 	.word	0x08006070
 800170c:	08006088 	.word	0x08006088
 8001710:	080060a4 	.word	0x080060a4
 8001714:	08005c78 	.word	0x08005c78

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b099      	sub	sp, #100	; 0x64
 800171c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171e:	f000 fcf1 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 f8ad 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001726:	f000 f9a3 	bl	8001a70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800172a:	f000 f977 	bl	8001a1c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800172e:	f000 f915 	bl	800195c <MX_SPI1_Init>
  MX_UART4_Init();
 8001732:	f000 f949 	bl	80019c8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  // SET DWM NSS TO 0
  //UART
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <main+0x144>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <main+0x144>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001744:	60da      	str	r2, [r3, #12]
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001746:	4b45      	ldr	r3, [pc, #276]	; (800185c <main+0x144>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4b43      	ldr	r3, [pc, #268]	; (800185c <main+0x144>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	60da      	str	r2, [r3, #12]
  	HAL_UART_Receive_IT(&huart2, &RxSingleByte, 1);
 8001756:	2201      	movs	r2, #1
 8001758:	4941      	ldr	r1, [pc, #260]	; (8001860 <main+0x148>)
 800175a:	4840      	ldr	r0, [pc, #256]	; (800185c <main+0x144>)
 800175c:	f002 fe47 	bl	80043ee <HAL_UART_Receive_IT>
  	serialWrite("Gateway running");
 8001760:	4840      	ldr	r0, [pc, #256]	; (8001864 <main+0x14c>)
 8001762:	f000 fa3b 	bl	8001bdc <serialWrite>
  //**** TRANSMITTER ****//

    NRF24_begin(GPIOB, NRF_CSN_Pin, NRF_CE_Pin, hspi1);
 8001766:	4c40      	ldr	r4, [pc, #256]	; (8001868 <main+0x150>)
 8001768:	4668      	mov	r0, sp
 800176a:	1d23      	adds	r3, r4, #4
 800176c:	2254      	movs	r2, #84	; 0x54
 800176e:	4619      	mov	r1, r3
 8001770:	f003 fe00 	bl	8005374 <memcpy>
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	2210      	movs	r2, #16
 8001778:	2120      	movs	r1, #32
 800177a:	483c      	ldr	r0, [pc, #240]	; (800186c <main+0x154>)
 800177c:	f7ff f85e 	bl	800083c <NRF24_begin>
   // nrf24_DebugUART_Init(huart2);
   // printRadioSettings();

    NRF24_stopListening();
 8001780:	f7ff f93c 	bl	80009fc <NRF24_stopListening>

    NRF24_openWritingPipe(TxAddress);
 8001784:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <main+0x158>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f995 	bl	8000abc <NRF24_openWritingPipe>

    NRF24_setAutoAck(false);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fa1e 	bl	8000bd4 <NRF24_setAutoAck>
    NRF24_setChannel(83);
 8001798:	2053      	movs	r0, #83	; 0x53
 800179a:	f7ff f9ce 	bl	8000b3a <NRF24_setChannel>
    NRF24_setPayloadSize(PAYLOAD_SIZE);
 800179e:	2020      	movs	r0, #32
 80017a0:	f7ff f9e0 	bl	8000b64 <NRF24_setPayloadSize>
    NRF24_setPALevel(RF24_PA_m6dB);
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7ff fa2a 	bl	8000bfe <NRF24_setPALevel>
    NRF24_setDataRate(RF24_2MBPS);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff fa60 	bl	8000c70 <NRF24_setDataRate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint8_t buffer_index =0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	71fb      	strb	r3, [r7, #7]
    while (1)
    {
  	  if (dataFlag == 1) {
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <main+0x15c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d1fb      	bne.n	80017b4 <main+0x9c>
  		  buffer_index = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	71fb      	strb	r3, [r7, #7]
  		  for (int i = 0; i< UART_BUFFER; i++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	e03c      	b.n	8001840 <main+0x128>

  			  TxBuffer[buffer_index++] = Txdata[i];
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	71fa      	strb	r2, [r7, #7]
 80017cc:	4619      	mov	r1, r3
 80017ce:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <main+0x160>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <main+0x164>)
 80017d8:	545a      	strb	r2, [r3, r1]

  			  if (Txdata[i]=='\0' || Txdata[i]==';' || buffer_index == PAYLOAD_SIZE ||i == (UART_BUFFER-1)) {
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <main+0x160>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <main+0xe6>
 80017e6:	4a24      	ldr	r2, [pc, #144]	; (8001878 <main+0x160>)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b3b      	cmp	r3, #59	; 0x3b
 80017f0:	d005      	beq.n	80017fe <main+0xe6>
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b20      	cmp	r3, #32
 80017f6:	d002      	beq.n	80017fe <main+0xe6>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2bff      	cmp	r3, #255	; 0xff
 80017fc:	d11d      	bne.n	800183a <main+0x122>
  				  if(Txdata[i]==';') TxBuffer[buffer_index-1] ='\0';
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <main+0x160>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b3b      	cmp	r3, #59	; 0x3b
 8001808:	d104      	bne.n	8001814 <main+0xfc>
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	3b01      	subs	r3, #1
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <main+0x164>)
 8001810:	2100      	movs	r1, #0
 8001812:	54d1      	strb	r1, [r2, r3]

  				  NRF24_write(TxBuffer, PAYLOAD_SIZE);
 8001814:	2120      	movs	r1, #32
 8001816:	4819      	ldr	r0, [pc, #100]	; (800187c <main+0x164>)
 8001818:	f7ff f8fc 	bl	8000a14 <NRF24_write>

  				  clearString(TxBuffer, PAYLOAD_SIZE);
 800181c:	2120      	movs	r1, #32
 800181e:	4817      	ldr	r0, [pc, #92]	; (800187c <main+0x164>)
 8001820:	f000 fa68 	bl	8001cf4 <clearString>
  				  buffer_index = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	71fb      	strb	r3, [r7, #7]
  				  if (Txdata[i]=='\0') break;
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <main+0x160>)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <main+0x130>
  				  HAL_Delay(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f000 fcd7 	bl	80021e8 <HAL_Delay>
  		  for (int i = 0; i< UART_BUFFER; i++) {
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	ddbf      	ble.n	80017c6 <main+0xae>
 8001846:	e000      	b.n	800184a <main+0x132>
  				  if (Txdata[i]=='\0') break;
 8001848:	bf00      	nop
  			  }

  		  }


  		  clearString(Txdata, UART_BUFFER);
 800184a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184e:	480a      	ldr	r0, [pc, #40]	; (8001878 <main+0x160>)
 8001850:	f000 fa50 	bl	8001cf4 <clearString>
  		  dataFlag = 0;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <main+0x15c>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
  	  if (dataFlag == 1) {
 800185a:	e7ab      	b.n	80017b4 <main+0x9c>
 800185c:	200001dc 	.word	0x200001dc
 8001860:	20000441 	.word	0x20000441
 8001864:	080061bc 	.word	0x080061bc
 8001868:	20000140 	.word	0x20000140
 800186c:	40020400 	.word	0x40020400
 8001870:	20000000 	.word	0x20000000
 8001874:	20000442 	.word	0x20000442
 8001878:	20000320 	.word	0x20000320
 800187c:	20000420 	.word	0x20000420

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	; 0x50
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	2234      	movs	r2, #52	; 0x34
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f003 fd7e 	bl	8005390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <SystemClock_Config+0xd4>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a29      	ldr	r2, [pc, #164]	; (8001954 <SystemClock_Config+0xd4>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <SystemClock_Config+0xd4>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <SystemClock_Config+0xd8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <SystemClock_Config+0xd8>)
 80018ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <SystemClock_Config+0xd8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e4:	2301      	movs	r3, #1
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e8:	2310      	movs	r3, #16
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ec:	2302      	movs	r3, #2
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018f4:	2310      	movs	r3, #16
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018fe:	2304      	movs	r3, #4
 8001900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001902:	2302      	movs	r3, #2
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001906:	2302      	movs	r3, #2
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fb2a 	bl	8002f68 <HAL_RCC_OscConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800191a:	f000 fa07 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191e:	230f      	movs	r3, #15
 8001920:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001922:	2302      	movs	r3, #2
 8001924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	2102      	movs	r1, #2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 ffca 	bl	80028d4 <HAL_RCC_ClockConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001946:	f000 f9f1 	bl	8001d2c <Error_Handler>
  }
}
 800194a:	bf00      	nop
 800194c:	3750      	adds	r7, #80	; 0x50
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001962:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <MX_SPI1_Init+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800196c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_SPI1_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001990:	2228      	movs	r2, #40	; 0x28
 8001992:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_SPI1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <MX_SPI1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_SPI1_Init+0x64>)
 80019a8:	220a      	movs	r2, #10
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_SPI1_Init+0x64>)
 80019ae:	f001 fd79 	bl	80034a4 <HAL_SPI_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019b8:	f000 f9b8 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000140 	.word	0x20000140
 80019c4:	40013000 	.word	0x40013000

080019c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_UART4_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <MX_UART4_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_UART4_Init+0x4c>)
 80019d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_UART4_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_UART4_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_UART4_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_UART4_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_UART4_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_UART4_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_UART4_Init+0x4c>)
 8001a00:	f002 fc16 	bl	8004230 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f000 f98f 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000198 	.word	0x20000198
 8001a18:	40004c00 	.word	0x40004c00

08001a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_USART2_UART_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f002 fbec 	bl	8004230 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f000 f965 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200001dc 	.word	0x200001dc
 8001a6c:	40004400 	.word	0x40004400

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a48      	ldr	r2, [pc, #288]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a41      	ldr	r2, [pc, #260]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a3a      	ldr	r2, [pc, #232]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_GPIO_Init+0x15c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD3_Pin|DWM_CSN_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001afc:	4834      	ldr	r0, [pc, #208]	; (8001bd0 <MX_GPIO_Init+0x160>)
 8001afe:	f000 fecf 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DWM_RST_GPIO_Port, DWM_RST_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	4833      	ldr	r0, [pc, #204]	; (8001bd4 <MX_GPIO_Init+0x164>)
 8001b08:	f000 feca 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin|LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001b12:	4831      	ldr	r0, [pc, #196]	; (8001bd8 <MX_GPIO_Init+0x168>)
 8001b14:	f000 fec4 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4829      	ldr	r0, [pc, #164]	; (8001bd4 <MX_GPIO_Init+0x164>)
 8001b30:	f000 fd22 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin DWM_CSN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|DWM_CSN_Pin;
 8001b34:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4820      	ldr	r0, [pc, #128]	; (8001bd0 <MX_GPIO_Init+0x160>)
 8001b4e:	f000 fd13 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8001b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <MX_GPIO_Init+0x168>)
 8001b6a:	f000 fd05 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : DWM_RST_Pin */
  GPIO_InitStruct.Pin = DWM_RST_Pin;
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DWM_RST_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <MX_GPIO_Init+0x164>)
 8001b86:	f000 fcf7 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : DWM_IRQ_Pin */
  GPIO_InitStruct.Pin = DWM_IRQ_Pin;
 8001b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DWM_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <MX_GPIO_Init+0x160>)
 8001ba2:	f000 fce9 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin|LD1_Pin|LD2_Pin;
 8001ba6:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <MX_GPIO_Init+0x168>)
 8001bc0:	f000 fcda 	bl	8002578 <HAL_GPIO_Init>

}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020400 	.word	0x40020400

08001bdc <serialWrite>:

/* USER CODE BEGIN 4 */
void serialWrite(char data[]){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) data, strlen(data), 10);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7fe fb13 	bl	8000210 <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	230a      	movs	r3, #10
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4806      	ldr	r0, [pc, #24]	; (8001c0c <serialWrite+0x30>)
 8001bf4:	f002 fb69 	bl	80042ca <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)"\n",1,10);
 8001bf8:	230a      	movs	r3, #10
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4904      	ldr	r1, [pc, #16]	; (8001c10 <serialWrite+0x34>)
 8001bfe:	4803      	ldr	r0, [pc, #12]	; (8001c0c <serialWrite+0x30>)
 8001c00:	f002 fb63 	bl	80042ca <HAL_UART_Transmit>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200001dc 	.word	0x200001dc
 8001c10:	080061cc 	.word	0x080061cc

08001c14 <serialProcessRxData>:

void serialProcessRxData(){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

	if(dataFlag == 0) {
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <serialProcessRxData+0x6c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d11e      	bne.n	8001c60 <serialProcessRxData+0x4c>
		for (int i = 0; i < RxUARTLength; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	e00b      	b.n	8001c40 <serialProcessRxData+0x2c>
			Txdata[i] = RxUARTBuffer[i];
 8001c28:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <serialProcessRxData+0x70>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	7819      	ldrb	r1, [r3, #0]
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <serialProcessRxData+0x74>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	460a      	mov	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < RxUARTLength; i++)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <serialProcessRxData+0x78>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	dbed      	blt.n	8001c28 <serialProcessRxData+0x14>
		dataFlag = 1;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <serialProcessRxData+0x6c>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
		serialWrite(Txdata);
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <serialProcessRxData+0x74>)
 8001c54:	f7ff ffc2 	bl	8001bdc <serialWrite>
		serialWrite("OK");
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <serialProcessRxData+0x7c>)
 8001c5a:	f7ff ffbf 	bl	8001bdc <serialWrite>
 8001c5e:	e002      	b.n	8001c66 <serialProcessRxData+0x52>
	}
	else serialWrite("NOK");
 8001c60:	480c      	ldr	r0, [pc, #48]	; (8001c94 <serialProcessRxData+0x80>)
 8001c62:	f7ff ffbb 	bl	8001bdc <serialWrite>

	clearString(RxUARTBuffer, UART_BUFFER);
 8001c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <serialProcessRxData+0x70>)
 8001c6c:	f000 f842 	bl	8001cf4 <clearString>

	RxUARTLength = 0;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <serialProcessRxData+0x78>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000442 	.word	0x20000442
 8001c84:	20000220 	.word	0x20000220
 8001c88:	20000320 	.word	0x20000320
 8001c8c:	20000440 	.word	0x20000440
 8001c90:	080061d0 	.word	0x080061d0
 8001c94:	080061d4 	.word	0x080061d4

08001c98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_UART_RxCpltCallback+0x48>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d116      	bne.n	8001cd8 <HAL_UART_RxCpltCallback+0x40>
		if(RxSingleByte == '\n')
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_UART_RxCpltCallback+0x4c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b0a      	cmp	r3, #10
 8001cb0:	d102      	bne.n	8001cb8 <HAL_UART_RxCpltCallback+0x20>
			serialProcessRxData();
 8001cb2:	f7ff ffaf 	bl	8001c14 <serialProcessRxData>
 8001cb6:	e00a      	b.n	8001cce <HAL_UART_RxCpltCallback+0x36>
		else RxUARTBuffer[RxUARTLength++] = RxSingleByte;
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_UART_RxCpltCallback+0x50>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	b2d1      	uxtb	r1, r2
 8001cc0:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_UART_RxCpltCallback+0x50>)
 8001cc2:	7011      	strb	r1, [r2, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <HAL_UART_RxCpltCallback+0x4c>)
 8001cc8:	7819      	ldrb	r1, [r3, #0]
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_UART_RxCpltCallback+0x54>)
 8001ccc:	5499      	strb	r1, [r3, r2]

		if (RxUARTLength == UART_BUFFER)
			serialProcessRxData();

		HAL_UART_Receive_IT(&huart2, &RxSingleByte, 1);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4904      	ldr	r1, [pc, #16]	; (8001ce4 <HAL_UART_RxCpltCallback+0x4c>)
 8001cd2:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <HAL_UART_RxCpltCallback+0x58>)
 8001cd4:	f002 fb8b 	bl	80043ee <HAL_UART_Receive_IT>
	}
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40004400 	.word	0x40004400
 8001ce4:	20000441 	.word	0x20000441
 8001ce8:	20000440 	.word	0x20000440
 8001cec:	20000220 	.word	0x20000220
 8001cf0:	200001dc 	.word	0x200001dc

08001cf4 <clearString>:

void clearString(char * str, int len) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	for(int i = 0; i< len; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e007      	b.n	8001d14 <clearString+0x20>
		str[i] = '\0';
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< len; i++)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3301      	adds	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dbf3      	blt.n	8001d04 <clearString+0x10>
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  serialWrite("err");
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <Error_Handler+0x18>)
 8001d36:	f7ff ff51 	bl	8001bdc <serialWrite>
	  HAL_Delay(1000);
 8001d3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d3e:	f000 fa53 	bl	80021e8 <HAL_Delay>
	  serialWrite("err");
 8001d42:	e7f7      	b.n	8001d34 <Error_Handler+0x8>
 8001d44:	080061d8 	.word	0x080061d8

08001d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d86:	2007      	movs	r0, #7
 8001d88:	f000 fb22 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800

08001d98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2c      	ldr	r2, [pc, #176]	; (8001e68 <HAL_SPI_MspInit+0xd0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d151      	bne.n	8001e5e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_SPI_MspInit+0xd4>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <HAL_SPI_MspInit+0xd4>)
 8001dc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_SPI_MspInit+0xd4>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_SPI_MspInit+0xd4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_SPI_MspInit+0xd4>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_SPI_MspInit+0xd4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_SPI_MspInit+0xd4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_SPI_MspInit+0xd4>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_SPI_MspInit+0xd4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e0e:	23c0      	movs	r3, #192	; 0xc0
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4811      	ldr	r0, [pc, #68]	; (8001e70 <HAL_SPI_MspInit+0xd8>)
 8001e2a:	f000 fba5 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	480a      	ldr	r0, [pc, #40]	; (8001e74 <HAL_SPI_MspInit+0xdc>)
 8001e4a:	f000 fb95 	bl	8002578 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2023      	movs	r0, #35	; 0x23
 8001e54:	f000 fac7 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e58:	2023      	movs	r0, #35	; 0x23
 8001e5a:	f000 fae0 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40013000 	.word	0x40013000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020400 	.word	0x40020400

08001e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3a      	ldr	r2, [pc, #232]	; (8001f80 <HAL_UART_MspInit+0x108>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d134      	bne.n	8001f04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a38      	ldr	r2, [pc, #224]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4826      	ldr	r0, [pc, #152]	; (8001f88 <HAL_UART_MspInit+0x110>)
 8001eee:	f000 fb43 	bl	8002578 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2034      	movs	r0, #52	; 0x34
 8001ef8:	f000 fa75 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001efc:	2034      	movs	r0, #52	; 0x34
 8001efe:	f000 fa8e 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f02:	e038      	b.n	8001f76 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <HAL_UART_MspInit+0x114>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d133      	bne.n	8001f76 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f46:	230c      	movs	r3, #12
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f56:	2307      	movs	r3, #7
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4809      	ldr	r0, [pc, #36]	; (8001f88 <HAL_UART_MspInit+0x110>)
 8001f62:	f000 fb09 	bl	8002578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2026      	movs	r0, #38	; 0x26
 8001f6c:	f000 fa3b 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f70:	2026      	movs	r0, #38	; 0x26
 8001f72:	f000 fa54 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8001f76:	bf00      	nop
 8001f78:	3730      	adds	r7, #48	; 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40004c00 	.word	0x40004c00
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40004400 	.word	0x40004400

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <NMI_Handler+0x4>

08001f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler+0x4>

08001fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fdc:	f000 f8e4 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <SPI1_IRQHandler+0x10>)
 8001fea:	f001 fed3 	bl	8003d94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000140 	.word	0x20000140

08001ff8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <USART2_IRQHandler+0x10>)
 8001ffe:	f002 fa27 	bl	8004450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200001dc 	.word	0x200001dc

0800200c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <UART4_IRQHandler+0x10>)
 8002012:	f002 fa1d 	bl	8004450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000198 	.word	0x20000198

08002020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002028:	4a14      	ldr	r2, [pc, #80]	; (800207c <_sbrk+0x5c>)
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <_sbrk+0x60>)
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <_sbrk+0x64>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <_sbrk+0x68>)
 8002040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d207      	bcs.n	8002060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002050:	f003 f966 	bl	8005320 <__errno>
 8002054:	4603      	mov	r3, r0
 8002056:	220c      	movs	r2, #12
 8002058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	e009      	b.n	8002074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <_sbrk+0x64>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <_sbrk+0x64>)
 8002070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20020000 	.word	0x20020000
 8002080:	00000400 	.word	0x00000400
 8002084:	20000444 	.word	0x20000444
 8002088:	20000460 	.word	0x20000460

0800208c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <SystemInit+0x20>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <SystemInit+0x20>)
 8002098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800209c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020b6:	490e      	ldr	r1, [pc, #56]	; (80020f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b8:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020cc:	4c0b      	ldr	r4, [pc, #44]	; (80020fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020da:	f7ff ffd7 	bl	800208c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020de:	f003 f925 	bl	800532c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e2:	f7ff fb19 	bl	8001718 <main>
  bx  lr    
 80020e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80020f4:	08006238 	.word	0x08006238
  ldr r2, =_sbss
 80020f8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80020fc:	2000045c 	.word	0x2000045c

08002100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC_IRQHandler>
	...

08002104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_Init+0x40>)
 800210e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_Init+0x40>)
 800211a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a07      	ldr	r2, [pc, #28]	; (8002144 <HAL_Init+0x40>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212c:	2003      	movs	r0, #3
 800212e:	f000 f94f 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002132:	2000      	movs	r0, #0
 8002134:	f000 f808 	bl	8002148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002138:	f7ff fe06 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023c00 	.word	0x40023c00

08002148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_InitTick+0x54>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_InitTick+0x58>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f967 	bl	800243a <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00e      	b.n	8002194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d80a      	bhi.n	8002192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f000 f92f 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <HAL_InitTick+0x5c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000008 	.word	0x20000008
 80021a0:	20000010 	.word	0x20000010
 80021a4:	2000000c 	.word	0x2000000c

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000010 	.word	0x20000010
 80021cc:	20000448 	.word	0x20000448

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000448 	.word	0x20000448

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_Delay+0x44>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffde 	bl	80021d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000010 	.word	0x20000010

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff3e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff31 	bl	8002294 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7ff feb6 	bl	80021d0 <HAL_GetTick>
 8002464:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d008      	beq.n	8002484 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e052      	b.n	800252a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0216 	bic.w	r2, r2, #22
 8002492:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <HAL_DMA_Abort+0x62>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0208 	bic.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d4:	e013      	b.n	80024fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d6:	f7ff fe7b 	bl	80021d0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d90c      	bls.n	80024fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e015      	b.n	800252a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e4      	bne.n	80024d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	223f      	movs	r2, #63	; 0x3f
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d004      	beq.n	8002550 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e00c      	b.n	800256a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2205      	movs	r2, #5
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	e165      	b.n	8002860 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f040 8154 	bne.w	800285a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d005      	beq.n	80025ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d130      	bne.n	800262c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0201 	and.w	r2, r3, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b03      	cmp	r3, #3
 8002636:	d017      	beq.n	8002668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d123      	bne.n	80026bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3208      	adds	r2, #8
 800267c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0203 	and.w	r2, r3, #3
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80ae 	beq.w	800285a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_GPIO_Init+0x300>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a5c      	ldr	r2, [pc, #368]	; (8002878 <HAL_GPIO_Init+0x300>)
 8002708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_GPIO_Init+0x300>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271a:	4a58      	ldr	r2, [pc, #352]	; (800287c <HAL_GPIO_Init+0x304>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4f      	ldr	r2, [pc, #316]	; (8002880 <HAL_GPIO_Init+0x308>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d025      	beq.n	8002792 <HAL_GPIO_Init+0x21a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4e      	ldr	r2, [pc, #312]	; (8002884 <HAL_GPIO_Init+0x30c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01f      	beq.n	800278e <HAL_GPIO_Init+0x216>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <HAL_GPIO_Init+0x310>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x212>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4c      	ldr	r2, [pc, #304]	; (800288c <HAL_GPIO_Init+0x314>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x20e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4b      	ldr	r2, [pc, #300]	; (8002890 <HAL_GPIO_Init+0x318>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x20a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4a      	ldr	r2, [pc, #296]	; (8002894 <HAL_GPIO_Init+0x31c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x206>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a49      	ldr	r2, [pc, #292]	; (8002898 <HAL_GPIO_Init+0x320>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x202>
 8002776:	2306      	movs	r3, #6
 8002778:	e00c      	b.n	8002794 <HAL_GPIO_Init+0x21c>
 800277a:	2307      	movs	r3, #7
 800277c:	e00a      	b.n	8002794 <HAL_GPIO_Init+0x21c>
 800277e:	2305      	movs	r3, #5
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x21c>
 8002782:	2304      	movs	r3, #4
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x21c>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x21c>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x21c>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x21c>
 8002792:	2300      	movs	r3, #0
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a4:	4935      	ldr	r1, [pc, #212]	; (800287c <HAL_GPIO_Init+0x304>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b3a      	ldr	r3, [pc, #232]	; (800289c <HAL_GPIO_Init+0x324>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a31      	ldr	r2, [pc, #196]	; (800289c <HAL_GPIO_Init+0x324>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <HAL_GPIO_Init+0x324>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a26      	ldr	r2, [pc, #152]	; (800289c <HAL_GPIO_Init+0x324>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_GPIO_Init+0x324>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_GPIO_Init+0x324>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <HAL_GPIO_Init+0x324>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002854:	4a11      	ldr	r2, [pc, #68]	; (800289c <HAL_GPIO_Init+0x324>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	f67f ae96 	bls.w	8002594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40013800 	.word	0x40013800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40021000 	.word	0x40021000
 8002894:	40021400 	.word	0x40021400
 8002898:	40021800 	.word	0x40021800
 800289c:	40013c00 	.word	0x40013c00

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028bc:	e003      	b.n	80028c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	619a      	str	r2, [r3, #24]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0cc      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d90c      	bls.n	8002910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800294a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d044      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d003      	beq.n	8002992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298e:	2b03      	cmp	r3, #3
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e067      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4934      	ldr	r1, [pc, #208]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7ff fc04 	bl	80021d0 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7ff fc00 	bl	80021d0 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e04f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d20c      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f855 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fb64 	bl	8002148 <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	080061dc 	.word	0x080061dc
 8002a98:	20000008 	.word	0x20000008
 8002a9c:	2000000c 	.word	0x2000000c

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	080061ec 	.word	0x080061ec

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ae4:	f7ff ffdc 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0b5b      	lsrs	r3, r3, #13
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	080061ec 	.word	0x080061ec

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b0ae      	sub	sp, #184	; 0xb8
 8002b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b2e:	4bcb      	ldr	r3, [pc, #812]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	f200 8206 	bhi.w	8002f48 <HAL_RCC_GetSysClockFreq+0x440>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002f49 	.word	0x08002f49
 8002b4c:	08002f49 	.word	0x08002f49
 8002b50:	08002f49 	.word	0x08002f49
 8002b54:	08002b81 	.word	0x08002b81
 8002b58:	08002f49 	.word	0x08002f49
 8002b5c:	08002f49 	.word	0x08002f49
 8002b60:	08002f49 	.word	0x08002f49
 8002b64:	08002b89 	.word	0x08002b89
 8002b68:	08002f49 	.word	0x08002f49
 8002b6c:	08002f49 	.word	0x08002f49
 8002b70:	08002f49 	.word	0x08002f49
 8002b74:	08002d79 	.word	0x08002d79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b78:	4bb9      	ldr	r3, [pc, #740]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b7e:	e1e7      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b80:	4bb8      	ldr	r3, [pc, #736]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b86:	e1e3      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b88:	4bb4      	ldr	r3, [pc, #720]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b94:	4bb1      	ldr	r3, [pc, #708]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d071      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba0:	4bae      	ldr	r3, [pc, #696]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	0159      	lsls	r1, r3, #5
 8002bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd8:	0150      	lsls	r0, r2, #5
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4621      	mov	r1, r4
 8002be0:	1a51      	subs	r1, r2, r1
 8002be2:	6439      	str	r1, [r7, #64]	; 0x40
 8002be4:	4629      	mov	r1, r5
 8002be6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	018b      	lsls	r3, r1, #6
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c02:	4641      	mov	r1, r8
 8002c04:	018a      	lsls	r2, r1, #6
 8002c06:	4641      	mov	r1, r8
 8002c08:	1a51      	subs	r1, r2, r1
 8002c0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c20:	4649      	mov	r1, r9
 8002c22:	00cb      	lsls	r3, r1, #3
 8002c24:	4641      	mov	r1, r8
 8002c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	00ca      	lsls	r2, r1, #3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	4622      	mov	r2, r4
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	eb42 0303 	adc.w	r3, r2, r3
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c50:	4629      	mov	r1, r5
 8002c52:	024b      	lsls	r3, r1, #9
 8002c54:	4621      	mov	r1, r4
 8002c56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	024a      	lsls	r2, r1, #9
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c74:	f7fd fb24 	bl	80002c0 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c82:	e067      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c84:	4b75      	ldr	r3, [pc, #468]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c90:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ca2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	462b      	mov	r3, r5
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	0159      	lsls	r1, r3, #5
 8002cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb8:	0150      	lsls	r0, r2, #5
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	1a51      	subs	r1, r2, r1
 8002cc2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002cd8:	4649      	mov	r1, r9
 8002cda:	018b      	lsls	r3, r1, #6
 8002cdc:	4641      	mov	r1, r8
 8002cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	018a      	lsls	r2, r1, #6
 8002ce6:	4641      	mov	r1, r8
 8002ce8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cec:	4649      	mov	r1, r9
 8002cee:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cfe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d06:	4692      	mov	sl, r2
 8002d08:	469b      	mov	fp, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb1a 0303 	adds.w	r3, sl, r3
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	462b      	mov	r3, r5
 8002d14:	eb4b 0303 	adc.w	r3, fp, r3
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d26:	4629      	mov	r1, r5
 8002d28:	028b      	lsls	r3, r1, #10
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d30:	4621      	mov	r1, r4
 8002d32:	028a      	lsls	r2, r1, #10
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d40:	677a      	str	r2, [r7, #116]	; 0x74
 8002d42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002d46:	f7fd fabb 	bl	80002c0 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4613      	mov	r3, r2
 8002d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d54:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d76:	e0eb      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d78:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d06b      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d90:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	2200      	movs	r2, #0
 8002d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da2:	663b      	str	r3, [r7, #96]	; 0x60
 8002da4:	2300      	movs	r3, #0
 8002da6:	667b      	str	r3, [r7, #100]	; 0x64
 8002da8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002dac:	4622      	mov	r2, r4
 8002dae:	462b      	mov	r3, r5
 8002db0:	f04f 0000 	mov.w	r0, #0
 8002db4:	f04f 0100 	mov.w	r1, #0
 8002db8:	0159      	lsls	r1, r3, #5
 8002dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dbe:	0150      	lsls	r0, r2, #5
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	1a51      	subs	r1, r2, r1
 8002dc8:	61b9      	str	r1, [r7, #24]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002dde:	4659      	mov	r1, fp
 8002de0:	018b      	lsls	r3, r1, #6
 8002de2:	4651      	mov	r1, sl
 8002de4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002de8:	4651      	mov	r1, sl
 8002dea:	018a      	lsls	r2, r1, #6
 8002dec:	4651      	mov	r1, sl
 8002dee:	ebb2 0801 	subs.w	r8, r2, r1
 8002df2:	4659      	mov	r1, fp
 8002df4:	eb63 0901 	sbc.w	r9, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e0c:	4690      	mov	r8, r2
 8002e0e:	4699      	mov	r9, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	eb18 0303 	adds.w	r3, r8, r3
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	462b      	mov	r3, r5
 8002e1a:	eb49 0303 	adc.w	r3, r9, r3
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	024b      	lsls	r3, r1, #9
 8002e30:	4621      	mov	r1, r4
 8002e32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e36:	4621      	mov	r1, r4
 8002e38:	024a      	lsls	r2, r1, #9
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e42:	2200      	movs	r2, #0
 8002e44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e4c:	f7fd fa38 	bl	80002c0 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e5a:	e065      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x420>
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	00f42400 	.word	0x00f42400
 8002e64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e68:	4b3d      	ldr	r3, [pc, #244]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	099b      	lsrs	r3, r3, #6
 8002e6e:	2200      	movs	r2, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	4611      	mov	r1, r2
 8002e74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e78:	653b      	str	r3, [r7, #80]	; 0x50
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	657b      	str	r3, [r7, #84]	; 0x54
 8002e7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e82:	4642      	mov	r2, r8
 8002e84:	464b      	mov	r3, r9
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	0159      	lsls	r1, r3, #5
 8002e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e94:	0150      	lsls	r0, r2, #5
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	1a51      	subs	r1, r2, r1
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	018b      	lsls	r3, r1, #6
 8002eb8:	4651      	mov	r1, sl
 8002eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	018a      	lsls	r2, r1, #6
 8002ec2:	4651      	mov	r1, sl
 8002ec4:	1a54      	subs	r4, r2, r1
 8002ec6:	4659      	mov	r1, fp
 8002ec8:	eb63 0501 	sbc.w	r5, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	00eb      	lsls	r3, r5, #3
 8002ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eda:	00e2      	lsls	r2, r4, #3
 8002edc:	4614      	mov	r4, r2
 8002ede:	461d      	mov	r5, r3
 8002ee0:	4643      	mov	r3, r8
 8002ee2:	18e3      	adds	r3, r4, r3
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	eb45 0303 	adc.w	r3, r5, r3
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002efa:	4629      	mov	r1, r5
 8002efc:	028b      	lsls	r3, r1, #10
 8002efe:	4621      	mov	r1, r4
 8002f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f04:	4621      	mov	r1, r4
 8002f06:	028a      	lsls	r2, r1, #10
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f10:	2200      	movs	r2, #0
 8002f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f1a:	f7fd f9d1 	bl	80002c0 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4613      	mov	r3, r2
 8002f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	0f1b      	lsrs	r3, r3, #28
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f46:	e003      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	37b8      	adds	r7, #184	; 0xb8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	00f42400 	.word	0x00f42400

08002f68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e28d      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8083 	beq.w	800308e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f88:	4b94      	ldr	r3, [pc, #592]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d019      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f94:	4b91      	ldr	r3, [pc, #580]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fa0:	4b8e      	ldr	r3, [pc, #568]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fac:	d00c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fae:	4b8b      	ldr	r3, [pc, #556]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d112      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fba:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	4b84      	ldr	r3, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05b      	beq.n	800308c <HAL_RCC_OscConfig+0x124>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d157      	bne.n	800308c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e25a      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x90>
 8002fea:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7b      	ldr	r2, [pc, #492]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e01d      	b.n	8003034 <HAL_RCC_OscConfig+0xcc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0xb4>
 8003002:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a75      	ldr	r2, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b73      	ldr	r3, [pc, #460]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a72      	ldr	r2, [pc, #456]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xcc>
 800301c:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6e      	ldr	r2, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b6c      	ldr	r3, [pc, #432]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6b      	ldr	r2, [pc, #428]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7ff f8c8 	bl	80021d0 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003044:	f7ff f8c4 	bl	80021d0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e21f      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b61      	ldr	r3, [pc, #388]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0xdc>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7ff f8b4 	bl	80021d0 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7ff f8b0 	bl	80021d0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e20b      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b57      	ldr	r3, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x104>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d06f      	beq.n	800317a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800309a:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d017      	beq.n	80030d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030a6:	4b4d      	ldr	r3, [pc, #308]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d105      	bne.n	80030be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030b2:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d11c      	bne.n	8003104 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ca:	4b44      	ldr	r3, [pc, #272]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d116      	bne.n	8003104 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x186>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e1d3      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ee:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4937      	ldr	r1, [pc, #220]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	e03a      	b.n	800317a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310c:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7ff f85d 	bl	80021d0 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800311a:	f7ff f859 	bl	80021d0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e1b4      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4925      	ldr	r1, [pc, #148]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	e015      	b.n	800317a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314e:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7ff f83c 	bl	80021d0 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315c:	f7ff f838 	bl	80021d0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e193      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d036      	beq.n	80031f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d016      	beq.n	80031bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <HAL_RCC_OscConfig+0x27c>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7ff f81c 	bl	80021d0 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319c:	f7ff f818 	bl	80021d0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e173      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x234>
 80031ba:	e01b      	b.n	80031f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_RCC_OscConfig+0x27c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7ff f805 	bl	80021d0 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	e00e      	b.n	80031e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ca:	f7ff f801 	bl	80021d0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d907      	bls.n	80031e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e15c      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
 80031dc:	40023800 	.word	0x40023800
 80031e0:	42470000 	.word	0x42470000
 80031e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	4b8a      	ldr	r3, [pc, #552]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ea      	bne.n	80031ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8097 	beq.w	8003330 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003206:	4b83      	ldr	r3, [pc, #524]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10f      	bne.n	8003232 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	4b7f      	ldr	r3, [pc, #508]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a7e      	ldr	r2, [pc, #504]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
 8003222:	4b7c      	ldr	r3, [pc, #496]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003232:	4b79      	ldr	r3, [pc, #484]	; (8003418 <HAL_RCC_OscConfig+0x4b0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d118      	bne.n	8003270 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323e:	4b76      	ldr	r3, [pc, #472]	; (8003418 <HAL_RCC_OscConfig+0x4b0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a75      	ldr	r2, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x4b0>)
 8003244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324a:	f7fe ffc1 	bl	80021d0 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003252:	f7fe ffbd 	bl	80021d0 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e118      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003264:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <HAL_RCC_OscConfig+0x4b0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x31e>
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a65      	ldr	r2, [pc, #404]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	e01c      	b.n	80032c0 <HAL_RCC_OscConfig+0x358>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x340>
 800328e:	4b61      	ldr	r3, [pc, #388]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a60      	ldr	r2, [pc, #384]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	f043 0304 	orr.w	r3, r3, #4
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	4b5e      	ldr	r3, [pc, #376]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a5d      	ldr	r2, [pc, #372]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
 80032a6:	e00b      	b.n	80032c0 <HAL_RCC_OscConfig+0x358>
 80032a8:	4b5a      	ldr	r3, [pc, #360]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a59      	ldr	r2, [pc, #356]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	4b57      	ldr	r3, [pc, #348]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	4a56      	ldr	r2, [pc, #344]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032ba:	f023 0304 	bic.w	r3, r3, #4
 80032be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d015      	beq.n	80032f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe ff82 	bl	80021d0 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fe ff7e 	bl	80021d0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0d7      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	4b4b      	ldr	r3, [pc, #300]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ee      	beq.n	80032d0 <HAL_RCC_OscConfig+0x368>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe ff6c 	bl	80021d0 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe ff68 	bl	80021d0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0c1      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003312:	4b40      	ldr	r3, [pc, #256]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ee      	bne.n	80032fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800331e:	7dfb      	ldrb	r3, [r7, #23]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003324:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	4a3a      	ldr	r2, [pc, #232]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800332a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80ad 	beq.w	8003494 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800333a:	4b36      	ldr	r3, [pc, #216]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	d060      	beq.n	8003408 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d145      	bne.n	80033da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b33      	ldr	r3, [pc, #204]	; (800341c <HAL_RCC_OscConfig+0x4b4>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe ff3c 	bl	80021d0 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe ff38 	bl	80021d0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e093      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	4b29      	ldr	r3, [pc, #164]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	019b      	lsls	r3, r3, #6
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	085b      	lsrs	r3, r3, #1
 8003392:	3b01      	subs	r3, #1
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	071b      	lsls	r3, r3, #28
 80033a6:	491b      	ldr	r1, [pc, #108]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x4b4>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fe ff0d 	bl	80021d0 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ba:	f7fe ff09 	bl	80021d0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e064      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x452>
 80033d8:	e05c      	b.n	8003494 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RCC_OscConfig+0x4b4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fef6 	bl	80021d0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe fef2 	bl	80021d0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e04d      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x480>
 8003406:	e045      	b.n	8003494 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d107      	bne.n	8003420 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e040      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
 8003414:	40023800 	.word	0x40023800
 8003418:	40007000 	.word	0x40007000
 800341c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003420:	4b1f      	ldr	r3, [pc, #124]	; (80034a0 <HAL_RCC_OscConfig+0x538>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d030      	beq.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d129      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d122      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003450:	4013      	ands	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003458:	4293      	cmp	r3, r2
 800345a:	d119      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d10f      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07b      	b.n	80035ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d108      	bne.n	80034d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034c6:	d009      	beq.n	80034dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	61da      	str	r2, [r3, #28]
 80034ce:	e005      	b.n	80034dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fc4e 	bl	8001d98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003560:	ea42 0103 	orr.w	r1, r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	f003 0104 	and.w	r1, r3, #4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	f003 0210 	and.w	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b088      	sub	sp, #32
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_SPI_Transmit+0x22>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e126      	b.n	8003826 <HAL_SPI_Transmit+0x270>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035e0:	f7fe fdf6 	bl	80021d0 <HAL_GetTick>
 80035e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d002      	beq.n	80035fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
 80035f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035fa:	e10b      	b.n	8003814 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_SPI_Transmit+0x52>
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800360c:	e102      	b.n	8003814 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2203      	movs	r2, #3
 8003612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	88fa      	ldrh	r2, [r7, #6]
 8003626:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003654:	d10f      	bne.n	8003676 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003664:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003674:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	d007      	beq.n	8003694 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369c:	d14b      	bne.n	8003736 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_Transmit+0xf6>
 80036a6:	8afb      	ldrh	r3, [r7, #22]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d13e      	bne.n	800372a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	881a      	ldrh	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	1c9a      	adds	r2, r3, #2
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036d0:	e02b      	b.n	800372a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d112      	bne.n	8003706 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	1c9a      	adds	r2, r3, #2
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	86da      	strh	r2, [r3, #54]	; 0x36
 8003704:	e011      	b.n	800372a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003706:	f7fe fd63 	bl	80021d0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d803      	bhi.n	800371e <HAL_SPI_Transmit+0x168>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d102      	bne.n	8003724 <HAL_SPI_Transmit+0x16e>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003728:	e074      	b.n	8003814 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ce      	bne.n	80036d2 <HAL_SPI_Transmit+0x11c>
 8003734:	e04c      	b.n	80037d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_SPI_Transmit+0x18e>
 800373e:	8afb      	ldrh	r3, [r7, #22]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d140      	bne.n	80037c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800376a:	e02c      	b.n	80037c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d113      	bne.n	80037a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	86da      	strh	r2, [r3, #54]	; 0x36
 80037a0:	e011      	b.n	80037c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a2:	f7fe fd15 	bl	80021d0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d803      	bhi.n	80037ba <HAL_SPI_Transmit+0x204>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d102      	bne.n	80037c0 <HAL_SPI_Transmit+0x20a>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037c4:	e026      	b.n	8003814 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1cd      	bne.n	800376c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fce9 	bl	80041ac <SPI_EndRxTxTransaction>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e000      	b.n	8003814 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003812:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003824:	7ffb      	ldrb	r3, [r7, #31]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b088      	sub	sp, #32
 8003832:	af02      	add	r7, sp, #8
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800384a:	d112      	bne.n	8003872 <HAL_SPI_Receive+0x44>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10e      	bne.n	8003872 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2204      	movs	r2, #4
 8003858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	4613      	mov	r3, r2
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f8f1 	bl	8003a50 <HAL_SPI_TransmitReceive>
 800386e:	4603      	mov	r3, r0
 8003870:	e0ea      	b.n	8003a48 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_SPI_Receive+0x52>
 800387c:	2302      	movs	r3, #2
 800387e:	e0e3      	b.n	8003a48 <HAL_SPI_Receive+0x21a>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003888:	f7fe fca2 	bl	80021d0 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d002      	beq.n	80038a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800389a:	2302      	movs	r3, #2
 800389c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800389e:	e0ca      	b.n	8003a36 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_SPI_Receive+0x7e>
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038b0:	e0c1      	b.n	8003a36 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2204      	movs	r2, #4
 80038b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	88fa      	ldrh	r2, [r7, #6]
 80038ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f8:	d10f      	bne.n	800391a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003908:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003918:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b40      	cmp	r3, #64	; 0x40
 8003926:	d007      	beq.n	8003938 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003936:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d162      	bne.n	8003a06 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003940:	e02e      	b.n	80039a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d115      	bne.n	800397c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f103 020c 	add.w	r2, r3, #12
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	87da      	strh	r2, [r3, #62]	; 0x3e
 800397a:	e011      	b.n	80039a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800397c:	f7fe fc28 	bl	80021d0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d803      	bhi.n	8003994 <HAL_SPI_Receive+0x166>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d102      	bne.n	800399a <HAL_SPI_Receive+0x16c>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800399e:	e04a      	b.n	8003a36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1cb      	bne.n	8003942 <HAL_SPI_Receive+0x114>
 80039aa:	e031      	b.n	8003a10 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d113      	bne.n	80039e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	b292      	uxth	r2, r2
 80039c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	1c9a      	adds	r2, r3, #2
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039e0:	e011      	b.n	8003a06 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e2:	f7fe fbf5 	bl	80021d0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d803      	bhi.n	80039fa <HAL_SPI_Receive+0x1cc>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d102      	bne.n	8003a00 <HAL_SPI_Receive+0x1d2>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a04:	e017      	b.n	8003a36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1cd      	bne.n	80039ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	6839      	ldr	r1, [r7, #0]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fb63 	bl	80040e0 <SPI_EndRxTransaction>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	75fb      	strb	r3, [r7, #23]
 8003a32:	e000      	b.n	8003a36 <HAL_SPI_Receive+0x208>
  }

error :
 8003a34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08c      	sub	sp, #48	; 0x30
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_SPI_TransmitReceive+0x26>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e18a      	b.n	8003d8c <HAL_SPI_TransmitReceive+0x33c>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a7e:	f7fe fba7 	bl	80021d0 <HAL_GetTick>
 8003a82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a94:	887b      	ldrh	r3, [r7, #2]
 8003a96:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d00f      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x70>
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa6:	d107      	bne.n	8003ab8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <HAL_SPI_TransmitReceive+0x68>
 8003ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d003      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003abe:	e15b      	b.n	8003d78 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x82>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x82>
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ad8:	e14e      	b.n	8003d78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d003      	beq.n	8003aee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2205      	movs	r2, #5
 8003aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	887a      	ldrh	r2, [r7, #2]
 8003afe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	887a      	ldrh	r2, [r7, #2]
 8003b04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	887a      	ldrh	r2, [r7, #2]
 8003b16:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d007      	beq.n	8003b42 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4a:	d178      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_SPI_TransmitReceive+0x10a>
 8003b54:	8b7b      	ldrh	r3, [r7, #26]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d166      	bne.n	8003c28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	1c9a      	adds	r2, r3, #2
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b7e:	e053      	b.n	8003c28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d11b      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x176>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d016      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x176>
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d113      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	1c9a      	adds	r2, r3, #2
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d119      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x1b8>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d014      	beq.n	8003c08 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	b292      	uxth	r2, r2
 8003bea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	1c9a      	adds	r2, r3, #2
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c04:	2301      	movs	r3, #1
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c08:	f7fe fae2 	bl	80021d0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d807      	bhi.n	8003c28 <HAL_SPI_TransmitReceive+0x1d8>
 8003c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d003      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c26:	e0a7      	b.n	8003d78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1a6      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x130>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1a1      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x130>
 8003c3c:	e07c      	b.n	8003d38 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_SPI_TransmitReceive+0x1fc>
 8003c46:	8b7b      	ldrh	r3, [r7, #26]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d16b      	bne.n	8003d24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	7812      	ldrb	r2, [r2, #0]
 8003c58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c72:	e057      	b.n	8003d24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d11c      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x26c>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d017      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x26c>
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d114      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	7812      	ldrb	r2, [r2, #0]
 8003c9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d119      	bne.n	8003cfe <HAL_SPI_TransmitReceive+0x2ae>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d014      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cfe:	f7fe fa67 	bl	80021d0 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d803      	bhi.n	8003d16 <HAL_SPI_TransmitReceive+0x2c6>
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d102      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x2cc>
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d22:	e029      	b.n	8003d78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1a2      	bne.n	8003c74 <HAL_SPI_TransmitReceive+0x224>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d19d      	bne.n	8003c74 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fa35 	bl	80041ac <SPI_EndRxTxTransaction>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d006      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d54:	e010      	b.n	8003d78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	e000      	b.n	8003d78 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3730      	adds	r7, #48	; 0x30
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	099b      	lsrs	r3, r3, #6
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10f      	bne.n	8003dd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
    return;
 8003dd6:	e0d7      	b.n	8003f88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_SPI_IRQHandler+0x66>
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	09db      	lsrs	r3, r3, #7
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
    return;
 8003df8:	e0c6      	b.n	8003f88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_SPI_IRQHandler+0x8c>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80b4 	beq.w	8003f88 <HAL_SPI_IRQHandler+0x1f4>
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80ad 	beq.w	8003f88 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d023      	beq.n	8003e82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d011      	beq.n	8003e6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f043 0204 	orr.w	r2, r3, #4
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	e00b      	b.n	8003e82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	693b      	ldr	r3, [r7, #16]
        return;
 8003e80:	e082      	b.n	8003f88 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d014      	beq.n	8003eb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	f043 0208 	orr.w	r2, r3, #8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d04f      	beq.n	8003f86 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ef4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <HAL_SPI_IRQHandler+0x17e>
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d034      	beq.n	8003f7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0203 	bic.w	r2, r2, #3
 8003f20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d011      	beq.n	8003f4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2e:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <HAL_SPI_IRQHandler+0x1fc>)
 8003f30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fafb 	bl	8002532 <HAL_DMA_Abort_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d016      	beq.n	8003f84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5a:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <HAL_SPI_IRQHandler+0x1fc>)
 8003f5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fae5 	bl	8002532 <HAL_DMA_Abort_IT>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003f7a:	e003      	b.n	8003f84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f809 	bl	8003f94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f82:	e000      	b.n	8003f86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003f84:	bf00      	nop
    return;
 8003f86:	bf00      	nop
  }
}
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	08003fa9 	.word	0x08003fa9

08003f94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff ffe6 	bl	8003f94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fe0:	f7fe f8f6 	bl	80021d0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ff0:	f7fe f8ee 	bl	80021d0 <HAL_GetTick>
 8003ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ff6:	4b39      	ldr	r3, [pc, #228]	; (80040dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	0d1b      	lsrs	r3, r3, #20
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004006:	e054      	b.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d050      	beq.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004010:	f7fe f8de 	bl	80021d0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	429a      	cmp	r2, r3
 800401e:	d902      	bls.n	8004026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d13d      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403e:	d111      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004048:	d004      	beq.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004052:	d107      	bne.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d10f      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800408c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e017      	b.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d19b      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000008 	.word	0x20000008

080040e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f4:	d111      	bne.n	800411a <SPI_EndRxTransaction+0x3a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fe:	d004      	beq.n	800410a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004108:	d107      	bne.n	800411a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004118:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004122:	d12a      	bne.n	800417a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412c:	d012      	beq.n	8004154 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2200      	movs	r2, #0
 8004136:	2180      	movs	r1, #128	; 0x80
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff ff49 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02d      	beq.n	80041a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	f043 0220 	orr.w	r2, r3, #32
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e026      	b.n	80041a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2200      	movs	r2, #0
 800415c:	2101      	movs	r1, #1
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff ff36 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01a      	beq.n	80041a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e013      	b.n	80041a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2200      	movs	r2, #0
 8004182:	2101      	movs	r1, #1
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff ff23 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e000      	b.n	80041a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <SPI_EndRxTxTransaction+0x7c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1b      	ldr	r2, [pc, #108]	; (800422c <SPI_EndRxTxTransaction+0x80>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	0d5b      	lsrs	r3, r3, #21
 80041c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d112      	bne.n	80041fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff fef4 	bl	8003fd0 <SPI_WaitFlagStateUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e00f      	b.n	800421e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3b01      	subs	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d0f2      	beq.n	80041fe <SPI_EndRxTxTransaction+0x52>
 8004218:	e000      	b.n	800421c <SPI_EndRxTxTransaction+0x70>
        break;
 800421a:	bf00      	nop
  }

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000008 	.word	0x20000008
 800422c:	165e9f81 	.word	0x165e9f81

08004230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e03f      	b.n	80042c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd fe0e 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	; 0x24
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fddf 	bl	8004e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af02      	add	r7, sp, #8
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d17c      	bne.n	80043e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_UART_Transmit+0x2c>
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e075      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_UART_Transmit+0x3e>
 8004304:	2302      	movs	r3, #2
 8004306:	e06e      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2221      	movs	r2, #33	; 0x21
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800431e:	f7fd ff57 	bl	80021d0 <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	88fa      	ldrh	r2, [r7, #6]
 8004328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d108      	bne.n	800434c <HAL_UART_Transmit+0x82>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e003      	b.n	8004354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800435c:	e02a      	b.n	80043b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	2180      	movs	r1, #128	; 0x80
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fb1f 	bl	80049ac <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e036      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3302      	adds	r3, #2
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e007      	b.n	80043a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1cf      	bne.n	800435e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 faef 	bl	80049ac <UART_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e006      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3720      	adds	r7, #32
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	4613      	mov	r3, r2
 80043fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b20      	cmp	r3, #32
 8004406:	d11d      	bne.n	8004444 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_UART_Receive_IT+0x26>
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e016      	b.n	8004446 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_UART_Receive_IT+0x38>
 8004422:	2302      	movs	r3, #2
 8004424:	e00f      	b.n	8004446 <HAL_UART_Receive_IT+0x58>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	461a      	mov	r2, r3
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fb24 	bl	8004a88 <UART_Start_Receive_IT>
 8004440:	4603      	mov	r3, r0
 8004442:	e000      	b.n	8004446 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004444:	2302      	movs	r3, #2
  }
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b0ba      	sub	sp, #232	; 0xe8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800448e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_UART_IRQHandler+0x66>
 80044a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fc07 	bl	8004cc2 <UART_Receive_IT>
      return;
 80044b4:	e256      	b.n	8004964 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80de 	beq.w	800467c <HAL_UART_IRQHandler+0x22c>
 80044c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80d1 	beq.w	800467c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_UART_IRQHandler+0xae>
 80044e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_UART_IRQHandler+0xd2>
 800450a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0202 	orr.w	r2, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <HAL_UART_IRQHandler+0xf6>
 800452e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f043 0204 	orr.w	r2, r3, #4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d011      	beq.n	8004576 <HAL_UART_IRQHandler+0x126>
 8004552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d105      	bne.n	800456a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800455e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f043 0208 	orr.w	r2, r3, #8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 81ed 	beq.w	800495a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_UART_IRQHandler+0x14e>
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fb92 	bl	8004cc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <HAL_UART_IRQHandler+0x17a>
 80045c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d04f      	beq.n	800466a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa9a 	bl	8004b04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d141      	bne.n	8004662 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3314      	adds	r3, #20
 8004606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800460a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800460e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1d9      	bne.n	80045de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	2b00      	cmp	r3, #0
 8004630:	d013      	beq.n	800465a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	4a7d      	ldr	r2, [pc, #500]	; (800482c <HAL_UART_IRQHandler+0x3dc>)
 8004638:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	4618      	mov	r0, r3
 8004640:	f7fd ff77 	bl	8002532 <HAL_DMA_Abort_IT>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d016      	beq.n	8004678 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004654:	4610      	mov	r0, r2
 8004656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	e00e      	b.n	8004678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f990 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	e00a      	b.n	8004678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f98c 	bl	8004980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	e006      	b.n	8004678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f988 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004676:	e170      	b.n	800495a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	bf00      	nop
    return;
 800467a:	e16e      	b.n	800495a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	2b01      	cmp	r3, #1
 8004682:	f040 814a 	bne.w	800491a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8143 	beq.w	800491a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 813c 	beq.w	800491a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	f040 80b4 	bne.w	8004830 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8140 	beq.w	800495e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046e6:	429a      	cmp	r2, r3
 80046e8:	f080 8139 	bcs.w	800495e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fe:	f000 8088 	beq.w	8004812 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800471c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800472e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800473a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1d9      	bne.n	8004702 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3314      	adds	r3, #20
 8004754:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800475e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3314      	adds	r3, #20
 800476e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004772:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004776:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800477a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e1      	bne.n	800474e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800479a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3314      	adds	r3, #20
 80047aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e3      	bne.n	800478a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e2:	f023 0310 	bic.w	r3, r3, #16
 80047e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80047f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e3      	bne.n	80047d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	4618      	mov	r0, r3
 800480e:	f7fd fe20 	bl	8002452 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800481a:	b29b      	uxth	r3, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8b6 	bl	8004994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004828:	e099      	b.n	800495e <HAL_UART_IRQHandler+0x50e>
 800482a:	bf00      	nop
 800482c:	08004bcb 	.word	0x08004bcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004838:	b29b      	uxth	r3, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 808b 	beq.w	8004962 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800484c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8086 	beq.w	8004962 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800486c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800487a:	647a      	str	r2, [r7, #68]	; 0x44
 800487c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e3      	bne.n	8004856 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	623b      	str	r3, [r7, #32]
   return(result);
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048b2:	633a      	str	r2, [r7, #48]	; 0x30
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e3      	bne.n	800488e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0310 	bic.w	r3, r3, #16
 80048ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048f8:	61fa      	str	r2, [r7, #28]
 80048fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	69b9      	ldr	r1, [r7, #24]
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	617b      	str	r3, [r7, #20]
   return(result);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e3      	bne.n	80048d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800490c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f83e 	bl	8004994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004918:	e023      	b.n	8004962 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_UART_IRQHandler+0x4ea>
 8004926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f95d 	bl	8004bf2 <UART_Transmit_IT>
    return;
 8004938:	e014      	b.n	8004964 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00e      	beq.n	8004964 <HAL_UART_IRQHandler+0x514>
 8004946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f99d 	bl	8004c92 <UART_EndTransmit_IT>
    return;
 8004958:	e004      	b.n	8004964 <HAL_UART_IRQHandler+0x514>
    return;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <HAL_UART_IRQHandler+0x514>
      return;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <HAL_UART_IRQHandler+0x514>
      return;
 8004962:	bf00      	nop
  }
}
 8004964:	37e8      	adds	r7, #232	; 0xe8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop

0800496c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b090      	sub	sp, #64	; 0x40
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049bc:	e050      	b.n	8004a60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d04c      	beq.n	8004a60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0x30>
 80049cc:	f7fd fc00 	bl	80021d0 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d8:	429a      	cmp	r2, r3
 80049da:	d241      	bcs.n	8004a60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049fc:	637a      	str	r2, [r7, #52]	; 0x34
 80049fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e5      	bne.n	80049dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3314      	adds	r3, #20
 8004a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3314      	adds	r3, #20
 8004a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a30:	623a      	str	r2, [r7, #32]
 8004a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e00f      	b.n	8004a80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d09f      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3740      	adds	r7, #64	; 0x40
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2222      	movs	r2, #34	; 0x22
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0220 	orr.w	r2, r2, #32
 8004af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b095      	sub	sp, #84	; 0x54
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b2c:	643a      	str	r2, [r7, #64]	; 0x40
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e5      	bne.n	8004b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3314      	adds	r3, #20
 8004b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3314      	adds	r3, #20
 8004b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e5      	bne.n	8004b40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d119      	bne.n	8004bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	647b      	str	r3, [r7, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b9c:	61ba      	str	r2, [r7, #24]
 8004b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6979      	ldr	r1, [r7, #20]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bbe:	bf00      	nop
 8004bc0:	3754      	adds	r7, #84	; 0x54
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff fecb 	bl	8004980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bea:	bf00      	nop
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b21      	cmp	r3, #33	; 0x21
 8004c04:	d13e      	bne.n	8004c84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	d114      	bne.n	8004c3a <UART_Transmit_IT+0x48>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d110      	bne.n	8004c3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	1c9a      	adds	r2, r3, #2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	621a      	str	r2, [r3, #32]
 8004c38:	e008      	b.n	8004c4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	1c59      	adds	r1, r3, #1
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6211      	str	r1, [r2, #32]
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10f      	bne.n	8004c80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff fe5a 	bl	800496c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b08c      	sub	sp, #48	; 0x30
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b22      	cmp	r3, #34	; 0x22
 8004cd4:	f040 80ab 	bne.w	8004e2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce0:	d117      	bne.n	8004d12 <UART_Receive_IT+0x50>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d113      	bne.n	8004d12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	1c9a      	adds	r2, r3, #2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d10:	e026      	b.n	8004d60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d24:	d007      	beq.n	8004d36 <UART_Receive_IT+0x74>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <UART_Receive_IT+0x82>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e008      	b.n	8004d56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d15a      	bne.n	8004e2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0220 	bic.w	r2, r2, #32
 8004d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d135      	bne.n	8004e20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	330c      	adds	r3, #12
 8004dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f023 0310 	bic.w	r3, r3, #16
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dda:	623a      	str	r2, [r7, #32]
 8004ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	69f9      	ldr	r1, [r7, #28]
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e5      	bne.n	8004dba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d10a      	bne.n	8004e12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff fdbb 	bl	8004994 <HAL_UARTEx_RxEventCallback>
 8004e1e:	e002      	b.n	8004e26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7fc ff39 	bl	8001c98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e002      	b.n	8004e30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e000      	b.n	8004e30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
  }
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3730      	adds	r7, #48	; 0x30
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e3c:	b0c0      	sub	sp, #256	; 0x100
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	68d9      	ldr	r1, [r3, #12]
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	ea40 0301 	orr.w	r3, r0, r1
 8004e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e90:	f021 010c 	bic.w	r1, r1, #12
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb2:	6999      	ldr	r1, [r3, #24]
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	ea40 0301 	orr.w	r3, r0, r1
 8004ebe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b8f      	ldr	r3, [pc, #572]	; (8005104 <UART_SetConfig+0x2cc>)
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d005      	beq.n	8004ed8 <UART_SetConfig+0xa0>
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b8d      	ldr	r3, [pc, #564]	; (8005108 <UART_SetConfig+0x2d0>)
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d104      	bne.n	8004ee2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ed8:	f7fd fe02 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8004edc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ee0:	e003      	b.n	8004eea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ee2:	f7fd fde9 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004ee6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef4:	f040 810c 	bne.w	8005110 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	462b      	mov	r3, r5
 8004f0e:	1891      	adds	r1, r2, r2
 8004f10:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f12:	415b      	adcs	r3, r3
 8004f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	eb12 0801 	adds.w	r8, r2, r1
 8004f20:	4629      	mov	r1, r5
 8004f22:	eb43 0901 	adc.w	r9, r3, r1
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f3a:	4690      	mov	r8, r2
 8004f3c:	4699      	mov	r9, r3
 8004f3e:	4623      	mov	r3, r4
 8004f40:	eb18 0303 	adds.w	r3, r8, r3
 8004f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f48:	462b      	mov	r3, r5
 8004f4a:	eb49 0303 	adc.w	r3, r9, r3
 8004f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f66:	460b      	mov	r3, r1
 8004f68:	18db      	adds	r3, r3, r3
 8004f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	eb42 0303 	adc.w	r3, r2, r3
 8004f72:	657b      	str	r3, [r7, #84]	; 0x54
 8004f74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f7c:	f7fb f9a0 	bl	80002c0 <__aeabi_uldivmod>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4b61      	ldr	r3, [pc, #388]	; (800510c <UART_SetConfig+0x2d4>)
 8004f86:	fba3 2302 	umull	r2, r3, r3, r2
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	011c      	lsls	r4, r3, #4
 8004f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	1891      	adds	r1, r2, r2
 8004fa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	eb12 0a01 	adds.w	sl, r2, r1
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	eb43 0b01 	adc.w	fp, r3, r1
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fd0:	4692      	mov	sl, r2
 8004fd2:	469b      	mov	fp, r3
 8004fd4:	4643      	mov	r3, r8
 8004fd6:	eb1a 0303 	adds.w	r3, sl, r3
 8004fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	eb4b 0303 	adc.w	r3, fp, r3
 8004fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ff4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ff8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	18db      	adds	r3, r3, r3
 8005000:	643b      	str	r3, [r7, #64]	; 0x40
 8005002:	4613      	mov	r3, r2
 8005004:	eb42 0303 	adc.w	r3, r2, r3
 8005008:	647b      	str	r3, [r7, #68]	; 0x44
 800500a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800500e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005012:	f7fb f955 	bl	80002c0 <__aeabi_uldivmod>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4611      	mov	r1, r2
 800501c:	4b3b      	ldr	r3, [pc, #236]	; (800510c <UART_SetConfig+0x2d4>)
 800501e:	fba3 2301 	umull	r2, r3, r3, r1
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2264      	movs	r2, #100	; 0x64
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	1acb      	subs	r3, r1, r3
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <UART_SetConfig+0x2d4>)
 8005034:	fba3 2302 	umull	r2, r3, r3, r2
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005040:	441c      	add	r4, r3
 8005042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800504c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005050:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005054:	4642      	mov	r2, r8
 8005056:	464b      	mov	r3, r9
 8005058:	1891      	adds	r1, r2, r2
 800505a:	63b9      	str	r1, [r7, #56]	; 0x38
 800505c:	415b      	adcs	r3, r3
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005064:	4641      	mov	r1, r8
 8005066:	1851      	adds	r1, r2, r1
 8005068:	6339      	str	r1, [r7, #48]	; 0x30
 800506a:	4649      	mov	r1, r9
 800506c:	414b      	adcs	r3, r1
 800506e:	637b      	str	r3, [r7, #52]	; 0x34
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800507c:	4659      	mov	r1, fp
 800507e:	00cb      	lsls	r3, r1, #3
 8005080:	4651      	mov	r1, sl
 8005082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005086:	4651      	mov	r1, sl
 8005088:	00ca      	lsls	r2, r1, #3
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	4603      	mov	r3, r0
 8005090:	4642      	mov	r2, r8
 8005092:	189b      	adds	r3, r3, r2
 8005094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005098:	464b      	mov	r3, r9
 800509a:	460a      	mov	r2, r1
 800509c:	eb42 0303 	adc.w	r3, r2, r3
 80050a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050b8:	460b      	mov	r3, r1
 80050ba:	18db      	adds	r3, r3, r3
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050be:	4613      	mov	r3, r2
 80050c0:	eb42 0303 	adc.w	r3, r2, r3
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050ce:	f7fb f8f7 	bl	80002c0 <__aeabi_uldivmod>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4b0d      	ldr	r3, [pc, #52]	; (800510c <UART_SetConfig+0x2d4>)
 80050d8:	fba3 1302 	umull	r1, r3, r3, r2
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	2164      	movs	r1, #100	; 0x64
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	3332      	adds	r3, #50	; 0x32
 80050ea:	4a08      	ldr	r2, [pc, #32]	; (800510c <UART_SetConfig+0x2d4>)
 80050ec:	fba2 2303 	umull	r2, r3, r2, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	f003 0207 	and.w	r2, r3, #7
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4422      	add	r2, r4
 80050fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005100:	e105      	b.n	800530e <UART_SetConfig+0x4d6>
 8005102:	bf00      	nop
 8005104:	40011000 	.word	0x40011000
 8005108:	40011400 	.word	0x40011400
 800510c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005114:	2200      	movs	r2, #0
 8005116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800511a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800511e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005122:	4642      	mov	r2, r8
 8005124:	464b      	mov	r3, r9
 8005126:	1891      	adds	r1, r2, r2
 8005128:	6239      	str	r1, [r7, #32]
 800512a:	415b      	adcs	r3, r3
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
 800512e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005132:	4641      	mov	r1, r8
 8005134:	1854      	adds	r4, r2, r1
 8005136:	4649      	mov	r1, r9
 8005138:	eb43 0501 	adc.w	r5, r3, r1
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	00eb      	lsls	r3, r5, #3
 8005146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800514a:	00e2      	lsls	r2, r4, #3
 800514c:	4614      	mov	r4, r2
 800514e:	461d      	mov	r5, r3
 8005150:	4643      	mov	r3, r8
 8005152:	18e3      	adds	r3, r4, r3
 8005154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005158:	464b      	mov	r3, r9
 800515a:	eb45 0303 	adc.w	r3, r5, r3
 800515e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800516e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800517e:	4629      	mov	r1, r5
 8005180:	008b      	lsls	r3, r1, #2
 8005182:	4621      	mov	r1, r4
 8005184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005188:	4621      	mov	r1, r4
 800518a:	008a      	lsls	r2, r1, #2
 800518c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005190:	f7fb f896 	bl	80002c0 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4b60      	ldr	r3, [pc, #384]	; (800531c <UART_SetConfig+0x4e4>)
 800519a:	fba3 2302 	umull	r2, r3, r3, r2
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	011c      	lsls	r4, r3, #4
 80051a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051b4:	4642      	mov	r2, r8
 80051b6:	464b      	mov	r3, r9
 80051b8:	1891      	adds	r1, r2, r2
 80051ba:	61b9      	str	r1, [r7, #24]
 80051bc:	415b      	adcs	r3, r3
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c4:	4641      	mov	r1, r8
 80051c6:	1851      	adds	r1, r2, r1
 80051c8:	6139      	str	r1, [r7, #16]
 80051ca:	4649      	mov	r1, r9
 80051cc:	414b      	adcs	r3, r1
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051dc:	4659      	mov	r1, fp
 80051de:	00cb      	lsls	r3, r1, #3
 80051e0:	4651      	mov	r1, sl
 80051e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051e6:	4651      	mov	r1, sl
 80051e8:	00ca      	lsls	r2, r1, #3
 80051ea:	4610      	mov	r0, r2
 80051ec:	4619      	mov	r1, r3
 80051ee:	4603      	mov	r3, r0
 80051f0:	4642      	mov	r2, r8
 80051f2:	189b      	adds	r3, r3, r2
 80051f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051f8:	464b      	mov	r3, r9
 80051fa:	460a      	mov	r2, r1
 80051fc:	eb42 0303 	adc.w	r3, r2, r3
 8005200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	67bb      	str	r3, [r7, #120]	; 0x78
 800520e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800521c:	4649      	mov	r1, r9
 800521e:	008b      	lsls	r3, r1, #2
 8005220:	4641      	mov	r1, r8
 8005222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005226:	4641      	mov	r1, r8
 8005228:	008a      	lsls	r2, r1, #2
 800522a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800522e:	f7fb f847 	bl	80002c0 <__aeabi_uldivmod>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4b39      	ldr	r3, [pc, #228]	; (800531c <UART_SetConfig+0x4e4>)
 8005238:	fba3 1302 	umull	r1, r3, r3, r2
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	2164      	movs	r1, #100	; 0x64
 8005240:	fb01 f303 	mul.w	r3, r1, r3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	3332      	adds	r3, #50	; 0x32
 800524a:	4a34      	ldr	r2, [pc, #208]	; (800531c <UART_SetConfig+0x4e4>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005256:	441c      	add	r4, r3
 8005258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800525c:	2200      	movs	r2, #0
 800525e:	673b      	str	r3, [r7, #112]	; 0x70
 8005260:	677a      	str	r2, [r7, #116]	; 0x74
 8005262:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005266:	4642      	mov	r2, r8
 8005268:	464b      	mov	r3, r9
 800526a:	1891      	adds	r1, r2, r2
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	415b      	adcs	r3, r3
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005276:	4641      	mov	r1, r8
 8005278:	1851      	adds	r1, r2, r1
 800527a:	6039      	str	r1, [r7, #0]
 800527c:	4649      	mov	r1, r9
 800527e:	414b      	adcs	r3, r1
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800528e:	4659      	mov	r1, fp
 8005290:	00cb      	lsls	r3, r1, #3
 8005292:	4651      	mov	r1, sl
 8005294:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005298:	4651      	mov	r1, sl
 800529a:	00ca      	lsls	r2, r1, #3
 800529c:	4610      	mov	r0, r2
 800529e:	4619      	mov	r1, r3
 80052a0:	4603      	mov	r3, r0
 80052a2:	4642      	mov	r2, r8
 80052a4:	189b      	adds	r3, r3, r2
 80052a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052a8:	464b      	mov	r3, r9
 80052aa:	460a      	mov	r2, r1
 80052ac:	eb42 0303 	adc.w	r3, r2, r3
 80052b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	663b      	str	r3, [r7, #96]	; 0x60
 80052bc:	667a      	str	r2, [r7, #100]	; 0x64
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052ca:	4649      	mov	r1, r9
 80052cc:	008b      	lsls	r3, r1, #2
 80052ce:	4641      	mov	r1, r8
 80052d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052d4:	4641      	mov	r1, r8
 80052d6:	008a      	lsls	r2, r1, #2
 80052d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052dc:	f7fa fff0 	bl	80002c0 <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4b0d      	ldr	r3, [pc, #52]	; (800531c <UART_SetConfig+0x4e4>)
 80052e6:	fba3 1302 	umull	r1, r3, r3, r2
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	2164      	movs	r1, #100	; 0x64
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	3332      	adds	r3, #50	; 0x32
 80052f8:	4a08      	ldr	r2, [pc, #32]	; (800531c <UART_SetConfig+0x4e4>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	f003 020f 	and.w	r2, r3, #15
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4422      	add	r2, r4
 800530c:	609a      	str	r2, [r3, #8]
}
 800530e:	bf00      	nop
 8005310:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005314:	46bd      	mov	sp, r7
 8005316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531a:	bf00      	nop
 800531c:	51eb851f 	.word	0x51eb851f

08005320 <__errno>:
 8005320:	4b01      	ldr	r3, [pc, #4]	; (8005328 <__errno+0x8>)
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000014 	.word	0x20000014

0800532c <__libc_init_array>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4d0d      	ldr	r5, [pc, #52]	; (8005364 <__libc_init_array+0x38>)
 8005330:	4c0d      	ldr	r4, [pc, #52]	; (8005368 <__libc_init_array+0x3c>)
 8005332:	1b64      	subs	r4, r4, r5
 8005334:	10a4      	asrs	r4, r4, #2
 8005336:	2600      	movs	r6, #0
 8005338:	42a6      	cmp	r6, r4
 800533a:	d109      	bne.n	8005350 <__libc_init_array+0x24>
 800533c:	4d0b      	ldr	r5, [pc, #44]	; (800536c <__libc_init_array+0x40>)
 800533e:	4c0c      	ldr	r4, [pc, #48]	; (8005370 <__libc_init_array+0x44>)
 8005340:	f000 fc8e 	bl	8005c60 <_init>
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	2600      	movs	r6, #0
 800534a:	42a6      	cmp	r6, r4
 800534c:	d105      	bne.n	800535a <__libc_init_array+0x2e>
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	f855 3b04 	ldr.w	r3, [r5], #4
 8005354:	4798      	blx	r3
 8005356:	3601      	adds	r6, #1
 8005358:	e7ee      	b.n	8005338 <__libc_init_array+0xc>
 800535a:	f855 3b04 	ldr.w	r3, [r5], #4
 800535e:	4798      	blx	r3
 8005360:	3601      	adds	r6, #1
 8005362:	e7f2      	b.n	800534a <__libc_init_array+0x1e>
 8005364:	08006230 	.word	0x08006230
 8005368:	08006230 	.word	0x08006230
 800536c:	08006230 	.word	0x08006230
 8005370:	08006234 	.word	0x08006234

08005374 <memcpy>:
 8005374:	440a      	add	r2, r1
 8005376:	4291      	cmp	r1, r2
 8005378:	f100 33ff 	add.w	r3, r0, #4294967295
 800537c:	d100      	bne.n	8005380 <memcpy+0xc>
 800537e:	4770      	bx	lr
 8005380:	b510      	push	{r4, lr}
 8005382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800538a:	4291      	cmp	r1, r2
 800538c:	d1f9      	bne.n	8005382 <memcpy+0xe>
 800538e:	bd10      	pop	{r4, pc}

08005390 <memset>:
 8005390:	4402      	add	r2, r0
 8005392:	4603      	mov	r3, r0
 8005394:	4293      	cmp	r3, r2
 8005396:	d100      	bne.n	800539a <memset+0xa>
 8005398:	4770      	bx	lr
 800539a:	f803 1b01 	strb.w	r1, [r3], #1
 800539e:	e7f9      	b.n	8005394 <memset+0x4>

080053a0 <siprintf>:
 80053a0:	b40e      	push	{r1, r2, r3}
 80053a2:	b500      	push	{lr}
 80053a4:	b09c      	sub	sp, #112	; 0x70
 80053a6:	ab1d      	add	r3, sp, #116	; 0x74
 80053a8:	9002      	str	r0, [sp, #8]
 80053aa:	9006      	str	r0, [sp, #24]
 80053ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053b0:	4809      	ldr	r0, [pc, #36]	; (80053d8 <siprintf+0x38>)
 80053b2:	9107      	str	r1, [sp, #28]
 80053b4:	9104      	str	r1, [sp, #16]
 80053b6:	4909      	ldr	r1, [pc, #36]	; (80053dc <siprintf+0x3c>)
 80053b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053bc:	9105      	str	r1, [sp, #20]
 80053be:	6800      	ldr	r0, [r0, #0]
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	a902      	add	r1, sp, #8
 80053c4:	f000 f868 	bl	8005498 <_svfiprintf_r>
 80053c8:	9b02      	ldr	r3, [sp, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	b01c      	add	sp, #112	; 0x70
 80053d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d4:	b003      	add	sp, #12
 80053d6:	4770      	bx	lr
 80053d8:	20000014 	.word	0x20000014
 80053dc:	ffff0208 	.word	0xffff0208

080053e0 <__ssputs_r>:
 80053e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	688e      	ldr	r6, [r1, #8]
 80053e6:	429e      	cmp	r6, r3
 80053e8:	4682      	mov	sl, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	4690      	mov	r8, r2
 80053ee:	461f      	mov	r7, r3
 80053f0:	d838      	bhi.n	8005464 <__ssputs_r+0x84>
 80053f2:	898a      	ldrh	r2, [r1, #12]
 80053f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053f8:	d032      	beq.n	8005460 <__ssputs_r+0x80>
 80053fa:	6825      	ldr	r5, [r4, #0]
 80053fc:	6909      	ldr	r1, [r1, #16]
 80053fe:	eba5 0901 	sub.w	r9, r5, r1
 8005402:	6965      	ldr	r5, [r4, #20]
 8005404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800540c:	3301      	adds	r3, #1
 800540e:	444b      	add	r3, r9
 8005410:	106d      	asrs	r5, r5, #1
 8005412:	429d      	cmp	r5, r3
 8005414:	bf38      	it	cc
 8005416:	461d      	movcc	r5, r3
 8005418:	0553      	lsls	r3, r2, #21
 800541a:	d531      	bpl.n	8005480 <__ssputs_r+0xa0>
 800541c:	4629      	mov	r1, r5
 800541e:	f000 fb55 	bl	8005acc <_malloc_r>
 8005422:	4606      	mov	r6, r0
 8005424:	b950      	cbnz	r0, 800543c <__ssputs_r+0x5c>
 8005426:	230c      	movs	r3, #12
 8005428:	f8ca 3000 	str.w	r3, [sl]
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005432:	81a3      	strh	r3, [r4, #12]
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543c:	6921      	ldr	r1, [r4, #16]
 800543e:	464a      	mov	r2, r9
 8005440:	f7ff ff98 	bl	8005374 <memcpy>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800544a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	6126      	str	r6, [r4, #16]
 8005452:	6165      	str	r5, [r4, #20]
 8005454:	444e      	add	r6, r9
 8005456:	eba5 0509 	sub.w	r5, r5, r9
 800545a:	6026      	str	r6, [r4, #0]
 800545c:	60a5      	str	r5, [r4, #8]
 800545e:	463e      	mov	r6, r7
 8005460:	42be      	cmp	r6, r7
 8005462:	d900      	bls.n	8005466 <__ssputs_r+0x86>
 8005464:	463e      	mov	r6, r7
 8005466:	6820      	ldr	r0, [r4, #0]
 8005468:	4632      	mov	r2, r6
 800546a:	4641      	mov	r1, r8
 800546c:	f000 faa8 	bl	80059c0 <memmove>
 8005470:	68a3      	ldr	r3, [r4, #8]
 8005472:	1b9b      	subs	r3, r3, r6
 8005474:	60a3      	str	r3, [r4, #8]
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	4433      	add	r3, r6
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	2000      	movs	r0, #0
 800547e:	e7db      	b.n	8005438 <__ssputs_r+0x58>
 8005480:	462a      	mov	r2, r5
 8005482:	f000 fb97 	bl	8005bb4 <_realloc_r>
 8005486:	4606      	mov	r6, r0
 8005488:	2800      	cmp	r0, #0
 800548a:	d1e1      	bne.n	8005450 <__ssputs_r+0x70>
 800548c:	6921      	ldr	r1, [r4, #16]
 800548e:	4650      	mov	r0, sl
 8005490:	f000 fab0 	bl	80059f4 <_free_r>
 8005494:	e7c7      	b.n	8005426 <__ssputs_r+0x46>
	...

08005498 <_svfiprintf_r>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	4698      	mov	r8, r3
 800549e:	898b      	ldrh	r3, [r1, #12]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	b09d      	sub	sp, #116	; 0x74
 80054a4:	4607      	mov	r7, r0
 80054a6:	460d      	mov	r5, r1
 80054a8:	4614      	mov	r4, r2
 80054aa:	d50e      	bpl.n	80054ca <_svfiprintf_r+0x32>
 80054ac:	690b      	ldr	r3, [r1, #16]
 80054ae:	b963      	cbnz	r3, 80054ca <_svfiprintf_r+0x32>
 80054b0:	2140      	movs	r1, #64	; 0x40
 80054b2:	f000 fb0b 	bl	8005acc <_malloc_r>
 80054b6:	6028      	str	r0, [r5, #0]
 80054b8:	6128      	str	r0, [r5, #16]
 80054ba:	b920      	cbnz	r0, 80054c6 <_svfiprintf_r+0x2e>
 80054bc:	230c      	movs	r3, #12
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	e0d1      	b.n	800566a <_svfiprintf_r+0x1d2>
 80054c6:	2340      	movs	r3, #64	; 0x40
 80054c8:	616b      	str	r3, [r5, #20]
 80054ca:	2300      	movs	r3, #0
 80054cc:	9309      	str	r3, [sp, #36]	; 0x24
 80054ce:	2320      	movs	r3, #32
 80054d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80054d8:	2330      	movs	r3, #48	; 0x30
 80054da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005684 <_svfiprintf_r+0x1ec>
 80054de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054e2:	f04f 0901 	mov.w	r9, #1
 80054e6:	4623      	mov	r3, r4
 80054e8:	469a      	mov	sl, r3
 80054ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ee:	b10a      	cbz	r2, 80054f4 <_svfiprintf_r+0x5c>
 80054f0:	2a25      	cmp	r2, #37	; 0x25
 80054f2:	d1f9      	bne.n	80054e8 <_svfiprintf_r+0x50>
 80054f4:	ebba 0b04 	subs.w	fp, sl, r4
 80054f8:	d00b      	beq.n	8005512 <_svfiprintf_r+0x7a>
 80054fa:	465b      	mov	r3, fp
 80054fc:	4622      	mov	r2, r4
 80054fe:	4629      	mov	r1, r5
 8005500:	4638      	mov	r0, r7
 8005502:	f7ff ff6d 	bl	80053e0 <__ssputs_r>
 8005506:	3001      	adds	r0, #1
 8005508:	f000 80aa 	beq.w	8005660 <_svfiprintf_r+0x1c8>
 800550c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800550e:	445a      	add	r2, fp
 8005510:	9209      	str	r2, [sp, #36]	; 0x24
 8005512:	f89a 3000 	ldrb.w	r3, [sl]
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 80a2 	beq.w	8005660 <_svfiprintf_r+0x1c8>
 800551c:	2300      	movs	r3, #0
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005526:	f10a 0a01 	add.w	sl, sl, #1
 800552a:	9304      	str	r3, [sp, #16]
 800552c:	9307      	str	r3, [sp, #28]
 800552e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005532:	931a      	str	r3, [sp, #104]	; 0x68
 8005534:	4654      	mov	r4, sl
 8005536:	2205      	movs	r2, #5
 8005538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553c:	4851      	ldr	r0, [pc, #324]	; (8005684 <_svfiprintf_r+0x1ec>)
 800553e:	f7fa fe6f 	bl	8000220 <memchr>
 8005542:	9a04      	ldr	r2, [sp, #16]
 8005544:	b9d8      	cbnz	r0, 800557e <_svfiprintf_r+0xe6>
 8005546:	06d0      	lsls	r0, r2, #27
 8005548:	bf44      	itt	mi
 800554a:	2320      	movmi	r3, #32
 800554c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005550:	0711      	lsls	r1, r2, #28
 8005552:	bf44      	itt	mi
 8005554:	232b      	movmi	r3, #43	; 0x2b
 8005556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800555a:	f89a 3000 	ldrb.w	r3, [sl]
 800555e:	2b2a      	cmp	r3, #42	; 0x2a
 8005560:	d015      	beq.n	800558e <_svfiprintf_r+0xf6>
 8005562:	9a07      	ldr	r2, [sp, #28]
 8005564:	4654      	mov	r4, sl
 8005566:	2000      	movs	r0, #0
 8005568:	f04f 0c0a 	mov.w	ip, #10
 800556c:	4621      	mov	r1, r4
 800556e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005572:	3b30      	subs	r3, #48	; 0x30
 8005574:	2b09      	cmp	r3, #9
 8005576:	d94e      	bls.n	8005616 <_svfiprintf_r+0x17e>
 8005578:	b1b0      	cbz	r0, 80055a8 <_svfiprintf_r+0x110>
 800557a:	9207      	str	r2, [sp, #28]
 800557c:	e014      	b.n	80055a8 <_svfiprintf_r+0x110>
 800557e:	eba0 0308 	sub.w	r3, r0, r8
 8005582:	fa09 f303 	lsl.w	r3, r9, r3
 8005586:	4313      	orrs	r3, r2
 8005588:	9304      	str	r3, [sp, #16]
 800558a:	46a2      	mov	sl, r4
 800558c:	e7d2      	b.n	8005534 <_svfiprintf_r+0x9c>
 800558e:	9b03      	ldr	r3, [sp, #12]
 8005590:	1d19      	adds	r1, r3, #4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	9103      	str	r1, [sp, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	bfbb      	ittet	lt
 800559a:	425b      	neglt	r3, r3
 800559c:	f042 0202 	orrlt.w	r2, r2, #2
 80055a0:	9307      	strge	r3, [sp, #28]
 80055a2:	9307      	strlt	r3, [sp, #28]
 80055a4:	bfb8      	it	lt
 80055a6:	9204      	strlt	r2, [sp, #16]
 80055a8:	7823      	ldrb	r3, [r4, #0]
 80055aa:	2b2e      	cmp	r3, #46	; 0x2e
 80055ac:	d10c      	bne.n	80055c8 <_svfiprintf_r+0x130>
 80055ae:	7863      	ldrb	r3, [r4, #1]
 80055b0:	2b2a      	cmp	r3, #42	; 0x2a
 80055b2:	d135      	bne.n	8005620 <_svfiprintf_r+0x188>
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	1d1a      	adds	r2, r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	9203      	str	r2, [sp, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bfb8      	it	lt
 80055c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80055c4:	3402      	adds	r4, #2
 80055c6:	9305      	str	r3, [sp, #20]
 80055c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005694 <_svfiprintf_r+0x1fc>
 80055cc:	7821      	ldrb	r1, [r4, #0]
 80055ce:	2203      	movs	r2, #3
 80055d0:	4650      	mov	r0, sl
 80055d2:	f7fa fe25 	bl	8000220 <memchr>
 80055d6:	b140      	cbz	r0, 80055ea <_svfiprintf_r+0x152>
 80055d8:	2340      	movs	r3, #64	; 0x40
 80055da:	eba0 000a 	sub.w	r0, r0, sl
 80055de:	fa03 f000 	lsl.w	r0, r3, r0
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	4303      	orrs	r3, r0
 80055e6:	3401      	adds	r4, #1
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ee:	4826      	ldr	r0, [pc, #152]	; (8005688 <_svfiprintf_r+0x1f0>)
 80055f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055f4:	2206      	movs	r2, #6
 80055f6:	f7fa fe13 	bl	8000220 <memchr>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d038      	beq.n	8005670 <_svfiprintf_r+0x1d8>
 80055fe:	4b23      	ldr	r3, [pc, #140]	; (800568c <_svfiprintf_r+0x1f4>)
 8005600:	bb1b      	cbnz	r3, 800564a <_svfiprintf_r+0x1b2>
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	3307      	adds	r3, #7
 8005606:	f023 0307 	bic.w	r3, r3, #7
 800560a:	3308      	adds	r3, #8
 800560c:	9303      	str	r3, [sp, #12]
 800560e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005610:	4433      	add	r3, r6
 8005612:	9309      	str	r3, [sp, #36]	; 0x24
 8005614:	e767      	b.n	80054e6 <_svfiprintf_r+0x4e>
 8005616:	fb0c 3202 	mla	r2, ip, r2, r3
 800561a:	460c      	mov	r4, r1
 800561c:	2001      	movs	r0, #1
 800561e:	e7a5      	b.n	800556c <_svfiprintf_r+0xd4>
 8005620:	2300      	movs	r3, #0
 8005622:	3401      	adds	r4, #1
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	4619      	mov	r1, r3
 8005628:	f04f 0c0a 	mov.w	ip, #10
 800562c:	4620      	mov	r0, r4
 800562e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005632:	3a30      	subs	r2, #48	; 0x30
 8005634:	2a09      	cmp	r2, #9
 8005636:	d903      	bls.n	8005640 <_svfiprintf_r+0x1a8>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0c5      	beq.n	80055c8 <_svfiprintf_r+0x130>
 800563c:	9105      	str	r1, [sp, #20]
 800563e:	e7c3      	b.n	80055c8 <_svfiprintf_r+0x130>
 8005640:	fb0c 2101 	mla	r1, ip, r1, r2
 8005644:	4604      	mov	r4, r0
 8005646:	2301      	movs	r3, #1
 8005648:	e7f0      	b.n	800562c <_svfiprintf_r+0x194>
 800564a:	ab03      	add	r3, sp, #12
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	462a      	mov	r2, r5
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <_svfiprintf_r+0x1f8>)
 8005652:	a904      	add	r1, sp, #16
 8005654:	4638      	mov	r0, r7
 8005656:	f3af 8000 	nop.w
 800565a:	1c42      	adds	r2, r0, #1
 800565c:	4606      	mov	r6, r0
 800565e:	d1d6      	bne.n	800560e <_svfiprintf_r+0x176>
 8005660:	89ab      	ldrh	r3, [r5, #12]
 8005662:	065b      	lsls	r3, r3, #25
 8005664:	f53f af2c 	bmi.w	80054c0 <_svfiprintf_r+0x28>
 8005668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800566a:	b01d      	add	sp, #116	; 0x74
 800566c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005670:	ab03      	add	r3, sp, #12
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	462a      	mov	r2, r5
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <_svfiprintf_r+0x1f8>)
 8005678:	a904      	add	r1, sp, #16
 800567a:	4638      	mov	r0, r7
 800567c:	f000 f87a 	bl	8005774 <_printf_i>
 8005680:	e7eb      	b.n	800565a <_svfiprintf_r+0x1c2>
 8005682:	bf00      	nop
 8005684:	080061f4 	.word	0x080061f4
 8005688:	080061fe 	.word	0x080061fe
 800568c:	00000000 	.word	0x00000000
 8005690:	080053e1 	.word	0x080053e1
 8005694:	080061fa 	.word	0x080061fa

08005698 <_printf_common>:
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	4616      	mov	r6, r2
 800569e:	4699      	mov	r9, r3
 80056a0:	688a      	ldr	r2, [r1, #8]
 80056a2:	690b      	ldr	r3, [r1, #16]
 80056a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bfb8      	it	lt
 80056ac:	4613      	movlt	r3, r2
 80056ae:	6033      	str	r3, [r6, #0]
 80056b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b4:	4607      	mov	r7, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	b10a      	cbz	r2, 80056be <_printf_common+0x26>
 80056ba:	3301      	adds	r3, #1
 80056bc:	6033      	str	r3, [r6, #0]
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	0699      	lsls	r1, r3, #26
 80056c2:	bf42      	ittt	mi
 80056c4:	6833      	ldrmi	r3, [r6, #0]
 80056c6:	3302      	addmi	r3, #2
 80056c8:	6033      	strmi	r3, [r6, #0]
 80056ca:	6825      	ldr	r5, [r4, #0]
 80056cc:	f015 0506 	ands.w	r5, r5, #6
 80056d0:	d106      	bne.n	80056e0 <_printf_common+0x48>
 80056d2:	f104 0a19 	add.w	sl, r4, #25
 80056d6:	68e3      	ldr	r3, [r4, #12]
 80056d8:	6832      	ldr	r2, [r6, #0]
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	42ab      	cmp	r3, r5
 80056de:	dc26      	bgt.n	800572e <_printf_common+0x96>
 80056e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e4:	1e13      	subs	r3, r2, #0
 80056e6:	6822      	ldr	r2, [r4, #0]
 80056e8:	bf18      	it	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	0692      	lsls	r2, r2, #26
 80056ee:	d42b      	bmi.n	8005748 <_printf_common+0xb0>
 80056f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f4:	4649      	mov	r1, r9
 80056f6:	4638      	mov	r0, r7
 80056f8:	47c0      	blx	r8
 80056fa:	3001      	adds	r0, #1
 80056fc:	d01e      	beq.n	800573c <_printf_common+0xa4>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	68e5      	ldr	r5, [r4, #12]
 8005702:	6832      	ldr	r2, [r6, #0]
 8005704:	f003 0306 	and.w	r3, r3, #6
 8005708:	2b04      	cmp	r3, #4
 800570a:	bf08      	it	eq
 800570c:	1aad      	subeq	r5, r5, r2
 800570e:	68a3      	ldr	r3, [r4, #8]
 8005710:	6922      	ldr	r2, [r4, #16]
 8005712:	bf0c      	ite	eq
 8005714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005718:	2500      	movne	r5, #0
 800571a:	4293      	cmp	r3, r2
 800571c:	bfc4      	itt	gt
 800571e:	1a9b      	subgt	r3, r3, r2
 8005720:	18ed      	addgt	r5, r5, r3
 8005722:	2600      	movs	r6, #0
 8005724:	341a      	adds	r4, #26
 8005726:	42b5      	cmp	r5, r6
 8005728:	d11a      	bne.n	8005760 <_printf_common+0xc8>
 800572a:	2000      	movs	r0, #0
 800572c:	e008      	b.n	8005740 <_printf_common+0xa8>
 800572e:	2301      	movs	r3, #1
 8005730:	4652      	mov	r2, sl
 8005732:	4649      	mov	r1, r9
 8005734:	4638      	mov	r0, r7
 8005736:	47c0      	blx	r8
 8005738:	3001      	adds	r0, #1
 800573a:	d103      	bne.n	8005744 <_printf_common+0xac>
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005744:	3501      	adds	r5, #1
 8005746:	e7c6      	b.n	80056d6 <_printf_common+0x3e>
 8005748:	18e1      	adds	r1, r4, r3
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	2030      	movs	r0, #48	; 0x30
 800574e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005752:	4422      	add	r2, r4
 8005754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800575c:	3302      	adds	r3, #2
 800575e:	e7c7      	b.n	80056f0 <_printf_common+0x58>
 8005760:	2301      	movs	r3, #1
 8005762:	4622      	mov	r2, r4
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	3001      	adds	r0, #1
 800576c:	d0e6      	beq.n	800573c <_printf_common+0xa4>
 800576e:	3601      	adds	r6, #1
 8005770:	e7d9      	b.n	8005726 <_printf_common+0x8e>
	...

08005774 <_printf_i>:
 8005774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005778:	7e0f      	ldrb	r7, [r1, #24]
 800577a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800577c:	2f78      	cmp	r7, #120	; 0x78
 800577e:	4691      	mov	r9, r2
 8005780:	4680      	mov	r8, r0
 8005782:	460c      	mov	r4, r1
 8005784:	469a      	mov	sl, r3
 8005786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800578a:	d807      	bhi.n	800579c <_printf_i+0x28>
 800578c:	2f62      	cmp	r7, #98	; 0x62
 800578e:	d80a      	bhi.n	80057a6 <_printf_i+0x32>
 8005790:	2f00      	cmp	r7, #0
 8005792:	f000 80d8 	beq.w	8005946 <_printf_i+0x1d2>
 8005796:	2f58      	cmp	r7, #88	; 0x58
 8005798:	f000 80a3 	beq.w	80058e2 <_printf_i+0x16e>
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a4:	e03a      	b.n	800581c <_printf_i+0xa8>
 80057a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057aa:	2b15      	cmp	r3, #21
 80057ac:	d8f6      	bhi.n	800579c <_printf_i+0x28>
 80057ae:	a101      	add	r1, pc, #4	; (adr r1, 80057b4 <_printf_i+0x40>)
 80057b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	08005821 	.word	0x08005821
 80057bc:	0800579d 	.word	0x0800579d
 80057c0:	0800579d 	.word	0x0800579d
 80057c4:	0800579d 	.word	0x0800579d
 80057c8:	0800579d 	.word	0x0800579d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800579d 	.word	0x0800579d
 80057d4:	0800579d 	.word	0x0800579d
 80057d8:	0800579d 	.word	0x0800579d
 80057dc:	0800579d 	.word	0x0800579d
 80057e0:	0800592d 	.word	0x0800592d
 80057e4:	08005851 	.word	0x08005851
 80057e8:	0800590f 	.word	0x0800590f
 80057ec:	0800579d 	.word	0x0800579d
 80057f0:	0800579d 	.word	0x0800579d
 80057f4:	0800594f 	.word	0x0800594f
 80057f8:	0800579d 	.word	0x0800579d
 80057fc:	08005851 	.word	0x08005851
 8005800:	0800579d 	.word	0x0800579d
 8005804:	0800579d 	.word	0x0800579d
 8005808:	08005917 	.word	0x08005917
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	602a      	str	r2, [r5, #0]
 8005814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800581c:	2301      	movs	r3, #1
 800581e:	e0a3      	b.n	8005968 <_printf_i+0x1f4>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	6829      	ldr	r1, [r5, #0]
 8005824:	0606      	lsls	r6, r0, #24
 8005826:	f101 0304 	add.w	r3, r1, #4
 800582a:	d50a      	bpl.n	8005842 <_printf_i+0xce>
 800582c:	680e      	ldr	r6, [r1, #0]
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	2e00      	cmp	r6, #0
 8005832:	da03      	bge.n	800583c <_printf_i+0xc8>
 8005834:	232d      	movs	r3, #45	; 0x2d
 8005836:	4276      	negs	r6, r6
 8005838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583c:	485e      	ldr	r0, [pc, #376]	; (80059b8 <_printf_i+0x244>)
 800583e:	230a      	movs	r3, #10
 8005840:	e019      	b.n	8005876 <_printf_i+0x102>
 8005842:	680e      	ldr	r6, [r1, #0]
 8005844:	602b      	str	r3, [r5, #0]
 8005846:	f010 0f40 	tst.w	r0, #64	; 0x40
 800584a:	bf18      	it	ne
 800584c:	b236      	sxthne	r6, r6
 800584e:	e7ef      	b.n	8005830 <_printf_i+0xbc>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	1d19      	adds	r1, r3, #4
 8005856:	6029      	str	r1, [r5, #0]
 8005858:	0601      	lsls	r1, r0, #24
 800585a:	d501      	bpl.n	8005860 <_printf_i+0xec>
 800585c:	681e      	ldr	r6, [r3, #0]
 800585e:	e002      	b.n	8005866 <_printf_i+0xf2>
 8005860:	0646      	lsls	r6, r0, #25
 8005862:	d5fb      	bpl.n	800585c <_printf_i+0xe8>
 8005864:	881e      	ldrh	r6, [r3, #0]
 8005866:	4854      	ldr	r0, [pc, #336]	; (80059b8 <_printf_i+0x244>)
 8005868:	2f6f      	cmp	r7, #111	; 0x6f
 800586a:	bf0c      	ite	eq
 800586c:	2308      	moveq	r3, #8
 800586e:	230a      	movne	r3, #10
 8005870:	2100      	movs	r1, #0
 8005872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005876:	6865      	ldr	r5, [r4, #4]
 8005878:	60a5      	str	r5, [r4, #8]
 800587a:	2d00      	cmp	r5, #0
 800587c:	bfa2      	ittt	ge
 800587e:	6821      	ldrge	r1, [r4, #0]
 8005880:	f021 0104 	bicge.w	r1, r1, #4
 8005884:	6021      	strge	r1, [r4, #0]
 8005886:	b90e      	cbnz	r6, 800588c <_printf_i+0x118>
 8005888:	2d00      	cmp	r5, #0
 800588a:	d04d      	beq.n	8005928 <_printf_i+0x1b4>
 800588c:	4615      	mov	r5, r2
 800588e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005892:	fb03 6711 	mls	r7, r3, r1, r6
 8005896:	5dc7      	ldrb	r7, [r0, r7]
 8005898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800589c:	4637      	mov	r7, r6
 800589e:	42bb      	cmp	r3, r7
 80058a0:	460e      	mov	r6, r1
 80058a2:	d9f4      	bls.n	800588e <_printf_i+0x11a>
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d10b      	bne.n	80058c0 <_printf_i+0x14c>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	07de      	lsls	r6, r3, #31
 80058ac:	d508      	bpl.n	80058c0 <_printf_i+0x14c>
 80058ae:	6923      	ldr	r3, [r4, #16]
 80058b0:	6861      	ldr	r1, [r4, #4]
 80058b2:	4299      	cmp	r1, r3
 80058b4:	bfde      	ittt	le
 80058b6:	2330      	movle	r3, #48	; 0x30
 80058b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058c0:	1b52      	subs	r2, r2, r5
 80058c2:	6122      	str	r2, [r4, #16]
 80058c4:	f8cd a000 	str.w	sl, [sp]
 80058c8:	464b      	mov	r3, r9
 80058ca:	aa03      	add	r2, sp, #12
 80058cc:	4621      	mov	r1, r4
 80058ce:	4640      	mov	r0, r8
 80058d0:	f7ff fee2 	bl	8005698 <_printf_common>
 80058d4:	3001      	adds	r0, #1
 80058d6:	d14c      	bne.n	8005972 <_printf_i+0x1fe>
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	b004      	add	sp, #16
 80058de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e2:	4835      	ldr	r0, [pc, #212]	; (80059b8 <_printf_i+0x244>)
 80058e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058e8:	6829      	ldr	r1, [r5, #0]
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80058f0:	6029      	str	r1, [r5, #0]
 80058f2:	061d      	lsls	r5, r3, #24
 80058f4:	d514      	bpl.n	8005920 <_printf_i+0x1ac>
 80058f6:	07df      	lsls	r7, r3, #31
 80058f8:	bf44      	itt	mi
 80058fa:	f043 0320 	orrmi.w	r3, r3, #32
 80058fe:	6023      	strmi	r3, [r4, #0]
 8005900:	b91e      	cbnz	r6, 800590a <_printf_i+0x196>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f023 0320 	bic.w	r3, r3, #32
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	2310      	movs	r3, #16
 800590c:	e7b0      	b.n	8005870 <_printf_i+0xfc>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	f043 0320 	orr.w	r3, r3, #32
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	2378      	movs	r3, #120	; 0x78
 8005918:	4828      	ldr	r0, [pc, #160]	; (80059bc <_printf_i+0x248>)
 800591a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800591e:	e7e3      	b.n	80058e8 <_printf_i+0x174>
 8005920:	0659      	lsls	r1, r3, #25
 8005922:	bf48      	it	mi
 8005924:	b2b6      	uxthmi	r6, r6
 8005926:	e7e6      	b.n	80058f6 <_printf_i+0x182>
 8005928:	4615      	mov	r5, r2
 800592a:	e7bb      	b.n	80058a4 <_printf_i+0x130>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	6826      	ldr	r6, [r4, #0]
 8005930:	6961      	ldr	r1, [r4, #20]
 8005932:	1d18      	adds	r0, r3, #4
 8005934:	6028      	str	r0, [r5, #0]
 8005936:	0635      	lsls	r5, r6, #24
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	d501      	bpl.n	8005940 <_printf_i+0x1cc>
 800593c:	6019      	str	r1, [r3, #0]
 800593e:	e002      	b.n	8005946 <_printf_i+0x1d2>
 8005940:	0670      	lsls	r0, r6, #25
 8005942:	d5fb      	bpl.n	800593c <_printf_i+0x1c8>
 8005944:	8019      	strh	r1, [r3, #0]
 8005946:	2300      	movs	r3, #0
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	4615      	mov	r5, r2
 800594c:	e7ba      	b.n	80058c4 <_printf_i+0x150>
 800594e:	682b      	ldr	r3, [r5, #0]
 8005950:	1d1a      	adds	r2, r3, #4
 8005952:	602a      	str	r2, [r5, #0]
 8005954:	681d      	ldr	r5, [r3, #0]
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	2100      	movs	r1, #0
 800595a:	4628      	mov	r0, r5
 800595c:	f7fa fc60 	bl	8000220 <memchr>
 8005960:	b108      	cbz	r0, 8005966 <_printf_i+0x1f2>
 8005962:	1b40      	subs	r0, r0, r5
 8005964:	6060      	str	r0, [r4, #4]
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	2300      	movs	r3, #0
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005970:	e7a8      	b.n	80058c4 <_printf_i+0x150>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	462a      	mov	r2, r5
 8005976:	4649      	mov	r1, r9
 8005978:	4640      	mov	r0, r8
 800597a:	47d0      	blx	sl
 800597c:	3001      	adds	r0, #1
 800597e:	d0ab      	beq.n	80058d8 <_printf_i+0x164>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	079b      	lsls	r3, r3, #30
 8005984:	d413      	bmi.n	80059ae <_printf_i+0x23a>
 8005986:	68e0      	ldr	r0, [r4, #12]
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	4298      	cmp	r0, r3
 800598c:	bfb8      	it	lt
 800598e:	4618      	movlt	r0, r3
 8005990:	e7a4      	b.n	80058dc <_printf_i+0x168>
 8005992:	2301      	movs	r3, #1
 8005994:	4632      	mov	r2, r6
 8005996:	4649      	mov	r1, r9
 8005998:	4640      	mov	r0, r8
 800599a:	47d0      	blx	sl
 800599c:	3001      	adds	r0, #1
 800599e:	d09b      	beq.n	80058d8 <_printf_i+0x164>
 80059a0:	3501      	adds	r5, #1
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	9903      	ldr	r1, [sp, #12]
 80059a6:	1a5b      	subs	r3, r3, r1
 80059a8:	42ab      	cmp	r3, r5
 80059aa:	dcf2      	bgt.n	8005992 <_printf_i+0x21e>
 80059ac:	e7eb      	b.n	8005986 <_printf_i+0x212>
 80059ae:	2500      	movs	r5, #0
 80059b0:	f104 0619 	add.w	r6, r4, #25
 80059b4:	e7f5      	b.n	80059a2 <_printf_i+0x22e>
 80059b6:	bf00      	nop
 80059b8:	08006205 	.word	0x08006205
 80059bc:	08006216 	.word	0x08006216

080059c0 <memmove>:
 80059c0:	4288      	cmp	r0, r1
 80059c2:	b510      	push	{r4, lr}
 80059c4:	eb01 0402 	add.w	r4, r1, r2
 80059c8:	d902      	bls.n	80059d0 <memmove+0x10>
 80059ca:	4284      	cmp	r4, r0
 80059cc:	4623      	mov	r3, r4
 80059ce:	d807      	bhi.n	80059e0 <memmove+0x20>
 80059d0:	1e43      	subs	r3, r0, #1
 80059d2:	42a1      	cmp	r1, r4
 80059d4:	d008      	beq.n	80059e8 <memmove+0x28>
 80059d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059de:	e7f8      	b.n	80059d2 <memmove+0x12>
 80059e0:	4402      	add	r2, r0
 80059e2:	4601      	mov	r1, r0
 80059e4:	428a      	cmp	r2, r1
 80059e6:	d100      	bne.n	80059ea <memmove+0x2a>
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059f2:	e7f7      	b.n	80059e4 <memmove+0x24>

080059f4 <_free_r>:
 80059f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d044      	beq.n	8005a84 <_free_r+0x90>
 80059fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059fe:	9001      	str	r0, [sp, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f1a1 0404 	sub.w	r4, r1, #4
 8005a06:	bfb8      	it	lt
 8005a08:	18e4      	addlt	r4, r4, r3
 8005a0a:	f000 f913 	bl	8005c34 <__malloc_lock>
 8005a0e:	4a1e      	ldr	r2, [pc, #120]	; (8005a88 <_free_r+0x94>)
 8005a10:	9801      	ldr	r0, [sp, #4]
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	b933      	cbnz	r3, 8005a24 <_free_r+0x30>
 8005a16:	6063      	str	r3, [r4, #4]
 8005a18:	6014      	str	r4, [r2, #0]
 8005a1a:	b003      	add	sp, #12
 8005a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a20:	f000 b90e 	b.w	8005c40 <__malloc_unlock>
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	d908      	bls.n	8005a3a <_free_r+0x46>
 8005a28:	6825      	ldr	r5, [r4, #0]
 8005a2a:	1961      	adds	r1, r4, r5
 8005a2c:	428b      	cmp	r3, r1
 8005a2e:	bf01      	itttt	eq
 8005a30:	6819      	ldreq	r1, [r3, #0]
 8005a32:	685b      	ldreq	r3, [r3, #4]
 8005a34:	1949      	addeq	r1, r1, r5
 8005a36:	6021      	streq	r1, [r4, #0]
 8005a38:	e7ed      	b.n	8005a16 <_free_r+0x22>
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	b10b      	cbz	r3, 8005a44 <_free_r+0x50>
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	d9fa      	bls.n	8005a3a <_free_r+0x46>
 8005a44:	6811      	ldr	r1, [r2, #0]
 8005a46:	1855      	adds	r5, r2, r1
 8005a48:	42a5      	cmp	r5, r4
 8005a4a:	d10b      	bne.n	8005a64 <_free_r+0x70>
 8005a4c:	6824      	ldr	r4, [r4, #0]
 8005a4e:	4421      	add	r1, r4
 8005a50:	1854      	adds	r4, r2, r1
 8005a52:	42a3      	cmp	r3, r4
 8005a54:	6011      	str	r1, [r2, #0]
 8005a56:	d1e0      	bne.n	8005a1a <_free_r+0x26>
 8005a58:	681c      	ldr	r4, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	6053      	str	r3, [r2, #4]
 8005a5e:	4421      	add	r1, r4
 8005a60:	6011      	str	r1, [r2, #0]
 8005a62:	e7da      	b.n	8005a1a <_free_r+0x26>
 8005a64:	d902      	bls.n	8005a6c <_free_r+0x78>
 8005a66:	230c      	movs	r3, #12
 8005a68:	6003      	str	r3, [r0, #0]
 8005a6a:	e7d6      	b.n	8005a1a <_free_r+0x26>
 8005a6c:	6825      	ldr	r5, [r4, #0]
 8005a6e:	1961      	adds	r1, r4, r5
 8005a70:	428b      	cmp	r3, r1
 8005a72:	bf04      	itt	eq
 8005a74:	6819      	ldreq	r1, [r3, #0]
 8005a76:	685b      	ldreq	r3, [r3, #4]
 8005a78:	6063      	str	r3, [r4, #4]
 8005a7a:	bf04      	itt	eq
 8005a7c:	1949      	addeq	r1, r1, r5
 8005a7e:	6021      	streq	r1, [r4, #0]
 8005a80:	6054      	str	r4, [r2, #4]
 8005a82:	e7ca      	b.n	8005a1a <_free_r+0x26>
 8005a84:	b003      	add	sp, #12
 8005a86:	bd30      	pop	{r4, r5, pc}
 8005a88:	2000044c 	.word	0x2000044c

08005a8c <sbrk_aligned>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	4e0e      	ldr	r6, [pc, #56]	; (8005ac8 <sbrk_aligned+0x3c>)
 8005a90:	460c      	mov	r4, r1
 8005a92:	6831      	ldr	r1, [r6, #0]
 8005a94:	4605      	mov	r5, r0
 8005a96:	b911      	cbnz	r1, 8005a9e <sbrk_aligned+0x12>
 8005a98:	f000 f8bc 	bl	8005c14 <_sbrk_r>
 8005a9c:	6030      	str	r0, [r6, #0]
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f000 f8b7 	bl	8005c14 <_sbrk_r>
 8005aa6:	1c43      	adds	r3, r0, #1
 8005aa8:	d00a      	beq.n	8005ac0 <sbrk_aligned+0x34>
 8005aaa:	1cc4      	adds	r4, r0, #3
 8005aac:	f024 0403 	bic.w	r4, r4, #3
 8005ab0:	42a0      	cmp	r0, r4
 8005ab2:	d007      	beq.n	8005ac4 <sbrk_aligned+0x38>
 8005ab4:	1a21      	subs	r1, r4, r0
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 f8ac 	bl	8005c14 <_sbrk_r>
 8005abc:	3001      	adds	r0, #1
 8005abe:	d101      	bne.n	8005ac4 <sbrk_aligned+0x38>
 8005ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	bd70      	pop	{r4, r5, r6, pc}
 8005ac8:	20000450 	.word	0x20000450

08005acc <_malloc_r>:
 8005acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad0:	1ccd      	adds	r5, r1, #3
 8005ad2:	f025 0503 	bic.w	r5, r5, #3
 8005ad6:	3508      	adds	r5, #8
 8005ad8:	2d0c      	cmp	r5, #12
 8005ada:	bf38      	it	cc
 8005adc:	250c      	movcc	r5, #12
 8005ade:	2d00      	cmp	r5, #0
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	db01      	blt.n	8005ae8 <_malloc_r+0x1c>
 8005ae4:	42a9      	cmp	r1, r5
 8005ae6:	d905      	bls.n	8005af4 <_malloc_r+0x28>
 8005ae8:	230c      	movs	r3, #12
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	2600      	movs	r6, #0
 8005aee:	4630      	mov	r0, r6
 8005af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af4:	4e2e      	ldr	r6, [pc, #184]	; (8005bb0 <_malloc_r+0xe4>)
 8005af6:	f000 f89d 	bl	8005c34 <__malloc_lock>
 8005afa:	6833      	ldr	r3, [r6, #0]
 8005afc:	461c      	mov	r4, r3
 8005afe:	bb34      	cbnz	r4, 8005b4e <_malloc_r+0x82>
 8005b00:	4629      	mov	r1, r5
 8005b02:	4638      	mov	r0, r7
 8005b04:	f7ff ffc2 	bl	8005a8c <sbrk_aligned>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	d14d      	bne.n	8005baa <_malloc_r+0xde>
 8005b0e:	6834      	ldr	r4, [r6, #0]
 8005b10:	4626      	mov	r6, r4
 8005b12:	2e00      	cmp	r6, #0
 8005b14:	d140      	bne.n	8005b98 <_malloc_r+0xcc>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	eb04 0803 	add.w	r8, r4, r3
 8005b20:	f000 f878 	bl	8005c14 <_sbrk_r>
 8005b24:	4580      	cmp	r8, r0
 8005b26:	d13a      	bne.n	8005b9e <_malloc_r+0xd2>
 8005b28:	6821      	ldr	r1, [r4, #0]
 8005b2a:	3503      	adds	r5, #3
 8005b2c:	1a6d      	subs	r5, r5, r1
 8005b2e:	f025 0503 	bic.w	r5, r5, #3
 8005b32:	3508      	adds	r5, #8
 8005b34:	2d0c      	cmp	r5, #12
 8005b36:	bf38      	it	cc
 8005b38:	250c      	movcc	r5, #12
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	f7ff ffa5 	bl	8005a8c <sbrk_aligned>
 8005b42:	3001      	adds	r0, #1
 8005b44:	d02b      	beq.n	8005b9e <_malloc_r+0xd2>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	442b      	add	r3, r5
 8005b4a:	6023      	str	r3, [r4, #0]
 8005b4c:	e00e      	b.n	8005b6c <_malloc_r+0xa0>
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	1b52      	subs	r2, r2, r5
 8005b52:	d41e      	bmi.n	8005b92 <_malloc_r+0xc6>
 8005b54:	2a0b      	cmp	r2, #11
 8005b56:	d916      	bls.n	8005b86 <_malloc_r+0xba>
 8005b58:	1961      	adds	r1, r4, r5
 8005b5a:	42a3      	cmp	r3, r4
 8005b5c:	6025      	str	r5, [r4, #0]
 8005b5e:	bf18      	it	ne
 8005b60:	6059      	strne	r1, [r3, #4]
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	bf08      	it	eq
 8005b66:	6031      	streq	r1, [r6, #0]
 8005b68:	5162      	str	r2, [r4, r5]
 8005b6a:	604b      	str	r3, [r1, #4]
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f104 060b 	add.w	r6, r4, #11
 8005b72:	f000 f865 	bl	8005c40 <__malloc_unlock>
 8005b76:	f026 0607 	bic.w	r6, r6, #7
 8005b7a:	1d23      	adds	r3, r4, #4
 8005b7c:	1af2      	subs	r2, r6, r3
 8005b7e:	d0b6      	beq.n	8005aee <_malloc_r+0x22>
 8005b80:	1b9b      	subs	r3, r3, r6
 8005b82:	50a3      	str	r3, [r4, r2]
 8005b84:	e7b3      	b.n	8005aee <_malloc_r+0x22>
 8005b86:	6862      	ldr	r2, [r4, #4]
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	bf0c      	ite	eq
 8005b8c:	6032      	streq	r2, [r6, #0]
 8005b8e:	605a      	strne	r2, [r3, #4]
 8005b90:	e7ec      	b.n	8005b6c <_malloc_r+0xa0>
 8005b92:	4623      	mov	r3, r4
 8005b94:	6864      	ldr	r4, [r4, #4]
 8005b96:	e7b2      	b.n	8005afe <_malloc_r+0x32>
 8005b98:	4634      	mov	r4, r6
 8005b9a:	6876      	ldr	r6, [r6, #4]
 8005b9c:	e7b9      	b.n	8005b12 <_malloc_r+0x46>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	603b      	str	r3, [r7, #0]
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	f000 f84c 	bl	8005c40 <__malloc_unlock>
 8005ba8:	e7a1      	b.n	8005aee <_malloc_r+0x22>
 8005baa:	6025      	str	r5, [r4, #0]
 8005bac:	e7de      	b.n	8005b6c <_malloc_r+0xa0>
 8005bae:	bf00      	nop
 8005bb0:	2000044c 	.word	0x2000044c

08005bb4 <_realloc_r>:
 8005bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb8:	4680      	mov	r8, r0
 8005bba:	4614      	mov	r4, r2
 8005bbc:	460e      	mov	r6, r1
 8005bbe:	b921      	cbnz	r1, 8005bca <_realloc_r+0x16>
 8005bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	f7ff bf81 	b.w	8005acc <_malloc_r>
 8005bca:	b92a      	cbnz	r2, 8005bd8 <_realloc_r+0x24>
 8005bcc:	f7ff ff12 	bl	80059f4 <_free_r>
 8005bd0:	4625      	mov	r5, r4
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd8:	f000 f838 	bl	8005c4c <_malloc_usable_size_r>
 8005bdc:	4284      	cmp	r4, r0
 8005bde:	4607      	mov	r7, r0
 8005be0:	d802      	bhi.n	8005be8 <_realloc_r+0x34>
 8005be2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005be6:	d812      	bhi.n	8005c0e <_realloc_r+0x5a>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4640      	mov	r0, r8
 8005bec:	f7ff ff6e 	bl	8005acc <_malloc_r>
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d0ed      	beq.n	8005bd2 <_realloc_r+0x1e>
 8005bf6:	42bc      	cmp	r4, r7
 8005bf8:	4622      	mov	r2, r4
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	bf28      	it	cs
 8005bfe:	463a      	movcs	r2, r7
 8005c00:	f7ff fbb8 	bl	8005374 <memcpy>
 8005c04:	4631      	mov	r1, r6
 8005c06:	4640      	mov	r0, r8
 8005c08:	f7ff fef4 	bl	80059f4 <_free_r>
 8005c0c:	e7e1      	b.n	8005bd2 <_realloc_r+0x1e>
 8005c0e:	4635      	mov	r5, r6
 8005c10:	e7df      	b.n	8005bd2 <_realloc_r+0x1e>
	...

08005c14 <_sbrk_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d06      	ldr	r5, [pc, #24]	; (8005c30 <_sbrk_r+0x1c>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	602b      	str	r3, [r5, #0]
 8005c20:	f7fc f9fe 	bl	8002020 <_sbrk>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_sbrk_r+0x1a>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_sbrk_r+0x1a>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20000454 	.word	0x20000454

08005c34 <__malloc_lock>:
 8005c34:	4801      	ldr	r0, [pc, #4]	; (8005c3c <__malloc_lock+0x8>)
 8005c36:	f000 b811 	b.w	8005c5c <__retarget_lock_acquire_recursive>
 8005c3a:	bf00      	nop
 8005c3c:	20000458 	.word	0x20000458

08005c40 <__malloc_unlock>:
 8005c40:	4801      	ldr	r0, [pc, #4]	; (8005c48 <__malloc_unlock+0x8>)
 8005c42:	f000 b80c 	b.w	8005c5e <__retarget_lock_release_recursive>
 8005c46:	bf00      	nop
 8005c48:	20000458 	.word	0x20000458

08005c4c <_malloc_usable_size_r>:
 8005c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c50:	1f18      	subs	r0, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bfbc      	itt	lt
 8005c56:	580b      	ldrlt	r3, [r1, r0]
 8005c58:	18c0      	addlt	r0, r0, r3
 8005c5a:	4770      	bx	lr

08005c5c <__retarget_lock_acquire_recursive>:
 8005c5c:	4770      	bx	lr

08005c5e <__retarget_lock_release_recursive>:
 8005c5e:	4770      	bx	lr

08005c60 <_init>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr

08005c6c <_fini>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr
